diff --git a/.dir-locals.el b/.dir-locals.el
new file mode 100644
index 0000000..da72247
--- /dev/null
+++ b/.dir-locals.el
@@ -0,0 +1,4 @@
+((c-mode
+  (indent-tabs-mode . nil)
+  (c-file-style . "bsd")
+  (c-basic-offset . 2)))
diff --git a/.editorconfig b/.editorconfig
new file mode 100644
index 0000000..c47611e
--- /dev/null
+++ b/.editorconfig
@@ -0,0 +1,22 @@
+; https://editorconfig.org
+
+root = true
+
+[*]
+end_of_line = lf
+insert_final_newline = true
+indent_style = space
+indent_size = 4
+
+[*.{c,h}]
+indent_size = 2
+
+[*.S]
+indent_size = 8
+
+[*.ld]
+indent_size = 2
+
+[Makefile]
+indent_style = tab
+indent_size = 8
diff --git a/.gdbinit.tmpl-riscv b/.gdbinit.tmpl-riscv
new file mode 100644
index 0000000..a2bfde3
--- /dev/null
+++ b/.gdbinit.tmpl-riscv
@@ -0,0 +1,6 @@
+set confirm off
+set architecture riscv:rv64
+target remote 127.0.0.1:1234
+symbol-file kernel/kernel
+set disassemble-next-line auto
+set riscv use-compressed-breakpoints yes
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..11d0677
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,27 @@
+*~
+_*
+*.o
+*.d
+*.asm
+*.sym
+*.img
+vectors.S
+bootblock
+entryother
+initcode
+initcode.out
+kernelmemfs
+mkfs/mkfs
+kernel/kernel
+user/usys.S
+.gdbinit
+*.zip
+xv6.out*
+.vagrant/
+submissions/
+ph
+barrier
+/lab-*.json
+.DS_Store
+*.dSYM
+*.pcap
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..af50cb2
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,24 @@
+The xv6 software is:
+
+Copyright (c) 2006-2024 Frans Kaashoek, Robert Morris, Russ Cox,
+                        Massachusetts Institute of Technology
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
diff --git a/Lab1_System_Call.pdf b/Lab1_System_Call.pdf
new file mode 100644
index 0000000..4ecb9e9
Binary files /dev/null and b/Lab1_System_Call.pdf differ
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..2540a54
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,377 @@
+
+# To compile and run with a lab solution, set the lab name in conf/lab.mk
+# (e.g., LAB=util).  Run make grade to test solution with the lab's
+# grade script (e.g., grade-lab-util).
+
+-include conf/lab.mk
+
+K=kernel
+U=user
+
+OBJS = \
+  $K/entry.o \
+  $K/kalloc.o \
+  $K/string.o \
+  $K/main.o \
+  $K/vm.o \
+  $K/proc.o \
+  $K/swtch.o \
+  $K/trampoline.o \
+  $K/trap.o \
+  $K/syscall.o \
+  $K/sysproc.o \
+  $K/bio.o \
+  $K/fs.o \
+  $K/log.o \
+  $K/sleeplock.o \
+  $K/file.o \
+  $K/pipe.o \
+  $K/exec.o \
+  $K/sysfile.o \
+  $K/kernelvec.o \
+  $K/plic.o \
+  $K/virtio_disk.o
+
+OBJS_KCSAN = \
+  $K/start.o \
+  $K/console.o \
+  $K/printf.o \
+  $K/uart.o \
+  $K/spinlock.o
+
+ifdef KCSAN
+OBJS_KCSAN += \
+	$K/kcsan.o
+endif
+
+ifeq ($(LAB),lock)
+OBJS += \
+	$K/stats.o\
+	$K/sprintf.o
+endif
+
+
+ifeq ($(LAB),net)
+OBJS += \
+	$K/e1000.o \
+	$K/net.o \
+	$K/pci.o
+endif
+
+
+# riscv64-unknown-elf- or riscv64-linux-gnu-
+# perhaps in /opt/riscv/bin
+#TOOLPREFIX = 
+
+# Try to infer the correct TOOLPREFIX if not set
+ifndef TOOLPREFIX
+TOOLPREFIX := $(shell if riscv64-unknown-elf-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-unknown-elf-'; \
+	elif riscv64-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-linux-gnu-'; \
+	elif riscv64-unknown-linux-gnu-objdump -i 2>&1 | grep 'elf64-big' >/dev/null 2>&1; \
+	then echo 'riscv64-unknown-linux-gnu-'; \
+	else echo "***" 1>&2; \
+	echo "*** Error: Couldn't find a riscv64 version of GCC/binutils." 1>&2; \
+	echo "*** To turn off this error, run 'gmake TOOLPREFIX= ...'." 1>&2; \
+	echo "***" 1>&2; exit 1; fi)
+endif
+
+QEMU = qemu-system-riscv64
+
+CC = $(TOOLPREFIX)gcc
+AS = $(TOOLPREFIX)gas
+LD = $(TOOLPREFIX)ld
+OBJCOPY = $(TOOLPREFIX)objcopy
+OBJDUMP = $(TOOLPREFIX)objdump
+
+CFLAGS = -Wall -Werror -O -fno-omit-frame-pointer -ggdb -gdwarf-2
+
+ifdef LAB
+LABUPPER = $(shell echo $(LAB) | tr a-z A-Z)
+XCFLAGS += -DSOL_$(LABUPPER) -DLAB_$(LABUPPER)
+endif
+
+CFLAGS += $(XCFLAGS)
+CFLAGS += -MD
+CFLAGS += -mcmodel=medany
+# CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
+CFLAGS += -fno-common -nostdlib
+CFLAGS += -fno-builtin-strncpy -fno-builtin-strncmp -fno-builtin-strlen -fno-builtin-memset
+CFLAGS += -fno-builtin-memmove -fno-builtin-memcmp -fno-builtin-log -fno-builtin-bzero
+CFLAGS += -fno-builtin-strchr -fno-builtin-exit -fno-builtin-malloc -fno-builtin-putc
+CFLAGS += -fno-builtin-free
+CFLAGS += -fno-builtin-memcpy -Wno-main
+CFLAGS += -fno-builtin-printf -fno-builtin-fprintf -fno-builtin-vprintf
+CFLAGS += -I.
+CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+
+ifeq ($(LAB),net)
+CFLAGS += -DNET_TESTS_PORT=$(SERVERPORT)
+endif
+
+ifdef KCSAN
+CFLAGS += -DKCSAN
+KCSANFLAG = -fsanitize=thread -fno-inline
+endif
+
+# Disable PIE when possible (for Ubuntu 16.10 toolchain)
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
+CFLAGS += -fno-pie -no-pie
+endif
+ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]nopie'),)
+CFLAGS += -fno-pie -nopie
+endif
+
+LDFLAGS = -z max-page-size=4096
+
+$K/kernel: $(OBJS) $(OBJS_KCSAN) $K/kernel.ld $U/initcode
+	$(LD) $(LDFLAGS) -T $K/kernel.ld -o $K/kernel $(OBJS) $(OBJS_KCSAN)
+	$(OBJDUMP) -S $K/kernel > $K/kernel.asm
+	$(OBJDUMP) -t $K/kernel | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $K/kernel.sym
+
+$(OBJS): EXTRAFLAG := $(KCSANFLAG)
+
+$K/%.o: $K/%.c
+	$(CC) $(CFLAGS) $(EXTRAFLAG) -c -o $@ $<
+
+
+$U/initcode: $U/initcode.S
+	$(CC) $(CFLAGS) -march=rv64g -nostdinc -I. -Ikernel -c $U/initcode.S -o $U/initcode.o
+	$(LD) $(LDFLAGS) -N -e start -Ttext 0 -o $U/initcode.out $U/initcode.o
+	$(OBJCOPY) -S -O binary $U/initcode.out $U/initcode
+	$(OBJDUMP) -S $U/initcode.o > $U/initcode.asm
+
+tags: $(OBJS) _init
+	etags *.S *.c
+
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+
+ifeq ($(LAB),lock)
+ULIB += $U/statistics.o
+endif
+
+_%: %.o $(ULIB)
+	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
+	$(OBJDUMP) -S $@ > $*.asm
+	$(OBJDUMP) -t $@ | sed '1,/SYMBOL TABLE/d; s/ .* / /; /^$$/d' > $*.sym
+
+$U/usys.S : $U/usys.pl
+	perl $U/usys.pl > $U/usys.S
+
+$U/usys.o : $U/usys.S
+	$(CC) $(CFLAGS) -c -o $U/usys.o $U/usys.S
+
+$U/_forktest: $U/forktest.o $(ULIB)
+	# forktest has less library code linked in - needs to be small
+	# in order to be able to max out the proc table.
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $U/_forktest $U/forktest.o $U/ulib.o $U/usys.o
+	$(OBJDUMP) -S $U/_forktest > $U/forktest.asm
+
+mkfs/mkfs: mkfs/mkfs.c $K/fs.h $K/param.h
+	gcc $(XCFLAGS) -Werror -Wall -I. -o mkfs/mkfs mkfs/mkfs.c
+
+# Prevent deletion of intermediate files, e.g. cat.o, after first build, so
+# that disk image changes after first build are persistent until clean.  More
+# details:
+# http://www.gnu.org/software/make/manual/html_node/Chained-Rules.html
+.PRECIOUS: %.o
+
+UPROGS=\
+	$U/_cat\
+	$U/_echo\
+	$U/_forktest\
+	$U/_grep\
+	$U/_init\
+	$U/_kill\
+	$U/_ln\
+	$U/_ls\
+	$U/_mkdir\
+	$U/_rm\
+	$U/_sh\
+	$U/_stressfs\
+	$U/_usertests\
+	$U/_grind\
+	$U/_wc\
+	$U/_zombie\
+	$U/_testhello\
+	$U/_trace\
+	$U/_sysinfotest\
+
+ifeq ($(LAB),syscall)
+UPROGS += \
+	$U/_attack\
+	$U/_attacktest\
+	$U/_secret
+endif
+
+ifeq ($(LAB),lock)
+UPROGS += \
+	$U/_stats
+endif
+
+ifeq ($(LAB),traps)
+UPROGS += \
+	$U/_call\
+	$U/_bttest
+endif
+
+ifeq ($(LAB),lazy)
+UPROGS += \
+	$U/_lazytests
+endif
+
+ifeq ($(LAB),cow)
+UPROGS += \
+	$U/_cowtest
+endif
+
+ifeq ($(LAB),thread)
+UPROGS += \
+	$U/_uthread
+
+$U/uthread_switch.o : $U/uthread_switch.S
+	$(CC) $(CFLAGS) -c -o $U/uthread_switch.o $U/uthread_switch.S
+
+$U/_uthread: $U/uthread.o $U/uthread_switch.o $(ULIB)
+	$(LD) $(LDFLAGS) -N -e main -Ttext 0 -o $U/_uthread $U/uthread.o $U/uthread_switch.o $(ULIB)
+	$(OBJDUMP) -S $U/_uthread > $U/uthread.asm
+
+ph: notxv6/ph.c
+	gcc -o ph -g -O2 $(XCFLAGS) notxv6/ph.c -pthread
+
+barrier: notxv6/barrier.c
+	gcc -o barrier -g -O2 $(XCFLAGS) notxv6/barrier.c -pthread
+endif
+
+ifeq ($(LAB),pgtbl)
+UPROGS += \
+	$U/_pgtbltest
+endif
+
+ifeq ($(LAB),lock)
+UPROGS += \
+	$U/_kalloctest\
+	$U/_bcachetest
+endif
+
+ifeq ($(LAB),fs)
+UPROGS += \
+	$U/_bigfile
+endif
+
+
+
+ifeq ($(LAB),net)
+UPROGS += \
+	$U/_nettest
+endif
+
+UEXTRA=
+ifeq ($(LAB),util)
+	UEXTRA += user/xargstest.sh
+endif
+
+
+fs.img: mkfs/mkfs README $(UEXTRA) $(UPROGS)
+	mkfs/mkfs fs.img README $(UEXTRA) $(UPROGS)
+
+-include kernel/*.d user/*.d
+
+clean:
+	rm -rf *.tex *.dvi *.idx *.aux *.log *.ind *.ilg *.dSYM *.zip *.pcap \
+	*/*.o */*.d */*.asm */*.sym \
+	$U/initcode $U/initcode.out $U/usys.S $U/_* \
+	$K/kernel \
+	mkfs/mkfs fs.img .gdbinit __pycache__ xv6.out* \
+	ph barrier
+
+# try to generate a unique GDB port
+GDBPORT = $(shell expr `id -u` % 5000 + 25000)
+# QEMU's gdb stub command line changed in 0.11
+QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
+	then echo "-gdb tcp::$(GDBPORT)"; \
+	else echo "-s -p $(GDBPORT)"; fi)
+ifndef CPUS
+CPUS := 3
+endif
+ifeq ($(LAB),fs)
+CPUS := 1
+endif
+
+FWDPORT1 = $(shell expr `id -u` % 5000 + 25999)
+FWDPORT2 = $(shell expr `id -u` % 5000 + 30999)
+
+QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
+QEMUOPTS += -global virtio-mmio.force-legacy=false
+QEMUOPTS += -drive file=fs.img,if=none,format=raw,id=x0
+QEMUOPTS += -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
+
+ifeq ($(LAB),net)
+QEMUOPTS += -netdev user,id=net0,hostfwd=udp::$(FWDPORT1)-:2000,hostfwd=udp::$(FWDPORT2)-:2001 -object filter-dump,id=net0,netdev=net0,file=packets.pcap
+QEMUOPTS += -device e1000,netdev=net0,bus=pcie.0
+endif
+
+qemu: $K/kernel fs.img
+	$(QEMU) $(QEMUOPTS)
+
+.gdbinit: .gdbinit.tmpl-riscv
+	sed "s/:1234/:$(GDBPORT)/" < $^ > $@
+
+qemu-gdb: $K/kernel .gdbinit fs.img
+	@echo "*** Now run 'gdb' in another window." 1>&2
+	$(QEMU) $(QEMUOPTS) -S $(QEMUGDB)
+
+ifeq ($(LAB),net)
+# try to generate a unique port for the echo server
+SERVERPORT = $(shell expr `id -u` % 5000 + 25099)
+
+endif
+
+##
+##  FOR testing lab grading script
+##
+
+ifneq ($(V),@)
+GRADEFLAGS += -v
+endif
+
+print-gdbport:
+	@echo $(GDBPORT)
+
+grade:
+	@echo $(MAKE) clean
+	@$(MAKE) clean || \
+          (echo "'make clean' failed.  HINT: Do you have another running instance of xv6?" && exit 1)
+	./grade-lab-$(LAB) $(GRADEFLAGS)
+
+##
+## FOR submissions
+##
+
+submit-check:
+	@if ! test -d .git; then \
+		echo No .git directory, is this a git repository?; \
+		false; \
+	fi
+	@if test "$$(git symbolic-ref HEAD)" != refs/heads/$(LAB); then \
+		git branch; \
+		read -p "You are not on the $(LAB) branch.  Hand-in the current branch? [y/N] " r; \
+		test "$$r" = y; \
+	fi
+	@if ! git diff-files --quiet || ! git diff-index --quiet --cached HEAD; then \
+		git status -s; \
+		echo; \
+		echo "You have uncomitted changes.  Please commit or stash them."; \
+		false; \
+	fi
+	@if test -n "`git status -s`"; then \
+		git status -s; \
+		read -p "Untracked files will not be handed in.  Continue? [y/N] " r; \
+		test "$$r" = y; \
+	fi
+
+zipball: clean submit-check
+	git archive --verbose --format zip --output lab.zip HEAD
+
+.PHONY: zipball clean grade submit-check
diff --git a/README b/README
new file mode 100644
index 0000000..5a5d695
--- /dev/null
+++ b/README
@@ -0,0 +1,49 @@
+xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
+Version 6 (v6).  xv6 loosely follows the structure and style of v6,
+but is implemented for a modern RISC-V multiprocessor using ANSI C.
+
+ACKNOWLEDGMENTS
+
+xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
+to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
+2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
+pointers to on-line resources for v6.
+
+The following people have made contributions: Russ Cox (context switching,
+locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
+Clements.
+
+We are also grateful for the bug reports and patches contributed by
+Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
+carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
+Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
+Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
+Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
+Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
+Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
+Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
+Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
+Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
+phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
+Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
+Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
+Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
+Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
+Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.
+
+The code in the files that constitute xv6 is
+Copyright 2006-2024 Frans Kaashoek, Robert Morris, and Russ Cox.
+
+ERROR REPORTS
+
+Please send errors and suggestions to Frans Kaashoek and Robert Morris
+(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
+operating system for MIT's 6.1810, so we are more interested in
+simplifications and clarifications than new features.
+
+BUILDING AND RUNNING XV6
+
+You will need a RISC-V "newlib" tool chain from
+https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
+riscv64-softmmu.  Once they are installed, and in your shell
+search path, you can run "make qemu".
diff --git a/README.md b/README.md
deleted file mode 100644
index 89492eb..0000000
--- a/README.md
+++ /dev/null
@@ -1,2 +0,0 @@
-# xv6_OperatingSystem
-A Project that investigates how the xv6 works.
diff --git a/book-xv6-riscv-rev4.pdf b/book-xv6-riscv-rev4.pdf
new file mode 100644
index 0000000..853a4f1
Binary files /dev/null and b/book-xv6-riscv-rev4.pdf differ
diff --git a/conf/lab.mk b/conf/lab.mk
new file mode 100644
index 0000000..05e8b8d
--- /dev/null
+++ b/conf/lab.mk
@@ -0,0 +1 @@
+LAB=util
diff --git a/fs.img b/fs.img
new file mode 100644
index 0000000..d784519
Binary files /dev/null and b/fs.img differ
diff --git a/grade-lab-util b/grade-lab-util
new file mode 100644
index 0000000..9ba6e37
--- /dev/null
+++ b/grade-lab-util
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+
+import re
+from gradelib import *
+
+r = Runner(save("xv6.out"))
+
+@test(5, "sleep, no arguments")
+def test_sleep_no_args():
+    r.run_qemu(shell_script([
+        'sleep'
+    ]))
+    r.match(no=["exec .* failed", "$ sleep\n$"])
+
+@test(5, "sleep, returns")
+def test_sleep_no_args():
+    r.run_qemu(shell_script([
+        'sleep',
+        'echo OK'
+    ]))
+    r.match('^OK$', no=["exec .* failed", "$ sleep\n$"])
+
+@test(10, "sleep, makes syscall")
+def test_sleep():
+    r.run_qemu(shell_script([
+        'sleep 10',
+        'echo FAIL'
+    ]), stop_breakpoint('sys_sleep'))
+    r.match('\\$ sleep 10', no=['FAIL'])
+
+@test(20, "pingpong")
+def test_pingpong():
+    r.run_qemu(shell_script([
+        'pingpong', 'echo OK'
+    ]))
+    r.match('^\\d+: received ping$', '^\\d+: received pong$', '^OK$')
+
+@test(20, "primes")
+def test_primes():
+    r.run_qemu(shell_script([
+        'primes', 'echo OK'
+    ]))
+    args = ['prime %d' % i for i in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269]]
+    args.append('^OK$')
+    r.match(*args)
+
+@test(10, "find, in current directory")
+def test_find_curdir():
+    fn = random_str()
+    r.run_qemu(shell_script([
+        'echo > %s' % fn,
+        'find . %s' % fn
+    ]))
+    r.match('./%s' % fn)
+    r.match(no=["./README", "README"])
+
+@test(10, "find, in sub-directory")
+def test_find_curdir():
+    dd = random_str()
+    fn = random_str()
+    r.run_qemu(shell_script([
+        'echo > %s' % fn,
+        'mkdir %s' % dd,
+        'echo > %s/%s' % (dd, fn),
+        'find %s %s' % (dd, fn)
+    ]))
+    r.match('%s/%s' % (dd, fn))
+    r.match(no=['./%s' % fn])
+
+@test(10, "find, recursive")
+def test_find_recursive():
+    needle = random_str()
+    dirs = [random_str() for _ in range(3)]
+    r.run_qemu(shell_script([
+        'mkdir %s' % dirs[0],
+        'echo > %s/%s' % (dirs[0], needle),
+        'mkdir %s/%s' % (dirs[0], dirs[1]),
+        'echo > %s/%s/%s' % (dirs[0], dirs[1], needle),
+        'mkdir %s' % dirs[2],
+        'echo > %s/%s' % (dirs[2], needle),
+        'find . %s' % needle
+    ]))
+    r.match('./%s/%s' % (dirs[0], needle),
+            './%s/%s/%s' % (dirs[0], dirs[1], needle),
+            './%s/%s' % (dirs[2], needle))
+
+@test(10, "xargs")
+def test_xargs():
+    r.run_qemu(shell_script([
+        'sh < xargstest.sh',
+        'echo DONE',
+    ], 'DONE'))
+    matches = re.findall("hello", r.qemu.output)
+    assert_equal(len(matches), 3, "Number of appearances of 'hello'")
+
+@test(9, "xargs, multi-line echo")
+def test_xargs_multiline():
+    r.run_qemu(shell_script(['(echo 1 ; echo 2) | xargs echo']))
+    r.match('^1$', '^2$')
+
+@test(1, "time")
+def test_time():
+    check_time()
+    
+run_tests()
diff --git a/gradelib.py b/gradelib.py
new file mode 100644
index 0000000..f0d4934
--- /dev/null
+++ b/gradelib.py
@@ -0,0 +1,628 @@
+from __future__ import print_function
+
+import sys, os, re, time, socket, select, subprocess, errno, shutil, random, string, json
+from subprocess import check_call, Popen
+from optparse import OptionParser
+
+__all__ = []
+
+##################################################################
+# Test structure
+#
+
+__all__ += ["test", "end_part", "run_tests", "get_current_test"]
+
+TESTS = []
+TOTAL = POSSIBLE = 0
+PART_TOTAL = PART_POSSIBLE = 0
+CURRENT_TEST = None
+GRADES = {}
+
+def test(points, title=None, parent=None):
+    """Decorator for declaring test functions.  If title is None, the
+    title of the test will be derived from the function name by
+    stripping the leading "test_" and replacing underscores with
+    spaces."""
+
+    def register_test(fn, title=title):
+        if not title:
+            assert fn.__name__.startswith("test_")
+            title = fn.__name__[5:].replace("_", " ")
+        if parent:
+            title = "  " + title
+
+        def run_test():
+            global TOTAL, POSSIBLE, CURRENT_TEST, GRADES
+
+            # Handle test dependencies
+            if run_test.complete:
+                return run_test.ok
+            run_test.complete = True
+            parent_failed = False
+            if parent:
+                parent_failed = not parent()
+
+            # Run the test
+            fail = None
+            start = time.time()
+            CURRENT_TEST = run_test
+            sys.stdout.write("== Test %s == " % title)
+            if parent:
+                sys.stdout.write("\n")
+            sys.stdout.flush()
+            try:
+                if parent_failed:
+                    raise AssertionError('Parent failed: %s' % parent.__name__)
+                fn()
+            except AssertionError as e:
+                fail = str(e)
+
+            # Display and handle test result
+            POSSIBLE += points
+            if points:
+                print("%s: %s" % (title, \
+                    (color("red", "FAIL") if fail else color("green", "OK"))), end=' ')
+            if time.time() - start > 0.1:
+                print("(%.1fs)" % (time.time() - start), end=' ')
+            print()
+            if fail:
+                print("    %s" % fail.replace("\n", "\n    "))
+            else:
+                TOTAL += points
+            if points:
+                GRADES[title] = 0 if fail else points
+
+            for callback in run_test.on_finish:
+                callback(fail)
+            CURRENT_TEST = None
+
+            run_test.ok = not fail
+            return run_test.ok
+
+        # Record test metadata on the test wrapper function
+        run_test.__name__ = fn.__name__
+        run_test.title = title
+        run_test.complete = False
+        run_test.ok = False
+        run_test.on_finish = []
+        TESTS.append(run_test)
+        return run_test
+    return register_test
+
+def end_part(name):
+    def show_part():
+        global PART_TOTAL, PART_POSSIBLE
+        print("Part %s score: %d/%d" % \
+            (name, TOTAL - PART_TOTAL, POSSIBLE - PART_POSSIBLE))
+        print()
+        PART_TOTAL, PART_POSSIBLE = TOTAL, POSSIBLE
+    show_part.title = ""
+    TESTS.append(show_part)
+
+def write_results():
+    global options
+    if not options.results:
+        return
+    try:
+        with open(options.results, "w") as f:
+            f.write(json.dumps(GRADES))
+    except OSError as e:
+        print("Provided a bad results path. Error:", e)
+
+def run_tests():
+    """Set up for testing and run the registered test functions."""
+
+    # Handle command line
+    global options
+    parser = OptionParser(usage="usage: %prog [-v] [filters...]")
+    parser.add_option("-v", "--verbose", action="store_true",
+                      help="print commands")
+    parser.add_option("--color", choices=["never", "always", "auto"],
+                      default="auto", help="never, always, or auto")
+    parser.add_option("--results", help="results file path")
+    (options, args) = parser.parse_args()
+
+    # Start with a full build to catch build errors
+    make()
+
+    # Clean the file system if there is one
+    reset_fs()
+
+    # Run tests
+    limit = list(map(str.lower, args))
+    try:
+        for test in TESTS:
+            if not limit or any(l in test.title.lower() for l in limit):
+                test()
+        if not limit:
+            write_results()
+            print("Score: %d/%d" % (TOTAL, POSSIBLE))
+    except KeyboardInterrupt:
+        pass
+    if TOTAL < POSSIBLE:
+        sys.exit(1)
+
+def get_current_test():
+    if not CURRENT_TEST:
+        raise RuntimeError("No test is running")
+    return CURRENT_TEST
+
+##################################################################
+# Assertions
+#
+
+__all__ += ["assert_equal", "assert_lines_match"]
+
+def assert_equal(got, expect, msg=""):
+    if got == expect:
+        return
+    if msg:
+        msg += "\n"
+    raise AssertionError("%sgot:\n  %s\nexpected:\n  %s" %
+                         (msg, str(got).replace("\n", "\n  "),
+                          str(expect).replace("\n", "\n  ")))
+
+def assert_lines_match(text, *regexps, **kw):
+    """Assert that all of regexps match some line in text.  If a 'no'
+    keyword argument is given, it must be a list of regexps that must
+    *not* match any line in text."""
+
+    def assert_lines_match_kw(no=[]):
+        return no
+    no = assert_lines_match_kw(**kw)
+
+    # Check text against regexps
+    lines = text.splitlines()
+    good = set()
+    bad = set()
+    for i, line in enumerate(lines):
+        if any(re.match(r, line) for r in regexps):
+            good.add(i)
+            regexps = [r for r in regexps if not re.match(r, line)]
+        if any(re.match(r, line) for r in no):
+            bad.add(i)
+
+    if not regexps and not bad:
+        return
+
+    # We failed; construct an informative failure message
+    show = set()
+    for lineno in good.union(bad):
+        for offset in range(-2, 3):
+            show.add(lineno + offset)
+    if regexps:
+        show.update(n for n in range(len(lines) - 5, len(lines)))
+
+    msg = []
+    last = -1
+    for lineno in sorted(show):
+        if 0 <= lineno < len(lines):
+            if lineno != last + 1:
+                msg.append("...")
+            last = lineno
+            msg.append("%s %s" % (color("red", "BAD ") if lineno in bad else
+                                  color("green", "GOOD") if lineno in good
+                                  else "    ",
+                                  lines[lineno]))
+    if last != len(lines) - 1:
+        msg.append("...")
+    if bad:
+        msg.append("unexpected lines in output")
+    for r in regexps:
+        msg.append(color("red", "MISSING") + " '%s'" % r)
+    raise AssertionError("\n".join(msg))
+
+##################################################################
+# Utilities
+#
+
+__all__ += ["make", "maybe_unlink", "reset_fs", "color", "random_str", "check_time", "check_answers"]
+
+MAKE_TIMESTAMP = 0
+
+def pre_make():
+    """Delay prior to running make to ensure file mtimes change."""
+    while int(time.time()) == MAKE_TIMESTAMP:
+        time.sleep(0.1)
+
+def post_make():
+    """Record the time after make completes so that the next run of
+    make can be delayed if needed."""
+    global MAKE_TIMESTAMP
+    MAKE_TIMESTAMP = int(time.time())
+
+def make(*target):
+    pre_make()
+    if Popen(("make",) + target).wait():
+        sys.exit(1)
+    post_make()
+
+def show_command(cmd):
+    from pipes import quote
+    print("\n$", " ".join(map(quote, cmd)))
+
+def maybe_unlink(*paths):
+    for path in paths:
+        try:
+            os.unlink(path)
+        except EnvironmentError as e:
+            if e.errno != errno.ENOENT:
+                raise
+
+COLORS = {"default": "\033[0m", "red": "\033[31m", "green": "\033[32m"}
+
+def color(name, text):
+    if options.color == "always" or (options.color == "auto" and os.isatty(1)):
+        return COLORS[name] + text + COLORS["default"]
+    return text
+
+def reset_fs():
+    if os.path.exists("obj/fs/clean-fs.img"):
+        shutil.copyfile("obj/fs/clean-fs.img", "obj/fs/fs.img")
+
+def random_str(n=8):
+    letters = string.ascii_letters + string.digits
+    return ''.join(random.choice(letters) for _ in range(n))
+
+def check_time():
+    try:
+        print("")
+        with open('time.txt') as f:
+            d = f.read().strip()
+            if not re.match(r'^\d+$', d):
+                raise AssertionError('time.txt does not contain a single integer (number of hours spent on the lab)')
+    except IOError:
+        raise AssertionError('Cannot read time.txt')
+
+def check_answers(file, n=10):
+    try:
+        print("")
+        with open(file) as f:
+            d = f.read().strip()
+            if len(d) < n:
+                raise AssertionError('%s does not seem to contain enough text' % file)
+    except IOError:
+        raise AssertionError('Cannot read %s' % file)
+
+
+##################################################################
+# Controllers
+#
+
+__all__ += ["QEMU", "GDBClient"]
+
+class QEMU(object):
+    _GDBPORT = None
+
+    def __init__(self, *make_args):
+        # Check that QEMU is not currently running
+        try:
+            GDBClient(self.get_gdb_port(), timeout=0).close()
+        except socket.error:
+            pass
+        else:
+            print("""\
+GDB stub found on port %d.
+QEMU appears to already be running.  Please exit it if possible or use
+'killall qemu' or 'killall qemu.real'.""" % self.get_gdb_port(), file=sys.stderr)
+            sys.exit(1)
+
+        if options.verbose:
+            show_command(("make",) + make_args)
+        cmd = ("make", "-s", "--no-print-directory") + make_args
+        self.proc = Popen(cmd, stdout=subprocess.PIPE,
+                          stderr=subprocess.STDOUT,
+                          stdin=subprocess.PIPE)
+        # Accumulated output as a string
+        self.output = ""
+        # Accumulated output as a bytearray
+        self.outbytes = bytearray()
+        self.on_output = []
+
+    @staticmethod
+    def get_gdb_port():
+        if QEMU._GDBPORT is None:
+            p = Popen(["make", "-s", "--no-print-directory", "print-gdbport"],
+                      stdout=subprocess.PIPE)
+            (out, _) = p.communicate()
+            if p.returncode:
+                raise RuntimeError(
+                    "Failed to get gdbport: make exited with %d" %
+                    p.returncode)
+            QEMU._GDBPORT = int(out)
+        return QEMU._GDBPORT
+
+    def fileno(self):
+        if self.proc:
+            return self.proc.stdout.fileno()
+
+    def handle_read(self):
+        buf = os.read(self.proc.stdout.fileno(), 4096)
+        self.outbytes.extend(buf)
+        self.output = self.outbytes.decode("utf-8", "replace")
+        for callback in self.on_output:
+            callback(buf)
+        if buf == b"":
+            self.wait()
+            return
+
+    def write(self, buf):
+        if isinstance(buf, str):
+            buf = buf.encode('utf-8')
+        self.proc.stdin.write(buf)
+        self.proc.stdin.flush()
+
+    def wait(self):
+        if self.proc:
+            self.proc.wait()
+            self.proc = None
+
+    def kill(self):
+        if self.proc:
+            self.proc.terminate()
+
+class GDBClient(object):
+    def __init__(self, port, timeout=15):
+        start = time.time()
+        while True:
+            self.sock = socket.socket()
+            try:
+                self.sock.settimeout(1)
+                self.sock.connect(("localhost", port))
+                break
+            except socket.error:
+                if time.time() >= start + timeout:
+                    raise
+        self.__buf = ""
+
+    def fileno(self):
+        if self.sock:
+            return self.sock.fileno()
+
+    def handle_read(self):
+        try:
+            data = self.sock.recv(4096).decode("ascii", "replace")
+        except socket.error:
+            data = ""
+        if data == "":
+            self.sock.close()
+            self.sock = None
+            return
+        self.__buf += data
+
+        while True:
+            m = re.search(r"\$([^#]*)#[0-9a-zA-Z]{2}", self.__buf)
+            if not m:
+                break
+            pkt = m.group(1)
+            self.__buf = self.__buf[m.end():]
+
+            if pkt.startswith("T05"):
+                # Breakpoint
+                raise TerminateTest
+
+    def __send(self, cmd):
+        packet = "$%s#%02x" % (cmd, sum(map(ord, cmd)) % 256)
+        self.sock.sendall(packet.encode("ascii"))
+
+    def __send_break(self):
+        self.sock.sendall(b"\x03")
+
+    def close(self):
+        if self.sock:
+            self.sock.close()
+            self.sock = None
+
+    def cont(self):
+        self.__send("c")
+
+    def breakpoint(self, addr):
+        self.__send("Z1,%x,1" % addr)
+
+
+##################################################################
+# QEMU test runner
+#
+
+__all__ += ["TerminateTest", "Runner"]
+
+class TerminateTest(Exception):
+    pass
+
+class Runner():
+    def __init__(self, *default_monitors):
+        self.__default_monitors = default_monitors
+
+    def run_qemu(self, *monitors, **kw):
+        """Run a QEMU-based test.  monitors should functions that will
+        be called with this Runner instance once QEMU and GDB are
+        started.  Typically, they should register callbacks that throw
+        TerminateTest when stop events occur.  The target_base
+        argument gives the make target to run.  The make_args argument
+        should be a list of additional arguments to pass to make.  The
+        timeout argument bounds how long to run before returning."""
+
+        def run_qemu_kw(target_base="qemu", make_args=[], timeout=30):
+            return target_base, make_args, timeout
+        target_base, make_args, timeout = run_qemu_kw(**kw)
+
+        # Start QEMU
+        pre_make()
+        self.qemu = QEMU(target_base + "-gdb", *make_args)
+        self.gdb = None
+
+        try:
+            # Wait for QEMU to start or make to fail.  This will set
+            # self.gdb if QEMU starts.
+            self.qemu.on_output = [self.__monitor_start]
+            self.__react([self.qemu], timeout=90)
+            self.qemu.on_output = []
+            if self.gdb is None:
+                print("Failed to connect to QEMU; output:")
+                print(self.qemu.output)
+                sys.exit(1)
+            post_make()
+
+            # QEMU and GDB are up
+            self.reactors = [self.qemu, self.gdb]
+
+            # Start monitoring
+            for m in self.__default_monitors + monitors:
+                m(self)
+
+            # Run and react
+            self.gdb.cont()
+            self.__react(self.reactors, timeout)
+        finally:
+            # Shutdown QEMU
+            try:
+                if self.gdb is None:
+                    sys.exit(1)
+                self.qemu.kill()
+                self.__react(self.reactors, 5)
+                self.gdb.close()
+                self.qemu.wait()
+            except:
+                print("""\
+Failed to shutdown QEMU.  You might need to 'killall qemu' or
+'killall qemu.real'.
+""")
+                raise
+
+    def __monitor_start(self, output):
+        if b"\n" in output:
+            try:
+                self.gdb = GDBClient(self.qemu.get_gdb_port(), timeout=2)
+                raise TerminateTest
+            except socket.error:
+                pass
+        if not len(output):
+            raise TerminateTest
+
+    def __react(self, reactors, timeout):
+        deadline = time.time() + timeout
+        try:
+            while True:
+                timeleft = deadline - time.time()
+                if timeleft < 0:
+                    sys.stdout.write("Timeout! ")
+                    sys.stdout.flush()
+                    return
+
+                rset = [r for r in reactors if r.fileno() is not None]
+                if not rset:
+                    return
+
+                rset, _, _ = select.select(rset, [], [], timeleft)
+                for reactor in rset:
+                    reactor.handle_read()
+        except TerminateTest:
+            pass
+
+    def user_test(self, binary, *monitors, **kw):
+        """Run a user test using the specified binary.  Monitors and
+        keyword arguments are as for run_qemu.  This runs on a disk
+        snapshot unless the keyword argument 'snapshot' is False."""
+
+        maybe_unlink("obj/kern/init.o", "obj/kern/kernel")
+        if kw.pop("snapshot", True):
+            kw.setdefault("make_args", []).append("QEMUEXTRA+=-snapshot")
+        self.run_qemu(target_base="run-%s" % binary, *monitors, **kw)
+
+    def match(self, *args, **kwargs):
+        """Shortcut to call assert_lines_match on the most recent QEMU
+        output."""
+
+        assert_lines_match(self.qemu.output, *args, **kwargs)
+
+##################################################################
+# Monitors
+#
+
+__all__ += ["save", "stop_breakpoint", "call_on_line", "stop_on_line", "shell_script"]
+
+def save(path):
+    """Return a monitor that writes QEMU's output to path.  If the
+    test fails, copy the output to path.test-name."""
+
+    def setup_save(runner):
+        f.seek(0)
+        f.truncate()
+        runner.qemu.on_output.append(f.write)
+        get_current_test().on_finish.append(save_on_finish)
+
+    def save_on_finish(fail):
+        f.flush()
+        save_path = path + "." + get_current_test().__name__[5:]
+        if fail:
+            shutil.copyfile(path, save_path)
+            print("    QEMU output saved to %s" % save_path)
+        elif os.path.exists(save_path):
+            os.unlink(save_path)
+            print("    (Old %s failure log removed)" % save_path)
+
+    f = open(path, "wb")
+    return setup_save
+
+def stop_breakpoint(addr):
+    """Returns a monitor that stops when addr is reached.  addr may be
+    a number or the name of a symbol."""
+
+    def setup_breakpoint(runner):
+        if isinstance(addr, str):
+            addrs = [int(sym[:16], 16) for sym in open("kernel/kernel.sym")
+                     if sym[17:].strip() == addr]
+            assert len(addrs), "Symbol %s not found" % addr
+            runner.gdb.breakpoint(addrs[0])
+        else:
+            runner.gdb.breakpoint(addr)
+    return setup_breakpoint
+
+def call_on_line(regexp, callback):
+    """Returns a monitor that calls 'callback' when QEMU prints a line
+    matching 'regexp'."""
+
+    def setup_call_on_line(runner):
+        buf = bytearray()
+        def handle_output(output):
+            buf.extend(output)
+            while b"\n" in buf:
+                line, buf[:] = buf.split(b"\n", 1)
+                line = line.decode("utf-8", "replace")
+                if re.match(regexp, line):
+                    callback(line)
+        runner.qemu.on_output.append(handle_output)
+    return setup_call_on_line
+
+def stop_on_line(regexp):
+    """Returns a monitor that stops when QEMU prints a line matching
+    'regexp'."""
+
+    def stop(line):
+        raise TerminateTest
+    return call_on_line(regexp, stop)
+
+def shell_script(script, terminate_match=None):
+    """Returns a monitor that plays the script, and stops when the script is
+    done executing."""
+
+    def setup_call_on_line(runner):
+        class context:
+            n = 0
+            buf = bytearray()
+        def handle_output(output):
+            context.buf.extend(output)
+            if terminate_match is not None:
+                if re.match(terminate_match, context.buf.decode('utf-8', 'replace')):
+                    raise TerminateTest
+            if b'$ ' in context.buf:
+                context.buf = bytearray()
+                if context.n < len(script):
+                    runner.qemu.write(script[context.n])
+                    runner.qemu.write('\n')
+                    context.n += 1
+                else:
+                    if terminate_match is None:
+                        raise TerminateTest
+        runner.qemu.on_output.append(handle_output)
+    return setup_call_on_line
diff --git a/kernel/bio.c b/kernel/bio.c
new file mode 100644
index 0000000..60d91a6
--- /dev/null
+++ b/kernel/bio.c
@@ -0,0 +1,153 @@
+// Buffer cache.
+//
+// The buffer cache is a linked list of buf structures holding
+// cached copies of disk block contents.  Caching disk blocks
+// in memory reduces the number of disk reads and also provides
+// a synchronization point for disk blocks used by multiple processes.
+//
+// Interface:
+// * To get a buffer for a particular disk block, call bread.
+// * After changing buffer data, call bwrite to write it to disk.
+// * When done with the buffer, call brelse.
+// * Do not use the buffer after calling brelse.
+// * Only one process at a time can use a buffer,
+//     so do not keep them longer than necessary.
+
+
+#include "types.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "riscv.h"
+#include "defs.h"
+#include "fs.h"
+#include "buf.h"
+
+struct {
+  struct spinlock lock;
+  struct buf buf[NBUF];
+
+  // Linked list of all buffers, through prev/next.
+  // Sorted by how recently the buffer was used.
+  // head.next is most recent, head.prev is least.
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+  bcache.head.next = &bcache.head;
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    initsleeplock(&b->lock, "buffer");
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+}
+
+// Look through buffer cache for block on device dev.
+// If not found, allocate a buffer.
+// In either case, return locked buffer.
+static struct buf*
+bget(uint dev, uint blockno)
+{
+  struct buf *b;
+
+  acquire(&bcache.lock);
+
+  // Is the block already cached?
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+    if(b->dev == dev && b->blockno == blockno){
+      b->refcnt++;
+      release(&bcache.lock);
+      acquiresleep(&b->lock);
+      return b;
+    }
+  }
+
+  // Not cached.
+  // Recycle the least recently used (LRU) unused buffer.
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    if(b->refcnt == 0) {
+      b->dev = dev;
+      b->blockno = blockno;
+      b->valid = 0;
+      b->refcnt = 1;
+      release(&bcache.lock);
+      acquiresleep(&b->lock);
+      return b;
+    }
+  }
+  panic("bget: no buffers");
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if(!b->valid) {
+    virtio_disk_rw(b, 0);
+    b->valid = 1;
+  }
+  return b;
+}
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+  if(!holdingsleep(&b->lock))
+    panic("bwrite");
+  virtio_disk_rw(b, 1);
+}
+
+// Release a locked buffer.
+// Move to the head of the most-recently-used list.
+void
+brelse(struct buf *b)
+{
+  if(!holdingsleep(&b->lock))
+    panic("brelse");
+
+  releasesleep(&b->lock);
+
+  acquire(&bcache.lock);
+  b->refcnt--;
+  if (b->refcnt == 0) {
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+    b->prev->next = b->next;
+    b->next = bcache.head.next;
+    b->prev = &bcache.head;
+    bcache.head.next->prev = b;
+    bcache.head.next = b;
+  }
+  
+  release(&bcache.lock);
+}
+
+void
+bpin(struct buf *b) {
+  acquire(&bcache.lock);
+  b->refcnt++;
+  release(&bcache.lock);
+}
+
+void
+bunpin(struct buf *b) {
+  acquire(&bcache.lock);
+  b->refcnt--;
+  release(&bcache.lock);
+}
+
+
diff --git a/kernel/bio.d b/kernel/bio.d
new file mode 100644
index 0000000..63aa36f
--- /dev/null
+++ b/kernel/bio.d
@@ -0,0 +1,3 @@
+kernel/bio.o: kernel/bio.c kernel/types.h kernel/param.h \
+ kernel/spinlock.h kernel/sleeplock.h kernel/riscv.h kernel/defs.h \
+ kernel/fs.h kernel/buf.h
diff --git a/kernel/bio.o b/kernel/bio.o
new file mode 100644
index 0000000..5f8c5f7
Binary files /dev/null and b/kernel/bio.o differ
diff --git a/kernel/buf.h b/kernel/buf.h
new file mode 100644
index 0000000..4616e9e
--- /dev/null
+++ b/kernel/buf.h
@@ -0,0 +1,12 @@
+struct buf {
+  int valid;   // has data been read from disk?
+  int disk;    // does disk "own" buf?
+  uint dev;
+  uint blockno;
+  struct sleeplock lock;
+  uint refcnt;
+  struct buf *prev; // LRU cache list
+  struct buf *next;
+  uchar data[BSIZE];
+};
+
diff --git a/kernel/console.c b/kernel/console.c
new file mode 100644
index 0000000..05dc526
--- /dev/null
+++ b/kernel/console.c
@@ -0,0 +1,192 @@
+//
+// Console input and output, to the uart.
+// Reads are line at a time.
+// Implements special input characters:
+//   newline -- end of line
+//   control-h -- backspace
+//   control-u -- kill line
+//   control-d -- end of file
+//   control-p -- print process list
+//
+
+#include <stdarg.h>
+
+#include "types.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "defs.h"
+#include "proc.h"
+
+#define BACKSPACE 0x100
+#define C(x)  ((x)-'@')  // Control-x
+
+//
+// send one character to the uart.
+// called by printf(), and to echo input characters,
+// but not from write().
+//
+void
+consputc(int c)
+{
+  if(c == BACKSPACE){
+    // if the user typed backspace, overwrite with a space.
+    uartputc_sync('\b'); uartputc_sync(' '); uartputc_sync('\b');
+  } else {
+    uartputc_sync(c);
+  }
+}
+
+struct {
+  struct spinlock lock;
+  
+  // input
+#define INPUT_BUF_SIZE 128
+  char buf[INPUT_BUF_SIZE];
+  uint r;  // Read index
+  uint w;  // Write index
+  uint e;  // Edit index
+} cons;
+
+//
+// user write()s to the console go here.
+//
+int
+consolewrite(int user_src, uint64 src, int n)
+{
+  int i;
+
+  for(i = 0; i < n; i++){
+    char c;
+    if(either_copyin(&c, user_src, src+i, 1) == -1)
+      break;
+    uartputc(c);
+  }
+
+  return i;
+}
+
+//
+// user read()s from the console go here.
+// copy (up to) a whole input line to dst.
+// user_dist indicates whether dst is a user
+// or kernel address.
+//
+int
+consoleread(int user_dst, uint64 dst, int n)
+{
+  uint target;
+  int c;
+  char cbuf;
+
+  target = n;
+  acquire(&cons.lock);
+  while(n > 0){
+    // wait until interrupt handler has put some
+    // input into cons.buffer.
+    while(cons.r == cons.w){
+      if(killed(myproc())){
+        release(&cons.lock);
+        return -1;
+      }
+      sleep(&cons.r, &cons.lock);
+    }
+
+    c = cons.buf[cons.r++ % INPUT_BUF_SIZE];
+
+    if(c == C('D')){  // end-of-file
+      if(n < target){
+        // Save ^D for next time, to make sure
+        // caller gets a 0-byte result.
+        cons.r--;
+      }
+      break;
+    }
+
+    // copy the input byte to the user-space buffer.
+    cbuf = c;
+    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
+      break;
+
+    dst++;
+    --n;
+
+    if(c == '\n'){
+      // a whole line has arrived, return to
+      // the user-level read().
+      break;
+    }
+  }
+  release(&cons.lock);
+
+  return target - n;
+}
+
+//
+// the console input interrupt handler.
+// uartintr() calls this for input character.
+// do erase/kill processing, append to cons.buf,
+// wake up consoleread() if a whole line has arrived.
+//
+void
+consoleintr(int c)
+{
+  acquire(&cons.lock);
+
+  switch(c){
+  case C('P'):  // Print process list.
+    procdump();
+    break;
+  case C('U'):  // Kill line.
+    while(cons.e != cons.w &&
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    break;
+  case C('H'): // Backspace
+  case '\x7f': // Delete key
+    if(cons.e != cons.w){
+      cons.e--;
+      consputc(BACKSPACE);
+    }
+    break;
+  default:
+    if(c != 0 && cons.e-cons.r < INPUT_BUF_SIZE){
+      c = (c == '\r') ? '\n' : c;
+
+      // echo back to the user.
+      consputc(c);
+
+      // store for consumption by consoleread().
+      cons.buf[cons.e++ % INPUT_BUF_SIZE] = c;
+
+      if(c == '\n' || c == C('D') || cons.e-cons.r == INPUT_BUF_SIZE){
+        // wake up consoleread() if a whole line (or end-of-file)
+        // has arrived.
+        cons.w = cons.e;
+        wakeup(&cons.r);
+      }
+    }
+    break;
+  }
+  
+  release(&cons.lock);
+}
+
+void
+consoleinit(void)
+{
+  initlock(&cons.lock, "cons");
+
+  uartinit();
+
+  // connect read and write system calls
+  // to consoleread and consolewrite.
+  devsw[CONSOLE].read = consoleread;
+  devsw[CONSOLE].write = consolewrite;
+}
diff --git a/kernel/console.d b/kernel/console.d
new file mode 100644
index 0000000..5ea3ef2
--- /dev/null
+++ b/kernel/console.d
@@ -0,0 +1,5 @@
+kernel/console.o: kernel/console.c \
+ /usr/lib/gcc/riscv64-unknown-elf/13.2.0/include/stdarg.h kernel/types.h \
+ kernel/param.h kernel/spinlock.h kernel/sleeplock.h kernel/fs.h \
+ kernel/file.h kernel/memlayout.h kernel/riscv.h kernel/defs.h \
+ kernel/proc.h
diff --git a/kernel/console.o b/kernel/console.o
new file mode 100644
index 0000000..c62f99e
Binary files /dev/null and b/kernel/console.o differ
diff --git a/kernel/defs.h b/kernel/defs.h
new file mode 100644
index 0000000..d1b6bb9
--- /dev/null
+++ b/kernel/defs.h
@@ -0,0 +1,189 @@
+struct buf;
+struct context;
+struct file;
+struct inode;
+struct pipe;
+struct proc;
+struct spinlock;
+struct sleeplock;
+struct stat;
+struct superblock;
+
+// bio.c
+void            binit(void);
+struct buf*     bread(uint, uint);
+void            brelse(struct buf*);
+void            bwrite(struct buf*);
+void            bpin(struct buf*);
+void            bunpin(struct buf*);
+
+// console.c
+void            consoleinit(void);
+void            consoleintr(int);
+void            consputc(int);
+
+// exec.c
+int             exec(char*, char**);
+
+// file.c
+struct file*    filealloc(void);
+void            fileclose(struct file*);
+struct file*    filedup(struct file*);
+void            fileinit(void);
+int             fileread(struct file*, uint64, int n);
+int             filestat(struct file*, uint64 addr);
+int             filewrite(struct file*, uint64, int n);
+
+// fs.c
+void            fsinit(int);
+int             dirlink(struct inode*, char*, uint);
+struct inode*   dirlookup(struct inode*, char*, uint*);
+struct inode*   ialloc(uint, short);
+struct inode*   idup(struct inode*);
+void            iinit();
+void            ilock(struct inode*);
+void            iput(struct inode*);
+void            iunlock(struct inode*);
+void            iunlockput(struct inode*);
+void            iupdate(struct inode*);
+int             namecmp(const char*, const char*);
+struct inode*   namei(char*);
+struct inode*   nameiparent(char*, char*);
+int             readi(struct inode*, int, uint64, uint, uint);
+void            stati(struct inode*, struct stat*);
+int             writei(struct inode*, int, uint64, uint, uint);
+void            itrunc(struct inode*);
+
+// ramdisk.c
+void            ramdiskinit(void);
+void            ramdiskintr(void);
+void            ramdiskrw(struct buf*);
+
+// kalloc.c
+void*           kalloc(void);
+void            kfree(void *);
+void            kinit(void);
+
+// log.c
+void            initlog(int, struct superblock*);
+void            log_write(struct buf*);
+void            begin_op(void);
+void            end_op(void);
+
+// pipe.c
+int             pipealloc(struct file**, struct file**);
+void            pipeclose(struct pipe*, int);
+int             piperead(struct pipe*, uint64, int);
+int             pipewrite(struct pipe*, uint64, int);
+
+// printf.c
+int            printf(char*, ...) __attribute__ ((format (printf, 1, 2)));
+void            panic(char*) __attribute__((noreturn));
+void            printfinit(void);
+
+// proc.c
+int             cpuid(void);
+void            exit(int);
+int             fork(void);
+int             growproc(int);
+void            proc_mapstacks(pagetable_t);
+pagetable_t     proc_pagetable(struct proc *);
+void            proc_freepagetable(pagetable_t, uint64);
+int             kill(int);
+int             killed(struct proc*);
+void            setkilled(struct proc*);
+struct cpu*     mycpu(void);
+struct cpu*     getmycpu(void);
+struct proc*    myproc();
+void            procinit(void);
+void            scheduler(void) __attribute__((noreturn));
+void            sched(void);
+void            sleep(void*, struct spinlock*);
+void            userinit(void);
+int             wait(uint64);
+void            wakeup(void*);
+void            yield(void);
+int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+void            procdump(void);
+
+// swtch.S
+void            swtch(struct context*, struct context*);
+
+// spinlock.c
+void            acquire(struct spinlock*);
+int             holding(struct spinlock*);
+void            initlock(struct spinlock*, char*);
+void            release(struct spinlock*);
+void            push_off(void);
+void            pop_off(void);
+
+// sleeplock.c
+void            acquiresleep(struct sleeplock*);
+void            releasesleep(struct sleeplock*);
+int             holdingsleep(struct sleeplock*);
+void            initsleeplock(struct sleeplock*, char*);
+
+// string.c
+int             memcmp(const void*, const void*, uint);
+void*           memmove(void*, const void*, uint);
+void*           memset(void*, int, uint);
+char*           safestrcpy(char*, const char*, int);
+int             strlen(const char*);
+int             strncmp(const char*, const char*, uint);
+char*           strncpy(char*, const char*, int);
+
+// syscall.c
+void            argint(int, int*);
+int             argstr(int, char*, int);
+void            argaddr(int, uint64 *);
+int             fetchstr(uint64, char*, int);
+int             fetchaddr(uint64, uint64*);
+void            syscall();
+
+// trap.c
+extern uint     ticks;
+void            trapinit(void);
+void            trapinithart(void);
+extern struct spinlock tickslock;
+void            usertrapret(void);
+
+// uart.c
+void            uartinit(void);
+void            uartintr(void);
+void            uartputc(int);
+void            uartputc_sync(int);
+int             uartgetc(void);
+
+// vm.c
+void            kvminit(void);
+void            kvminithart(void);
+void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
+int             mappages(pagetable_t, uint64, uint64, uint64, int);
+pagetable_t     uvmcreate(void);
+void            uvmfirst(pagetable_t, uchar *, uint);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int);
+uint64          uvmdealloc(pagetable_t, uint64, uint64);
+int             uvmcopy(pagetable_t, pagetable_t, uint64);
+void            uvmfree(pagetable_t, uint64);
+void            uvmunmap(pagetable_t, uint64, uint64, int);
+void            uvmclear(pagetable_t, uint64);
+pte_t *         walk(pagetable_t, uint64, int);
+uint64          walkaddr(pagetable_t, uint64);
+int             copyout(pagetable_t, uint64, char *, uint64);
+int             copyin(pagetable_t, char *, uint64, uint64);
+int             copyinstr(pagetable_t, char *, uint64, uint64);
+
+// plic.c
+void            plicinit(void);
+void            plicinithart(void);
+int             plic_claim(void);
+void            plic_complete(int);
+
+// virtio_disk.c
+void            virtio_disk_init(void);
+void            virtio_disk_rw(struct buf *, int);
+void            virtio_disk_intr(void);
+
+// number of elements in fixed-size array
+#define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff --git a/kernel/elf.h b/kernel/elf.h
new file mode 100644
index 0000000..84555fa
--- /dev/null
+++ b/kernel/elf.h
@@ -0,0 +1,42 @@
+// Format of an ELF executable file
+
+#define ELF_MAGIC 0x464C457FU  // "\x7FELF" in little endian
+
+// File header
+struct elfhdr {
+  uint magic;  // must equal ELF_MAGIC
+  uchar elf[12];
+  ushort type;
+  ushort machine;
+  uint version;
+  uint64 entry;
+  uint64 phoff;
+  uint64 shoff;
+  uint flags;
+  ushort ehsize;
+  ushort phentsize;
+  ushort phnum;
+  ushort shentsize;
+  ushort shnum;
+  ushort shstrndx;
+};
+
+// Program section header
+struct proghdr {
+  uint32 type;
+  uint32 flags;
+  uint64 off;
+  uint64 vaddr;
+  uint64 paddr;
+  uint64 filesz;
+  uint64 memsz;
+  uint64 align;
+};
+
+// Values for Proghdr type
+#define ELF_PROG_LOAD           1
+
+// Flag bits for Proghdr flags
+#define ELF_PROG_FLAG_EXEC      1
+#define ELF_PROG_FLAG_WRITE     2
+#define ELF_PROG_FLAG_READ      4
diff --git a/kernel/entry.S b/kernel/entry.S
new file mode 100644
index 0000000..5ab365e
--- /dev/null
+++ b/kernel/entry.S
@@ -0,0 +1,21 @@
+        # qemu -kernel loads the kernel at 0x80000000
+        # and causes each hart (i.e. CPU) to jump there.
+        # kernel.ld causes the following code to
+        # be placed at 0x80000000.
+.section .text
+.global _entry
+_entry:
+        # set up a stack for C.
+        # stack0 is declared in start.c,
+        # with a 4096-byte stack per CPU.
+        # sp = stack0 + (hartid * 4096)
+        la sp, stack0
+        li a0, 1024*4
+        csrr a1, mhartid
+        addi a1, a1, 1
+        mul a0, a0, a1
+        add sp, sp, a0
+        # jump to start() in start.c
+        call start
+spin:
+        j spin
diff --git a/kernel/entry.o b/kernel/entry.o
new file mode 100644
index 0000000..c6ae2ea
Binary files /dev/null and b/kernel/entry.o differ
diff --git a/kernel/exec.c b/kernel/exec.c
new file mode 100644
index 0000000..6d7c452
--- /dev/null
+++ b/kernel/exec.c
@@ -0,0 +1,166 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+#include "elf.h"
+
+static int loadseg(pde_t *, uint64, struct inode *, uint, uint);
+
+int flags2perm(int flags)
+{
+    int perm = 0;
+    if(flags & 0x1)
+      perm = PTE_X;
+    if(flags & 0x2)
+      perm |= PTE_W;
+    return perm;
+}
+
+int
+exec(char *path, char **argv)
+{
+  char *s, *last;
+  int i, off;
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pagetable_t pagetable = 0, oldpagetable;
+  struct proc *p = myproc();
+
+  begin_op();
+
+  if((ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+
+  // Check ELF header
+  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
+    goto bad;
+
+  if(elf.magic != ELF_MAGIC)
+    goto bad;
+
+  if((pagetable = proc_pagetable(p)) == 0)
+    goto bad;
+
+  // Load program into memory.
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
+      goto bad;
+    if(ph.type != ELF_PROG_LOAD)
+      continue;
+    if(ph.memsz < ph.filesz)
+      goto bad;
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+      goto bad;
+    if(ph.vaddr % PGSIZE != 0)
+      goto bad;
+    uint64 sz1;
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+      goto bad;
+    sz = sz1;
+    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
+      goto bad;
+  }
+  iunlockput(ip);
+  end_op();
+  ip = 0;
+
+  p = myproc();
+  uint64 oldsz = p->sz;
+
+  // Allocate some pages at the next page boundary.
+  // Make the first inaccessible as a stack guard.
+  // Use the rest as the user stack.
+  sz = PGROUNDUP(sz);
+  uint64 sz1;
+  if((sz1 = uvmalloc(pagetable, sz, sz + (USERSTACK+1)*PGSIZE, PTE_W)) == 0)
+    goto bad;
+  sz = sz1;
+  uvmclear(pagetable, sz-(USERSTACK+1)*PGSIZE);
+  sp = sz;
+  stackbase = sp - USERSTACK*PGSIZE;
+
+  // Push argument strings, prepare rest of stack in ustack.
+  for(argc = 0; argv[argc]; argc++) {
+    if(argc >= MAXARG)
+      goto bad;
+    sp -= strlen(argv[argc]) + 1;
+    sp -= sp % 16; // riscv sp must be 16-byte aligned
+    if(sp < stackbase)
+      goto bad;
+    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+      goto bad;
+    ustack[argc] = sp;
+  }
+  ustack[argc] = 0;
+
+  // push the array of argv[] pointers.
+  sp -= (argc+1) * sizeof(uint64);
+  sp -= sp % 16;
+  if(sp < stackbase)
+    goto bad;
+  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
+    goto bad;
+
+  // arguments to user main(argc, argv)
+  // argc is returned via the system call return
+  // value, which goes in a0.
+  p->trapframe->a1 = sp;
+
+  // Save program name for debugging.
+  for(last=s=path; *s; s++)
+    if(*s == '/')
+      last = s+1;
+  safestrcpy(p->name, last, sizeof(p->name));
+    
+  // Commit to the user image.
+  oldpagetable = p->pagetable;
+  p->pagetable = pagetable;
+  p->sz = sz;
+  p->trapframe->epc = elf.entry;  // initial program counter = main
+  p->trapframe->sp = sp; // initial stack pointer
+  proc_freepagetable(oldpagetable, oldsz);
+
+  return argc; // this ends up in a0, the first argument to main(argc, argv)
+
+ bad:
+  if(pagetable)
+    proc_freepagetable(pagetable, sz);
+  if(ip){
+    iunlockput(ip);
+    end_op();
+  }
+  return -1;
+}
+
+// Load a program segment into pagetable at virtual address va.
+// va must be page-aligned
+// and the pages from va to va+sz must already be mapped.
+// Returns 0 on success, -1 on failure.
+static int
+loadseg(pagetable_t pagetable, uint64 va, struct inode *ip, uint offset, uint sz)
+{
+  uint i, n;
+  uint64 pa;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    pa = walkaddr(pagetable, va + i);
+    if(pa == 0)
+      panic("loadseg: address should exist");
+    if(sz - i < PGSIZE)
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
+      return -1;
+  }
+  
+  return 0;
+}
diff --git a/kernel/exec.d b/kernel/exec.d
new file mode 100644
index 0000000..f162b3b
--- /dev/null
+++ b/kernel/exec.d
@@ -0,0 +1,3 @@
+kernel/exec.o: kernel/exec.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h kernel/elf.h
diff --git a/kernel/exec.o b/kernel/exec.o
new file mode 100644
index 0000000..972eb65
Binary files /dev/null and b/kernel/exec.o differ
diff --git a/kernel/fcntl.h b/kernel/fcntl.h
new file mode 100644
index 0000000..44861b9
--- /dev/null
+++ b/kernel/fcntl.h
@@ -0,0 +1,5 @@
+#define O_RDONLY  0x000
+#define O_WRONLY  0x001
+#define O_RDWR    0x002
+#define O_CREATE  0x200
+#define O_TRUNC   0x400
diff --git a/kernel/file.c b/kernel/file.c
new file mode 100644
index 0000000..adb1b8f
--- /dev/null
+++ b/kernel/file.c
@@ -0,0 +1,195 @@
+//
+// Support functions for system calls that involve file descriptors.
+//
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "stat.h"
+#include "proc.h"
+
+struct devsw devsw[NDEV];
+struct {
+  struct spinlock lock;
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+  initlock(&ftable.lock, "ftable");
+}
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+  struct file *f;
+
+  acquire(&ftable.lock);
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    if(f->ref == 0){
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+  return 0;
+}
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("filedup");
+  f->ref++;
+  release(&ftable.lock);
+  return f;
+}
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+  struct file ff;
+
+  acquire(&ftable.lock);
+  if(f->ref < 1)
+    panic("fileclose");
+  if(--f->ref > 0){
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+  f->ref = 0;
+  f->type = FD_NONE;
+  release(&ftable.lock);
+
+  if(ff.type == FD_PIPE){
+    pipeclose(ff.pipe, ff.writable);
+  } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+
+// Get metadata about file f.
+// addr is a user virtual address, pointing to a struct stat.
+int
+filestat(struct file *f, uint64 addr)
+{
+  struct proc *p = myproc();
+  struct stat st;
+  
+  if(f->type == FD_INODE || f->type == FD_DEVICE){
+    ilock(f->ip);
+    stati(f->ip, &st);
+    iunlock(f->ip);
+    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
+      return -1;
+    return 0;
+  }
+  return -1;
+}
+
+// Read from file f.
+// addr is a user virtual address.
+int
+fileread(struct file *f, uint64 addr, int n)
+{
+  int r = 0;
+
+  if(f->readable == 0)
+    return -1;
+
+  if(f->type == FD_PIPE){
+    r = piperead(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
+      return -1;
+    r = devsw[f->major].read(1, addr, n);
+  } else if(f->type == FD_INODE){
+    ilock(f->ip);
+    if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
+      f->off += r;
+    iunlock(f->ip);
+  } else {
+    panic("fileread");
+  }
+
+  return r;
+}
+
+// Write to file f.
+// addr is a user virtual address.
+int
+filewrite(struct file *f, uint64 addr, int n)
+{
+  int r, ret = 0;
+
+  if(f->writable == 0)
+    return -1;
+
+  if(f->type == FD_PIPE){
+    ret = pipewrite(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+      return -1;
+    ret = devsw[f->major].write(1, addr, n);
+  } else if(f->type == FD_INODE){
+    // write a few blocks at a time to avoid exceeding
+    // the maximum log transaction size, including
+    // i-node, indirect block, allocation blocks,
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
+    int i = 0;
+    while(i < n){
+      int n1 = n - i;
+      if(n1 > max)
+        n1 = max;
+
+      begin_op();
+      ilock(f->ip);
+      if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
+        f->off += r;
+      iunlock(f->ip);
+      end_op();
+
+      if(r != n1){
+        // error from writei
+        break;
+      }
+      i += r;
+    }
+    ret = (i == n ? n : -1);
+  } else {
+    panic("filewrite");
+  }
+
+  return ret;
+}
+
+uint64 count_openfiles(void) {
+    struct file *f;
+    int count = 0;
+
+    acquire(&ftable.lock);
+    for (f = ftable.file; f < &ftable.file[NFILE]; f++) {
+        if (f->ref > 0)  // Count files with active references
+            count++;
+    }
+    release(&ftable.lock);
+
+    return count;
+}
diff --git a/kernel/file.d b/kernel/file.d
new file mode 100644
index 0000000..222a010
--- /dev/null
+++ b/kernel/file.d
@@ -0,0 +1,3 @@
+kernel/file.o: kernel/file.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/fs.h kernel/spinlock.h kernel/sleeplock.h \
+ kernel/file.h kernel/stat.h kernel/proc.h
diff --git a/kernel/file.h b/kernel/file.h
new file mode 100644
index 0000000..b076d1d
--- /dev/null
+++ b/kernel/file.h
@@ -0,0 +1,40 @@
+struct file {
+  enum { FD_NONE, FD_PIPE, FD_INODE, FD_DEVICE } type;
+  int ref; // reference count
+  char readable;
+  char writable;
+  struct pipe *pipe; // FD_PIPE
+  struct inode *ip;  // FD_INODE and FD_DEVICE
+  uint off;          // FD_INODE
+  short major;       // FD_DEVICE
+};
+
+#define major(dev)  ((dev) >> 16 & 0xFFFF)
+#define minor(dev)  ((dev) & 0xFFFF)
+#define	mkdev(m,n)  ((uint)((m)<<16| (n)))
+
+// in-memory copy of an inode
+struct inode {
+  uint dev;           // Device number
+  uint inum;          // Inode number
+  int ref;            // Reference count
+  struct sleeplock lock; // protects everything below here
+  int valid;          // inode has been read from disk?
+
+  short type;         // copy of disk inode
+  short major;
+  short minor;
+  short nlink;
+  uint size;
+  uint addrs[NDIRECT+1];
+};
+
+// map major device number to device functions.
+struct devsw {
+  int (*read)(int, uint64, int);
+  int (*write)(int, uint64, int);
+};
+
+extern struct devsw devsw[];
+
+#define CONSOLE 1
diff --git a/kernel/file.o b/kernel/file.o
new file mode 100644
index 0000000..19f0d64
Binary files /dev/null and b/kernel/file.o differ
diff --git a/kernel/fs.c b/kernel/fs.c
new file mode 100644
index 0000000..c6bab15
--- /dev/null
+++ b/kernel/fs.c
@@ -0,0 +1,697 @@
+// File system implementation.  Five layers:
+//   + Blocks: allocator for raw disk blocks.
+//   + Log: crash recovery for multi-step updates.
+//   + Files: inode allocator, reading, writing, metadata.
+//   + Directories: inode with special contents (list of other inodes!)
+//   + Names: paths like /usr/rtm/xv6/fs.c for convenient naming.
+//
+// This file contains the low-level file system manipulation
+// routines.  The (higher-level) system call implementations
+// are in sysfile.c.
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+#include "file.h"
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+// there should be one superblock per disk device, but we run with
+// only one device
+struct superblock sb; 
+
+// Read the super block.
+static void
+readsb(int dev, struct superblock *sb)
+{
+  struct buf *bp;
+
+  bp = bread(dev, 1);
+  memmove(sb, bp->data, sizeof(*sb));
+  brelse(bp);
+}
+
+// Init fs
+void
+fsinit(int dev) {
+  readsb(dev, &sb);
+  if(sb.magic != FSMAGIC)
+    panic("invalid file system");
+  initlog(dev, &sb);
+}
+
+// Zero a block.
+static void
+bzero(int dev, int bno)
+{
+  struct buf *bp;
+
+  bp = bread(dev, bno);
+  memset(bp->data, 0, BSIZE);
+  log_write(bp);
+  brelse(bp);
+}
+
+// Blocks.
+
+// Allocate a zeroed disk block.
+// returns 0 if out of disk space.
+static uint
+balloc(uint dev)
+{
+  int b, bi, m;
+  struct buf *bp;
+
+  bp = 0;
+  for(b = 0; b < sb.size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb));
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+      m = 1 << (bi % 8);
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+        bp->data[bi/8] |= m;  // Mark block in use.
+        log_write(bp);
+        brelse(bp);
+        bzero(dev, b + bi);
+        return b + bi;
+      }
+    }
+    brelse(bp);
+  }
+  printf("balloc: out of blocks\n");
+  return 0;
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+  if((bp->data[bi/8] & m) == 0)
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+  log_write(bp);
+  brelse(bp);
+}
+
+// Inodes.
+//
+// An inode describes a single unnamed file.
+// The inode disk structure holds metadata: the file's type,
+// its size, the number of links referring to it, and the
+// list of blocks holding the file's content.
+//
+// The inodes are laid out sequentially on disk at block
+// sb.inodestart. Each inode has a number, indicating its
+// position on the disk.
+//
+// The kernel keeps a table of in-use inodes in memory
+// to provide a place for synchronizing access
+// to inodes used by multiple processes. The in-memory
+// inodes include book-keeping information that is
+// not stored on disk: ip->ref and ip->valid.
+//
+// An inode and its in-memory representation go through a
+// sequence of states before they can be used by the
+// rest of the file system code.
+//
+// * Allocation: an inode is allocated if its type (on disk)
+//   is non-zero. ialloc() allocates, and iput() frees if
+//   the reference and link counts have fallen to zero.
+//
+// * Referencing in table: an entry in the inode table
+//   is free if ip->ref is zero. Otherwise ip->ref tracks
+//   the number of in-memory pointers to the entry (open
+//   files and current directories). iget() finds or
+//   creates a table entry and increments its ref; iput()
+//   decrements ref.
+//
+// * Valid: the information (type, size, &c) in an inode
+//   table entry is only correct when ip->valid is 1.
+//   ilock() reads the inode from
+//   the disk and sets ip->valid, while iput() clears
+//   ip->valid if ip->ref has fallen to zero.
+//
+// * Locked: file system code may only examine and modify
+//   the information in an inode and its content if it
+//   has first locked the inode.
+//
+// Thus a typical sequence is:
+//   ip = iget(dev, inum)
+//   ilock(ip)
+//   ... examine and modify ip->xxx ...
+//   iunlock(ip)
+//   iput(ip)
+//
+// ilock() is separate from iget() so that system calls can
+// get a long-term reference to an inode (as for an open file)
+// and only lock it for short periods (e.g., in read()).
+// The separation also helps avoid deadlock and races during
+// pathname lookup. iget() increments ip->ref so that the inode
+// stays in the table and pointers to it remain valid.
+//
+// Many internal file system functions expect the caller to
+// have locked the inodes involved; this lets callers create
+// multi-step atomic operations.
+//
+// The itable.lock spin-lock protects the allocation of itable
+// entries. Since ip->ref indicates whether an entry is free,
+// and ip->dev and ip->inum indicate which i-node an entry
+// holds, one must hold itable.lock while using any of those fields.
+//
+// An ip->lock sleep-lock protects all ip-> fields other than ref,
+// dev, and inum.  One must hold ip->lock in order to
+// read or write that inode's ip->valid, ip->size, ip->type, &c.
+
+struct {
+  struct spinlock lock;
+  struct inode inode[NINODE];
+} itable;
+
+void
+iinit()
+{
+  int i = 0;
+  
+  initlock(&itable.lock, "itable");
+  for(i = 0; i < NINODE; i++) {
+    initsleeplock(&itable.inode[i].lock, "inode");
+  }
+}
+
+static struct inode* iget(uint dev, uint inum);
+
+// Allocate an inode on device dev.
+// Mark it as allocated by  giving it type type.
+// Returns an unlocked but allocated and referenced inode,
+// or NULL if there is no free inode.
+struct inode*
+ialloc(uint dev, short type)
+{
+  int inum;
+  struct buf *bp;
+  struct dinode *dip;
+
+  for(inum = 1; inum < sb.ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb));
+    dip = (struct dinode*)bp->data + inum%IPB;
+    if(dip->type == 0){  // a free inode
+      memset(dip, 0, sizeof(*dip));
+      dip->type = type;
+      log_write(bp);   // mark it allocated on the disk
+      brelse(bp);
+      return iget(dev, inum);
+    }
+    brelse(bp);
+  }
+  printf("ialloc: no inodes\n");
+  return 0;
+}
+
+// Copy a modified in-memory inode to disk.
+// Must be called after every change to an ip->xxx field
+// that lives on disk.
+// Caller must hold ip->lock.
+void
+iupdate(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+  dip->type = ip->type;
+  dip->major = ip->major;
+  dip->minor = ip->minor;
+  dip->nlink = ip->nlink;
+  dip->size = ip->size;
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+  log_write(bp);
+  brelse(bp);
+}
+
+// Find the inode with number inum on device dev
+// and return the in-memory copy. Does not lock
+// the inode and does not read it from disk.
+static struct inode*
+iget(uint dev, uint inum)
+{
+  struct inode *ip, *empty;
+
+  acquire(&itable.lock);
+
+  // Is the inode already in the table?
+  empty = 0;
+  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+      ip->ref++;
+      release(&itable.lock);
+      return ip;
+    }
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+      empty = ip;
+  }
+
+  // Recycle an inode entry.
+  if(empty == 0)
+    panic("iget: no inodes");
+
+  ip = empty;
+  ip->dev = dev;
+  ip->inum = inum;
+  ip->ref = 1;
+  ip->valid = 0;
+  release(&itable.lock);
+
+  return ip;
+}
+
+// Increment reference count for ip.
+// Returns ip to enable ip = idup(ip1) idiom.
+struct inode*
+idup(struct inode *ip)
+{
+  acquire(&itable.lock);
+  ip->ref++;
+  release(&itable.lock);
+  return ip;
+}
+
+// Lock the given inode.
+// Reads the inode from disk if necessary.
+void
+ilock(struct inode *ip)
+{
+  struct buf *bp;
+  struct dinode *dip;
+
+  if(ip == 0 || ip->ref < 1)
+    panic("ilock");
+
+  acquiresleep(&ip->lock);
+
+  if(ip->valid == 0){
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    ip->type = dip->type;
+    ip->major = dip->major;
+    ip->minor = dip->minor;
+    ip->nlink = dip->nlink;
+    ip->size = dip->size;
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    brelse(bp);
+    ip->valid = 1;
+    if(ip->type == 0)
+      panic("ilock: no type");
+  }
+}
+
+// Unlock the given inode.
+void
+iunlock(struct inode *ip)
+{
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    panic("iunlock");
+
+  releasesleep(&ip->lock);
+}
+
+// Drop a reference to an in-memory inode.
+// If that was the last reference, the inode table entry can
+// be recycled.
+// If that was the last reference and the inode has no links
+// to it, free the inode (and its content) on disk.
+// All calls to iput() must be inside a transaction in
+// case it has to free the inode.
+void
+iput(struct inode *ip)
+{
+  acquire(&itable.lock);
+
+  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
+    // inode has no links and no other references: truncate and free.
+
+    // ip->ref == 1 means no other process can have ip locked,
+    // so this acquiresleep() won't block (or deadlock).
+    acquiresleep(&ip->lock);
+
+    release(&itable.lock);
+
+    itrunc(ip);
+    ip->type = 0;
+    iupdate(ip);
+    ip->valid = 0;
+
+    releasesleep(&ip->lock);
+
+    acquire(&itable.lock);
+  }
+
+  ip->ref--;
+  release(&itable.lock);
+}
+
+// Common idiom: unlock, then put.
+void
+iunlockput(struct inode *ip)
+{
+  iunlock(ip);
+  iput(ip);
+}
+
+// Inode content
+//
+// The content (data) associated with each inode is stored
+// in blocks on the disk. The first NDIRECT block numbers
+// are listed in ip->addrs[].  The next NINDIRECT blocks are
+// listed in block ip->addrs[NDIRECT].
+
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+// returns 0 if out of disk space.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    if((addr = ip->addrs[bn]) == 0){
+      addr = balloc(ip->dev);
+      if(addr == 0)
+        return 0;
+      ip->addrs[bn] = addr;
+    }
+    return addr;
+  }
+  bn -= NDIRECT;
+
+  if(bn < NINDIRECT){
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0){
+      addr = balloc(ip->dev);
+      if(addr == 0)
+        return 0;
+      ip->addrs[NDIRECT] = addr;
+    }
+    bp = bread(ip->dev, addr);
+    a = (uint*)bp->data;
+    if((addr = a[bn]) == 0){
+      addr = balloc(ip->dev);
+      if(addr){
+        a[bn] = addr;
+        log_write(bp);
+      }
+    }
+    brelse(bp);
+    return addr;
+  }
+
+  panic("bmap: out of range");
+}
+
+// Truncate inode (discard contents).
+// Caller must hold ip->lock.
+void
+itrunc(struct inode *ip)
+{
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    if(ip->addrs[i]){
+      bfree(ip->dev, ip->addrs[i]);
+      ip->addrs[i] = 0;
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    a = (uint*)bp->data;
+    for(j = 0; j < NINDIRECT; j++){
+      if(a[j])
+        bfree(ip->dev, a[j]);
+    }
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+  iupdate(ip);
+}
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+  st->dev = ip->dev;
+  st->ino = ip->inum;
+  st->type = ip->type;
+  st->nlink = ip->nlink;
+  st->size = ip->size;
+}
+
+// Read data from inode.
+// Caller must hold ip->lock.
+// If user_dst==1, then dst is a user virtual address;
+// otherwise, dst is a kernel address.
+int
+readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    return 0;
+  if(off + n > ip->size)
+    n = ip->size - off;
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    uint addr = bmap(ip, off/BSIZE);
+    if(addr == 0)
+      break;
+    bp = bread(ip->dev, addr);
+    m = min(n - tot, BSIZE - off%BSIZE);
+    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
+      brelse(bp);
+      tot = -1;
+      break;
+    }
+    brelse(bp);
+  }
+  return tot;
+}
+
+// Write data to inode.
+// Caller must hold ip->lock.
+// If user_src==1, then src is a user virtual address;
+// otherwise, src is a kernel address.
+// Returns the number of bytes successfully written.
+// If the return value is less than the requested n,
+// there was an error of some kind.
+int
+writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    uint addr = bmap(ip, off/BSIZE);
+    if(addr == 0)
+      break;
+    bp = bread(ip->dev, addr);
+    m = min(n - tot, BSIZE - off%BSIZE);
+    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
+      brelse(bp);
+      break;
+    }
+    log_write(bp);
+    brelse(bp);
+  }
+
+  if(off > ip->size)
+    ip->size = off;
+
+  // write the i-node back to disk even if the size didn't change
+  // because the loop above might have called bmap() and added a new
+  // block to ip->addrs[].
+  iupdate(ip);
+
+  return tot;
+}
+
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+  return strncmp(s, t, DIRSIZ);
+}
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlookup read");
+    if(de.inum == 0)
+      continue;
+    if(namecmp(name, de.name) == 0){
+      // entry matches path element
+      if(poff)
+        *poff = off;
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+}
+
+// Write a new directory entry (name, inum) into the directory dp.
+// Returns 0 on success, -1 on failure (e.g. out of disk blocks).
+int
+dirlink(struct inode *dp, char *name, uint inum)
+{
+  int off;
+  struct dirent de;
+  struct inode *ip;
+
+  // Check that name is not present.
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iput(ip);
+    return -1;
+  }
+
+  // Look for an empty dirent.
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+      panic("dirlink read");
+    if(de.inum == 0)
+      break;
+  }
+
+  strncpy(de.name, name, DIRSIZ);
+  de.inum = inum;
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    return -1;
+
+  return 0;
+}
+
+// Paths
+
+// Copy the next path element from path into name.
+// Return a pointer to the element following the copied one.
+// The returned path has no leading slashes,
+// so the caller can check *path=='\0' to see if the name is the last one.
+// If no name to remove, return 0.
+//
+// Examples:
+//   skipelem("a/bb/c", name) = "bb/c", setting name = "a"
+//   skipelem("///a//bb", name) = "bb", setting name = "a"
+//   skipelem("a", name) = "", setting name = "a"
+//   skipelem("", name) = skipelem("////", name) = 0
+//
+static char*
+skipelem(char *path, char *name)
+{
+  char *s;
+  int len;
+
+  while(*path == '/')
+    path++;
+  if(*path == 0)
+    return 0;
+  s = path;
+  while(*path != '/' && *path != 0)
+    path++;
+  len = path - s;
+  if(len >= DIRSIZ)
+    memmove(name, s, DIRSIZ);
+  else {
+    memmove(name, s, len);
+    name[len] = 0;
+  }
+  while(*path == '/')
+    path++;
+  return path;
+}
+
+// Look up and return the inode for a path name.
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+      iunlockput(ip);
+      return 0;
+    }
+    if(nameiparent && *path == '\0'){
+      // Stop one level early.
+      iunlock(ip);
+      return ip;
+    }
+    if((next = dirlookup(ip, name, 0)) == 0){
+      iunlockput(ip);
+      return 0;
+    }
+    iunlockput(ip);
+    ip = next;
+  }
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+
+struct inode*
+namei(char *path)
+{
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+}
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+  return namex(path, 1, name);
+}
diff --git a/kernel/fs.d b/kernel/fs.d
new file mode 100644
index 0000000..9e5d3ff
--- /dev/null
+++ b/kernel/fs.d
@@ -0,0 +1,3 @@
+kernel/fs.o: kernel/fs.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/stat.h kernel/spinlock.h kernel/proc.h \
+ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/file.h
diff --git a/kernel/fs.h b/kernel/fs.h
new file mode 100644
index 0000000..139dcc9
--- /dev/null
+++ b/kernel/fs.h
@@ -0,0 +1,60 @@
+// On-disk file system format.
+// Both the kernel and user programs use this header file.
+
+
+#define ROOTINO  1   // root i-number
+#define BSIZE 1024  // block size
+
+// Disk layout:
+// [ boot block | super block | log | inode blocks |
+//                                          free bit map | data blocks]
+//
+// mkfs computes the super block and builds an initial file system. The
+// super block describes the disk layout:
+struct superblock {
+  uint magic;        // Must be FSMAGIC
+  uint size;         // Size of file system image (blocks)
+  uint nblocks;      // Number of data blocks
+  uint ninodes;      // Number of inodes.
+  uint nlog;         // Number of log blocks
+  uint logstart;     // Block number of first log block
+  uint inodestart;   // Block number of first inode block
+  uint bmapstart;    // Block number of first free map block
+};
+
+#define FSMAGIC 0x10203040
+
+#define NDIRECT 12
+#define NINDIRECT (BSIZE / sizeof(uint))
+#define MAXFILE (NDIRECT + NINDIRECT)
+
+// On-disk inode structure
+struct dinode {
+  short type;           // File type
+  short major;          // Major device number (T_DEVICE only)
+  short minor;          // Minor device number (T_DEVICE only)
+  short nlink;          // Number of links to inode in file system
+  uint size;            // Size of file (bytes)
+  uint addrs[NDIRECT+1];   // Data block addresses
+};
+
+// Inodes per block.
+#define IPB           (BSIZE / sizeof(struct dinode))
+
+// Block containing inode i
+#define IBLOCK(i, sb)     ((i) / IPB + sb.inodestart)
+
+// Bitmap bits per block
+#define BPB           (BSIZE*8)
+
+// Block of free map containing bit for block b
+#define BBLOCK(b, sb) ((b)/BPB + sb.bmapstart)
+
+// Directory is a file containing a sequence of dirent structures.
+#define DIRSIZ 14
+
+struct dirent {
+  ushort inum;
+  char name[DIRSIZ];
+};
+
diff --git a/kernel/fs.o b/kernel/fs.o
new file mode 100644
index 0000000..ee12c7f
Binary files /dev/null and b/kernel/fs.o differ
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
new file mode 100644
index 0000000..91dde01
--- /dev/null
+++ b/kernel/kalloc.c
@@ -0,0 +1,94 @@
+// Physical memory allocator, for user processes,
+// kernel stacks, page-table pages,
+// and pipe buffers. Allocates whole 4096-byte pages.
+
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "riscv.h"
+#include "defs.h"
+
+void freerange(void *pa_start, void *pa_end);
+
+extern char end[]; // first address after kernel.
+                   // defined by kernel.ld.
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} kmem;
+
+void
+kinit()
+{
+  initlock(&kmem.lock, "kmem");
+  freerange(end, (void*)PHYSTOP);
+}
+
+void
+freerange(void *pa_start, void *pa_end)
+{
+  char *p;
+  p = (char*)PGROUNDUP((uint64)pa_start);
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    kfree(p);
+}
+
+// Free the page of physical memory pointed at by pa,
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(void *pa)
+{
+  struct run *r;
+
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(pa, 1, PGSIZE);
+
+  r = (struct run*)pa;
+
+  acquire(&kmem.lock);
+  r->next = kmem.freelist;
+  kmem.freelist = r;
+  release(&kmem.lock);
+}
+
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+void *
+kalloc(void)
+{
+  struct run *r;
+
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  if(r)
+    kmem.freelist = r->next;
+  release(&kmem.lock);
+
+  if(r)
+    memset((char*)r, 5, PGSIZE); // fill with junk
+  return (void*)r;
+}
+
+uint64 count_freemem(void) {
+    struct run *r;
+    uint64 free_bytes = 0;
+
+    acquire(&kmem.lock);
+    for (r = kmem.freelist; r; r = r->next)
+        free_bytes += PGSIZE;  // Each free page is PGSIZE (4096 bytes)
+    release(&kmem.lock);
+
+    return free_bytes;
+}
diff --git a/kernel/kalloc.d b/kernel/kalloc.d
new file mode 100644
index 0000000..d495b70
--- /dev/null
+++ b/kernel/kalloc.d
@@ -0,0 +1,2 @@
+kernel/kalloc.o: kernel/kalloc.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/defs.h
diff --git a/kernel/kalloc.o b/kernel/kalloc.o
new file mode 100644
index 0000000..30a7662
Binary files /dev/null and b/kernel/kalloc.o differ
diff --git a/kernel/kernel b/kernel/kernel
new file mode 100755
index 0000000..323f7ef
Binary files /dev/null and b/kernel/kernel differ
diff --git a/kernel/kernel.asm b/kernel/kernel.asm
new file mode 100644
index 0000000..ce5ee9a
--- /dev/null
+++ b/kernel/kernel.asm
@@ -0,0 +1,12800 @@
+
+kernel/kernel:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000080000000 <_entry>:
+    80000000:	00019117          	auipc	sp,0x19
+    80000004:	cf010113          	addi	sp,sp,-784 # 80018cf0 <stack0>
+    80000008:	6505                	lui	a0,0x1
+    8000000a:	f14025f3          	csrr	a1,mhartid
+    8000000e:	0585                	addi	a1,a1,1
+    80000010:	02b50533          	mul	a0,a0,a1
+    80000014:	912a                	add	sp,sp,a0
+    80000016:	659040ef          	jal	80004e6e <start>
+
+000000008000001a <spin>:
+    8000001a:	a001                	j	8000001a <spin>
+
+000000008000001c <kfree>:
+// which normally should have been returned by a
+// call to kalloc().  (The exception is when
+// initializing the allocator; see kinit above.)
+void
+kfree(void *pa)
+{
+    8000001c:	1101                	addi	sp,sp,-32
+    8000001e:	ec06                	sd	ra,24(sp)
+    80000020:	e822                	sd	s0,16(sp)
+    80000022:	e426                	sd	s1,8(sp)
+    80000024:	e04a                	sd	s2,0(sp)
+    80000026:	1000                	addi	s0,sp,32
+  struct run *r;
+
+  if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+    80000028:	03451793          	slli	a5,a0,0x34
+    8000002c:	e7a9                	bnez	a5,80000076 <kfree+0x5a>
+    8000002e:	84aa                	mv	s1,a0
+    80000030:	00021797          	auipc	a5,0x21
+    80000034:	dc078793          	addi	a5,a5,-576 # 80020df0 <end>
+    80000038:	02f56f63          	bltu	a0,a5,80000076 <kfree+0x5a>
+    8000003c:	47c5                	li	a5,17
+    8000003e:	07ee                	slli	a5,a5,0x1b
+    80000040:	02f57b63          	bgeu	a0,a5,80000076 <kfree+0x5a>
+    panic("kfree");
+
+  // Fill with junk to catch dangling refs.
+  memset(pa, 1, PGSIZE);
+    80000044:	6605                	lui	a2,0x1
+    80000046:	4585                	li	a1,1
+    80000048:	148000ef          	jal	80000190 <memset>
+
+  r = (struct run*)pa;
+
+  acquire(&kmem.lock);
+    8000004c:	00008917          	auipc	s2,0x8
+    80000050:	a7490913          	addi	s2,s2,-1420 # 80007ac0 <kmem>
+    80000054:	854a                	mv	a0,s2
+    80000056:	07b050ef          	jal	800058d0 <acquire>
+  r->next = kmem.freelist;
+    8000005a:	01893783          	ld	a5,24(s2)
+    8000005e:	e09c                	sd	a5,0(s1)
+  kmem.freelist = r;
+    80000060:	00993c23          	sd	s1,24(s2)
+  release(&kmem.lock);
+    80000064:	854a                	mv	a0,s2
+    80000066:	103050ef          	jal	80005968 <release>
+}
+    8000006a:	60e2                	ld	ra,24(sp)
+    8000006c:	6442                	ld	s0,16(sp)
+    8000006e:	64a2                	ld	s1,8(sp)
+    80000070:	6902                	ld	s2,0(sp)
+    80000072:	6105                	addi	sp,sp,32
+    80000074:	8082                	ret
+    panic("kfree");
+    80000076:	00007517          	auipc	a0,0x7
+    8000007a:	f8a50513          	addi	a0,a0,-118 # 80007000 <etext>
+    8000007e:	524050ef          	jal	800055a2 <panic>
+
+0000000080000082 <freerange>:
+{
+    80000082:	7179                	addi	sp,sp,-48
+    80000084:	f406                	sd	ra,40(sp)
+    80000086:	f022                	sd	s0,32(sp)
+    80000088:	ec26                	sd	s1,24(sp)
+    8000008a:	1800                	addi	s0,sp,48
+  p = (char*)PGROUNDUP((uint64)pa_start);
+    8000008c:	6785                	lui	a5,0x1
+    8000008e:	fff78713          	addi	a4,a5,-1 # fff <_entry-0x7ffff001>
+    80000092:	00e504b3          	add	s1,a0,a4
+    80000096:	777d                	lui	a4,0xfffff
+    80000098:	8cf9                	and	s1,s1,a4
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    8000009a:	94be                	add	s1,s1,a5
+    8000009c:	0295e263          	bltu	a1,s1,800000c0 <freerange+0x3e>
+    800000a0:	e84a                	sd	s2,16(sp)
+    800000a2:	e44e                	sd	s3,8(sp)
+    800000a4:	e052                	sd	s4,0(sp)
+    800000a6:	892e                	mv	s2,a1
+    kfree(p);
+    800000a8:	7a7d                	lui	s4,0xfffff
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    800000aa:	6985                	lui	s3,0x1
+    kfree(p);
+    800000ac:	01448533          	add	a0,s1,s4
+    800000b0:	f6dff0ef          	jal	8000001c <kfree>
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+    800000b4:	94ce                	add	s1,s1,s3
+    800000b6:	fe997be3          	bgeu	s2,s1,800000ac <freerange+0x2a>
+    800000ba:	6942                	ld	s2,16(sp)
+    800000bc:	69a2                	ld	s3,8(sp)
+    800000be:	6a02                	ld	s4,0(sp)
+}
+    800000c0:	70a2                	ld	ra,40(sp)
+    800000c2:	7402                	ld	s0,32(sp)
+    800000c4:	64e2                	ld	s1,24(sp)
+    800000c6:	6145                	addi	sp,sp,48
+    800000c8:	8082                	ret
+
+00000000800000ca <kinit>:
+{
+    800000ca:	1141                	addi	sp,sp,-16
+    800000cc:	e406                	sd	ra,8(sp)
+    800000ce:	e022                	sd	s0,0(sp)
+    800000d0:	0800                	addi	s0,sp,16
+  initlock(&kmem.lock, "kmem");
+    800000d2:	00007597          	auipc	a1,0x7
+    800000d6:	f3e58593          	addi	a1,a1,-194 # 80007010 <etext+0x10>
+    800000da:	00008517          	auipc	a0,0x8
+    800000de:	9e650513          	addi	a0,a0,-1562 # 80007ac0 <kmem>
+    800000e2:	76e050ef          	jal	80005850 <initlock>
+  freerange(end, (void*)PHYSTOP);
+    800000e6:	45c5                	li	a1,17
+    800000e8:	05ee                	slli	a1,a1,0x1b
+    800000ea:	00021517          	auipc	a0,0x21
+    800000ee:	d0650513          	addi	a0,a0,-762 # 80020df0 <end>
+    800000f2:	f91ff0ef          	jal	80000082 <freerange>
+}
+    800000f6:	60a2                	ld	ra,8(sp)
+    800000f8:	6402                	ld	s0,0(sp)
+    800000fa:	0141                	addi	sp,sp,16
+    800000fc:	8082                	ret
+
+00000000800000fe <kalloc>:
+// Allocate one 4096-byte page of physical memory.
+// Returns a pointer that the kernel can use.
+// Returns 0 if the memory cannot be allocated.
+void *
+kalloc(void)
+{
+    800000fe:	1101                	addi	sp,sp,-32
+    80000100:	ec06                	sd	ra,24(sp)
+    80000102:	e822                	sd	s0,16(sp)
+    80000104:	e426                	sd	s1,8(sp)
+    80000106:	1000                	addi	s0,sp,32
+  struct run *r;
+
+  acquire(&kmem.lock);
+    80000108:	00008497          	auipc	s1,0x8
+    8000010c:	9b848493          	addi	s1,s1,-1608 # 80007ac0 <kmem>
+    80000110:	8526                	mv	a0,s1
+    80000112:	7be050ef          	jal	800058d0 <acquire>
+  r = kmem.freelist;
+    80000116:	6c84                	ld	s1,24(s1)
+  if(r)
+    80000118:	c485                	beqz	s1,80000140 <kalloc+0x42>
+    kmem.freelist = r->next;
+    8000011a:	609c                	ld	a5,0(s1)
+    8000011c:	00008517          	auipc	a0,0x8
+    80000120:	9a450513          	addi	a0,a0,-1628 # 80007ac0 <kmem>
+    80000124:	ed1c                	sd	a5,24(a0)
+  release(&kmem.lock);
+    80000126:	043050ef          	jal	80005968 <release>
+
+  if(r)
+    memset((char*)r, 5, PGSIZE); // fill with junk
+    8000012a:	6605                	lui	a2,0x1
+    8000012c:	4595                	li	a1,5
+    8000012e:	8526                	mv	a0,s1
+    80000130:	060000ef          	jal	80000190 <memset>
+  return (void*)r;
+}
+    80000134:	8526                	mv	a0,s1
+    80000136:	60e2                	ld	ra,24(sp)
+    80000138:	6442                	ld	s0,16(sp)
+    8000013a:	64a2                	ld	s1,8(sp)
+    8000013c:	6105                	addi	sp,sp,32
+    8000013e:	8082                	ret
+  release(&kmem.lock);
+    80000140:	00008517          	auipc	a0,0x8
+    80000144:	98050513          	addi	a0,a0,-1664 # 80007ac0 <kmem>
+    80000148:	021050ef          	jal	80005968 <release>
+  if(r)
+    8000014c:	b7e5                	j	80000134 <kalloc+0x36>
+
+000000008000014e <count_freemem>:
+
+uint64 count_freemem(void) {
+    8000014e:	1101                	addi	sp,sp,-32
+    80000150:	ec06                	sd	ra,24(sp)
+    80000152:	e822                	sd	s0,16(sp)
+    80000154:	e426                	sd	s1,8(sp)
+    80000156:	1000                	addi	s0,sp,32
+    struct run *r;
+    uint64 free_bytes = 0;
+
+    acquire(&kmem.lock);
+    80000158:	00008497          	auipc	s1,0x8
+    8000015c:	96848493          	addi	s1,s1,-1688 # 80007ac0 <kmem>
+    80000160:	8526                	mv	a0,s1
+    80000162:	76e050ef          	jal	800058d0 <acquire>
+    for (r = kmem.freelist; r; r = r->next)
+    80000166:	6c9c                	ld	a5,24(s1)
+    80000168:	c395                	beqz	a5,8000018c <count_freemem+0x3e>
+    uint64 free_bytes = 0;
+    8000016a:	4481                	li	s1,0
+        free_bytes += PGSIZE;  // Each free page is PGSIZE (4096 bytes)
+    8000016c:	6705                	lui	a4,0x1
+    8000016e:	94ba                	add	s1,s1,a4
+    for (r = kmem.freelist; r; r = r->next)
+    80000170:	639c                	ld	a5,0(a5)
+    80000172:	fff5                	bnez	a5,8000016e <count_freemem+0x20>
+    release(&kmem.lock);
+    80000174:	00008517          	auipc	a0,0x8
+    80000178:	94c50513          	addi	a0,a0,-1716 # 80007ac0 <kmem>
+    8000017c:	7ec050ef          	jal	80005968 <release>
+
+    return free_bytes;
+}
+    80000180:	8526                	mv	a0,s1
+    80000182:	60e2                	ld	ra,24(sp)
+    80000184:	6442                	ld	s0,16(sp)
+    80000186:	64a2                	ld	s1,8(sp)
+    80000188:	6105                	addi	sp,sp,32
+    8000018a:	8082                	ret
+    uint64 free_bytes = 0;
+    8000018c:	4481                	li	s1,0
+    8000018e:	b7dd                	j	80000174 <count_freemem+0x26>
+
+0000000080000190 <memset>:
+#include "types.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+    80000190:	1141                	addi	sp,sp,-16
+    80000192:	e422                	sd	s0,8(sp)
+    80000194:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    80000196:	ca19                	beqz	a2,800001ac <memset+0x1c>
+    80000198:	87aa                	mv	a5,a0
+    8000019a:	1602                	slli	a2,a2,0x20
+    8000019c:	9201                	srli	a2,a2,0x20
+    8000019e:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+    800001a2:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+    800001a6:	0785                	addi	a5,a5,1
+    800001a8:	fee79de3          	bne	a5,a4,800001a2 <memset+0x12>
+  }
+  return dst;
+}
+    800001ac:	6422                	ld	s0,8(sp)
+    800001ae:	0141                	addi	sp,sp,16
+    800001b0:	8082                	ret
+
+00000000800001b2 <memcmp>:
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+    800001b2:	1141                	addi	sp,sp,-16
+    800001b4:	e422                	sd	s0,8(sp)
+    800001b6:	0800                	addi	s0,sp,16
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    800001b8:	ca05                	beqz	a2,800001e8 <memcmp+0x36>
+    800001ba:	fff6069b          	addiw	a3,a2,-1 # fff <_entry-0x7ffff001>
+    800001be:	1682                	slli	a3,a3,0x20
+    800001c0:	9281                	srli	a3,a3,0x20
+    800001c2:	0685                	addi	a3,a3,1
+    800001c4:	96aa                	add	a3,a3,a0
+    if(*s1 != *s2)
+    800001c6:	00054783          	lbu	a5,0(a0)
+    800001ca:	0005c703          	lbu	a4,0(a1)
+    800001ce:	00e79863          	bne	a5,a4,800001de <memcmp+0x2c>
+      return *s1 - *s2;
+    s1++, s2++;
+    800001d2:	0505                	addi	a0,a0,1
+    800001d4:	0585                	addi	a1,a1,1
+  while(n-- > 0){
+    800001d6:	fed518e3          	bne	a0,a3,800001c6 <memcmp+0x14>
+  }
+
+  return 0;
+    800001da:	4501                	li	a0,0
+    800001dc:	a019                	j	800001e2 <memcmp+0x30>
+      return *s1 - *s2;
+    800001de:	40e7853b          	subw	a0,a5,a4
+}
+    800001e2:	6422                	ld	s0,8(sp)
+    800001e4:	0141                	addi	sp,sp,16
+    800001e6:	8082                	ret
+  return 0;
+    800001e8:	4501                	li	a0,0
+    800001ea:	bfe5                	j	800001e2 <memcmp+0x30>
+
+00000000800001ec <memmove>:
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+    800001ec:	1141                	addi	sp,sp,-16
+    800001ee:	e422                	sd	s0,8(sp)
+    800001f0:	0800                	addi	s0,sp,16
+  const char *s;
+  char *d;
+
+  if(n == 0)
+    800001f2:	c205                	beqz	a2,80000212 <memmove+0x26>
+    return dst;
+  
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    800001f4:	02a5e263          	bltu	a1,a0,80000218 <memmove+0x2c>
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+    800001f8:	1602                	slli	a2,a2,0x20
+    800001fa:	9201                	srli	a2,a2,0x20
+    800001fc:	00c587b3          	add	a5,a1,a2
+{
+    80000200:	872a                	mv	a4,a0
+      *d++ = *s++;
+    80000202:	0585                	addi	a1,a1,1
+    80000204:	0705                	addi	a4,a4,1 # 1001 <_entry-0x7fffefff>
+    80000206:	fff5c683          	lbu	a3,-1(a1)
+    8000020a:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+    8000020e:	feb79ae3          	bne	a5,a1,80000202 <memmove+0x16>
+
+  return dst;
+}
+    80000212:	6422                	ld	s0,8(sp)
+    80000214:	0141                	addi	sp,sp,16
+    80000216:	8082                	ret
+  if(s < d && s + n > d){
+    80000218:	02061693          	slli	a3,a2,0x20
+    8000021c:	9281                	srli	a3,a3,0x20
+    8000021e:	00d58733          	add	a4,a1,a3
+    80000222:	fce57be3          	bgeu	a0,a4,800001f8 <memmove+0xc>
+    d += n;
+    80000226:	96aa                	add	a3,a3,a0
+    while(n-- > 0)
+    80000228:	fff6079b          	addiw	a5,a2,-1
+    8000022c:	1782                	slli	a5,a5,0x20
+    8000022e:	9381                	srli	a5,a5,0x20
+    80000230:	fff7c793          	not	a5,a5
+    80000234:	97ba                	add	a5,a5,a4
+      *--d = *--s;
+    80000236:	177d                	addi	a4,a4,-1
+    80000238:	16fd                	addi	a3,a3,-1
+    8000023a:	00074603          	lbu	a2,0(a4)
+    8000023e:	00c68023          	sb	a2,0(a3)
+    while(n-- > 0)
+    80000242:	fef71ae3          	bne	a4,a5,80000236 <memmove+0x4a>
+    80000246:	b7f1                	j	80000212 <memmove+0x26>
+
+0000000080000248 <memcpy>:
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+    80000248:	1141                	addi	sp,sp,-16
+    8000024a:	e406                	sd	ra,8(sp)
+    8000024c:	e022                	sd	s0,0(sp)
+    8000024e:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+    80000250:	f9dff0ef          	jal	800001ec <memmove>
+}
+    80000254:	60a2                	ld	ra,8(sp)
+    80000256:	6402                	ld	s0,0(sp)
+    80000258:	0141                	addi	sp,sp,16
+    8000025a:	8082                	ret
+
+000000008000025c <strncmp>:
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+    8000025c:	1141                	addi	sp,sp,-16
+    8000025e:	e422                	sd	s0,8(sp)
+    80000260:	0800                	addi	s0,sp,16
+  while(n > 0 && *p && *p == *q)
+    80000262:	ce11                	beqz	a2,8000027e <strncmp+0x22>
+    80000264:	00054783          	lbu	a5,0(a0)
+    80000268:	cf89                	beqz	a5,80000282 <strncmp+0x26>
+    8000026a:	0005c703          	lbu	a4,0(a1)
+    8000026e:	00f71a63          	bne	a4,a5,80000282 <strncmp+0x26>
+    n--, p++, q++;
+    80000272:	367d                	addiw	a2,a2,-1
+    80000274:	0505                	addi	a0,a0,1
+    80000276:	0585                	addi	a1,a1,1
+  while(n > 0 && *p && *p == *q)
+    80000278:	f675                	bnez	a2,80000264 <strncmp+0x8>
+  if(n == 0)
+    return 0;
+    8000027a:	4501                	li	a0,0
+    8000027c:	a801                	j	8000028c <strncmp+0x30>
+    8000027e:	4501                	li	a0,0
+    80000280:	a031                	j	8000028c <strncmp+0x30>
+  return (uchar)*p - (uchar)*q;
+    80000282:	00054503          	lbu	a0,0(a0)
+    80000286:	0005c783          	lbu	a5,0(a1)
+    8000028a:	9d1d                	subw	a0,a0,a5
+}
+    8000028c:	6422                	ld	s0,8(sp)
+    8000028e:	0141                	addi	sp,sp,16
+    80000290:	8082                	ret
+
+0000000080000292 <strncpy>:
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+    80000292:	1141                	addi	sp,sp,-16
+    80000294:	e422                	sd	s0,8(sp)
+    80000296:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    80000298:	87aa                	mv	a5,a0
+    8000029a:	86b2                	mv	a3,a2
+    8000029c:	367d                	addiw	a2,a2,-1
+    8000029e:	02d05563          	blez	a3,800002c8 <strncpy+0x36>
+    800002a2:	0785                	addi	a5,a5,1
+    800002a4:	0005c703          	lbu	a4,0(a1)
+    800002a8:	fee78fa3          	sb	a4,-1(a5)
+    800002ac:	0585                	addi	a1,a1,1
+    800002ae:	f775                	bnez	a4,8000029a <strncpy+0x8>
+    ;
+  while(n-- > 0)
+    800002b0:	873e                	mv	a4,a5
+    800002b2:	9fb5                	addw	a5,a5,a3
+    800002b4:	37fd                	addiw	a5,a5,-1
+    800002b6:	00c05963          	blez	a2,800002c8 <strncpy+0x36>
+    *s++ = 0;
+    800002ba:	0705                	addi	a4,a4,1
+    800002bc:	fe070fa3          	sb	zero,-1(a4)
+  while(n-- > 0)
+    800002c0:	40e786bb          	subw	a3,a5,a4
+    800002c4:	fed04be3          	bgtz	a3,800002ba <strncpy+0x28>
+  return os;
+}
+    800002c8:	6422                	ld	s0,8(sp)
+    800002ca:	0141                	addi	sp,sp,16
+    800002cc:	8082                	ret
+
+00000000800002ce <safestrcpy>:
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+    800002ce:	1141                	addi	sp,sp,-16
+    800002d0:	e422                	sd	s0,8(sp)
+    800002d2:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  if(n <= 0)
+    800002d4:	02c05363          	blez	a2,800002fa <safestrcpy+0x2c>
+    800002d8:	fff6069b          	addiw	a3,a2,-1
+    800002dc:	1682                	slli	a3,a3,0x20
+    800002de:	9281                	srli	a3,a3,0x20
+    800002e0:	96ae                	add	a3,a3,a1
+    800002e2:	87aa                	mv	a5,a0
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+    800002e4:	00d58963          	beq	a1,a3,800002f6 <safestrcpy+0x28>
+    800002e8:	0585                	addi	a1,a1,1
+    800002ea:	0785                	addi	a5,a5,1
+    800002ec:	fff5c703          	lbu	a4,-1(a1)
+    800002f0:	fee78fa3          	sb	a4,-1(a5)
+    800002f4:	fb65                	bnez	a4,800002e4 <safestrcpy+0x16>
+    ;
+  *s = 0;
+    800002f6:	00078023          	sb	zero,0(a5)
+  return os;
+}
+    800002fa:	6422                	ld	s0,8(sp)
+    800002fc:	0141                	addi	sp,sp,16
+    800002fe:	8082                	ret
+
+0000000080000300 <strlen>:
+
+int
+strlen(const char *s)
+{
+    80000300:	1141                	addi	sp,sp,-16
+    80000302:	e422                	sd	s0,8(sp)
+    80000304:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+    80000306:	00054783          	lbu	a5,0(a0)
+    8000030a:	cf91                	beqz	a5,80000326 <strlen+0x26>
+    8000030c:	0505                	addi	a0,a0,1
+    8000030e:	87aa                	mv	a5,a0
+    80000310:	86be                	mv	a3,a5
+    80000312:	0785                	addi	a5,a5,1
+    80000314:	fff7c703          	lbu	a4,-1(a5)
+    80000318:	ff65                	bnez	a4,80000310 <strlen+0x10>
+    8000031a:	40a6853b          	subw	a0,a3,a0
+    8000031e:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+    80000320:	6422                	ld	s0,8(sp)
+    80000322:	0141                	addi	sp,sp,16
+    80000324:	8082                	ret
+  for(n = 0; s[n]; n++)
+    80000326:	4501                	li	a0,0
+    80000328:	bfe5                	j	80000320 <strlen+0x20>
+
+000000008000032a <main>:
+volatile static int started = 0;
+
+// start() jumps here in supervisor mode on all CPUs.
+void
+main()
+{
+    8000032a:	1141                	addi	sp,sp,-16
+    8000032c:	e406                	sd	ra,8(sp)
+    8000032e:	e022                	sd	s0,0(sp)
+    80000330:	0800                	addi	s0,sp,16
+  if(cpuid() == 0){
+    80000332:	24b000ef          	jal	80000d7c <cpuid>
+    virtio_disk_init(); // emulated hard disk
+    userinit();      // first user process
+    __sync_synchronize();
+    started = 1;
+  } else {
+    while(started == 0)
+    80000336:	00007717          	auipc	a4,0x7
+    8000033a:	75a70713          	addi	a4,a4,1882 # 80007a90 <started>
+  if(cpuid() == 0){
+    8000033e:	c51d                	beqz	a0,8000036c <main+0x42>
+    while(started == 0)
+    80000340:	431c                	lw	a5,0(a4)
+    80000342:	2781                	sext.w	a5,a5
+    80000344:	dff5                	beqz	a5,80000340 <main+0x16>
+      ;
+    __sync_synchronize();
+    80000346:	0ff0000f          	fence
+    printf("hart %d starting\n", cpuid());
+    8000034a:	233000ef          	jal	80000d7c <cpuid>
+    8000034e:	85aa                	mv	a1,a0
+    80000350:	00007517          	auipc	a0,0x7
+    80000354:	ce850513          	addi	a0,a0,-792 # 80007038 <etext+0x38>
+    80000358:	779040ef          	jal	800052d0 <printf>
+    kvminithart();    // turn on paging
+    8000035c:	080000ef          	jal	800003dc <kvminithart>
+    trapinithart();   // install kernel trap vector
+    80000360:	58e010ef          	jal	800018ee <trapinithart>
+    plicinithart();   // ask PLIC for device interrupts
+    80000364:	524040ef          	jal	80004888 <plicinithart>
+  }
+
+  scheduler();        
+    80000368:	67d000ef          	jal	800011e4 <scheduler>
+    consoleinit();
+    8000036c:	68f040ef          	jal	800051fa <consoleinit>
+    printfinit();
+    80000370:	26c050ef          	jal	800055dc <printfinit>
+    printf("\n");
+    80000374:	00007517          	auipc	a0,0x7
+    80000378:	ca450513          	addi	a0,a0,-860 # 80007018 <etext+0x18>
+    8000037c:	755040ef          	jal	800052d0 <printf>
+    printf("xv6 kernel is booting\n");
+    80000380:	00007517          	auipc	a0,0x7
+    80000384:	ca050513          	addi	a0,a0,-864 # 80007020 <etext+0x20>
+    80000388:	749040ef          	jal	800052d0 <printf>
+    printf("\n");
+    8000038c:	00007517          	auipc	a0,0x7
+    80000390:	c8c50513          	addi	a0,a0,-884 # 80007018 <etext+0x18>
+    80000394:	73d040ef          	jal	800052d0 <printf>
+    kinit();         // physical page allocator
+    80000398:	d33ff0ef          	jal	800000ca <kinit>
+    kvminit();       // create kernel page table
+    8000039c:	2ca000ef          	jal	80000666 <kvminit>
+    kvminithart();   // turn on paging
+    800003a0:	03c000ef          	jal	800003dc <kvminithart>
+    procinit();      // process table
+    800003a4:	123000ef          	jal	80000cc6 <procinit>
+    trapinit();      // trap vectors
+    800003a8:	522010ef          	jal	800018ca <trapinit>
+    trapinithart();  // install kernel trap vector
+    800003ac:	542010ef          	jal	800018ee <trapinithart>
+    plicinit();      // set up interrupt controller
+    800003b0:	4be040ef          	jal	8000486e <plicinit>
+    plicinithart();  // ask PLIC for device interrupts
+    800003b4:	4d4040ef          	jal	80004888 <plicinithart>
+    binit();         // buffer cache
+    800003b8:	425010ef          	jal	80001fdc <binit>
+    iinit();         // inode table
+    800003bc:	216020ef          	jal	800025d2 <iinit>
+    fileinit();      // file table
+    800003c0:	7c3020ef          	jal	80003382 <fileinit>
+    virtio_disk_init(); // emulated hard disk
+    800003c4:	5b4040ef          	jal	80004978 <virtio_disk_init>
+    userinit();      // first user process
+    800003c8:	449000ef          	jal	80001010 <userinit>
+    __sync_synchronize();
+    800003cc:	0ff0000f          	fence
+    started = 1;
+    800003d0:	4785                	li	a5,1
+    800003d2:	00007717          	auipc	a4,0x7
+    800003d6:	6af72f23          	sw	a5,1726(a4) # 80007a90 <started>
+    800003da:	b779                	j	80000368 <main+0x3e>
+
+00000000800003dc <kvminithart>:
+
+// Switch h/w page table register to the kernel's page table,
+// and enable paging.
+void
+kvminithart()
+{
+    800003dc:	1141                	addi	sp,sp,-16
+    800003de:	e422                	sd	s0,8(sp)
+    800003e0:	0800                	addi	s0,sp,16
+// flush the TLB.
+static inline void
+sfence_vma()
+{
+  // the zero, zero means flush all TLB entries.
+  asm volatile("sfence.vma zero, zero");
+    800003e2:	12000073          	sfence.vma
+  // wait for any previous writes to the page table memory to finish.
+  sfence_vma();
+
+  w_satp(MAKE_SATP(kernel_pagetable));
+    800003e6:	00007797          	auipc	a5,0x7
+    800003ea:	6b27b783          	ld	a5,1714(a5) # 80007a98 <kernel_pagetable>
+    800003ee:	83b1                	srli	a5,a5,0xc
+    800003f0:	577d                	li	a4,-1
+    800003f2:	177e                	slli	a4,a4,0x3f
+    800003f4:	8fd9                	or	a5,a5,a4
+  asm volatile("csrw satp, %0" : : "r" (x));
+    800003f6:	18079073          	csrw	satp,a5
+  asm volatile("sfence.vma zero, zero");
+    800003fa:	12000073          	sfence.vma
+
+  // flush stale entries from the TLB.
+  sfence_vma();
+}
+    800003fe:	6422                	ld	s0,8(sp)
+    80000400:	0141                	addi	sp,sp,16
+    80000402:	8082                	ret
+
+0000000080000404 <walk>:
+//   21..29 -- 9 bits of level-1 index.
+//   12..20 -- 9 bits of level-0 index.
+//    0..11 -- 12 bits of byte offset within the page.
+pte_t *
+walk(pagetable_t pagetable, uint64 va, int alloc)
+{
+    80000404:	7139                	addi	sp,sp,-64
+    80000406:	fc06                	sd	ra,56(sp)
+    80000408:	f822                	sd	s0,48(sp)
+    8000040a:	f426                	sd	s1,40(sp)
+    8000040c:	f04a                	sd	s2,32(sp)
+    8000040e:	ec4e                	sd	s3,24(sp)
+    80000410:	e852                	sd	s4,16(sp)
+    80000412:	e456                	sd	s5,8(sp)
+    80000414:	e05a                	sd	s6,0(sp)
+    80000416:	0080                	addi	s0,sp,64
+    80000418:	84aa                	mv	s1,a0
+    8000041a:	89ae                	mv	s3,a1
+    8000041c:	8ab2                	mv	s5,a2
+  if(va >= MAXVA)
+    8000041e:	57fd                	li	a5,-1
+    80000420:	83e9                	srli	a5,a5,0x1a
+    80000422:	4a79                	li	s4,30
+    panic("walk");
+
+  for(int level = 2; level > 0; level--) {
+    80000424:	4b31                	li	s6,12
+  if(va >= MAXVA)
+    80000426:	02b7fc63          	bgeu	a5,a1,8000045e <walk+0x5a>
+    panic("walk");
+    8000042a:	00007517          	auipc	a0,0x7
+    8000042e:	c2650513          	addi	a0,a0,-986 # 80007050 <etext+0x50>
+    80000432:	170050ef          	jal	800055a2 <panic>
+    pte_t *pte = &pagetable[PX(level, va)];
+    if(*pte & PTE_V) {
+      pagetable = (pagetable_t)PTE2PA(*pte);
+    } else {
+      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
+    80000436:	060a8263          	beqz	s5,8000049a <walk+0x96>
+    8000043a:	cc5ff0ef          	jal	800000fe <kalloc>
+    8000043e:	84aa                	mv	s1,a0
+    80000440:	c139                	beqz	a0,80000486 <walk+0x82>
+        return 0;
+      memset(pagetable, 0, PGSIZE);
+    80000442:	6605                	lui	a2,0x1
+    80000444:	4581                	li	a1,0
+    80000446:	d4bff0ef          	jal	80000190 <memset>
+      *pte = PA2PTE(pagetable) | PTE_V;
+    8000044a:	00c4d793          	srli	a5,s1,0xc
+    8000044e:	07aa                	slli	a5,a5,0xa
+    80000450:	0017e793          	ori	a5,a5,1
+    80000454:	00f93023          	sd	a5,0(s2)
+  for(int level = 2; level > 0; level--) {
+    80000458:	3a5d                	addiw	s4,s4,-9 # ffffffffffffeff7 <end+0xffffffff7ffde207>
+    8000045a:	036a0063          	beq	s4,s6,8000047a <walk+0x76>
+    pte_t *pte = &pagetable[PX(level, va)];
+    8000045e:	0149d933          	srl	s2,s3,s4
+    80000462:	1ff97913          	andi	s2,s2,511
+    80000466:	090e                	slli	s2,s2,0x3
+    80000468:	9926                	add	s2,s2,s1
+    if(*pte & PTE_V) {
+    8000046a:	00093483          	ld	s1,0(s2)
+    8000046e:	0014f793          	andi	a5,s1,1
+    80000472:	d3f1                	beqz	a5,80000436 <walk+0x32>
+      pagetable = (pagetable_t)PTE2PA(*pte);
+    80000474:	80a9                	srli	s1,s1,0xa
+    80000476:	04b2                	slli	s1,s1,0xc
+    80000478:	b7c5                	j	80000458 <walk+0x54>
+    }
+  }
+  return &pagetable[PX(0, va)];
+    8000047a:	00c9d513          	srli	a0,s3,0xc
+    8000047e:	1ff57513          	andi	a0,a0,511
+    80000482:	050e                	slli	a0,a0,0x3
+    80000484:	9526                	add	a0,a0,s1
+}
+    80000486:	70e2                	ld	ra,56(sp)
+    80000488:	7442                	ld	s0,48(sp)
+    8000048a:	74a2                	ld	s1,40(sp)
+    8000048c:	7902                	ld	s2,32(sp)
+    8000048e:	69e2                	ld	s3,24(sp)
+    80000490:	6a42                	ld	s4,16(sp)
+    80000492:	6aa2                	ld	s5,8(sp)
+    80000494:	6b02                	ld	s6,0(sp)
+    80000496:	6121                	addi	sp,sp,64
+    80000498:	8082                	ret
+        return 0;
+    8000049a:	4501                	li	a0,0
+    8000049c:	b7ed                	j	80000486 <walk+0x82>
+
+000000008000049e <walkaddr>:
+walkaddr(pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  uint64 pa;
+
+  if(va >= MAXVA)
+    8000049e:	57fd                	li	a5,-1
+    800004a0:	83e9                	srli	a5,a5,0x1a
+    800004a2:	00b7f463          	bgeu	a5,a1,800004aa <walkaddr+0xc>
+    return 0;
+    800004a6:	4501                	li	a0,0
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  pa = PTE2PA(*pte);
+  return pa;
+}
+    800004a8:	8082                	ret
+{
+    800004aa:	1141                	addi	sp,sp,-16
+    800004ac:	e406                	sd	ra,8(sp)
+    800004ae:	e022                	sd	s0,0(sp)
+    800004b0:	0800                	addi	s0,sp,16
+  pte = walk(pagetable, va, 0);
+    800004b2:	4601                	li	a2,0
+    800004b4:	f51ff0ef          	jal	80000404 <walk>
+  if(pte == 0)
+    800004b8:	c105                	beqz	a0,800004d8 <walkaddr+0x3a>
+  if((*pte & PTE_V) == 0)
+    800004ba:	611c                	ld	a5,0(a0)
+  if((*pte & PTE_U) == 0)
+    800004bc:	0117f693          	andi	a3,a5,17
+    800004c0:	4745                	li	a4,17
+    return 0;
+    800004c2:	4501                	li	a0,0
+  if((*pte & PTE_U) == 0)
+    800004c4:	00e68663          	beq	a3,a4,800004d0 <walkaddr+0x32>
+}
+    800004c8:	60a2                	ld	ra,8(sp)
+    800004ca:	6402                	ld	s0,0(sp)
+    800004cc:	0141                	addi	sp,sp,16
+    800004ce:	8082                	ret
+  pa = PTE2PA(*pte);
+    800004d0:	83a9                	srli	a5,a5,0xa
+    800004d2:	00c79513          	slli	a0,a5,0xc
+  return pa;
+    800004d6:	bfcd                	j	800004c8 <walkaddr+0x2a>
+    return 0;
+    800004d8:	4501                	li	a0,0
+    800004da:	b7fd                	j	800004c8 <walkaddr+0x2a>
+
+00000000800004dc <mappages>:
+// va and size MUST be page-aligned.
+// Returns 0 on success, -1 if walk() couldn't
+// allocate a needed page-table page.
+int
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+{
+    800004dc:	715d                	addi	sp,sp,-80
+    800004de:	e486                	sd	ra,72(sp)
+    800004e0:	e0a2                	sd	s0,64(sp)
+    800004e2:	fc26                	sd	s1,56(sp)
+    800004e4:	f84a                	sd	s2,48(sp)
+    800004e6:	f44e                	sd	s3,40(sp)
+    800004e8:	f052                	sd	s4,32(sp)
+    800004ea:	ec56                	sd	s5,24(sp)
+    800004ec:	e85a                	sd	s6,16(sp)
+    800004ee:	e45e                	sd	s7,8(sp)
+    800004f0:	0880                	addi	s0,sp,80
+  uint64 a, last;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    800004f2:	03459793          	slli	a5,a1,0x34
+    800004f6:	e7a9                	bnez	a5,80000540 <mappages+0x64>
+    800004f8:	8aaa                	mv	s5,a0
+    800004fa:	8b3a                	mv	s6,a4
+    panic("mappages: va not aligned");
+
+  if((size % PGSIZE) != 0)
+    800004fc:	03461793          	slli	a5,a2,0x34
+    80000500:	e7b1                	bnez	a5,8000054c <mappages+0x70>
+    panic("mappages: size not aligned");
+
+  if(size == 0)
+    80000502:	ca39                	beqz	a2,80000558 <mappages+0x7c>
+    panic("mappages: size");
+  
+  a = va;
+  last = va + size - PGSIZE;
+    80000504:	77fd                	lui	a5,0xfffff
+    80000506:	963e                	add	a2,a2,a5
+    80000508:	00b609b3          	add	s3,a2,a1
+  a = va;
+    8000050c:	892e                	mv	s2,a1
+    8000050e:	40b68a33          	sub	s4,a3,a1
+    if(*pte & PTE_V)
+      panic("mappages: remap");
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    80000512:	6b85                	lui	s7,0x1
+    80000514:	014904b3          	add	s1,s2,s4
+    if((pte = walk(pagetable, a, 1)) == 0)
+    80000518:	4605                	li	a2,1
+    8000051a:	85ca                	mv	a1,s2
+    8000051c:	8556                	mv	a0,s5
+    8000051e:	ee7ff0ef          	jal	80000404 <walk>
+    80000522:	c539                	beqz	a0,80000570 <mappages+0x94>
+    if(*pte & PTE_V)
+    80000524:	611c                	ld	a5,0(a0)
+    80000526:	8b85                	andi	a5,a5,1
+    80000528:	ef95                	bnez	a5,80000564 <mappages+0x88>
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    8000052a:	80b1                	srli	s1,s1,0xc
+    8000052c:	04aa                	slli	s1,s1,0xa
+    8000052e:	0164e4b3          	or	s1,s1,s6
+    80000532:	0014e493          	ori	s1,s1,1
+    80000536:	e104                	sd	s1,0(a0)
+    if(a == last)
+    80000538:	05390863          	beq	s2,s3,80000588 <mappages+0xac>
+    a += PGSIZE;
+    8000053c:	995e                	add	s2,s2,s7
+    if((pte = walk(pagetable, a, 1)) == 0)
+    8000053e:	bfd9                	j	80000514 <mappages+0x38>
+    panic("mappages: va not aligned");
+    80000540:	00007517          	auipc	a0,0x7
+    80000544:	b1850513          	addi	a0,a0,-1256 # 80007058 <etext+0x58>
+    80000548:	05a050ef          	jal	800055a2 <panic>
+    panic("mappages: size not aligned");
+    8000054c:	00007517          	auipc	a0,0x7
+    80000550:	b2c50513          	addi	a0,a0,-1236 # 80007078 <etext+0x78>
+    80000554:	04e050ef          	jal	800055a2 <panic>
+    panic("mappages: size");
+    80000558:	00007517          	auipc	a0,0x7
+    8000055c:	b4050513          	addi	a0,a0,-1216 # 80007098 <etext+0x98>
+    80000560:	042050ef          	jal	800055a2 <panic>
+      panic("mappages: remap");
+    80000564:	00007517          	auipc	a0,0x7
+    80000568:	b4450513          	addi	a0,a0,-1212 # 800070a8 <etext+0xa8>
+    8000056c:	036050ef          	jal	800055a2 <panic>
+      return -1;
+    80000570:	557d                	li	a0,-1
+    pa += PGSIZE;
+  }
+  return 0;
+}
+    80000572:	60a6                	ld	ra,72(sp)
+    80000574:	6406                	ld	s0,64(sp)
+    80000576:	74e2                	ld	s1,56(sp)
+    80000578:	7942                	ld	s2,48(sp)
+    8000057a:	79a2                	ld	s3,40(sp)
+    8000057c:	7a02                	ld	s4,32(sp)
+    8000057e:	6ae2                	ld	s5,24(sp)
+    80000580:	6b42                	ld	s6,16(sp)
+    80000582:	6ba2                	ld	s7,8(sp)
+    80000584:	6161                	addi	sp,sp,80
+    80000586:	8082                	ret
+  return 0;
+    80000588:	4501                	li	a0,0
+    8000058a:	b7e5                	j	80000572 <mappages+0x96>
+
+000000008000058c <kvmmap>:
+{
+    8000058c:	1141                	addi	sp,sp,-16
+    8000058e:	e406                	sd	ra,8(sp)
+    80000590:	e022                	sd	s0,0(sp)
+    80000592:	0800                	addi	s0,sp,16
+    80000594:	87b6                	mv	a5,a3
+  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
+    80000596:	86b2                	mv	a3,a2
+    80000598:	863e                	mv	a2,a5
+    8000059a:	f43ff0ef          	jal	800004dc <mappages>
+    8000059e:	e509                	bnez	a0,800005a8 <kvmmap+0x1c>
+}
+    800005a0:	60a2                	ld	ra,8(sp)
+    800005a2:	6402                	ld	s0,0(sp)
+    800005a4:	0141                	addi	sp,sp,16
+    800005a6:	8082                	ret
+    panic("kvmmap");
+    800005a8:	00007517          	auipc	a0,0x7
+    800005ac:	b1050513          	addi	a0,a0,-1264 # 800070b8 <etext+0xb8>
+    800005b0:	7f3040ef          	jal	800055a2 <panic>
+
+00000000800005b4 <kvmmake>:
+{
+    800005b4:	1101                	addi	sp,sp,-32
+    800005b6:	ec06                	sd	ra,24(sp)
+    800005b8:	e822                	sd	s0,16(sp)
+    800005ba:	e426                	sd	s1,8(sp)
+    800005bc:	e04a                	sd	s2,0(sp)
+    800005be:	1000                	addi	s0,sp,32
+  kpgtbl = (pagetable_t) kalloc();
+    800005c0:	b3fff0ef          	jal	800000fe <kalloc>
+    800005c4:	84aa                	mv	s1,a0
+  memset(kpgtbl, 0, PGSIZE);
+    800005c6:	6605                	lui	a2,0x1
+    800005c8:	4581                	li	a1,0
+    800005ca:	bc7ff0ef          	jal	80000190 <memset>
+  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+    800005ce:	4719                	li	a4,6
+    800005d0:	6685                	lui	a3,0x1
+    800005d2:	10000637          	lui	a2,0x10000
+    800005d6:	100005b7          	lui	a1,0x10000
+    800005da:	8526                	mv	a0,s1
+    800005dc:	fb1ff0ef          	jal	8000058c <kvmmap>
+  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+    800005e0:	4719                	li	a4,6
+    800005e2:	6685                	lui	a3,0x1
+    800005e4:	10001637          	lui	a2,0x10001
+    800005e8:	100015b7          	lui	a1,0x10001
+    800005ec:	8526                	mv	a0,s1
+    800005ee:	f9fff0ef          	jal	8000058c <kvmmap>
+  kvmmap(kpgtbl, PLIC, PLIC, 0x4000000, PTE_R | PTE_W);
+    800005f2:	4719                	li	a4,6
+    800005f4:	040006b7          	lui	a3,0x4000
+    800005f8:	0c000637          	lui	a2,0xc000
+    800005fc:	0c0005b7          	lui	a1,0xc000
+    80000600:	8526                	mv	a0,s1
+    80000602:	f8bff0ef          	jal	8000058c <kvmmap>
+  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+    80000606:	00007917          	auipc	s2,0x7
+    8000060a:	9fa90913          	addi	s2,s2,-1542 # 80007000 <etext>
+    8000060e:	4729                	li	a4,10
+    80000610:	80007697          	auipc	a3,0x80007
+    80000614:	9f068693          	addi	a3,a3,-1552 # 7000 <_entry-0x7fff9000>
+    80000618:	4605                	li	a2,1
+    8000061a:	067e                	slli	a2,a2,0x1f
+    8000061c:	85b2                	mv	a1,a2
+    8000061e:	8526                	mv	a0,s1
+    80000620:	f6dff0ef          	jal	8000058c <kvmmap>
+  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+    80000624:	46c5                	li	a3,17
+    80000626:	06ee                	slli	a3,a3,0x1b
+    80000628:	4719                	li	a4,6
+    8000062a:	412686b3          	sub	a3,a3,s2
+    8000062e:	864a                	mv	a2,s2
+    80000630:	85ca                	mv	a1,s2
+    80000632:	8526                	mv	a0,s1
+    80000634:	f59ff0ef          	jal	8000058c <kvmmap>
+  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+    80000638:	4729                	li	a4,10
+    8000063a:	6685                	lui	a3,0x1
+    8000063c:	00006617          	auipc	a2,0x6
+    80000640:	9c460613          	addi	a2,a2,-1596 # 80006000 <_trampoline>
+    80000644:	040005b7          	lui	a1,0x4000
+    80000648:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    8000064a:	05b2                	slli	a1,a1,0xc
+    8000064c:	8526                	mv	a0,s1
+    8000064e:	f3fff0ef          	jal	8000058c <kvmmap>
+  proc_mapstacks(kpgtbl);
+    80000652:	8526                	mv	a0,s1
+    80000654:	5da000ef          	jal	80000c2e <proc_mapstacks>
+}
+    80000658:	8526                	mv	a0,s1
+    8000065a:	60e2                	ld	ra,24(sp)
+    8000065c:	6442                	ld	s0,16(sp)
+    8000065e:	64a2                	ld	s1,8(sp)
+    80000660:	6902                	ld	s2,0(sp)
+    80000662:	6105                	addi	sp,sp,32
+    80000664:	8082                	ret
+
+0000000080000666 <kvminit>:
+{
+    80000666:	1141                	addi	sp,sp,-16
+    80000668:	e406                	sd	ra,8(sp)
+    8000066a:	e022                	sd	s0,0(sp)
+    8000066c:	0800                	addi	s0,sp,16
+  kernel_pagetable = kvmmake();
+    8000066e:	f47ff0ef          	jal	800005b4 <kvmmake>
+    80000672:	00007797          	auipc	a5,0x7
+    80000676:	42a7b323          	sd	a0,1062(a5) # 80007a98 <kernel_pagetable>
+}
+    8000067a:	60a2                	ld	ra,8(sp)
+    8000067c:	6402                	ld	s0,0(sp)
+    8000067e:	0141                	addi	sp,sp,16
+    80000680:	8082                	ret
+
+0000000080000682 <uvmunmap>:
+// Remove npages of mappings starting from va. va must be
+// page-aligned. The mappings must exist.
+// Optionally free the physical memory.
+void
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+{
+    80000682:	715d                	addi	sp,sp,-80
+    80000684:	e486                	sd	ra,72(sp)
+    80000686:	e0a2                	sd	s0,64(sp)
+    80000688:	0880                	addi	s0,sp,80
+  uint64 a;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    8000068a:	03459793          	slli	a5,a1,0x34
+    8000068e:	e39d                	bnez	a5,800006b4 <uvmunmap+0x32>
+    80000690:	f84a                	sd	s2,48(sp)
+    80000692:	f44e                	sd	s3,40(sp)
+    80000694:	f052                	sd	s4,32(sp)
+    80000696:	ec56                	sd	s5,24(sp)
+    80000698:	e85a                	sd	s6,16(sp)
+    8000069a:	e45e                	sd	s7,8(sp)
+    8000069c:	8a2a                	mv	s4,a0
+    8000069e:	892e                	mv	s2,a1
+    800006a0:	8ab6                	mv	s5,a3
+    panic("uvmunmap: not aligned");
+
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    800006a2:	0632                	slli	a2,a2,0xc
+    800006a4:	00b609b3          	add	s3,a2,a1
+    if((pte = walk(pagetable, a, 0)) == 0)
+      panic("uvmunmap: walk");
+    if((*pte & PTE_V) == 0)
+      panic("uvmunmap: not mapped");
+    if(PTE_FLAGS(*pte) == PTE_V)
+    800006a8:	4b85                	li	s7,1
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    800006aa:	6b05                	lui	s6,0x1
+    800006ac:	0735ff63          	bgeu	a1,s3,8000072a <uvmunmap+0xa8>
+    800006b0:	fc26                	sd	s1,56(sp)
+    800006b2:	a0a9                	j	800006fc <uvmunmap+0x7a>
+    800006b4:	fc26                	sd	s1,56(sp)
+    800006b6:	f84a                	sd	s2,48(sp)
+    800006b8:	f44e                	sd	s3,40(sp)
+    800006ba:	f052                	sd	s4,32(sp)
+    800006bc:	ec56                	sd	s5,24(sp)
+    800006be:	e85a                	sd	s6,16(sp)
+    800006c0:	e45e                	sd	s7,8(sp)
+    panic("uvmunmap: not aligned");
+    800006c2:	00007517          	auipc	a0,0x7
+    800006c6:	9fe50513          	addi	a0,a0,-1538 # 800070c0 <etext+0xc0>
+    800006ca:	6d9040ef          	jal	800055a2 <panic>
+      panic("uvmunmap: walk");
+    800006ce:	00007517          	auipc	a0,0x7
+    800006d2:	a0a50513          	addi	a0,a0,-1526 # 800070d8 <etext+0xd8>
+    800006d6:	6cd040ef          	jal	800055a2 <panic>
+      panic("uvmunmap: not mapped");
+    800006da:	00007517          	auipc	a0,0x7
+    800006de:	a0e50513          	addi	a0,a0,-1522 # 800070e8 <etext+0xe8>
+    800006e2:	6c1040ef          	jal	800055a2 <panic>
+      panic("uvmunmap: not a leaf");
+    800006e6:	00007517          	auipc	a0,0x7
+    800006ea:	a1a50513          	addi	a0,a0,-1510 # 80007100 <etext+0x100>
+    800006ee:	6b5040ef          	jal	800055a2 <panic>
+    if(do_free){
+      uint64 pa = PTE2PA(*pte);
+      kfree((void*)pa);
+    }
+    *pte = 0;
+    800006f2:	0004b023          	sd	zero,0(s1)
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    800006f6:	995a                	add	s2,s2,s6
+    800006f8:	03397863          	bgeu	s2,s3,80000728 <uvmunmap+0xa6>
+    if((pte = walk(pagetable, a, 0)) == 0)
+    800006fc:	4601                	li	a2,0
+    800006fe:	85ca                	mv	a1,s2
+    80000700:	8552                	mv	a0,s4
+    80000702:	d03ff0ef          	jal	80000404 <walk>
+    80000706:	84aa                	mv	s1,a0
+    80000708:	d179                	beqz	a0,800006ce <uvmunmap+0x4c>
+    if((*pte & PTE_V) == 0)
+    8000070a:	6108                	ld	a0,0(a0)
+    8000070c:	00157793          	andi	a5,a0,1
+    80000710:	d7e9                	beqz	a5,800006da <uvmunmap+0x58>
+    if(PTE_FLAGS(*pte) == PTE_V)
+    80000712:	3ff57793          	andi	a5,a0,1023
+    80000716:	fd7788e3          	beq	a5,s7,800006e6 <uvmunmap+0x64>
+    if(do_free){
+    8000071a:	fc0a8ce3          	beqz	s5,800006f2 <uvmunmap+0x70>
+      uint64 pa = PTE2PA(*pte);
+    8000071e:	8129                	srli	a0,a0,0xa
+      kfree((void*)pa);
+    80000720:	0532                	slli	a0,a0,0xc
+    80000722:	8fbff0ef          	jal	8000001c <kfree>
+    80000726:	b7f1                	j	800006f2 <uvmunmap+0x70>
+    80000728:	74e2                	ld	s1,56(sp)
+    8000072a:	7942                	ld	s2,48(sp)
+    8000072c:	79a2                	ld	s3,40(sp)
+    8000072e:	7a02                	ld	s4,32(sp)
+    80000730:	6ae2                	ld	s5,24(sp)
+    80000732:	6b42                	ld	s6,16(sp)
+    80000734:	6ba2                	ld	s7,8(sp)
+  }
+}
+    80000736:	60a6                	ld	ra,72(sp)
+    80000738:	6406                	ld	s0,64(sp)
+    8000073a:	6161                	addi	sp,sp,80
+    8000073c:	8082                	ret
+
+000000008000073e <uvmcreate>:
+
+// create an empty user page table.
+// returns 0 if out of memory.
+pagetable_t
+uvmcreate()
+{
+    8000073e:	1101                	addi	sp,sp,-32
+    80000740:	ec06                	sd	ra,24(sp)
+    80000742:	e822                	sd	s0,16(sp)
+    80000744:	e426                	sd	s1,8(sp)
+    80000746:	1000                	addi	s0,sp,32
+  pagetable_t pagetable;
+  pagetable = (pagetable_t) kalloc();
+    80000748:	9b7ff0ef          	jal	800000fe <kalloc>
+    8000074c:	84aa                	mv	s1,a0
+  if(pagetable == 0)
+    8000074e:	c509                	beqz	a0,80000758 <uvmcreate+0x1a>
+    return 0;
+  memset(pagetable, 0, PGSIZE);
+    80000750:	6605                	lui	a2,0x1
+    80000752:	4581                	li	a1,0
+    80000754:	a3dff0ef          	jal	80000190 <memset>
+  return pagetable;
+}
+    80000758:	8526                	mv	a0,s1
+    8000075a:	60e2                	ld	ra,24(sp)
+    8000075c:	6442                	ld	s0,16(sp)
+    8000075e:	64a2                	ld	s1,8(sp)
+    80000760:	6105                	addi	sp,sp,32
+    80000762:	8082                	ret
+
+0000000080000764 <uvmfirst>:
+// Load the user initcode into address 0 of pagetable,
+// for the very first process.
+// sz must be less than a page.
+void
+uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
+{
+    80000764:	7179                	addi	sp,sp,-48
+    80000766:	f406                	sd	ra,40(sp)
+    80000768:	f022                	sd	s0,32(sp)
+    8000076a:	ec26                	sd	s1,24(sp)
+    8000076c:	e84a                	sd	s2,16(sp)
+    8000076e:	e44e                	sd	s3,8(sp)
+    80000770:	e052                	sd	s4,0(sp)
+    80000772:	1800                	addi	s0,sp,48
+  char *mem;
+
+  if(sz >= PGSIZE)
+    80000774:	6785                	lui	a5,0x1
+    80000776:	04f67063          	bgeu	a2,a5,800007b6 <uvmfirst+0x52>
+    8000077a:	8a2a                	mv	s4,a0
+    8000077c:	89ae                	mv	s3,a1
+    8000077e:	84b2                	mv	s1,a2
+    panic("uvmfirst: more than a page");
+  mem = kalloc();
+    80000780:	97fff0ef          	jal	800000fe <kalloc>
+    80000784:	892a                	mv	s2,a0
+  memset(mem, 0, PGSIZE);
+    80000786:	6605                	lui	a2,0x1
+    80000788:	4581                	li	a1,0
+    8000078a:	a07ff0ef          	jal	80000190 <memset>
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
+    8000078e:	4779                	li	a4,30
+    80000790:	86ca                	mv	a3,s2
+    80000792:	6605                	lui	a2,0x1
+    80000794:	4581                	li	a1,0
+    80000796:	8552                	mv	a0,s4
+    80000798:	d45ff0ef          	jal	800004dc <mappages>
+  memmove(mem, src, sz);
+    8000079c:	8626                	mv	a2,s1
+    8000079e:	85ce                	mv	a1,s3
+    800007a0:	854a                	mv	a0,s2
+    800007a2:	a4bff0ef          	jal	800001ec <memmove>
+}
+    800007a6:	70a2                	ld	ra,40(sp)
+    800007a8:	7402                	ld	s0,32(sp)
+    800007aa:	64e2                	ld	s1,24(sp)
+    800007ac:	6942                	ld	s2,16(sp)
+    800007ae:	69a2                	ld	s3,8(sp)
+    800007b0:	6a02                	ld	s4,0(sp)
+    800007b2:	6145                	addi	sp,sp,48
+    800007b4:	8082                	ret
+    panic("uvmfirst: more than a page");
+    800007b6:	00007517          	auipc	a0,0x7
+    800007ba:	96250513          	addi	a0,a0,-1694 # 80007118 <etext+0x118>
+    800007be:	5e5040ef          	jal	800055a2 <panic>
+
+00000000800007c2 <uvmdealloc>:
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+uint64
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+    800007c2:	1101                	addi	sp,sp,-32
+    800007c4:	ec06                	sd	ra,24(sp)
+    800007c6:	e822                	sd	s0,16(sp)
+    800007c8:	e426                	sd	s1,8(sp)
+    800007ca:	1000                	addi	s0,sp,32
+  if(newsz >= oldsz)
+    return oldsz;
+    800007cc:	84ae                	mv	s1,a1
+  if(newsz >= oldsz)
+    800007ce:	00b67d63          	bgeu	a2,a1,800007e8 <uvmdealloc+0x26>
+    800007d2:	84b2                	mv	s1,a2
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    800007d4:	6785                	lui	a5,0x1
+    800007d6:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    800007d8:	00f60733          	add	a4,a2,a5
+    800007dc:	76fd                	lui	a3,0xfffff
+    800007de:	8f75                	and	a4,a4,a3
+    800007e0:	97ae                	add	a5,a5,a1
+    800007e2:	8ff5                	and	a5,a5,a3
+    800007e4:	00f76863          	bltu	a4,a5,800007f4 <uvmdealloc+0x32>
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+  }
+
+  return newsz;
+}
+    800007e8:	8526                	mv	a0,s1
+    800007ea:	60e2                	ld	ra,24(sp)
+    800007ec:	6442                	ld	s0,16(sp)
+    800007ee:	64a2                	ld	s1,8(sp)
+    800007f0:	6105                	addi	sp,sp,32
+    800007f2:	8082                	ret
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    800007f4:	8f99                	sub	a5,a5,a4
+    800007f6:	83b1                	srli	a5,a5,0xc
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+    800007f8:	4685                	li	a3,1
+    800007fa:	0007861b          	sext.w	a2,a5
+    800007fe:	85ba                	mv	a1,a4
+    80000800:	e83ff0ef          	jal	80000682 <uvmunmap>
+    80000804:	b7d5                	j	800007e8 <uvmdealloc+0x26>
+
+0000000080000806 <uvmalloc>:
+  if(newsz < oldsz)
+    80000806:	08b66f63          	bltu	a2,a1,800008a4 <uvmalloc+0x9e>
+{
+    8000080a:	7139                	addi	sp,sp,-64
+    8000080c:	fc06                	sd	ra,56(sp)
+    8000080e:	f822                	sd	s0,48(sp)
+    80000810:	ec4e                	sd	s3,24(sp)
+    80000812:	e852                	sd	s4,16(sp)
+    80000814:	e456                	sd	s5,8(sp)
+    80000816:	0080                	addi	s0,sp,64
+    80000818:	8aaa                	mv	s5,a0
+    8000081a:	8a32                	mv	s4,a2
+  oldsz = PGROUNDUP(oldsz);
+    8000081c:	6785                	lui	a5,0x1
+    8000081e:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    80000820:	95be                	add	a1,a1,a5
+    80000822:	77fd                	lui	a5,0xfffff
+    80000824:	00f5f9b3          	and	s3,a1,a5
+  for(a = oldsz; a < newsz; a += PGSIZE){
+    80000828:	08c9f063          	bgeu	s3,a2,800008a8 <uvmalloc+0xa2>
+    8000082c:	f426                	sd	s1,40(sp)
+    8000082e:	f04a                	sd	s2,32(sp)
+    80000830:	e05a                	sd	s6,0(sp)
+    80000832:	894e                	mv	s2,s3
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+    80000834:	0126eb13          	ori	s6,a3,18
+    mem = kalloc();
+    80000838:	8c7ff0ef          	jal	800000fe <kalloc>
+    8000083c:	84aa                	mv	s1,a0
+    if(mem == 0){
+    8000083e:	c515                	beqz	a0,8000086a <uvmalloc+0x64>
+    memset(mem, 0, PGSIZE);
+    80000840:	6605                	lui	a2,0x1
+    80000842:	4581                	li	a1,0
+    80000844:	94dff0ef          	jal	80000190 <memset>
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+    80000848:	875a                	mv	a4,s6
+    8000084a:	86a6                	mv	a3,s1
+    8000084c:	6605                	lui	a2,0x1
+    8000084e:	85ca                	mv	a1,s2
+    80000850:	8556                	mv	a0,s5
+    80000852:	c8bff0ef          	jal	800004dc <mappages>
+    80000856:	e915                	bnez	a0,8000088a <uvmalloc+0x84>
+  for(a = oldsz; a < newsz; a += PGSIZE){
+    80000858:	6785                	lui	a5,0x1
+    8000085a:	993e                	add	s2,s2,a5
+    8000085c:	fd496ee3          	bltu	s2,s4,80000838 <uvmalloc+0x32>
+  return newsz;
+    80000860:	8552                	mv	a0,s4
+    80000862:	74a2                	ld	s1,40(sp)
+    80000864:	7902                	ld	s2,32(sp)
+    80000866:	6b02                	ld	s6,0(sp)
+    80000868:	a811                	j	8000087c <uvmalloc+0x76>
+      uvmdealloc(pagetable, a, oldsz);
+    8000086a:	864e                	mv	a2,s3
+    8000086c:	85ca                	mv	a1,s2
+    8000086e:	8556                	mv	a0,s5
+    80000870:	f53ff0ef          	jal	800007c2 <uvmdealloc>
+      return 0;
+    80000874:	4501                	li	a0,0
+    80000876:	74a2                	ld	s1,40(sp)
+    80000878:	7902                	ld	s2,32(sp)
+    8000087a:	6b02                	ld	s6,0(sp)
+}
+    8000087c:	70e2                	ld	ra,56(sp)
+    8000087e:	7442                	ld	s0,48(sp)
+    80000880:	69e2                	ld	s3,24(sp)
+    80000882:	6a42                	ld	s4,16(sp)
+    80000884:	6aa2                	ld	s5,8(sp)
+    80000886:	6121                	addi	sp,sp,64
+    80000888:	8082                	ret
+      kfree(mem);
+    8000088a:	8526                	mv	a0,s1
+    8000088c:	f90ff0ef          	jal	8000001c <kfree>
+      uvmdealloc(pagetable, a, oldsz);
+    80000890:	864e                	mv	a2,s3
+    80000892:	85ca                	mv	a1,s2
+    80000894:	8556                	mv	a0,s5
+    80000896:	f2dff0ef          	jal	800007c2 <uvmdealloc>
+      return 0;
+    8000089a:	4501                	li	a0,0
+    8000089c:	74a2                	ld	s1,40(sp)
+    8000089e:	7902                	ld	s2,32(sp)
+    800008a0:	6b02                	ld	s6,0(sp)
+    800008a2:	bfe9                	j	8000087c <uvmalloc+0x76>
+    return oldsz;
+    800008a4:	852e                	mv	a0,a1
+}
+    800008a6:	8082                	ret
+  return newsz;
+    800008a8:	8532                	mv	a0,a2
+    800008aa:	bfc9                	j	8000087c <uvmalloc+0x76>
+
+00000000800008ac <freewalk>:
+
+// Recursively free page-table pages.
+// All leaf mappings must already have been removed.
+void
+freewalk(pagetable_t pagetable)
+{
+    800008ac:	7179                	addi	sp,sp,-48
+    800008ae:	f406                	sd	ra,40(sp)
+    800008b0:	f022                	sd	s0,32(sp)
+    800008b2:	ec26                	sd	s1,24(sp)
+    800008b4:	e84a                	sd	s2,16(sp)
+    800008b6:	e44e                	sd	s3,8(sp)
+    800008b8:	e052                	sd	s4,0(sp)
+    800008ba:	1800                	addi	s0,sp,48
+    800008bc:	8a2a                	mv	s4,a0
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    800008be:	84aa                	mv	s1,a0
+    800008c0:	6905                	lui	s2,0x1
+    800008c2:	992a                	add	s2,s2,a0
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+    800008c4:	4985                	li	s3,1
+    800008c6:	a819                	j	800008dc <freewalk+0x30>
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+    800008c8:	83a9                	srli	a5,a5,0xa
+      freewalk((pagetable_t)child);
+    800008ca:	00c79513          	slli	a0,a5,0xc
+    800008ce:	fdfff0ef          	jal	800008ac <freewalk>
+      pagetable[i] = 0;
+    800008d2:	0004b023          	sd	zero,0(s1)
+  for(int i = 0; i < 512; i++){
+    800008d6:	04a1                	addi	s1,s1,8
+    800008d8:	01248f63          	beq	s1,s2,800008f6 <freewalk+0x4a>
+    pte_t pte = pagetable[i];
+    800008dc:	609c                	ld	a5,0(s1)
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+    800008de:	00f7f713          	andi	a4,a5,15
+    800008e2:	ff3703e3          	beq	a4,s3,800008c8 <freewalk+0x1c>
+    } else if(pte & PTE_V){
+    800008e6:	8b85                	andi	a5,a5,1
+    800008e8:	d7fd                	beqz	a5,800008d6 <freewalk+0x2a>
+      panic("freewalk: leaf");
+    800008ea:	00007517          	auipc	a0,0x7
+    800008ee:	84e50513          	addi	a0,a0,-1970 # 80007138 <etext+0x138>
+    800008f2:	4b1040ef          	jal	800055a2 <panic>
+    }
+  }
+  kfree((void*)pagetable);
+    800008f6:	8552                	mv	a0,s4
+    800008f8:	f24ff0ef          	jal	8000001c <kfree>
+}
+    800008fc:	70a2                	ld	ra,40(sp)
+    800008fe:	7402                	ld	s0,32(sp)
+    80000900:	64e2                	ld	s1,24(sp)
+    80000902:	6942                	ld	s2,16(sp)
+    80000904:	69a2                	ld	s3,8(sp)
+    80000906:	6a02                	ld	s4,0(sp)
+    80000908:	6145                	addi	sp,sp,48
+    8000090a:	8082                	ret
+
+000000008000090c <uvmfree>:
+
+// Free user memory pages,
+// then free page-table pages.
+void
+uvmfree(pagetable_t pagetable, uint64 sz)
+{
+    8000090c:	1101                	addi	sp,sp,-32
+    8000090e:	ec06                	sd	ra,24(sp)
+    80000910:	e822                	sd	s0,16(sp)
+    80000912:	e426                	sd	s1,8(sp)
+    80000914:	1000                	addi	s0,sp,32
+    80000916:	84aa                	mv	s1,a0
+  if(sz > 0)
+    80000918:	e989                	bnez	a1,8000092a <uvmfree+0x1e>
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  freewalk(pagetable);
+    8000091a:	8526                	mv	a0,s1
+    8000091c:	f91ff0ef          	jal	800008ac <freewalk>
+}
+    80000920:	60e2                	ld	ra,24(sp)
+    80000922:	6442                	ld	s0,16(sp)
+    80000924:	64a2                	ld	s1,8(sp)
+    80000926:	6105                	addi	sp,sp,32
+    80000928:	8082                	ret
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+    8000092a:	6785                	lui	a5,0x1
+    8000092c:	17fd                	addi	a5,a5,-1 # fff <_entry-0x7ffff001>
+    8000092e:	95be                	add	a1,a1,a5
+    80000930:	4685                	li	a3,1
+    80000932:	00c5d613          	srli	a2,a1,0xc
+    80000936:	4581                	li	a1,0
+    80000938:	d4bff0ef          	jal	80000682 <uvmunmap>
+    8000093c:	bff9                	j	8000091a <uvmfree+0xe>
+
+000000008000093e <uvmcopy>:
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    8000093e:	c65d                	beqz	a2,800009ec <uvmcopy+0xae>
+{
+    80000940:	715d                	addi	sp,sp,-80
+    80000942:	e486                	sd	ra,72(sp)
+    80000944:	e0a2                	sd	s0,64(sp)
+    80000946:	fc26                	sd	s1,56(sp)
+    80000948:	f84a                	sd	s2,48(sp)
+    8000094a:	f44e                	sd	s3,40(sp)
+    8000094c:	f052                	sd	s4,32(sp)
+    8000094e:	ec56                	sd	s5,24(sp)
+    80000950:	e85a                	sd	s6,16(sp)
+    80000952:	e45e                	sd	s7,8(sp)
+    80000954:	0880                	addi	s0,sp,80
+    80000956:	8b2a                	mv	s6,a0
+    80000958:	8aae                	mv	s5,a1
+    8000095a:	8a32                	mv	s4,a2
+  for(i = 0; i < sz; i += PGSIZE){
+    8000095c:	4981                	li	s3,0
+    if((pte = walk(old, i, 0)) == 0)
+    8000095e:	4601                	li	a2,0
+    80000960:	85ce                	mv	a1,s3
+    80000962:	855a                	mv	a0,s6
+    80000964:	aa1ff0ef          	jal	80000404 <walk>
+    80000968:	c121                	beqz	a0,800009a8 <uvmcopy+0x6a>
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+    8000096a:	6118                	ld	a4,0(a0)
+    8000096c:	00177793          	andi	a5,a4,1
+    80000970:	c3b1                	beqz	a5,800009b4 <uvmcopy+0x76>
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    80000972:	00a75593          	srli	a1,a4,0xa
+    80000976:	00c59b93          	slli	s7,a1,0xc
+    flags = PTE_FLAGS(*pte);
+    8000097a:	3ff77493          	andi	s1,a4,1023
+    if((mem = kalloc()) == 0)
+    8000097e:	f80ff0ef          	jal	800000fe <kalloc>
+    80000982:	892a                	mv	s2,a0
+    80000984:	c129                	beqz	a0,800009c6 <uvmcopy+0x88>
+      goto err;
+    memmove(mem, (char*)pa, PGSIZE);
+    80000986:	6605                	lui	a2,0x1
+    80000988:	85de                	mv	a1,s7
+    8000098a:	863ff0ef          	jal	800001ec <memmove>
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    8000098e:	8726                	mv	a4,s1
+    80000990:	86ca                	mv	a3,s2
+    80000992:	6605                	lui	a2,0x1
+    80000994:	85ce                	mv	a1,s3
+    80000996:	8556                	mv	a0,s5
+    80000998:	b45ff0ef          	jal	800004dc <mappages>
+    8000099c:	e115                	bnez	a0,800009c0 <uvmcopy+0x82>
+  for(i = 0; i < sz; i += PGSIZE){
+    8000099e:	6785                	lui	a5,0x1
+    800009a0:	99be                	add	s3,s3,a5
+    800009a2:	fb49eee3          	bltu	s3,s4,8000095e <uvmcopy+0x20>
+    800009a6:	a805                	j	800009d6 <uvmcopy+0x98>
+      panic("uvmcopy: pte should exist");
+    800009a8:	00006517          	auipc	a0,0x6
+    800009ac:	7a050513          	addi	a0,a0,1952 # 80007148 <etext+0x148>
+    800009b0:	3f3040ef          	jal	800055a2 <panic>
+      panic("uvmcopy: page not present");
+    800009b4:	00006517          	auipc	a0,0x6
+    800009b8:	7b450513          	addi	a0,a0,1972 # 80007168 <etext+0x168>
+    800009bc:	3e7040ef          	jal	800055a2 <panic>
+      kfree(mem);
+    800009c0:	854a                	mv	a0,s2
+    800009c2:	e5aff0ef          	jal	8000001c <kfree>
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+    800009c6:	4685                	li	a3,1
+    800009c8:	00c9d613          	srli	a2,s3,0xc
+    800009cc:	4581                	li	a1,0
+    800009ce:	8556                	mv	a0,s5
+    800009d0:	cb3ff0ef          	jal	80000682 <uvmunmap>
+  return -1;
+    800009d4:	557d                	li	a0,-1
+}
+    800009d6:	60a6                	ld	ra,72(sp)
+    800009d8:	6406                	ld	s0,64(sp)
+    800009da:	74e2                	ld	s1,56(sp)
+    800009dc:	7942                	ld	s2,48(sp)
+    800009de:	79a2                	ld	s3,40(sp)
+    800009e0:	7a02                	ld	s4,32(sp)
+    800009e2:	6ae2                	ld	s5,24(sp)
+    800009e4:	6b42                	ld	s6,16(sp)
+    800009e6:	6ba2                	ld	s7,8(sp)
+    800009e8:	6161                	addi	sp,sp,80
+    800009ea:	8082                	ret
+  return 0;
+    800009ec:	4501                	li	a0,0
+}
+    800009ee:	8082                	ret
+
+00000000800009f0 <uvmclear>:
+
+// mark a PTE invalid for user access.
+// used by exec for the user stack guard page.
+void
+uvmclear(pagetable_t pagetable, uint64 va)
+{
+    800009f0:	1141                	addi	sp,sp,-16
+    800009f2:	e406                	sd	ra,8(sp)
+    800009f4:	e022                	sd	s0,0(sp)
+    800009f6:	0800                	addi	s0,sp,16
+  pte_t *pte;
+  
+  pte = walk(pagetable, va, 0);
+    800009f8:	4601                	li	a2,0
+    800009fa:	a0bff0ef          	jal	80000404 <walk>
+  if(pte == 0)
+    800009fe:	c901                	beqz	a0,80000a0e <uvmclear+0x1e>
+    panic("uvmclear");
+  *pte &= ~PTE_U;
+    80000a00:	611c                	ld	a5,0(a0)
+    80000a02:	9bbd                	andi	a5,a5,-17
+    80000a04:	e11c                	sd	a5,0(a0)
+}
+    80000a06:	60a2                	ld	ra,8(sp)
+    80000a08:	6402                	ld	s0,0(sp)
+    80000a0a:	0141                	addi	sp,sp,16
+    80000a0c:	8082                	ret
+    panic("uvmclear");
+    80000a0e:	00006517          	auipc	a0,0x6
+    80000a12:	77a50513          	addi	a0,a0,1914 # 80007188 <etext+0x188>
+    80000a16:	38d040ef          	jal	800055a2 <panic>
+
+0000000080000a1a <copyout>:
+copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+{
+  uint64 n, va0, pa0;
+  pte_t *pte;
+
+  while(len > 0){
+    80000a1a:	cad1                	beqz	a3,80000aae <copyout+0x94>
+{
+    80000a1c:	711d                	addi	sp,sp,-96
+    80000a1e:	ec86                	sd	ra,88(sp)
+    80000a20:	e8a2                	sd	s0,80(sp)
+    80000a22:	e4a6                	sd	s1,72(sp)
+    80000a24:	fc4e                	sd	s3,56(sp)
+    80000a26:	f456                	sd	s5,40(sp)
+    80000a28:	f05a                	sd	s6,32(sp)
+    80000a2a:	ec5e                	sd	s7,24(sp)
+    80000a2c:	1080                	addi	s0,sp,96
+    80000a2e:	8baa                	mv	s7,a0
+    80000a30:	8aae                	mv	s5,a1
+    80000a32:	8b32                	mv	s6,a2
+    80000a34:	89b6                	mv	s3,a3
+    va0 = PGROUNDDOWN(dstva);
+    80000a36:	74fd                	lui	s1,0xfffff
+    80000a38:	8ced                	and	s1,s1,a1
+    if(va0 >= MAXVA)
+    80000a3a:	57fd                	li	a5,-1
+    80000a3c:	83e9                	srli	a5,a5,0x1a
+    80000a3e:	0697ea63          	bltu	a5,s1,80000ab2 <copyout+0x98>
+    80000a42:	e0ca                	sd	s2,64(sp)
+    80000a44:	f852                	sd	s4,48(sp)
+    80000a46:	e862                	sd	s8,16(sp)
+    80000a48:	e466                	sd	s9,8(sp)
+    80000a4a:	e06a                	sd	s10,0(sp)
+      return -1;
+    pte = walk(pagetable, va0, 0);
+    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0 ||
+    80000a4c:	4cd5                	li	s9,21
+    80000a4e:	6d05                	lui	s10,0x1
+    if(va0 >= MAXVA)
+    80000a50:	8c3e                	mv	s8,a5
+    80000a52:	a025                	j	80000a7a <copyout+0x60>
+       (*pte & PTE_W) == 0)
+      return -1;
+    pa0 = PTE2PA(*pte);
+    80000a54:	83a9                	srli	a5,a5,0xa
+    80000a56:	07b2                	slli	a5,a5,0xc
+    n = PGSIZE - (dstva - va0);
+    if(n > len)
+      n = len;
+    memmove((void *)(pa0 + (dstva - va0)), src, n);
+    80000a58:	409a8533          	sub	a0,s5,s1
+    80000a5c:	0009061b          	sext.w	a2,s2
+    80000a60:	85da                	mv	a1,s6
+    80000a62:	953e                	add	a0,a0,a5
+    80000a64:	f88ff0ef          	jal	800001ec <memmove>
+
+    len -= n;
+    80000a68:	412989b3          	sub	s3,s3,s2
+    src += n;
+    80000a6c:	9b4a                	add	s6,s6,s2
+  while(len > 0){
+    80000a6e:	02098963          	beqz	s3,80000aa0 <copyout+0x86>
+    if(va0 >= MAXVA)
+    80000a72:	054c6263          	bltu	s8,s4,80000ab6 <copyout+0x9c>
+    80000a76:	84d2                	mv	s1,s4
+    80000a78:	8ad2                	mv	s5,s4
+    pte = walk(pagetable, va0, 0);
+    80000a7a:	4601                	li	a2,0
+    80000a7c:	85a6                	mv	a1,s1
+    80000a7e:	855e                	mv	a0,s7
+    80000a80:	985ff0ef          	jal	80000404 <walk>
+    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0 ||
+    80000a84:	c121                	beqz	a0,80000ac4 <copyout+0xaa>
+    80000a86:	611c                	ld	a5,0(a0)
+    80000a88:	0157f713          	andi	a4,a5,21
+    80000a8c:	05971b63          	bne	a4,s9,80000ae2 <copyout+0xc8>
+    n = PGSIZE - (dstva - va0);
+    80000a90:	01a48a33          	add	s4,s1,s10
+    80000a94:	415a0933          	sub	s2,s4,s5
+    if(n > len)
+    80000a98:	fb29fee3          	bgeu	s3,s2,80000a54 <copyout+0x3a>
+    80000a9c:	894e                	mv	s2,s3
+    80000a9e:	bf5d                	j	80000a54 <copyout+0x3a>
+    dstva = va0 + PGSIZE;
+  }
+  return 0;
+    80000aa0:	4501                	li	a0,0
+    80000aa2:	6906                	ld	s2,64(sp)
+    80000aa4:	7a42                	ld	s4,48(sp)
+    80000aa6:	6c42                	ld	s8,16(sp)
+    80000aa8:	6ca2                	ld	s9,8(sp)
+    80000aaa:	6d02                	ld	s10,0(sp)
+    80000aac:	a015                	j	80000ad0 <copyout+0xb6>
+    80000aae:	4501                	li	a0,0
+}
+    80000ab0:	8082                	ret
+      return -1;
+    80000ab2:	557d                	li	a0,-1
+    80000ab4:	a831                	j	80000ad0 <copyout+0xb6>
+    80000ab6:	557d                	li	a0,-1
+    80000ab8:	6906                	ld	s2,64(sp)
+    80000aba:	7a42                	ld	s4,48(sp)
+    80000abc:	6c42                	ld	s8,16(sp)
+    80000abe:	6ca2                	ld	s9,8(sp)
+    80000ac0:	6d02                	ld	s10,0(sp)
+    80000ac2:	a039                	j	80000ad0 <copyout+0xb6>
+      return -1;
+    80000ac4:	557d                	li	a0,-1
+    80000ac6:	6906                	ld	s2,64(sp)
+    80000ac8:	7a42                	ld	s4,48(sp)
+    80000aca:	6c42                	ld	s8,16(sp)
+    80000acc:	6ca2                	ld	s9,8(sp)
+    80000ace:	6d02                	ld	s10,0(sp)
+}
+    80000ad0:	60e6                	ld	ra,88(sp)
+    80000ad2:	6446                	ld	s0,80(sp)
+    80000ad4:	64a6                	ld	s1,72(sp)
+    80000ad6:	79e2                	ld	s3,56(sp)
+    80000ad8:	7aa2                	ld	s5,40(sp)
+    80000ada:	7b02                	ld	s6,32(sp)
+    80000adc:	6be2                	ld	s7,24(sp)
+    80000ade:	6125                	addi	sp,sp,96
+    80000ae0:	8082                	ret
+      return -1;
+    80000ae2:	557d                	li	a0,-1
+    80000ae4:	6906                	ld	s2,64(sp)
+    80000ae6:	7a42                	ld	s4,48(sp)
+    80000ae8:	6c42                	ld	s8,16(sp)
+    80000aea:	6ca2                	ld	s9,8(sp)
+    80000aec:	6d02                	ld	s10,0(sp)
+    80000aee:	b7cd                	j	80000ad0 <copyout+0xb6>
+
+0000000080000af0 <copyin>:
+int
+copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+{
+  uint64 n, va0, pa0;
+
+  while(len > 0){
+    80000af0:	c6a5                	beqz	a3,80000b58 <copyin+0x68>
+{
+    80000af2:	715d                	addi	sp,sp,-80
+    80000af4:	e486                	sd	ra,72(sp)
+    80000af6:	e0a2                	sd	s0,64(sp)
+    80000af8:	fc26                	sd	s1,56(sp)
+    80000afa:	f84a                	sd	s2,48(sp)
+    80000afc:	f44e                	sd	s3,40(sp)
+    80000afe:	f052                	sd	s4,32(sp)
+    80000b00:	ec56                	sd	s5,24(sp)
+    80000b02:	e85a                	sd	s6,16(sp)
+    80000b04:	e45e                	sd	s7,8(sp)
+    80000b06:	e062                	sd	s8,0(sp)
+    80000b08:	0880                	addi	s0,sp,80
+    80000b0a:	8b2a                	mv	s6,a0
+    80000b0c:	8a2e                	mv	s4,a1
+    80000b0e:	8c32                	mv	s8,a2
+    80000b10:	89b6                	mv	s3,a3
+    va0 = PGROUNDDOWN(srcva);
+    80000b12:	7bfd                	lui	s7,0xfffff
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    80000b14:	6a85                	lui	s5,0x1
+    80000b16:	a00d                	j	80000b38 <copyin+0x48>
+    if(n > len)
+      n = len;
+    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+    80000b18:	018505b3          	add	a1,a0,s8
+    80000b1c:	0004861b          	sext.w	a2,s1
+    80000b20:	412585b3          	sub	a1,a1,s2
+    80000b24:	8552                	mv	a0,s4
+    80000b26:	ec6ff0ef          	jal	800001ec <memmove>
+
+    len -= n;
+    80000b2a:	409989b3          	sub	s3,s3,s1
+    dst += n;
+    80000b2e:	9a26                	add	s4,s4,s1
+    srcva = va0 + PGSIZE;
+    80000b30:	01590c33          	add	s8,s2,s5
+  while(len > 0){
+    80000b34:	02098063          	beqz	s3,80000b54 <copyin+0x64>
+    va0 = PGROUNDDOWN(srcva);
+    80000b38:	017c7933          	and	s2,s8,s7
+    pa0 = walkaddr(pagetable, va0);
+    80000b3c:	85ca                	mv	a1,s2
+    80000b3e:	855a                	mv	a0,s6
+    80000b40:	95fff0ef          	jal	8000049e <walkaddr>
+    if(pa0 == 0)
+    80000b44:	cd01                	beqz	a0,80000b5c <copyin+0x6c>
+    n = PGSIZE - (srcva - va0);
+    80000b46:	418904b3          	sub	s1,s2,s8
+    80000b4a:	94d6                	add	s1,s1,s5
+    if(n > len)
+    80000b4c:	fc99f6e3          	bgeu	s3,s1,80000b18 <copyin+0x28>
+    80000b50:	84ce                	mv	s1,s3
+    80000b52:	b7d9                	j	80000b18 <copyin+0x28>
+  }
+  return 0;
+    80000b54:	4501                	li	a0,0
+    80000b56:	a021                	j	80000b5e <copyin+0x6e>
+    80000b58:	4501                	li	a0,0
+}
+    80000b5a:	8082                	ret
+      return -1;
+    80000b5c:	557d                	li	a0,-1
+}
+    80000b5e:	60a6                	ld	ra,72(sp)
+    80000b60:	6406                	ld	s0,64(sp)
+    80000b62:	74e2                	ld	s1,56(sp)
+    80000b64:	7942                	ld	s2,48(sp)
+    80000b66:	79a2                	ld	s3,40(sp)
+    80000b68:	7a02                	ld	s4,32(sp)
+    80000b6a:	6ae2                	ld	s5,24(sp)
+    80000b6c:	6b42                	ld	s6,16(sp)
+    80000b6e:	6ba2                	ld	s7,8(sp)
+    80000b70:	6c02                	ld	s8,0(sp)
+    80000b72:	6161                	addi	sp,sp,80
+    80000b74:	8082                	ret
+
+0000000080000b76 <copyinstr>:
+copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+{
+  uint64 n, va0, pa0;
+  int got_null = 0;
+
+  while(got_null == 0 && max > 0){
+    80000b76:	c6dd                	beqz	a3,80000c24 <copyinstr+0xae>
+{
+    80000b78:	715d                	addi	sp,sp,-80
+    80000b7a:	e486                	sd	ra,72(sp)
+    80000b7c:	e0a2                	sd	s0,64(sp)
+    80000b7e:	fc26                	sd	s1,56(sp)
+    80000b80:	f84a                	sd	s2,48(sp)
+    80000b82:	f44e                	sd	s3,40(sp)
+    80000b84:	f052                	sd	s4,32(sp)
+    80000b86:	ec56                	sd	s5,24(sp)
+    80000b88:	e85a                	sd	s6,16(sp)
+    80000b8a:	e45e                	sd	s7,8(sp)
+    80000b8c:	0880                	addi	s0,sp,80
+    80000b8e:	8a2a                	mv	s4,a0
+    80000b90:	8b2e                	mv	s6,a1
+    80000b92:	8bb2                	mv	s7,a2
+    80000b94:	8936                	mv	s2,a3
+    va0 = PGROUNDDOWN(srcva);
+    80000b96:	7afd                	lui	s5,0xfffff
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    80000b98:	6985                	lui	s3,0x1
+    80000b9a:	a825                	j	80000bd2 <copyinstr+0x5c>
+      n = max;
+
+    char *p = (char *) (pa0 + (srcva - va0));
+    while(n > 0){
+      if(*p == '\0'){
+        *dst = '\0';
+    80000b9c:	00078023          	sb	zero,0(a5) # 1000 <_entry-0x7ffff000>
+    80000ba0:	4785                	li	a5,1
+      dst++;
+    }
+
+    srcva = va0 + PGSIZE;
+  }
+  if(got_null){
+    80000ba2:	37fd                	addiw	a5,a5,-1
+    80000ba4:	0007851b          	sext.w	a0,a5
+    return 0;
+  } else {
+    return -1;
+  }
+}
+    80000ba8:	60a6                	ld	ra,72(sp)
+    80000baa:	6406                	ld	s0,64(sp)
+    80000bac:	74e2                	ld	s1,56(sp)
+    80000bae:	7942                	ld	s2,48(sp)
+    80000bb0:	79a2                	ld	s3,40(sp)
+    80000bb2:	7a02                	ld	s4,32(sp)
+    80000bb4:	6ae2                	ld	s5,24(sp)
+    80000bb6:	6b42                	ld	s6,16(sp)
+    80000bb8:	6ba2                	ld	s7,8(sp)
+    80000bba:	6161                	addi	sp,sp,80
+    80000bbc:	8082                	ret
+    80000bbe:	fff90713          	addi	a4,s2,-1 # fff <_entry-0x7ffff001>
+    80000bc2:	9742                	add	a4,a4,a6
+      --max;
+    80000bc4:	40b70933          	sub	s2,a4,a1
+    srcva = va0 + PGSIZE;
+    80000bc8:	01348bb3          	add	s7,s1,s3
+  while(got_null == 0 && max > 0){
+    80000bcc:	04e58463          	beq	a1,a4,80000c14 <copyinstr+0x9e>
+{
+    80000bd0:	8b3e                	mv	s6,a5
+    va0 = PGROUNDDOWN(srcva);
+    80000bd2:	015bf4b3          	and	s1,s7,s5
+    pa0 = walkaddr(pagetable, va0);
+    80000bd6:	85a6                	mv	a1,s1
+    80000bd8:	8552                	mv	a0,s4
+    80000bda:	8c5ff0ef          	jal	8000049e <walkaddr>
+    if(pa0 == 0)
+    80000bde:	cd0d                	beqz	a0,80000c18 <copyinstr+0xa2>
+    n = PGSIZE - (srcva - va0);
+    80000be0:	417486b3          	sub	a3,s1,s7
+    80000be4:	96ce                	add	a3,a3,s3
+    if(n > max)
+    80000be6:	00d97363          	bgeu	s2,a3,80000bec <copyinstr+0x76>
+    80000bea:	86ca                	mv	a3,s2
+    char *p = (char *) (pa0 + (srcva - va0));
+    80000bec:	955e                	add	a0,a0,s7
+    80000bee:	8d05                	sub	a0,a0,s1
+    while(n > 0){
+    80000bf0:	c695                	beqz	a3,80000c1c <copyinstr+0xa6>
+    80000bf2:	87da                	mv	a5,s6
+    80000bf4:	885a                	mv	a6,s6
+      if(*p == '\0'){
+    80000bf6:	41650633          	sub	a2,a0,s6
+    while(n > 0){
+    80000bfa:	96da                	add	a3,a3,s6
+    80000bfc:	85be                	mv	a1,a5
+      if(*p == '\0'){
+    80000bfe:	00f60733          	add	a4,a2,a5
+    80000c02:	00074703          	lbu	a4,0(a4)
+    80000c06:	db59                	beqz	a4,80000b9c <copyinstr+0x26>
+        *dst = *p;
+    80000c08:	00e78023          	sb	a4,0(a5)
+      dst++;
+    80000c0c:	0785                	addi	a5,a5,1
+    while(n > 0){
+    80000c0e:	fed797e3          	bne	a5,a3,80000bfc <copyinstr+0x86>
+    80000c12:	b775                	j	80000bbe <copyinstr+0x48>
+    80000c14:	4781                	li	a5,0
+    80000c16:	b771                	j	80000ba2 <copyinstr+0x2c>
+      return -1;
+    80000c18:	557d                	li	a0,-1
+    80000c1a:	b779                	j	80000ba8 <copyinstr+0x32>
+    srcva = va0 + PGSIZE;
+    80000c1c:	6b85                	lui	s7,0x1
+    80000c1e:	9ba6                	add	s7,s7,s1
+    80000c20:	87da                	mv	a5,s6
+    80000c22:	b77d                	j	80000bd0 <copyinstr+0x5a>
+  int got_null = 0;
+    80000c24:	4781                	li	a5,0
+  if(got_null){
+    80000c26:	37fd                	addiw	a5,a5,-1
+    80000c28:	0007851b          	sext.w	a0,a5
+}
+    80000c2c:	8082                	ret
+
+0000000080000c2e <proc_mapstacks>:
+// Allocate a page for each process's kernel stack.
+// Map it high in memory, followed by an invalid
+// guard page.
+void
+proc_mapstacks(pagetable_t kpgtbl)
+{
+    80000c2e:	7139                	addi	sp,sp,-64
+    80000c30:	fc06                	sd	ra,56(sp)
+    80000c32:	f822                	sd	s0,48(sp)
+    80000c34:	f426                	sd	s1,40(sp)
+    80000c36:	f04a                	sd	s2,32(sp)
+    80000c38:	ec4e                	sd	s3,24(sp)
+    80000c3a:	e852                	sd	s4,16(sp)
+    80000c3c:	e456                	sd	s5,8(sp)
+    80000c3e:	e05a                	sd	s6,0(sp)
+    80000c40:	0080                	addi	s0,sp,64
+    80000c42:	8a2a                	mv	s4,a0
+  struct proc *p;
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000c44:	00007497          	auipc	s1,0x7
+    80000c48:	2cc48493          	addi	s1,s1,716 # 80007f10 <proc>
+    char *pa = kalloc();
+    if(pa == 0)
+      panic("kalloc");
+    uint64 va = KSTACK((int) (p - proc));
+    80000c4c:	8b26                	mv	s6,s1
+    80000c4e:	04fa5937          	lui	s2,0x4fa5
+    80000c52:	fa590913          	addi	s2,s2,-91 # 4fa4fa5 <_entry-0x7b05b05b>
+    80000c56:	0932                	slli	s2,s2,0xc
+    80000c58:	fa590913          	addi	s2,s2,-91
+    80000c5c:	0932                	slli	s2,s2,0xc
+    80000c5e:	fa590913          	addi	s2,s2,-91
+    80000c62:	0932                	slli	s2,s2,0xc
+    80000c64:	fa590913          	addi	s2,s2,-91
+    80000c68:	040009b7          	lui	s3,0x4000
+    80000c6c:	19fd                	addi	s3,s3,-1 # 3ffffff <_entry-0x7c000001>
+    80000c6e:	09b2                	slli	s3,s3,0xc
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000c70:	0000da97          	auipc	s5,0xd
+    80000c74:	ca0a8a93          	addi	s5,s5,-864 # 8000d910 <tickslock>
+    char *pa = kalloc();
+    80000c78:	c86ff0ef          	jal	800000fe <kalloc>
+    80000c7c:	862a                	mv	a2,a0
+    if(pa == 0)
+    80000c7e:	cd15                	beqz	a0,80000cba <proc_mapstacks+0x8c>
+    uint64 va = KSTACK((int) (p - proc));
+    80000c80:	416485b3          	sub	a1,s1,s6
+    80000c84:	858d                	srai	a1,a1,0x3
+    80000c86:	032585b3          	mul	a1,a1,s2
+    80000c8a:	2585                	addiw	a1,a1,1
+    80000c8c:	00d5959b          	slliw	a1,a1,0xd
+    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+    80000c90:	4719                	li	a4,6
+    80000c92:	6685                	lui	a3,0x1
+    80000c94:	40b985b3          	sub	a1,s3,a1
+    80000c98:	8552                	mv	a0,s4
+    80000c9a:	8f3ff0ef          	jal	8000058c <kvmmap>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000c9e:	16848493          	addi	s1,s1,360
+    80000ca2:	fd549be3          	bne	s1,s5,80000c78 <proc_mapstacks+0x4a>
+  }
+}
+    80000ca6:	70e2                	ld	ra,56(sp)
+    80000ca8:	7442                	ld	s0,48(sp)
+    80000caa:	74a2                	ld	s1,40(sp)
+    80000cac:	7902                	ld	s2,32(sp)
+    80000cae:	69e2                	ld	s3,24(sp)
+    80000cb0:	6a42                	ld	s4,16(sp)
+    80000cb2:	6aa2                	ld	s5,8(sp)
+    80000cb4:	6b02                	ld	s6,0(sp)
+    80000cb6:	6121                	addi	sp,sp,64
+    80000cb8:	8082                	ret
+      panic("kalloc");
+    80000cba:	00006517          	auipc	a0,0x6
+    80000cbe:	4de50513          	addi	a0,a0,1246 # 80007198 <etext+0x198>
+    80000cc2:	0e1040ef          	jal	800055a2 <panic>
+
+0000000080000cc6 <procinit>:
+
+// initialize the proc table.
+void
+procinit(void)
+{
+    80000cc6:	7139                	addi	sp,sp,-64
+    80000cc8:	fc06                	sd	ra,56(sp)
+    80000cca:	f822                	sd	s0,48(sp)
+    80000ccc:	f426                	sd	s1,40(sp)
+    80000cce:	f04a                	sd	s2,32(sp)
+    80000cd0:	ec4e                	sd	s3,24(sp)
+    80000cd2:	e852                	sd	s4,16(sp)
+    80000cd4:	e456                	sd	s5,8(sp)
+    80000cd6:	e05a                	sd	s6,0(sp)
+    80000cd8:	0080                	addi	s0,sp,64
+  struct proc *p;
+  
+  initlock(&pid_lock, "nextpid");
+    80000cda:	00006597          	auipc	a1,0x6
+    80000cde:	4c658593          	addi	a1,a1,1222 # 800071a0 <etext+0x1a0>
+    80000ce2:	00007517          	auipc	a0,0x7
+    80000ce6:	dfe50513          	addi	a0,a0,-514 # 80007ae0 <pid_lock>
+    80000cea:	367040ef          	jal	80005850 <initlock>
+  initlock(&wait_lock, "wait_lock");
+    80000cee:	00006597          	auipc	a1,0x6
+    80000cf2:	4ba58593          	addi	a1,a1,1210 # 800071a8 <etext+0x1a8>
+    80000cf6:	00007517          	auipc	a0,0x7
+    80000cfa:	e0250513          	addi	a0,a0,-510 # 80007af8 <wait_lock>
+    80000cfe:	353040ef          	jal	80005850 <initlock>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000d02:	00007497          	auipc	s1,0x7
+    80000d06:	20e48493          	addi	s1,s1,526 # 80007f10 <proc>
+      initlock(&p->lock, "proc");
+    80000d0a:	00006b17          	auipc	s6,0x6
+    80000d0e:	4aeb0b13          	addi	s6,s6,1198 # 800071b8 <etext+0x1b8>
+      p->state = UNUSED;
+      p->kstack = KSTACK((int) (p - proc));
+    80000d12:	8aa6                	mv	s5,s1
+    80000d14:	04fa5937          	lui	s2,0x4fa5
+    80000d18:	fa590913          	addi	s2,s2,-91 # 4fa4fa5 <_entry-0x7b05b05b>
+    80000d1c:	0932                	slli	s2,s2,0xc
+    80000d1e:	fa590913          	addi	s2,s2,-91
+    80000d22:	0932                	slli	s2,s2,0xc
+    80000d24:	fa590913          	addi	s2,s2,-91
+    80000d28:	0932                	slli	s2,s2,0xc
+    80000d2a:	fa590913          	addi	s2,s2,-91
+    80000d2e:	040009b7          	lui	s3,0x4000
+    80000d32:	19fd                	addi	s3,s3,-1 # 3ffffff <_entry-0x7c000001>
+    80000d34:	09b2                	slli	s3,s3,0xc
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000d36:	0000da17          	auipc	s4,0xd
+    80000d3a:	bdaa0a13          	addi	s4,s4,-1062 # 8000d910 <tickslock>
+      initlock(&p->lock, "proc");
+    80000d3e:	85da                	mv	a1,s6
+    80000d40:	8526                	mv	a0,s1
+    80000d42:	30f040ef          	jal	80005850 <initlock>
+      p->state = UNUSED;
+    80000d46:	0004ac23          	sw	zero,24(s1)
+      p->kstack = KSTACK((int) (p - proc));
+    80000d4a:	415487b3          	sub	a5,s1,s5
+    80000d4e:	878d                	srai	a5,a5,0x3
+    80000d50:	032787b3          	mul	a5,a5,s2
+    80000d54:	2785                	addiw	a5,a5,1
+    80000d56:	00d7979b          	slliw	a5,a5,0xd
+    80000d5a:	40f987b3          	sub	a5,s3,a5
+    80000d5e:	e0bc                	sd	a5,64(s1)
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000d60:	16848493          	addi	s1,s1,360
+    80000d64:	fd449de3          	bne	s1,s4,80000d3e <procinit+0x78>
+  }
+}
+    80000d68:	70e2                	ld	ra,56(sp)
+    80000d6a:	7442                	ld	s0,48(sp)
+    80000d6c:	74a2                	ld	s1,40(sp)
+    80000d6e:	7902                	ld	s2,32(sp)
+    80000d70:	69e2                	ld	s3,24(sp)
+    80000d72:	6a42                	ld	s4,16(sp)
+    80000d74:	6aa2                	ld	s5,8(sp)
+    80000d76:	6b02                	ld	s6,0(sp)
+    80000d78:	6121                	addi	sp,sp,64
+    80000d7a:	8082                	ret
+
+0000000080000d7c <cpuid>:
+// Must be called with interrupts disabled,
+// to prevent race with process being moved
+// to a different CPU.
+int
+cpuid()
+{
+    80000d7c:	1141                	addi	sp,sp,-16
+    80000d7e:	e422                	sd	s0,8(sp)
+    80000d80:	0800                	addi	s0,sp,16
+  asm volatile("mv %0, tp" : "=r" (x) );
+    80000d82:	8512                	mv	a0,tp
+  int id = r_tp();
+  return id;
+}
+    80000d84:	2501                	sext.w	a0,a0
+    80000d86:	6422                	ld	s0,8(sp)
+    80000d88:	0141                	addi	sp,sp,16
+    80000d8a:	8082                	ret
+
+0000000080000d8c <mycpu>:
+
+// Return this CPU's cpu struct.
+// Interrupts must be disabled.
+struct cpu*
+mycpu(void)
+{
+    80000d8c:	1141                	addi	sp,sp,-16
+    80000d8e:	e422                	sd	s0,8(sp)
+    80000d90:	0800                	addi	s0,sp,16
+    80000d92:	8792                	mv	a5,tp
+  int id = cpuid();
+  struct cpu *c = &cpus[id];
+    80000d94:	2781                	sext.w	a5,a5
+    80000d96:	079e                	slli	a5,a5,0x7
+  return c;
+}
+    80000d98:	00007517          	auipc	a0,0x7
+    80000d9c:	d7850513          	addi	a0,a0,-648 # 80007b10 <cpus>
+    80000da0:	953e                	add	a0,a0,a5
+    80000da2:	6422                	ld	s0,8(sp)
+    80000da4:	0141                	addi	sp,sp,16
+    80000da6:	8082                	ret
+
+0000000080000da8 <myproc>:
+
+// Return the current struct proc *, or zero if none.
+struct proc*
+myproc(void)
+{
+    80000da8:	1101                	addi	sp,sp,-32
+    80000daa:	ec06                	sd	ra,24(sp)
+    80000dac:	e822                	sd	s0,16(sp)
+    80000dae:	e426                	sd	s1,8(sp)
+    80000db0:	1000                	addi	s0,sp,32
+  push_off();
+    80000db2:	2df040ef          	jal	80005890 <push_off>
+    80000db6:	8792                	mv	a5,tp
+  struct cpu *c = mycpu();
+  struct proc *p = c->proc;
+    80000db8:	2781                	sext.w	a5,a5
+    80000dba:	079e                	slli	a5,a5,0x7
+    80000dbc:	00007717          	auipc	a4,0x7
+    80000dc0:	d2470713          	addi	a4,a4,-732 # 80007ae0 <pid_lock>
+    80000dc4:	97ba                	add	a5,a5,a4
+    80000dc6:	7b84                	ld	s1,48(a5)
+  pop_off();
+    80000dc8:	34d040ef          	jal	80005914 <pop_off>
+  return p;
+}
+    80000dcc:	8526                	mv	a0,s1
+    80000dce:	60e2                	ld	ra,24(sp)
+    80000dd0:	6442                	ld	s0,16(sp)
+    80000dd2:	64a2                	ld	s1,8(sp)
+    80000dd4:	6105                	addi	sp,sp,32
+    80000dd6:	8082                	ret
+
+0000000080000dd8 <forkret>:
+
+// A fork child's very first scheduling by scheduler()
+// will swtch to forkret.
+void
+forkret(void)
+{
+    80000dd8:	1141                	addi	sp,sp,-16
+    80000dda:	e406                	sd	ra,8(sp)
+    80000ddc:	e022                	sd	s0,0(sp)
+    80000dde:	0800                	addi	s0,sp,16
+  static int first = 1;
+
+  // Still holding p->lock from scheduler.
+  release(&myproc()->lock);
+    80000de0:	fc9ff0ef          	jal	80000da8 <myproc>
+    80000de4:	385040ef          	jal	80005968 <release>
+
+  if (first) {
+    80000de8:	00007797          	auipc	a5,0x7
+    80000dec:	c587a783          	lw	a5,-936(a5) # 80007a40 <first.1>
+    80000df0:	e799                	bnez	a5,80000dfe <forkret+0x26>
+    first = 0;
+    // ensure other cores see first=0.
+    __sync_synchronize();
+  }
+
+  usertrapret();
+    80000df2:	315000ef          	jal	80001906 <usertrapret>
+}
+    80000df6:	60a2                	ld	ra,8(sp)
+    80000df8:	6402                	ld	s0,0(sp)
+    80000dfa:	0141                	addi	sp,sp,16
+    80000dfc:	8082                	ret
+    fsinit(ROOTDEV);
+    80000dfe:	4505                	li	a0,1
+    80000e00:	766010ef          	jal	80002566 <fsinit>
+    first = 0;
+    80000e04:	00007797          	auipc	a5,0x7
+    80000e08:	c207ae23          	sw	zero,-964(a5) # 80007a40 <first.1>
+    __sync_synchronize();
+    80000e0c:	0ff0000f          	fence
+    80000e10:	b7cd                	j	80000df2 <forkret+0x1a>
+
+0000000080000e12 <allocpid>:
+{
+    80000e12:	1101                	addi	sp,sp,-32
+    80000e14:	ec06                	sd	ra,24(sp)
+    80000e16:	e822                	sd	s0,16(sp)
+    80000e18:	e426                	sd	s1,8(sp)
+    80000e1a:	e04a                	sd	s2,0(sp)
+    80000e1c:	1000                	addi	s0,sp,32
+  acquire(&pid_lock);
+    80000e1e:	00007917          	auipc	s2,0x7
+    80000e22:	cc290913          	addi	s2,s2,-830 # 80007ae0 <pid_lock>
+    80000e26:	854a                	mv	a0,s2
+    80000e28:	2a9040ef          	jal	800058d0 <acquire>
+  pid = nextpid;
+    80000e2c:	00007797          	auipc	a5,0x7
+    80000e30:	c1878793          	addi	a5,a5,-1000 # 80007a44 <nextpid>
+    80000e34:	4384                	lw	s1,0(a5)
+  nextpid = nextpid + 1;
+    80000e36:	0014871b          	addiw	a4,s1,1
+    80000e3a:	c398                	sw	a4,0(a5)
+  release(&pid_lock);
+    80000e3c:	854a                	mv	a0,s2
+    80000e3e:	32b040ef          	jal	80005968 <release>
+}
+    80000e42:	8526                	mv	a0,s1
+    80000e44:	60e2                	ld	ra,24(sp)
+    80000e46:	6442                	ld	s0,16(sp)
+    80000e48:	64a2                	ld	s1,8(sp)
+    80000e4a:	6902                	ld	s2,0(sp)
+    80000e4c:	6105                	addi	sp,sp,32
+    80000e4e:	8082                	ret
+
+0000000080000e50 <proc_pagetable>:
+{
+    80000e50:	1101                	addi	sp,sp,-32
+    80000e52:	ec06                	sd	ra,24(sp)
+    80000e54:	e822                	sd	s0,16(sp)
+    80000e56:	e426                	sd	s1,8(sp)
+    80000e58:	e04a                	sd	s2,0(sp)
+    80000e5a:	1000                	addi	s0,sp,32
+    80000e5c:	892a                	mv	s2,a0
+  pagetable = uvmcreate();
+    80000e5e:	8e1ff0ef          	jal	8000073e <uvmcreate>
+    80000e62:	84aa                	mv	s1,a0
+  if(pagetable == 0)
+    80000e64:	cd05                	beqz	a0,80000e9c <proc_pagetable+0x4c>
+  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
+    80000e66:	4729                	li	a4,10
+    80000e68:	00005697          	auipc	a3,0x5
+    80000e6c:	19868693          	addi	a3,a3,408 # 80006000 <_trampoline>
+    80000e70:	6605                	lui	a2,0x1
+    80000e72:	040005b7          	lui	a1,0x4000
+    80000e76:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80000e78:	05b2                	slli	a1,a1,0xc
+    80000e7a:	e62ff0ef          	jal	800004dc <mappages>
+    80000e7e:	02054663          	bltz	a0,80000eaa <proc_pagetable+0x5a>
+  if(mappages(pagetable, TRAPFRAME, PGSIZE,
+    80000e82:	4719                	li	a4,6
+    80000e84:	05893683          	ld	a3,88(s2)
+    80000e88:	6605                	lui	a2,0x1
+    80000e8a:	020005b7          	lui	a1,0x2000
+    80000e8e:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
+    80000e90:	05b6                	slli	a1,a1,0xd
+    80000e92:	8526                	mv	a0,s1
+    80000e94:	e48ff0ef          	jal	800004dc <mappages>
+    80000e98:	00054f63          	bltz	a0,80000eb6 <proc_pagetable+0x66>
+}
+    80000e9c:	8526                	mv	a0,s1
+    80000e9e:	60e2                	ld	ra,24(sp)
+    80000ea0:	6442                	ld	s0,16(sp)
+    80000ea2:	64a2                	ld	s1,8(sp)
+    80000ea4:	6902                	ld	s2,0(sp)
+    80000ea6:	6105                	addi	sp,sp,32
+    80000ea8:	8082                	ret
+    uvmfree(pagetable, 0);
+    80000eaa:	4581                	li	a1,0
+    80000eac:	8526                	mv	a0,s1
+    80000eae:	a5fff0ef          	jal	8000090c <uvmfree>
+    return 0;
+    80000eb2:	4481                	li	s1,0
+    80000eb4:	b7e5                	j	80000e9c <proc_pagetable+0x4c>
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    80000eb6:	4681                	li	a3,0
+    80000eb8:	4605                	li	a2,1
+    80000eba:	040005b7          	lui	a1,0x4000
+    80000ebe:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80000ec0:	05b2                	slli	a1,a1,0xc
+    80000ec2:	8526                	mv	a0,s1
+    80000ec4:	fbeff0ef          	jal	80000682 <uvmunmap>
+    uvmfree(pagetable, 0);
+    80000ec8:	4581                	li	a1,0
+    80000eca:	8526                	mv	a0,s1
+    80000ecc:	a41ff0ef          	jal	8000090c <uvmfree>
+    return 0;
+    80000ed0:	4481                	li	s1,0
+    80000ed2:	b7e9                	j	80000e9c <proc_pagetable+0x4c>
+
+0000000080000ed4 <proc_freepagetable>:
+{
+    80000ed4:	1101                	addi	sp,sp,-32
+    80000ed6:	ec06                	sd	ra,24(sp)
+    80000ed8:	e822                	sd	s0,16(sp)
+    80000eda:	e426                	sd	s1,8(sp)
+    80000edc:	e04a                	sd	s2,0(sp)
+    80000ede:	1000                	addi	s0,sp,32
+    80000ee0:	84aa                	mv	s1,a0
+    80000ee2:	892e                	mv	s2,a1
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    80000ee4:	4681                	li	a3,0
+    80000ee6:	4605                	li	a2,1
+    80000ee8:	040005b7          	lui	a1,0x4000
+    80000eec:	15fd                	addi	a1,a1,-1 # 3ffffff <_entry-0x7c000001>
+    80000eee:	05b2                	slli	a1,a1,0xc
+    80000ef0:	f92ff0ef          	jal	80000682 <uvmunmap>
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    80000ef4:	4681                	li	a3,0
+    80000ef6:	4605                	li	a2,1
+    80000ef8:	020005b7          	lui	a1,0x2000
+    80000efc:	15fd                	addi	a1,a1,-1 # 1ffffff <_entry-0x7e000001>
+    80000efe:	05b6                	slli	a1,a1,0xd
+    80000f00:	8526                	mv	a0,s1
+    80000f02:	f80ff0ef          	jal	80000682 <uvmunmap>
+  uvmfree(pagetable, sz);
+    80000f06:	85ca                	mv	a1,s2
+    80000f08:	8526                	mv	a0,s1
+    80000f0a:	a03ff0ef          	jal	8000090c <uvmfree>
+}
+    80000f0e:	60e2                	ld	ra,24(sp)
+    80000f10:	6442                	ld	s0,16(sp)
+    80000f12:	64a2                	ld	s1,8(sp)
+    80000f14:	6902                	ld	s2,0(sp)
+    80000f16:	6105                	addi	sp,sp,32
+    80000f18:	8082                	ret
+
+0000000080000f1a <freeproc>:
+{
+    80000f1a:	1101                	addi	sp,sp,-32
+    80000f1c:	ec06                	sd	ra,24(sp)
+    80000f1e:	e822                	sd	s0,16(sp)
+    80000f20:	e426                	sd	s1,8(sp)
+    80000f22:	1000                	addi	s0,sp,32
+    80000f24:	84aa                	mv	s1,a0
+  if(p->trapframe)
+    80000f26:	6d28                	ld	a0,88(a0)
+    80000f28:	c119                	beqz	a0,80000f2e <freeproc+0x14>
+    kfree((void*)p->trapframe);
+    80000f2a:	8f2ff0ef          	jal	8000001c <kfree>
+  p->trapframe = 0;
+    80000f2e:	0404bc23          	sd	zero,88(s1)
+  if(p->pagetable)
+    80000f32:	68a8                	ld	a0,80(s1)
+    80000f34:	c501                	beqz	a0,80000f3c <freeproc+0x22>
+    proc_freepagetable(p->pagetable, p->sz);
+    80000f36:	64ac                	ld	a1,72(s1)
+    80000f38:	f9dff0ef          	jal	80000ed4 <proc_freepagetable>
+  p->pagetable = 0;
+    80000f3c:	0404b823          	sd	zero,80(s1)
+  p->sz = 0;
+    80000f40:	0404b423          	sd	zero,72(s1)
+  p->pid = 0;
+    80000f44:	0204a823          	sw	zero,48(s1)
+  p->parent = 0;
+    80000f48:	0204bc23          	sd	zero,56(s1)
+  p->name[0] = 0;
+    80000f4c:	14048c23          	sb	zero,344(s1)
+  p->chan = 0;
+    80000f50:	0204b023          	sd	zero,32(s1)
+  p->killed = 0;
+    80000f54:	0204a423          	sw	zero,40(s1)
+  p->xstate = 0;
+    80000f58:	0204a623          	sw	zero,44(s1)
+  p->state = UNUSED;
+    80000f5c:	0004ac23          	sw	zero,24(s1)
+}
+    80000f60:	60e2                	ld	ra,24(sp)
+    80000f62:	6442                	ld	s0,16(sp)
+    80000f64:	64a2                	ld	s1,8(sp)
+    80000f66:	6105                	addi	sp,sp,32
+    80000f68:	8082                	ret
+
+0000000080000f6a <allocproc>:
+{
+    80000f6a:	1101                	addi	sp,sp,-32
+    80000f6c:	ec06                	sd	ra,24(sp)
+    80000f6e:	e822                	sd	s0,16(sp)
+    80000f70:	e426                	sd	s1,8(sp)
+    80000f72:	e04a                	sd	s2,0(sp)
+    80000f74:	1000                	addi	s0,sp,32
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000f76:	00007497          	auipc	s1,0x7
+    80000f7a:	f9a48493          	addi	s1,s1,-102 # 80007f10 <proc>
+    80000f7e:	0000d917          	auipc	s2,0xd
+    80000f82:	99290913          	addi	s2,s2,-1646 # 8000d910 <tickslock>
+    acquire(&p->lock);
+    80000f86:	8526                	mv	a0,s1
+    80000f88:	149040ef          	jal	800058d0 <acquire>
+    if(p->state == UNUSED) {
+    80000f8c:	4c9c                	lw	a5,24(s1)
+    80000f8e:	cb91                	beqz	a5,80000fa2 <allocproc+0x38>
+      release(&p->lock);
+    80000f90:	8526                	mv	a0,s1
+    80000f92:	1d7040ef          	jal	80005968 <release>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    80000f96:	16848493          	addi	s1,s1,360
+    80000f9a:	ff2496e3          	bne	s1,s2,80000f86 <allocproc+0x1c>
+  return 0;
+    80000f9e:	4481                	li	s1,0
+    80000fa0:	a089                	j	80000fe2 <allocproc+0x78>
+  p->pid = allocpid();
+    80000fa2:	e71ff0ef          	jal	80000e12 <allocpid>
+    80000fa6:	d888                	sw	a0,48(s1)
+  p->state = USED;
+    80000fa8:	4785                	li	a5,1
+    80000faa:	cc9c                	sw	a5,24(s1)
+  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+    80000fac:	952ff0ef          	jal	800000fe <kalloc>
+    80000fb0:	892a                	mv	s2,a0
+    80000fb2:	eca8                	sd	a0,88(s1)
+    80000fb4:	cd15                	beqz	a0,80000ff0 <allocproc+0x86>
+  p->pagetable = proc_pagetable(p);
+    80000fb6:	8526                	mv	a0,s1
+    80000fb8:	e99ff0ef          	jal	80000e50 <proc_pagetable>
+    80000fbc:	892a                	mv	s2,a0
+    80000fbe:	e8a8                	sd	a0,80(s1)
+  if(p->pagetable == 0){
+    80000fc0:	c121                	beqz	a0,80001000 <allocproc+0x96>
+  memset(&p->context, 0, sizeof(p->context));
+    80000fc2:	07000613          	li	a2,112
+    80000fc6:	4581                	li	a1,0
+    80000fc8:	06048513          	addi	a0,s1,96
+    80000fcc:	9c4ff0ef          	jal	80000190 <memset>
+  p->context.ra = (uint64)forkret;
+    80000fd0:	00000797          	auipc	a5,0x0
+    80000fd4:	e0878793          	addi	a5,a5,-504 # 80000dd8 <forkret>
+    80000fd8:	f0bc                	sd	a5,96(s1)
+  p->context.sp = p->kstack + PGSIZE;
+    80000fda:	60bc                	ld	a5,64(s1)
+    80000fdc:	6705                	lui	a4,0x1
+    80000fde:	97ba                	add	a5,a5,a4
+    80000fe0:	f4bc                	sd	a5,104(s1)
+}
+    80000fe2:	8526                	mv	a0,s1
+    80000fe4:	60e2                	ld	ra,24(sp)
+    80000fe6:	6442                	ld	s0,16(sp)
+    80000fe8:	64a2                	ld	s1,8(sp)
+    80000fea:	6902                	ld	s2,0(sp)
+    80000fec:	6105                	addi	sp,sp,32
+    80000fee:	8082                	ret
+    freeproc(p);
+    80000ff0:	8526                	mv	a0,s1
+    80000ff2:	f29ff0ef          	jal	80000f1a <freeproc>
+    release(&p->lock);
+    80000ff6:	8526                	mv	a0,s1
+    80000ff8:	171040ef          	jal	80005968 <release>
+    return 0;
+    80000ffc:	84ca                	mv	s1,s2
+    80000ffe:	b7d5                	j	80000fe2 <allocproc+0x78>
+    freeproc(p);
+    80001000:	8526                	mv	a0,s1
+    80001002:	f19ff0ef          	jal	80000f1a <freeproc>
+    release(&p->lock);
+    80001006:	8526                	mv	a0,s1
+    80001008:	161040ef          	jal	80005968 <release>
+    return 0;
+    8000100c:	84ca                	mv	s1,s2
+    8000100e:	bfd1                	j	80000fe2 <allocproc+0x78>
+
+0000000080001010 <userinit>:
+{
+    80001010:	1101                	addi	sp,sp,-32
+    80001012:	ec06                	sd	ra,24(sp)
+    80001014:	e822                	sd	s0,16(sp)
+    80001016:	e426                	sd	s1,8(sp)
+    80001018:	1000                	addi	s0,sp,32
+  p = allocproc();
+    8000101a:	f51ff0ef          	jal	80000f6a <allocproc>
+    8000101e:	84aa                	mv	s1,a0
+  initproc = p;
+    80001020:	00007797          	auipc	a5,0x7
+    80001024:	a8a7b023          	sd	a0,-1408(a5) # 80007aa0 <initproc>
+  uvmfirst(p->pagetable, initcode, sizeof(initcode));
+    80001028:	03400613          	li	a2,52
+    8000102c:	00007597          	auipc	a1,0x7
+    80001030:	a2458593          	addi	a1,a1,-1500 # 80007a50 <initcode>
+    80001034:	6928                	ld	a0,80(a0)
+    80001036:	f2eff0ef          	jal	80000764 <uvmfirst>
+  p->sz = PGSIZE;
+    8000103a:	6785                	lui	a5,0x1
+    8000103c:	e4bc                	sd	a5,72(s1)
+  p->trapframe->epc = 0;      // user program counter
+    8000103e:	6cb8                	ld	a4,88(s1)
+    80001040:	00073c23          	sd	zero,24(a4) # 1018 <_entry-0x7fffefe8>
+  p->trapframe->sp = PGSIZE;  // user stack pointer
+    80001044:	6cb8                	ld	a4,88(s1)
+    80001046:	fb1c                	sd	a5,48(a4)
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+    80001048:	4641                	li	a2,16
+    8000104a:	00006597          	auipc	a1,0x6
+    8000104e:	17658593          	addi	a1,a1,374 # 800071c0 <etext+0x1c0>
+    80001052:	15848513          	addi	a0,s1,344
+    80001056:	a78ff0ef          	jal	800002ce <safestrcpy>
+  p->cwd = namei("/");
+    8000105a:	00006517          	auipc	a0,0x6
+    8000105e:	17650513          	addi	a0,a0,374 # 800071d0 <etext+0x1d0>
+    80001062:	613010ef          	jal	80002e74 <namei>
+    80001066:	14a4b823          	sd	a0,336(s1)
+  p->state = RUNNABLE;
+    8000106a:	478d                	li	a5,3
+    8000106c:	cc9c                	sw	a5,24(s1)
+  release(&p->lock);
+    8000106e:	8526                	mv	a0,s1
+    80001070:	0f9040ef          	jal	80005968 <release>
+}
+    80001074:	60e2                	ld	ra,24(sp)
+    80001076:	6442                	ld	s0,16(sp)
+    80001078:	64a2                	ld	s1,8(sp)
+    8000107a:	6105                	addi	sp,sp,32
+    8000107c:	8082                	ret
+
+000000008000107e <growproc>:
+{
+    8000107e:	1101                	addi	sp,sp,-32
+    80001080:	ec06                	sd	ra,24(sp)
+    80001082:	e822                	sd	s0,16(sp)
+    80001084:	e426                	sd	s1,8(sp)
+    80001086:	e04a                	sd	s2,0(sp)
+    80001088:	1000                	addi	s0,sp,32
+    8000108a:	892a                	mv	s2,a0
+  struct proc *p = myproc();
+    8000108c:	d1dff0ef          	jal	80000da8 <myproc>
+    80001090:	84aa                	mv	s1,a0
+  sz = p->sz;
+    80001092:	652c                	ld	a1,72(a0)
+  if(n > 0){
+    80001094:	01204c63          	bgtz	s2,800010ac <growproc+0x2e>
+  } else if(n < 0){
+    80001098:	02094463          	bltz	s2,800010c0 <growproc+0x42>
+  p->sz = sz;
+    8000109c:	e4ac                	sd	a1,72(s1)
+  return 0;
+    8000109e:	4501                	li	a0,0
+}
+    800010a0:	60e2                	ld	ra,24(sp)
+    800010a2:	6442                	ld	s0,16(sp)
+    800010a4:	64a2                	ld	s1,8(sp)
+    800010a6:	6902                	ld	s2,0(sp)
+    800010a8:	6105                	addi	sp,sp,32
+    800010aa:	8082                	ret
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    800010ac:	4691                	li	a3,4
+    800010ae:	00b90633          	add	a2,s2,a1
+    800010b2:	6928                	ld	a0,80(a0)
+    800010b4:	f52ff0ef          	jal	80000806 <uvmalloc>
+    800010b8:	85aa                	mv	a1,a0
+    800010ba:	f16d                	bnez	a0,8000109c <growproc+0x1e>
+      return -1;
+    800010bc:	557d                	li	a0,-1
+    800010be:	b7cd                	j	800010a0 <growproc+0x22>
+    sz = uvmdealloc(p->pagetable, sz, sz + n);
+    800010c0:	00b90633          	add	a2,s2,a1
+    800010c4:	6928                	ld	a0,80(a0)
+    800010c6:	efcff0ef          	jal	800007c2 <uvmdealloc>
+    800010ca:	85aa                	mv	a1,a0
+    800010cc:	bfc1                	j	8000109c <growproc+0x1e>
+
+00000000800010ce <fork>:
+{
+    800010ce:	7139                	addi	sp,sp,-64
+    800010d0:	fc06                	sd	ra,56(sp)
+    800010d2:	f822                	sd	s0,48(sp)
+    800010d4:	f04a                	sd	s2,32(sp)
+    800010d6:	e456                	sd	s5,8(sp)
+    800010d8:	0080                	addi	s0,sp,64
+  struct proc *p = myproc();
+    800010da:	ccfff0ef          	jal	80000da8 <myproc>
+    800010de:	8aaa                	mv	s5,a0
+  if((np = allocproc()) == 0){
+    800010e0:	e8bff0ef          	jal	80000f6a <allocproc>
+    800010e4:	0e050e63          	beqz	a0,800011e0 <fork+0x112>
+    800010e8:	ec4e                	sd	s3,24(sp)
+    800010ea:	89aa                	mv	s3,a0
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+    800010ec:	048ab603          	ld	a2,72(s5)
+    800010f0:	692c                	ld	a1,80(a0)
+    800010f2:	050ab503          	ld	a0,80(s5)
+    800010f6:	849ff0ef          	jal	8000093e <uvmcopy>
+    800010fa:	04054e63          	bltz	a0,80001156 <fork+0x88>
+    800010fe:	f426                	sd	s1,40(sp)
+    80001100:	e852                	sd	s4,16(sp)
+  np->sz = p->sz;
+    80001102:	048ab783          	ld	a5,72(s5)
+    80001106:	04f9b423          	sd	a5,72(s3)
+  *(np->trapframe) = *(p->trapframe);
+    8000110a:	058ab683          	ld	a3,88(s5)
+    8000110e:	87b6                	mv	a5,a3
+    80001110:	0589b703          	ld	a4,88(s3)
+    80001114:	12068693          	addi	a3,a3,288
+    80001118:	0007b803          	ld	a6,0(a5) # 1000 <_entry-0x7ffff000>
+    8000111c:	6788                	ld	a0,8(a5)
+    8000111e:	6b8c                	ld	a1,16(a5)
+    80001120:	6f90                	ld	a2,24(a5)
+    80001122:	01073023          	sd	a6,0(a4)
+    80001126:	e708                	sd	a0,8(a4)
+    80001128:	eb0c                	sd	a1,16(a4)
+    8000112a:	ef10                	sd	a2,24(a4)
+    8000112c:	02078793          	addi	a5,a5,32
+    80001130:	02070713          	addi	a4,a4,32
+    80001134:	fed792e3          	bne	a5,a3,80001118 <fork+0x4a>
+  np->trapframe->a0 = 0;
+    80001138:	0589b783          	ld	a5,88(s3)
+    8000113c:	0607b823          	sd	zero,112(a5)
+    np->trace_mask = p->trace_mask;  // Inherit trace setting
+    80001140:	034aa783          	lw	a5,52(s5)
+    80001144:	02f9aa23          	sw	a5,52(s3)
+  for(i = 0; i < NOFILE; i++)
+    80001148:	0d0a8493          	addi	s1,s5,208
+    8000114c:	0d098913          	addi	s2,s3,208
+    80001150:	150a8a13          	addi	s4,s5,336
+    80001154:	a831                	j	80001170 <fork+0xa2>
+    freeproc(np);
+    80001156:	854e                	mv	a0,s3
+    80001158:	dc3ff0ef          	jal	80000f1a <freeproc>
+    release(&np->lock);
+    8000115c:	854e                	mv	a0,s3
+    8000115e:	00b040ef          	jal	80005968 <release>
+    return -1;
+    80001162:	597d                	li	s2,-1
+    80001164:	69e2                	ld	s3,24(sp)
+    80001166:	a0b5                	j	800011d2 <fork+0x104>
+  for(i = 0; i < NOFILE; i++)
+    80001168:	04a1                	addi	s1,s1,8
+    8000116a:	0921                	addi	s2,s2,8
+    8000116c:	01448963          	beq	s1,s4,8000117e <fork+0xb0>
+    if(p->ofile[i])
+    80001170:	6088                	ld	a0,0(s1)
+    80001172:	d97d                	beqz	a0,80001168 <fork+0x9a>
+      np->ofile[i] = filedup(p->ofile[i]);
+    80001174:	290020ef          	jal	80003404 <filedup>
+    80001178:	00a93023          	sd	a0,0(s2)
+    8000117c:	b7f5                	j	80001168 <fork+0x9a>
+  np->cwd = idup(p->cwd);
+    8000117e:	150ab503          	ld	a0,336(s5)
+    80001182:	5e2010ef          	jal	80002764 <idup>
+    80001186:	14a9b823          	sd	a0,336(s3)
+  safestrcpy(np->name, p->name, sizeof(p->name));
+    8000118a:	4641                	li	a2,16
+    8000118c:	158a8593          	addi	a1,s5,344
+    80001190:	15898513          	addi	a0,s3,344
+    80001194:	93aff0ef          	jal	800002ce <safestrcpy>
+  pid = np->pid;
+    80001198:	0309a903          	lw	s2,48(s3)
+  release(&np->lock);
+    8000119c:	854e                	mv	a0,s3
+    8000119e:	7ca040ef          	jal	80005968 <release>
+  acquire(&wait_lock);
+    800011a2:	00007497          	auipc	s1,0x7
+    800011a6:	95648493          	addi	s1,s1,-1706 # 80007af8 <wait_lock>
+    800011aa:	8526                	mv	a0,s1
+    800011ac:	724040ef          	jal	800058d0 <acquire>
+  np->parent = p;
+    800011b0:	0359bc23          	sd	s5,56(s3)
+  release(&wait_lock);
+    800011b4:	8526                	mv	a0,s1
+    800011b6:	7b2040ef          	jal	80005968 <release>
+  acquire(&np->lock);
+    800011ba:	854e                	mv	a0,s3
+    800011bc:	714040ef          	jal	800058d0 <acquire>
+  np->state = RUNNABLE;
+    800011c0:	478d                	li	a5,3
+    800011c2:	00f9ac23          	sw	a5,24(s3)
+  release(&np->lock);
+    800011c6:	854e                	mv	a0,s3
+    800011c8:	7a0040ef          	jal	80005968 <release>
+  return pid;
+    800011cc:	74a2                	ld	s1,40(sp)
+    800011ce:	69e2                	ld	s3,24(sp)
+    800011d0:	6a42                	ld	s4,16(sp)
+}
+    800011d2:	854a                	mv	a0,s2
+    800011d4:	70e2                	ld	ra,56(sp)
+    800011d6:	7442                	ld	s0,48(sp)
+    800011d8:	7902                	ld	s2,32(sp)
+    800011da:	6aa2                	ld	s5,8(sp)
+    800011dc:	6121                	addi	sp,sp,64
+    800011de:	8082                	ret
+    return -1;
+    800011e0:	597d                	li	s2,-1
+    800011e2:	bfc5                	j	800011d2 <fork+0x104>
+
+00000000800011e4 <scheduler>:
+{
+    800011e4:	715d                	addi	sp,sp,-80
+    800011e6:	e486                	sd	ra,72(sp)
+    800011e8:	e0a2                	sd	s0,64(sp)
+    800011ea:	fc26                	sd	s1,56(sp)
+    800011ec:	f84a                	sd	s2,48(sp)
+    800011ee:	f44e                	sd	s3,40(sp)
+    800011f0:	f052                	sd	s4,32(sp)
+    800011f2:	ec56                	sd	s5,24(sp)
+    800011f4:	e85a                	sd	s6,16(sp)
+    800011f6:	e45e                	sd	s7,8(sp)
+    800011f8:	e062                	sd	s8,0(sp)
+    800011fa:	0880                	addi	s0,sp,80
+    800011fc:	8792                	mv	a5,tp
+  int id = r_tp();
+    800011fe:	2781                	sext.w	a5,a5
+  c->proc = 0;
+    80001200:	00779b13          	slli	s6,a5,0x7
+    80001204:	00007717          	auipc	a4,0x7
+    80001208:	8dc70713          	addi	a4,a4,-1828 # 80007ae0 <pid_lock>
+    8000120c:	975a                	add	a4,a4,s6
+    8000120e:	02073823          	sd	zero,48(a4)
+        swtch(&c->context, &p->context);
+    80001212:	00007717          	auipc	a4,0x7
+    80001216:	90670713          	addi	a4,a4,-1786 # 80007b18 <cpus+0x8>
+    8000121a:	9b3a                	add	s6,s6,a4
+        p->state = RUNNING;
+    8000121c:	4c11                	li	s8,4
+        c->proc = p;
+    8000121e:	079e                	slli	a5,a5,0x7
+    80001220:	00007a17          	auipc	s4,0x7
+    80001224:	8c0a0a13          	addi	s4,s4,-1856 # 80007ae0 <pid_lock>
+    80001228:	9a3e                	add	s4,s4,a5
+        found = 1;
+    8000122a:	4b85                	li	s7,1
+    for(p = proc; p < &proc[NPROC]; p++) {
+    8000122c:	0000c997          	auipc	s3,0xc
+    80001230:	6e498993          	addi	s3,s3,1764 # 8000d910 <tickslock>
+    80001234:	a0a9                	j	8000127e <scheduler+0x9a>
+      release(&p->lock);
+    80001236:	8526                	mv	a0,s1
+    80001238:	730040ef          	jal	80005968 <release>
+    for(p = proc; p < &proc[NPROC]; p++) {
+    8000123c:	16848493          	addi	s1,s1,360
+    80001240:	03348563          	beq	s1,s3,8000126a <scheduler+0x86>
+      acquire(&p->lock);
+    80001244:	8526                	mv	a0,s1
+    80001246:	68a040ef          	jal	800058d0 <acquire>
+      if(p->state == RUNNABLE) {
+    8000124a:	4c9c                	lw	a5,24(s1)
+    8000124c:	ff2795e3          	bne	a5,s2,80001236 <scheduler+0x52>
+        p->state = RUNNING;
+    80001250:	0184ac23          	sw	s8,24(s1)
+        c->proc = p;
+    80001254:	029a3823          	sd	s1,48(s4)
+        swtch(&c->context, &p->context);
+    80001258:	06048593          	addi	a1,s1,96
+    8000125c:	855a                	mv	a0,s6
+    8000125e:	602000ef          	jal	80001860 <swtch>
+        c->proc = 0;
+    80001262:	020a3823          	sd	zero,48(s4)
+        found = 1;
+    80001266:	8ade                	mv	s5,s7
+    80001268:	b7f9                	j	80001236 <scheduler+0x52>
+    if(found == 0) {
+    8000126a:	000a9a63          	bnez	s5,8000127e <scheduler+0x9a>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    8000126e:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80001272:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80001276:	10079073          	csrw	sstatus,a5
+      asm volatile("wfi");
+    8000127a:	10500073          	wfi
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    8000127e:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80001282:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80001286:	10079073          	csrw	sstatus,a5
+    int found = 0;
+    8000128a:	4a81                	li	s5,0
+    for(p = proc; p < &proc[NPROC]; p++) {
+    8000128c:	00007497          	auipc	s1,0x7
+    80001290:	c8448493          	addi	s1,s1,-892 # 80007f10 <proc>
+      if(p->state == RUNNABLE) {
+    80001294:	490d                	li	s2,3
+    80001296:	b77d                	j	80001244 <scheduler+0x60>
+
+0000000080001298 <sched>:
+{
+    80001298:	7179                	addi	sp,sp,-48
+    8000129a:	f406                	sd	ra,40(sp)
+    8000129c:	f022                	sd	s0,32(sp)
+    8000129e:	ec26                	sd	s1,24(sp)
+    800012a0:	e84a                	sd	s2,16(sp)
+    800012a2:	e44e                	sd	s3,8(sp)
+    800012a4:	1800                	addi	s0,sp,48
+  struct proc *p = myproc();
+    800012a6:	b03ff0ef          	jal	80000da8 <myproc>
+    800012aa:	84aa                	mv	s1,a0
+  if(!holding(&p->lock))
+    800012ac:	5ba040ef          	jal	80005866 <holding>
+    800012b0:	c92d                	beqz	a0,80001322 <sched+0x8a>
+  asm volatile("mv %0, tp" : "=r" (x) );
+    800012b2:	8792                	mv	a5,tp
+  if(mycpu()->noff != 1)
+    800012b4:	2781                	sext.w	a5,a5
+    800012b6:	079e                	slli	a5,a5,0x7
+    800012b8:	00007717          	auipc	a4,0x7
+    800012bc:	82870713          	addi	a4,a4,-2008 # 80007ae0 <pid_lock>
+    800012c0:	97ba                	add	a5,a5,a4
+    800012c2:	0a87a703          	lw	a4,168(a5)
+    800012c6:	4785                	li	a5,1
+    800012c8:	06f71363          	bne	a4,a5,8000132e <sched+0x96>
+  if(p->state == RUNNING)
+    800012cc:	4c98                	lw	a4,24(s1)
+    800012ce:	4791                	li	a5,4
+    800012d0:	06f70563          	beq	a4,a5,8000133a <sched+0xa2>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    800012d4:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    800012d8:	8b89                	andi	a5,a5,2
+  if(intr_get())
+    800012da:	e7b5                	bnez	a5,80001346 <sched+0xae>
+  asm volatile("mv %0, tp" : "=r" (x) );
+    800012dc:	8792                	mv	a5,tp
+  intena = mycpu()->intena;
+    800012de:	00007917          	auipc	s2,0x7
+    800012e2:	80290913          	addi	s2,s2,-2046 # 80007ae0 <pid_lock>
+    800012e6:	2781                	sext.w	a5,a5
+    800012e8:	079e                	slli	a5,a5,0x7
+    800012ea:	97ca                	add	a5,a5,s2
+    800012ec:	0ac7a983          	lw	s3,172(a5)
+    800012f0:	8792                	mv	a5,tp
+  swtch(&p->context, &mycpu()->context);
+    800012f2:	2781                	sext.w	a5,a5
+    800012f4:	079e                	slli	a5,a5,0x7
+    800012f6:	00007597          	auipc	a1,0x7
+    800012fa:	82258593          	addi	a1,a1,-2014 # 80007b18 <cpus+0x8>
+    800012fe:	95be                	add	a1,a1,a5
+    80001300:	06048513          	addi	a0,s1,96
+    80001304:	55c000ef          	jal	80001860 <swtch>
+    80001308:	8792                	mv	a5,tp
+  mycpu()->intena = intena;
+    8000130a:	2781                	sext.w	a5,a5
+    8000130c:	079e                	slli	a5,a5,0x7
+    8000130e:	993e                	add	s2,s2,a5
+    80001310:	0b392623          	sw	s3,172(s2)
+}
+    80001314:	70a2                	ld	ra,40(sp)
+    80001316:	7402                	ld	s0,32(sp)
+    80001318:	64e2                	ld	s1,24(sp)
+    8000131a:	6942                	ld	s2,16(sp)
+    8000131c:	69a2                	ld	s3,8(sp)
+    8000131e:	6145                	addi	sp,sp,48
+    80001320:	8082                	ret
+    panic("sched p->lock");
+    80001322:	00006517          	auipc	a0,0x6
+    80001326:	eb650513          	addi	a0,a0,-330 # 800071d8 <etext+0x1d8>
+    8000132a:	278040ef          	jal	800055a2 <panic>
+    panic("sched locks");
+    8000132e:	00006517          	auipc	a0,0x6
+    80001332:	eba50513          	addi	a0,a0,-326 # 800071e8 <etext+0x1e8>
+    80001336:	26c040ef          	jal	800055a2 <panic>
+    panic("sched running");
+    8000133a:	00006517          	auipc	a0,0x6
+    8000133e:	ebe50513          	addi	a0,a0,-322 # 800071f8 <etext+0x1f8>
+    80001342:	260040ef          	jal	800055a2 <panic>
+    panic("sched interruptible");
+    80001346:	00006517          	auipc	a0,0x6
+    8000134a:	ec250513          	addi	a0,a0,-318 # 80007208 <etext+0x208>
+    8000134e:	254040ef          	jal	800055a2 <panic>
+
+0000000080001352 <yield>:
+{
+    80001352:	1101                	addi	sp,sp,-32
+    80001354:	ec06                	sd	ra,24(sp)
+    80001356:	e822                	sd	s0,16(sp)
+    80001358:	e426                	sd	s1,8(sp)
+    8000135a:	1000                	addi	s0,sp,32
+  struct proc *p = myproc();
+    8000135c:	a4dff0ef          	jal	80000da8 <myproc>
+    80001360:	84aa                	mv	s1,a0
+  acquire(&p->lock);
+    80001362:	56e040ef          	jal	800058d0 <acquire>
+  p->state = RUNNABLE;
+    80001366:	478d                	li	a5,3
+    80001368:	cc9c                	sw	a5,24(s1)
+  sched();
+    8000136a:	f2fff0ef          	jal	80001298 <sched>
+  release(&p->lock);
+    8000136e:	8526                	mv	a0,s1
+    80001370:	5f8040ef          	jal	80005968 <release>
+}
+    80001374:	60e2                	ld	ra,24(sp)
+    80001376:	6442                	ld	s0,16(sp)
+    80001378:	64a2                	ld	s1,8(sp)
+    8000137a:	6105                	addi	sp,sp,32
+    8000137c:	8082                	ret
+
+000000008000137e <sleep>:
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+    8000137e:	7179                	addi	sp,sp,-48
+    80001380:	f406                	sd	ra,40(sp)
+    80001382:	f022                	sd	s0,32(sp)
+    80001384:	ec26                	sd	s1,24(sp)
+    80001386:	e84a                	sd	s2,16(sp)
+    80001388:	e44e                	sd	s3,8(sp)
+    8000138a:	1800                	addi	s0,sp,48
+    8000138c:	89aa                	mv	s3,a0
+    8000138e:	892e                	mv	s2,a1
+  struct proc *p = myproc();
+    80001390:	a19ff0ef          	jal	80000da8 <myproc>
+    80001394:	84aa                	mv	s1,a0
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+    80001396:	53a040ef          	jal	800058d0 <acquire>
+  release(lk);
+    8000139a:	854a                	mv	a0,s2
+    8000139c:	5cc040ef          	jal	80005968 <release>
+
+  // Go to sleep.
+  p->chan = chan;
+    800013a0:	0334b023          	sd	s3,32(s1)
+  p->state = SLEEPING;
+    800013a4:	4789                	li	a5,2
+    800013a6:	cc9c                	sw	a5,24(s1)
+
+  sched();
+    800013a8:	ef1ff0ef          	jal	80001298 <sched>
+
+  // Tidy up.
+  p->chan = 0;
+    800013ac:	0204b023          	sd	zero,32(s1)
+
+  // Reacquire original lock.
+  release(&p->lock);
+    800013b0:	8526                	mv	a0,s1
+    800013b2:	5b6040ef          	jal	80005968 <release>
+  acquire(lk);
+    800013b6:	854a                	mv	a0,s2
+    800013b8:	518040ef          	jal	800058d0 <acquire>
+}
+    800013bc:	70a2                	ld	ra,40(sp)
+    800013be:	7402                	ld	s0,32(sp)
+    800013c0:	64e2                	ld	s1,24(sp)
+    800013c2:	6942                	ld	s2,16(sp)
+    800013c4:	69a2                	ld	s3,8(sp)
+    800013c6:	6145                	addi	sp,sp,48
+    800013c8:	8082                	ret
+
+00000000800013ca <wakeup>:
+
+// Wake up all processes sleeping on chan.
+// Must be called without any p->lock.
+void
+wakeup(void *chan)
+{
+    800013ca:	7139                	addi	sp,sp,-64
+    800013cc:	fc06                	sd	ra,56(sp)
+    800013ce:	f822                	sd	s0,48(sp)
+    800013d0:	f426                	sd	s1,40(sp)
+    800013d2:	f04a                	sd	s2,32(sp)
+    800013d4:	ec4e                	sd	s3,24(sp)
+    800013d6:	e852                	sd	s4,16(sp)
+    800013d8:	e456                	sd	s5,8(sp)
+    800013da:	0080                	addi	s0,sp,64
+    800013dc:	8a2a                	mv	s4,a0
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    800013de:	00007497          	auipc	s1,0x7
+    800013e2:	b3248493          	addi	s1,s1,-1230 # 80007f10 <proc>
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+    800013e6:	4989                	li	s3,2
+        p->state = RUNNABLE;
+    800013e8:	4a8d                	li	s5,3
+  for(p = proc; p < &proc[NPROC]; p++) {
+    800013ea:	0000c917          	auipc	s2,0xc
+    800013ee:	52690913          	addi	s2,s2,1318 # 8000d910 <tickslock>
+    800013f2:	a801                	j	80001402 <wakeup+0x38>
+      }
+      release(&p->lock);
+    800013f4:	8526                	mv	a0,s1
+    800013f6:	572040ef          	jal	80005968 <release>
+  for(p = proc; p < &proc[NPROC]; p++) {
+    800013fa:	16848493          	addi	s1,s1,360
+    800013fe:	03248263          	beq	s1,s2,80001422 <wakeup+0x58>
+    if(p != myproc()){
+    80001402:	9a7ff0ef          	jal	80000da8 <myproc>
+    80001406:	fea48ae3          	beq	s1,a0,800013fa <wakeup+0x30>
+      acquire(&p->lock);
+    8000140a:	8526                	mv	a0,s1
+    8000140c:	4c4040ef          	jal	800058d0 <acquire>
+      if(p->state == SLEEPING && p->chan == chan) {
+    80001410:	4c9c                	lw	a5,24(s1)
+    80001412:	ff3791e3          	bne	a5,s3,800013f4 <wakeup+0x2a>
+    80001416:	709c                	ld	a5,32(s1)
+    80001418:	fd479ee3          	bne	a5,s4,800013f4 <wakeup+0x2a>
+        p->state = RUNNABLE;
+    8000141c:	0154ac23          	sw	s5,24(s1)
+    80001420:	bfd1                	j	800013f4 <wakeup+0x2a>
+    }
+  }
+}
+    80001422:	70e2                	ld	ra,56(sp)
+    80001424:	7442                	ld	s0,48(sp)
+    80001426:	74a2                	ld	s1,40(sp)
+    80001428:	7902                	ld	s2,32(sp)
+    8000142a:	69e2                	ld	s3,24(sp)
+    8000142c:	6a42                	ld	s4,16(sp)
+    8000142e:	6aa2                	ld	s5,8(sp)
+    80001430:	6121                	addi	sp,sp,64
+    80001432:	8082                	ret
+
+0000000080001434 <reparent>:
+{
+    80001434:	7179                	addi	sp,sp,-48
+    80001436:	f406                	sd	ra,40(sp)
+    80001438:	f022                	sd	s0,32(sp)
+    8000143a:	ec26                	sd	s1,24(sp)
+    8000143c:	e84a                	sd	s2,16(sp)
+    8000143e:	e44e                	sd	s3,8(sp)
+    80001440:	e052                	sd	s4,0(sp)
+    80001442:	1800                	addi	s0,sp,48
+    80001444:	892a                	mv	s2,a0
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    80001446:	00007497          	auipc	s1,0x7
+    8000144a:	aca48493          	addi	s1,s1,-1334 # 80007f10 <proc>
+      pp->parent = initproc;
+    8000144e:	00006a17          	auipc	s4,0x6
+    80001452:	652a0a13          	addi	s4,s4,1618 # 80007aa0 <initproc>
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    80001456:	0000c997          	auipc	s3,0xc
+    8000145a:	4ba98993          	addi	s3,s3,1210 # 8000d910 <tickslock>
+    8000145e:	a029                	j	80001468 <reparent+0x34>
+    80001460:	16848493          	addi	s1,s1,360
+    80001464:	01348b63          	beq	s1,s3,8000147a <reparent+0x46>
+    if(pp->parent == p){
+    80001468:	7c9c                	ld	a5,56(s1)
+    8000146a:	ff279be3          	bne	a5,s2,80001460 <reparent+0x2c>
+      pp->parent = initproc;
+    8000146e:	000a3503          	ld	a0,0(s4)
+    80001472:	fc88                	sd	a0,56(s1)
+      wakeup(initproc);
+    80001474:	f57ff0ef          	jal	800013ca <wakeup>
+    80001478:	b7e5                	j	80001460 <reparent+0x2c>
+}
+    8000147a:	70a2                	ld	ra,40(sp)
+    8000147c:	7402                	ld	s0,32(sp)
+    8000147e:	64e2                	ld	s1,24(sp)
+    80001480:	6942                	ld	s2,16(sp)
+    80001482:	69a2                	ld	s3,8(sp)
+    80001484:	6a02                	ld	s4,0(sp)
+    80001486:	6145                	addi	sp,sp,48
+    80001488:	8082                	ret
+
+000000008000148a <exit>:
+{
+    8000148a:	7179                	addi	sp,sp,-48
+    8000148c:	f406                	sd	ra,40(sp)
+    8000148e:	f022                	sd	s0,32(sp)
+    80001490:	ec26                	sd	s1,24(sp)
+    80001492:	e84a                	sd	s2,16(sp)
+    80001494:	e44e                	sd	s3,8(sp)
+    80001496:	e052                	sd	s4,0(sp)
+    80001498:	1800                	addi	s0,sp,48
+    8000149a:	8a2a                	mv	s4,a0
+  struct proc *p = myproc();
+    8000149c:	90dff0ef          	jal	80000da8 <myproc>
+    800014a0:	89aa                	mv	s3,a0
+  if(p == initproc)
+    800014a2:	00006797          	auipc	a5,0x6
+    800014a6:	5fe7b783          	ld	a5,1534(a5) # 80007aa0 <initproc>
+    800014aa:	0d050493          	addi	s1,a0,208
+    800014ae:	15050913          	addi	s2,a0,336
+    800014b2:	00a79f63          	bne	a5,a0,800014d0 <exit+0x46>
+    panic("init exiting");
+    800014b6:	00006517          	auipc	a0,0x6
+    800014ba:	d6a50513          	addi	a0,a0,-662 # 80007220 <etext+0x220>
+    800014be:	0e4040ef          	jal	800055a2 <panic>
+      fileclose(f);
+    800014c2:	789010ef          	jal	8000344a <fileclose>
+      p->ofile[fd] = 0;
+    800014c6:	0004b023          	sd	zero,0(s1)
+  for(int fd = 0; fd < NOFILE; fd++){
+    800014ca:	04a1                	addi	s1,s1,8
+    800014cc:	01248563          	beq	s1,s2,800014d6 <exit+0x4c>
+    if(p->ofile[fd]){
+    800014d0:	6088                	ld	a0,0(s1)
+    800014d2:	f965                	bnez	a0,800014c2 <exit+0x38>
+    800014d4:	bfdd                	j	800014ca <exit+0x40>
+  begin_op();
+    800014d6:	35b010ef          	jal	80003030 <begin_op>
+  iput(p->cwd);
+    800014da:	1509b503          	ld	a0,336(s3)
+    800014de:	43e010ef          	jal	8000291c <iput>
+  end_op();
+    800014e2:	3b9010ef          	jal	8000309a <end_op>
+  p->cwd = 0;
+    800014e6:	1409b823          	sd	zero,336(s3)
+  acquire(&wait_lock);
+    800014ea:	00006497          	auipc	s1,0x6
+    800014ee:	60e48493          	addi	s1,s1,1550 # 80007af8 <wait_lock>
+    800014f2:	8526                	mv	a0,s1
+    800014f4:	3dc040ef          	jal	800058d0 <acquire>
+  reparent(p);
+    800014f8:	854e                	mv	a0,s3
+    800014fa:	f3bff0ef          	jal	80001434 <reparent>
+  wakeup(p->parent);
+    800014fe:	0389b503          	ld	a0,56(s3)
+    80001502:	ec9ff0ef          	jal	800013ca <wakeup>
+  acquire(&p->lock);
+    80001506:	854e                	mv	a0,s3
+    80001508:	3c8040ef          	jal	800058d0 <acquire>
+  p->xstate = status;
+    8000150c:	0349a623          	sw	s4,44(s3)
+  p->state = ZOMBIE;
+    80001510:	4795                	li	a5,5
+    80001512:	00f9ac23          	sw	a5,24(s3)
+  release(&wait_lock);
+    80001516:	8526                	mv	a0,s1
+    80001518:	450040ef          	jal	80005968 <release>
+  sched();
+    8000151c:	d7dff0ef          	jal	80001298 <sched>
+  panic("zombie exit");
+    80001520:	00006517          	auipc	a0,0x6
+    80001524:	d1050513          	addi	a0,a0,-752 # 80007230 <etext+0x230>
+    80001528:	07a040ef          	jal	800055a2 <panic>
+
+000000008000152c <kill>:
+// Kill the process with the given pid.
+// The victim won't exit until it tries to return
+// to user space (see usertrap() in trap.c).
+int
+kill(int pid)
+{
+    8000152c:	7179                	addi	sp,sp,-48
+    8000152e:	f406                	sd	ra,40(sp)
+    80001530:	f022                	sd	s0,32(sp)
+    80001532:	ec26                	sd	s1,24(sp)
+    80001534:	e84a                	sd	s2,16(sp)
+    80001536:	e44e                	sd	s3,8(sp)
+    80001538:	1800                	addi	s0,sp,48
+    8000153a:	892a                	mv	s2,a0
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    8000153c:	00007497          	auipc	s1,0x7
+    80001540:	9d448493          	addi	s1,s1,-1580 # 80007f10 <proc>
+    80001544:	0000c997          	auipc	s3,0xc
+    80001548:	3cc98993          	addi	s3,s3,972 # 8000d910 <tickslock>
+    acquire(&p->lock);
+    8000154c:	8526                	mv	a0,s1
+    8000154e:	382040ef          	jal	800058d0 <acquire>
+    if(p->pid == pid){
+    80001552:	589c                	lw	a5,48(s1)
+    80001554:	01278b63          	beq	a5,s2,8000156a <kill+0x3e>
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+      return 0;
+    }
+    release(&p->lock);
+    80001558:	8526                	mv	a0,s1
+    8000155a:	40e040ef          	jal	80005968 <release>
+  for(p = proc; p < &proc[NPROC]; p++){
+    8000155e:	16848493          	addi	s1,s1,360
+    80001562:	ff3495e3          	bne	s1,s3,8000154c <kill+0x20>
+  }
+  return -1;
+    80001566:	557d                	li	a0,-1
+    80001568:	a819                	j	8000157e <kill+0x52>
+      p->killed = 1;
+    8000156a:	4785                	li	a5,1
+    8000156c:	d49c                	sw	a5,40(s1)
+      if(p->state == SLEEPING){
+    8000156e:	4c98                	lw	a4,24(s1)
+    80001570:	4789                	li	a5,2
+    80001572:	00f70d63          	beq	a4,a5,8000158c <kill+0x60>
+      release(&p->lock);
+    80001576:	8526                	mv	a0,s1
+    80001578:	3f0040ef          	jal	80005968 <release>
+      return 0;
+    8000157c:	4501                	li	a0,0
+}
+    8000157e:	70a2                	ld	ra,40(sp)
+    80001580:	7402                	ld	s0,32(sp)
+    80001582:	64e2                	ld	s1,24(sp)
+    80001584:	6942                	ld	s2,16(sp)
+    80001586:	69a2                	ld	s3,8(sp)
+    80001588:	6145                	addi	sp,sp,48
+    8000158a:	8082                	ret
+        p->state = RUNNABLE;
+    8000158c:	478d                	li	a5,3
+    8000158e:	cc9c                	sw	a5,24(s1)
+    80001590:	b7dd                	j	80001576 <kill+0x4a>
+
+0000000080001592 <setkilled>:
+
+void
+setkilled(struct proc *p)
+{
+    80001592:	1101                	addi	sp,sp,-32
+    80001594:	ec06                	sd	ra,24(sp)
+    80001596:	e822                	sd	s0,16(sp)
+    80001598:	e426                	sd	s1,8(sp)
+    8000159a:	1000                	addi	s0,sp,32
+    8000159c:	84aa                	mv	s1,a0
+  acquire(&p->lock);
+    8000159e:	332040ef          	jal	800058d0 <acquire>
+  p->killed = 1;
+    800015a2:	4785                	li	a5,1
+    800015a4:	d49c                	sw	a5,40(s1)
+  release(&p->lock);
+    800015a6:	8526                	mv	a0,s1
+    800015a8:	3c0040ef          	jal	80005968 <release>
+}
+    800015ac:	60e2                	ld	ra,24(sp)
+    800015ae:	6442                	ld	s0,16(sp)
+    800015b0:	64a2                	ld	s1,8(sp)
+    800015b2:	6105                	addi	sp,sp,32
+    800015b4:	8082                	ret
+
+00000000800015b6 <killed>:
+
+int
+killed(struct proc *p)
+{
+    800015b6:	1101                	addi	sp,sp,-32
+    800015b8:	ec06                	sd	ra,24(sp)
+    800015ba:	e822                	sd	s0,16(sp)
+    800015bc:	e426                	sd	s1,8(sp)
+    800015be:	e04a                	sd	s2,0(sp)
+    800015c0:	1000                	addi	s0,sp,32
+    800015c2:	84aa                	mv	s1,a0
+  int k;
+  
+  acquire(&p->lock);
+    800015c4:	30c040ef          	jal	800058d0 <acquire>
+  k = p->killed;
+    800015c8:	0284a903          	lw	s2,40(s1)
+  release(&p->lock);
+    800015cc:	8526                	mv	a0,s1
+    800015ce:	39a040ef          	jal	80005968 <release>
+  return k;
+}
+    800015d2:	854a                	mv	a0,s2
+    800015d4:	60e2                	ld	ra,24(sp)
+    800015d6:	6442                	ld	s0,16(sp)
+    800015d8:	64a2                	ld	s1,8(sp)
+    800015da:	6902                	ld	s2,0(sp)
+    800015dc:	6105                	addi	sp,sp,32
+    800015de:	8082                	ret
+
+00000000800015e0 <wait>:
+{
+    800015e0:	715d                	addi	sp,sp,-80
+    800015e2:	e486                	sd	ra,72(sp)
+    800015e4:	e0a2                	sd	s0,64(sp)
+    800015e6:	fc26                	sd	s1,56(sp)
+    800015e8:	f84a                	sd	s2,48(sp)
+    800015ea:	f44e                	sd	s3,40(sp)
+    800015ec:	f052                	sd	s4,32(sp)
+    800015ee:	ec56                	sd	s5,24(sp)
+    800015f0:	e85a                	sd	s6,16(sp)
+    800015f2:	e45e                	sd	s7,8(sp)
+    800015f4:	e062                	sd	s8,0(sp)
+    800015f6:	0880                	addi	s0,sp,80
+    800015f8:	8b2a                	mv	s6,a0
+  struct proc *p = myproc();
+    800015fa:	faeff0ef          	jal	80000da8 <myproc>
+    800015fe:	892a                	mv	s2,a0
+  acquire(&wait_lock);
+    80001600:	00006517          	auipc	a0,0x6
+    80001604:	4f850513          	addi	a0,a0,1272 # 80007af8 <wait_lock>
+    80001608:	2c8040ef          	jal	800058d0 <acquire>
+    havekids = 0;
+    8000160c:	4b81                	li	s7,0
+        if(pp->state == ZOMBIE){
+    8000160e:	4a15                	li	s4,5
+        havekids = 1;
+    80001610:	4a85                	li	s5,1
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+    80001612:	0000c997          	auipc	s3,0xc
+    80001616:	2fe98993          	addi	s3,s3,766 # 8000d910 <tickslock>
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+    8000161a:	00006c17          	auipc	s8,0x6
+    8000161e:	4dec0c13          	addi	s8,s8,1246 # 80007af8 <wait_lock>
+    80001622:	a871                	j	800016be <wait+0xde>
+          pid = pp->pid;
+    80001624:	0304a983          	lw	s3,48(s1)
+          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+    80001628:	000b0c63          	beqz	s6,80001640 <wait+0x60>
+    8000162c:	4691                	li	a3,4
+    8000162e:	02c48613          	addi	a2,s1,44
+    80001632:	85da                	mv	a1,s6
+    80001634:	05093503          	ld	a0,80(s2)
+    80001638:	be2ff0ef          	jal	80000a1a <copyout>
+    8000163c:	02054b63          	bltz	a0,80001672 <wait+0x92>
+          freeproc(pp);
+    80001640:	8526                	mv	a0,s1
+    80001642:	8d9ff0ef          	jal	80000f1a <freeproc>
+          release(&pp->lock);
+    80001646:	8526                	mv	a0,s1
+    80001648:	320040ef          	jal	80005968 <release>
+          release(&wait_lock);
+    8000164c:	00006517          	auipc	a0,0x6
+    80001650:	4ac50513          	addi	a0,a0,1196 # 80007af8 <wait_lock>
+    80001654:	314040ef          	jal	80005968 <release>
+}
+    80001658:	854e                	mv	a0,s3
+    8000165a:	60a6                	ld	ra,72(sp)
+    8000165c:	6406                	ld	s0,64(sp)
+    8000165e:	74e2                	ld	s1,56(sp)
+    80001660:	7942                	ld	s2,48(sp)
+    80001662:	79a2                	ld	s3,40(sp)
+    80001664:	7a02                	ld	s4,32(sp)
+    80001666:	6ae2                	ld	s5,24(sp)
+    80001668:	6b42                	ld	s6,16(sp)
+    8000166a:	6ba2                	ld	s7,8(sp)
+    8000166c:	6c02                	ld	s8,0(sp)
+    8000166e:	6161                	addi	sp,sp,80
+    80001670:	8082                	ret
+            release(&pp->lock);
+    80001672:	8526                	mv	a0,s1
+    80001674:	2f4040ef          	jal	80005968 <release>
+            release(&wait_lock);
+    80001678:	00006517          	auipc	a0,0x6
+    8000167c:	48050513          	addi	a0,a0,1152 # 80007af8 <wait_lock>
+    80001680:	2e8040ef          	jal	80005968 <release>
+            return -1;
+    80001684:	59fd                	li	s3,-1
+    80001686:	bfc9                	j	80001658 <wait+0x78>
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+    80001688:	16848493          	addi	s1,s1,360
+    8000168c:	03348063          	beq	s1,s3,800016ac <wait+0xcc>
+      if(pp->parent == p){
+    80001690:	7c9c                	ld	a5,56(s1)
+    80001692:	ff279be3          	bne	a5,s2,80001688 <wait+0xa8>
+        acquire(&pp->lock);
+    80001696:	8526                	mv	a0,s1
+    80001698:	238040ef          	jal	800058d0 <acquire>
+        if(pp->state == ZOMBIE){
+    8000169c:	4c9c                	lw	a5,24(s1)
+    8000169e:	f94783e3          	beq	a5,s4,80001624 <wait+0x44>
+        release(&pp->lock);
+    800016a2:	8526                	mv	a0,s1
+    800016a4:	2c4040ef          	jal	80005968 <release>
+        havekids = 1;
+    800016a8:	8756                	mv	a4,s5
+    800016aa:	bff9                	j	80001688 <wait+0xa8>
+    if(!havekids || killed(p)){
+    800016ac:	cf19                	beqz	a4,800016ca <wait+0xea>
+    800016ae:	854a                	mv	a0,s2
+    800016b0:	f07ff0ef          	jal	800015b6 <killed>
+    800016b4:	e919                	bnez	a0,800016ca <wait+0xea>
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+    800016b6:	85e2                	mv	a1,s8
+    800016b8:	854a                	mv	a0,s2
+    800016ba:	cc5ff0ef          	jal	8000137e <sleep>
+    havekids = 0;
+    800016be:	875e                	mv	a4,s7
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+    800016c0:	00007497          	auipc	s1,0x7
+    800016c4:	85048493          	addi	s1,s1,-1968 # 80007f10 <proc>
+    800016c8:	b7e1                	j	80001690 <wait+0xb0>
+      release(&wait_lock);
+    800016ca:	00006517          	auipc	a0,0x6
+    800016ce:	42e50513          	addi	a0,a0,1070 # 80007af8 <wait_lock>
+    800016d2:	296040ef          	jal	80005968 <release>
+      return -1;
+    800016d6:	59fd                	li	s3,-1
+    800016d8:	b741                	j	80001658 <wait+0x78>
+
+00000000800016da <either_copyout>:
+// Copy to either a user address, or kernel address,
+// depending on usr_dst.
+// Returns 0 on success, -1 on error.
+int
+either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+{
+    800016da:	7179                	addi	sp,sp,-48
+    800016dc:	f406                	sd	ra,40(sp)
+    800016de:	f022                	sd	s0,32(sp)
+    800016e0:	ec26                	sd	s1,24(sp)
+    800016e2:	e84a                	sd	s2,16(sp)
+    800016e4:	e44e                	sd	s3,8(sp)
+    800016e6:	e052                	sd	s4,0(sp)
+    800016e8:	1800                	addi	s0,sp,48
+    800016ea:	84aa                	mv	s1,a0
+    800016ec:	892e                	mv	s2,a1
+    800016ee:	89b2                	mv	s3,a2
+    800016f0:	8a36                	mv	s4,a3
+  struct proc *p = myproc();
+    800016f2:	eb6ff0ef          	jal	80000da8 <myproc>
+  if(user_dst){
+    800016f6:	cc99                	beqz	s1,80001714 <either_copyout+0x3a>
+    return copyout(p->pagetable, dst, src, len);
+    800016f8:	86d2                	mv	a3,s4
+    800016fa:	864e                	mv	a2,s3
+    800016fc:	85ca                	mv	a1,s2
+    800016fe:	6928                	ld	a0,80(a0)
+    80001700:	b1aff0ef          	jal	80000a1a <copyout>
+  } else {
+    memmove((char *)dst, src, len);
+    return 0;
+  }
+}
+    80001704:	70a2                	ld	ra,40(sp)
+    80001706:	7402                	ld	s0,32(sp)
+    80001708:	64e2                	ld	s1,24(sp)
+    8000170a:	6942                	ld	s2,16(sp)
+    8000170c:	69a2                	ld	s3,8(sp)
+    8000170e:	6a02                	ld	s4,0(sp)
+    80001710:	6145                	addi	sp,sp,48
+    80001712:	8082                	ret
+    memmove((char *)dst, src, len);
+    80001714:	000a061b          	sext.w	a2,s4
+    80001718:	85ce                	mv	a1,s3
+    8000171a:	854a                	mv	a0,s2
+    8000171c:	ad1fe0ef          	jal	800001ec <memmove>
+    return 0;
+    80001720:	8526                	mv	a0,s1
+    80001722:	b7cd                	j	80001704 <either_copyout+0x2a>
+
+0000000080001724 <either_copyin>:
+// Copy from either a user address, or kernel address,
+// depending on usr_src.
+// Returns 0 on success, -1 on error.
+int
+either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+{
+    80001724:	7179                	addi	sp,sp,-48
+    80001726:	f406                	sd	ra,40(sp)
+    80001728:	f022                	sd	s0,32(sp)
+    8000172a:	ec26                	sd	s1,24(sp)
+    8000172c:	e84a                	sd	s2,16(sp)
+    8000172e:	e44e                	sd	s3,8(sp)
+    80001730:	e052                	sd	s4,0(sp)
+    80001732:	1800                	addi	s0,sp,48
+    80001734:	892a                	mv	s2,a0
+    80001736:	84ae                	mv	s1,a1
+    80001738:	89b2                	mv	s3,a2
+    8000173a:	8a36                	mv	s4,a3
+  struct proc *p = myproc();
+    8000173c:	e6cff0ef          	jal	80000da8 <myproc>
+  if(user_src){
+    80001740:	cc99                	beqz	s1,8000175e <either_copyin+0x3a>
+    return copyin(p->pagetable, dst, src, len);
+    80001742:	86d2                	mv	a3,s4
+    80001744:	864e                	mv	a2,s3
+    80001746:	85ca                	mv	a1,s2
+    80001748:	6928                	ld	a0,80(a0)
+    8000174a:	ba6ff0ef          	jal	80000af0 <copyin>
+  } else {
+    memmove(dst, (char*)src, len);
+    return 0;
+  }
+}
+    8000174e:	70a2                	ld	ra,40(sp)
+    80001750:	7402                	ld	s0,32(sp)
+    80001752:	64e2                	ld	s1,24(sp)
+    80001754:	6942                	ld	s2,16(sp)
+    80001756:	69a2                	ld	s3,8(sp)
+    80001758:	6a02                	ld	s4,0(sp)
+    8000175a:	6145                	addi	sp,sp,48
+    8000175c:	8082                	ret
+    memmove(dst, (char*)src, len);
+    8000175e:	000a061b          	sext.w	a2,s4
+    80001762:	85ce                	mv	a1,s3
+    80001764:	854a                	mv	a0,s2
+    80001766:	a87fe0ef          	jal	800001ec <memmove>
+    return 0;
+    8000176a:	8526                	mv	a0,s1
+    8000176c:	b7cd                	j	8000174e <either_copyin+0x2a>
+
+000000008000176e <procdump>:
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+    8000176e:	715d                	addi	sp,sp,-80
+    80001770:	e486                	sd	ra,72(sp)
+    80001772:	e0a2                	sd	s0,64(sp)
+    80001774:	fc26                	sd	s1,56(sp)
+    80001776:	f84a                	sd	s2,48(sp)
+    80001778:	f44e                	sd	s3,40(sp)
+    8000177a:	f052                	sd	s4,32(sp)
+    8000177c:	ec56                	sd	s5,24(sp)
+    8000177e:	e85a                	sd	s6,16(sp)
+    80001780:	e45e                	sd	s7,8(sp)
+    80001782:	0880                	addi	s0,sp,80
+  [ZOMBIE]    "zombie"
+  };
+  struct proc *p;
+  char *state;
+
+  printf("\n");
+    80001784:	00006517          	auipc	a0,0x6
+    80001788:	89450513          	addi	a0,a0,-1900 # 80007018 <etext+0x18>
+    8000178c:	345030ef          	jal	800052d0 <printf>
+  for(p = proc; p < &proc[NPROC]; p++){
+    80001790:	00007497          	auipc	s1,0x7
+    80001794:	8d848493          	addi	s1,s1,-1832 # 80008068 <proc+0x158>
+    80001798:	0000c917          	auipc	s2,0xc
+    8000179c:	2d090913          	addi	s2,s2,720 # 8000da68 <bcache+0x140>
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    800017a0:	4b15                	li	s6,5
+      state = states[p->state];
+    else
+      state = "???";
+    800017a2:	00006997          	auipc	s3,0x6
+    800017a6:	a9e98993          	addi	s3,s3,-1378 # 80007240 <etext+0x240>
+    printf("%d %s %s", p->pid, state, p->name);
+    800017aa:	00006a97          	auipc	s5,0x6
+    800017ae:	a9ea8a93          	addi	s5,s5,-1378 # 80007248 <etext+0x248>
+    printf("\n");
+    800017b2:	00006a17          	auipc	s4,0x6
+    800017b6:	866a0a13          	addi	s4,s4,-1946 # 80007018 <etext+0x18>
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    800017ba:	00006b97          	auipc	s7,0x6
+    800017be:	08eb8b93          	addi	s7,s7,142 # 80007848 <states.0>
+    800017c2:	a829                	j	800017dc <procdump+0x6e>
+    printf("%d %s %s", p->pid, state, p->name);
+    800017c4:	ed86a583          	lw	a1,-296(a3)
+    800017c8:	8556                	mv	a0,s5
+    800017ca:	307030ef          	jal	800052d0 <printf>
+    printf("\n");
+    800017ce:	8552                	mv	a0,s4
+    800017d0:	301030ef          	jal	800052d0 <printf>
+  for(p = proc; p < &proc[NPROC]; p++){
+    800017d4:	16848493          	addi	s1,s1,360
+    800017d8:	03248263          	beq	s1,s2,800017fc <procdump+0x8e>
+    if(p->state == UNUSED)
+    800017dc:	86a6                	mv	a3,s1
+    800017de:	ec04a783          	lw	a5,-320(s1)
+    800017e2:	dbed                	beqz	a5,800017d4 <procdump+0x66>
+      state = "???";
+    800017e4:	864e                	mv	a2,s3
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    800017e6:	fcfb6fe3          	bltu	s6,a5,800017c4 <procdump+0x56>
+    800017ea:	02079713          	slli	a4,a5,0x20
+    800017ee:	01d75793          	srli	a5,a4,0x1d
+    800017f2:	97de                	add	a5,a5,s7
+    800017f4:	6390                	ld	a2,0(a5)
+    800017f6:	f679                	bnez	a2,800017c4 <procdump+0x56>
+      state = "???";
+    800017f8:	864e                	mv	a2,s3
+    800017fa:	b7e9                	j	800017c4 <procdump+0x56>
+  }
+}
+    800017fc:	60a6                	ld	ra,72(sp)
+    800017fe:	6406                	ld	s0,64(sp)
+    80001800:	74e2                	ld	s1,56(sp)
+    80001802:	7942                	ld	s2,48(sp)
+    80001804:	79a2                	ld	s3,40(sp)
+    80001806:	7a02                	ld	s4,32(sp)
+    80001808:	6ae2                	ld	s5,24(sp)
+    8000180a:	6b42                	ld	s6,16(sp)
+    8000180c:	6ba2                	ld	s7,8(sp)
+    8000180e:	6161                	addi	sp,sp,80
+    80001810:	8082                	ret
+
+0000000080001812 <count_nproc>:
+
+uint64 count_nproc(void) {
+    80001812:	7179                	addi	sp,sp,-48
+    80001814:	f406                	sd	ra,40(sp)
+    80001816:	f022                	sd	s0,32(sp)
+    80001818:	ec26                	sd	s1,24(sp)
+    8000181a:	e84a                	sd	s2,16(sp)
+    8000181c:	e44e                	sd	s3,8(sp)
+    8000181e:	1800                	addi	s0,sp,48
+    struct proc *p;
+    int count = 0;
+    80001820:	4901                	li	s2,0
+
+    for (p = proc; p < &proc[NPROC]; p++) {
+    80001822:	00006497          	auipc	s1,0x6
+    80001826:	6ee48493          	addi	s1,s1,1774 # 80007f10 <proc>
+    8000182a:	0000c997          	auipc	s3,0xc
+    8000182e:	0e698993          	addi	s3,s3,230 # 8000d910 <tickslock>
+    80001832:	a801                	j	80001842 <count_nproc+0x30>
+        acquire(&p->lock);
+        if (p->state != UNUSED)  // Count non-UNUSED processes
+            count++;
+        release(&p->lock);
+    80001834:	8526                	mv	a0,s1
+    80001836:	132040ef          	jal	80005968 <release>
+    for (p = proc; p < &proc[NPROC]; p++) {
+    8000183a:	16848493          	addi	s1,s1,360
+    8000183e:	01348963          	beq	s1,s3,80001850 <count_nproc+0x3e>
+        acquire(&p->lock);
+    80001842:	8526                	mv	a0,s1
+    80001844:	08c040ef          	jal	800058d0 <acquire>
+        if (p->state != UNUSED)  // Count non-UNUSED processes
+    80001848:	4c9c                	lw	a5,24(s1)
+    8000184a:	d7ed                	beqz	a5,80001834 <count_nproc+0x22>
+            count++;
+    8000184c:	2905                	addiw	s2,s2,1
+    8000184e:	b7dd                	j	80001834 <count_nproc+0x22>
+    }
+
+    return count;
+}
+    80001850:	854a                	mv	a0,s2
+    80001852:	70a2                	ld	ra,40(sp)
+    80001854:	7402                	ld	s0,32(sp)
+    80001856:	64e2                	ld	s1,24(sp)
+    80001858:	6942                	ld	s2,16(sp)
+    8000185a:	69a2                	ld	s3,8(sp)
+    8000185c:	6145                	addi	sp,sp,48
+    8000185e:	8082                	ret
+
+0000000080001860 <swtch>:
+    80001860:	00153023          	sd	ra,0(a0)
+    80001864:	00253423          	sd	sp,8(a0)
+    80001868:	e900                	sd	s0,16(a0)
+    8000186a:	ed04                	sd	s1,24(a0)
+    8000186c:	03253023          	sd	s2,32(a0)
+    80001870:	03353423          	sd	s3,40(a0)
+    80001874:	03453823          	sd	s4,48(a0)
+    80001878:	03553c23          	sd	s5,56(a0)
+    8000187c:	05653023          	sd	s6,64(a0)
+    80001880:	05753423          	sd	s7,72(a0)
+    80001884:	05853823          	sd	s8,80(a0)
+    80001888:	05953c23          	sd	s9,88(a0)
+    8000188c:	07a53023          	sd	s10,96(a0)
+    80001890:	07b53423          	sd	s11,104(a0)
+    80001894:	0005b083          	ld	ra,0(a1)
+    80001898:	0085b103          	ld	sp,8(a1)
+    8000189c:	6980                	ld	s0,16(a1)
+    8000189e:	6d84                	ld	s1,24(a1)
+    800018a0:	0205b903          	ld	s2,32(a1)
+    800018a4:	0285b983          	ld	s3,40(a1)
+    800018a8:	0305ba03          	ld	s4,48(a1)
+    800018ac:	0385ba83          	ld	s5,56(a1)
+    800018b0:	0405bb03          	ld	s6,64(a1)
+    800018b4:	0485bb83          	ld	s7,72(a1)
+    800018b8:	0505bc03          	ld	s8,80(a1)
+    800018bc:	0585bc83          	ld	s9,88(a1)
+    800018c0:	0605bd03          	ld	s10,96(a1)
+    800018c4:	0685bd83          	ld	s11,104(a1)
+    800018c8:	8082                	ret
+
+00000000800018ca <trapinit>:
+
+extern int devintr();
+
+void
+trapinit(void)
+{
+    800018ca:	1141                	addi	sp,sp,-16
+    800018cc:	e406                	sd	ra,8(sp)
+    800018ce:	e022                	sd	s0,0(sp)
+    800018d0:	0800                	addi	s0,sp,16
+  initlock(&tickslock, "time");
+    800018d2:	00006597          	auipc	a1,0x6
+    800018d6:	9b658593          	addi	a1,a1,-1610 # 80007288 <etext+0x288>
+    800018da:	0000c517          	auipc	a0,0xc
+    800018de:	03650513          	addi	a0,a0,54 # 8000d910 <tickslock>
+    800018e2:	76f030ef          	jal	80005850 <initlock>
+}
+    800018e6:	60a2                	ld	ra,8(sp)
+    800018e8:	6402                	ld	s0,0(sp)
+    800018ea:	0141                	addi	sp,sp,16
+    800018ec:	8082                	ret
+
+00000000800018ee <trapinithart>:
+
+// set up to take exceptions and traps while in the kernel.
+void
+trapinithart(void)
+{
+    800018ee:	1141                	addi	sp,sp,-16
+    800018f0:	e422                	sd	s0,8(sp)
+    800018f2:	0800                	addi	s0,sp,16
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    800018f4:	00003797          	auipc	a5,0x3
+    800018f8:	f1c78793          	addi	a5,a5,-228 # 80004810 <kernelvec>
+    800018fc:	10579073          	csrw	stvec,a5
+  w_stvec((uint64)kernelvec);
+}
+    80001900:	6422                	ld	s0,8(sp)
+    80001902:	0141                	addi	sp,sp,16
+    80001904:	8082                	ret
+
+0000000080001906 <usertrapret>:
+//
+// return to user space
+//
+void
+usertrapret(void)
+{
+    80001906:	1141                	addi	sp,sp,-16
+    80001908:	e406                	sd	ra,8(sp)
+    8000190a:	e022                	sd	s0,0(sp)
+    8000190c:	0800                	addi	s0,sp,16
+  struct proc *p = myproc();
+    8000190e:	c9aff0ef          	jal	80000da8 <myproc>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001912:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
+    80001916:	9bf5                	andi	a5,a5,-3
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80001918:	10079073          	csrw	sstatus,a5
+  // kerneltrap() to usertrap(), so turn off interrupts until
+  // we're back in user space, where usertrap() is correct.
+  intr_off();
+
+  // send syscalls, interrupts, and exceptions to uservec in trampoline.S
+  uint64 trampoline_uservec = TRAMPOLINE + (uservec - trampoline);
+    8000191c:	00004697          	auipc	a3,0x4
+    80001920:	6e468693          	addi	a3,a3,1764 # 80006000 <_trampoline>
+    80001924:	00004717          	auipc	a4,0x4
+    80001928:	6dc70713          	addi	a4,a4,1756 # 80006000 <_trampoline>
+    8000192c:	8f15                	sub	a4,a4,a3
+    8000192e:	040007b7          	lui	a5,0x4000
+    80001932:	17fd                	addi	a5,a5,-1 # 3ffffff <_entry-0x7c000001>
+    80001934:	07b2                	slli	a5,a5,0xc
+    80001936:	973e                	add	a4,a4,a5
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    80001938:	10571073          	csrw	stvec,a4
+  w_stvec(trampoline_uservec);
+
+  // set up trapframe values that uservec will need when
+  // the process next traps into the kernel.
+  p->trapframe->kernel_satp = r_satp();         // kernel page table
+    8000193c:	6d38                	ld	a4,88(a0)
+  asm volatile("csrr %0, satp" : "=r" (x) );
+    8000193e:	18002673          	csrr	a2,satp
+    80001942:	e310                	sd	a2,0(a4)
+  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
+    80001944:	6d30                	ld	a2,88(a0)
+    80001946:	6138                	ld	a4,64(a0)
+    80001948:	6585                	lui	a1,0x1
+    8000194a:	972e                	add	a4,a4,a1
+    8000194c:	e618                	sd	a4,8(a2)
+  p->trapframe->kernel_trap = (uint64)usertrap;
+    8000194e:	6d38                	ld	a4,88(a0)
+    80001950:	00000617          	auipc	a2,0x0
+    80001954:	11060613          	addi	a2,a2,272 # 80001a60 <usertrap>
+    80001958:	eb10                	sd	a2,16(a4)
+  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
+    8000195a:	6d38                	ld	a4,88(a0)
+  asm volatile("mv %0, tp" : "=r" (x) );
+    8000195c:	8612                	mv	a2,tp
+    8000195e:	f310                	sd	a2,32(a4)
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001960:	10002773          	csrr	a4,sstatus
+  // set up the registers that trampoline.S's sret will use
+  // to get to user space.
+  
+  // set S Previous Privilege mode to User.
+  unsigned long x = r_sstatus();
+  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
+    80001964:	eff77713          	andi	a4,a4,-257
+  x |= SSTATUS_SPIE; // enable interrupts in user mode
+    80001968:	02076713          	ori	a4,a4,32
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    8000196c:	10071073          	csrw	sstatus,a4
+  w_sstatus(x);
+
+  // set S Exception Program Counter to the saved user pc.
+  w_sepc(p->trapframe->epc);
+    80001970:	6d38                	ld	a4,88(a0)
+  asm volatile("csrw sepc, %0" : : "r" (x));
+    80001972:	6f18                	ld	a4,24(a4)
+    80001974:	14171073          	csrw	sepc,a4
+
+  // tell trampoline.S the user page table to switch to.
+  uint64 satp = MAKE_SATP(p->pagetable);
+    80001978:	6928                	ld	a0,80(a0)
+    8000197a:	8131                	srli	a0,a0,0xc
+
+  // jump to userret in trampoline.S at the top of memory, which 
+  // switches to the user page table, restores user registers,
+  // and switches to user mode with sret.
+  uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
+    8000197c:	00004717          	auipc	a4,0x4
+    80001980:	72070713          	addi	a4,a4,1824 # 8000609c <userret>
+    80001984:	8f15                	sub	a4,a4,a3
+    80001986:	97ba                	add	a5,a5,a4
+  ((void (*)(uint64))trampoline_userret)(satp);
+    80001988:	577d                	li	a4,-1
+    8000198a:	177e                	slli	a4,a4,0x3f
+    8000198c:	8d59                	or	a0,a0,a4
+    8000198e:	9782                	jalr	a5
+}
+    80001990:	60a2                	ld	ra,8(sp)
+    80001992:	6402                	ld	s0,0(sp)
+    80001994:	0141                	addi	sp,sp,16
+    80001996:	8082                	ret
+
+0000000080001998 <clockintr>:
+  w_sstatus(sstatus);
+}
+
+void
+clockintr()
+{
+    80001998:	1101                	addi	sp,sp,-32
+    8000199a:	ec06                	sd	ra,24(sp)
+    8000199c:	e822                	sd	s0,16(sp)
+    8000199e:	1000                	addi	s0,sp,32
+  if(cpuid() == 0){
+    800019a0:	bdcff0ef          	jal	80000d7c <cpuid>
+    800019a4:	cd11                	beqz	a0,800019c0 <clockintr+0x28>
+  asm volatile("csrr %0, time" : "=r" (x) );
+    800019a6:	c01027f3          	rdtime	a5
+  }
+
+  // ask for the next timer interrupt. this also clears
+  // the interrupt request. 1000000 is about a tenth
+  // of a second.
+  w_stimecmp(r_time() + 1000000);
+    800019aa:	000f4737          	lui	a4,0xf4
+    800019ae:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x7ff0bdc0>
+    800019b2:	97ba                	add	a5,a5,a4
+  asm volatile("csrw 0x14d, %0" : : "r" (x));
+    800019b4:	14d79073          	csrw	stimecmp,a5
+}
+    800019b8:	60e2                	ld	ra,24(sp)
+    800019ba:	6442                	ld	s0,16(sp)
+    800019bc:	6105                	addi	sp,sp,32
+    800019be:	8082                	ret
+    800019c0:	e426                	sd	s1,8(sp)
+    acquire(&tickslock);
+    800019c2:	0000c497          	auipc	s1,0xc
+    800019c6:	f4e48493          	addi	s1,s1,-178 # 8000d910 <tickslock>
+    800019ca:	8526                	mv	a0,s1
+    800019cc:	705030ef          	jal	800058d0 <acquire>
+    ticks++;
+    800019d0:	00006517          	auipc	a0,0x6
+    800019d4:	0d850513          	addi	a0,a0,216 # 80007aa8 <ticks>
+    800019d8:	411c                	lw	a5,0(a0)
+    800019da:	2785                	addiw	a5,a5,1
+    800019dc:	c11c                	sw	a5,0(a0)
+    wakeup(&ticks);
+    800019de:	9edff0ef          	jal	800013ca <wakeup>
+    release(&tickslock);
+    800019e2:	8526                	mv	a0,s1
+    800019e4:	785030ef          	jal	80005968 <release>
+    800019e8:	64a2                	ld	s1,8(sp)
+    800019ea:	bf75                	j	800019a6 <clockintr+0xe>
+
+00000000800019ec <devintr>:
+// returns 2 if timer interrupt,
+// 1 if other device,
+// 0 if not recognized.
+int
+devintr()
+{
+    800019ec:	1101                	addi	sp,sp,-32
+    800019ee:	ec06                	sd	ra,24(sp)
+    800019f0:	e822                	sd	s0,16(sp)
+    800019f2:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    800019f4:	14202773          	csrr	a4,scause
+  uint64 scause = r_scause();
+
+  if(scause == 0x8000000000000009L){
+    800019f8:	57fd                	li	a5,-1
+    800019fa:	17fe                	slli	a5,a5,0x3f
+    800019fc:	07a5                	addi	a5,a5,9
+    800019fe:	00f70c63          	beq	a4,a5,80001a16 <devintr+0x2a>
+    // now allowed to interrupt again.
+    if(irq)
+      plic_complete(irq);
+
+    return 1;
+  } else if(scause == 0x8000000000000005L){
+    80001a02:	57fd                	li	a5,-1
+    80001a04:	17fe                	slli	a5,a5,0x3f
+    80001a06:	0795                	addi	a5,a5,5
+    // timer interrupt.
+    clockintr();
+    return 2;
+  } else {
+    return 0;
+    80001a08:	4501                	li	a0,0
+  } else if(scause == 0x8000000000000005L){
+    80001a0a:	04f70763          	beq	a4,a5,80001a58 <devintr+0x6c>
+  }
+}
+    80001a0e:	60e2                	ld	ra,24(sp)
+    80001a10:	6442                	ld	s0,16(sp)
+    80001a12:	6105                	addi	sp,sp,32
+    80001a14:	8082                	ret
+    80001a16:	e426                	sd	s1,8(sp)
+    int irq = plic_claim();
+    80001a18:	6a5020ef          	jal	800048bc <plic_claim>
+    80001a1c:	84aa                	mv	s1,a0
+    if(irq == UART0_IRQ){
+    80001a1e:	47a9                	li	a5,10
+    80001a20:	00f50963          	beq	a0,a5,80001a32 <devintr+0x46>
+    } else if(irq == VIRTIO0_IRQ){
+    80001a24:	4785                	li	a5,1
+    80001a26:	00f50963          	beq	a0,a5,80001a38 <devintr+0x4c>
+    return 1;
+    80001a2a:	4505                	li	a0,1
+    } else if(irq){
+    80001a2c:	e889                	bnez	s1,80001a3e <devintr+0x52>
+    80001a2e:	64a2                	ld	s1,8(sp)
+    80001a30:	bff9                	j	80001a0e <devintr+0x22>
+      uartintr();
+    80001a32:	5e3030ef          	jal	80005814 <uartintr>
+    if(irq)
+    80001a36:	a819                	j	80001a4c <devintr+0x60>
+      virtio_disk_intr();
+    80001a38:	34a030ef          	jal	80004d82 <virtio_disk_intr>
+    if(irq)
+    80001a3c:	a801                	j	80001a4c <devintr+0x60>
+      printf("unexpected interrupt irq=%d\n", irq);
+    80001a3e:	85a6                	mv	a1,s1
+    80001a40:	00006517          	auipc	a0,0x6
+    80001a44:	85050513          	addi	a0,a0,-1968 # 80007290 <etext+0x290>
+    80001a48:	089030ef          	jal	800052d0 <printf>
+      plic_complete(irq);
+    80001a4c:	8526                	mv	a0,s1
+    80001a4e:	68f020ef          	jal	800048dc <plic_complete>
+    return 1;
+    80001a52:	4505                	li	a0,1
+    80001a54:	64a2                	ld	s1,8(sp)
+    80001a56:	bf65                	j	80001a0e <devintr+0x22>
+    clockintr();
+    80001a58:	f41ff0ef          	jal	80001998 <clockintr>
+    return 2;
+    80001a5c:	4509                	li	a0,2
+    80001a5e:	bf45                	j	80001a0e <devintr+0x22>
+
+0000000080001a60 <usertrap>:
+{
+    80001a60:	1101                	addi	sp,sp,-32
+    80001a62:	ec06                	sd	ra,24(sp)
+    80001a64:	e822                	sd	s0,16(sp)
+    80001a66:	e426                	sd	s1,8(sp)
+    80001a68:	e04a                	sd	s2,0(sp)
+    80001a6a:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001a6c:	100027f3          	csrr	a5,sstatus
+  if((r_sstatus() & SSTATUS_SPP) != 0)
+    80001a70:	1007f793          	andi	a5,a5,256
+    80001a74:	ef85                	bnez	a5,80001aac <usertrap+0x4c>
+  asm volatile("csrw stvec, %0" : : "r" (x));
+    80001a76:	00003797          	auipc	a5,0x3
+    80001a7a:	d9a78793          	addi	a5,a5,-614 # 80004810 <kernelvec>
+    80001a7e:	10579073          	csrw	stvec,a5
+  struct proc *p = myproc();
+    80001a82:	b26ff0ef          	jal	80000da8 <myproc>
+    80001a86:	84aa                	mv	s1,a0
+  p->trapframe->epc = r_sepc();
+    80001a88:	6d3c                	ld	a5,88(a0)
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80001a8a:	14102773          	csrr	a4,sepc
+    80001a8e:	ef98                	sd	a4,24(a5)
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80001a90:	14202773          	csrr	a4,scause
+  if(r_scause() == 8){
+    80001a94:	47a1                	li	a5,8
+    80001a96:	02f70163          	beq	a4,a5,80001ab8 <usertrap+0x58>
+  } else if((which_dev = devintr()) != 0){
+    80001a9a:	f53ff0ef          	jal	800019ec <devintr>
+    80001a9e:	892a                	mv	s2,a0
+    80001aa0:	c135                	beqz	a0,80001b04 <usertrap+0xa4>
+  if(killed(p))
+    80001aa2:	8526                	mv	a0,s1
+    80001aa4:	b13ff0ef          	jal	800015b6 <killed>
+    80001aa8:	cd1d                	beqz	a0,80001ae6 <usertrap+0x86>
+    80001aaa:	a81d                	j	80001ae0 <usertrap+0x80>
+    panic("usertrap: not from user mode");
+    80001aac:	00006517          	auipc	a0,0x6
+    80001ab0:	80450513          	addi	a0,a0,-2044 # 800072b0 <etext+0x2b0>
+    80001ab4:	2ef030ef          	jal	800055a2 <panic>
+    if(killed(p))
+    80001ab8:	affff0ef          	jal	800015b6 <killed>
+    80001abc:	e121                	bnez	a0,80001afc <usertrap+0x9c>
+    p->trapframe->epc += 4;
+    80001abe:	6cb8                	ld	a4,88(s1)
+    80001ac0:	6f1c                	ld	a5,24(a4)
+    80001ac2:	0791                	addi	a5,a5,4
+    80001ac4:	ef1c                	sd	a5,24(a4)
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001ac6:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80001aca:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80001ace:	10079073          	csrw	sstatus,a5
+    syscall();
+    80001ad2:	248000ef          	jal	80001d1a <syscall>
+  if(killed(p))
+    80001ad6:	8526                	mv	a0,s1
+    80001ad8:	adfff0ef          	jal	800015b6 <killed>
+    80001adc:	c901                	beqz	a0,80001aec <usertrap+0x8c>
+    80001ade:	4901                	li	s2,0
+    exit(-1);
+    80001ae0:	557d                	li	a0,-1
+    80001ae2:	9a9ff0ef          	jal	8000148a <exit>
+  if(which_dev == 2)
+    80001ae6:	4789                	li	a5,2
+    80001ae8:	04f90563          	beq	s2,a5,80001b32 <usertrap+0xd2>
+  usertrapret();
+    80001aec:	e1bff0ef          	jal	80001906 <usertrapret>
+}
+    80001af0:	60e2                	ld	ra,24(sp)
+    80001af2:	6442                	ld	s0,16(sp)
+    80001af4:	64a2                	ld	s1,8(sp)
+    80001af6:	6902                	ld	s2,0(sp)
+    80001af8:	6105                	addi	sp,sp,32
+    80001afa:	8082                	ret
+      exit(-1);
+    80001afc:	557d                	li	a0,-1
+    80001afe:	98dff0ef          	jal	8000148a <exit>
+    80001b02:	bf75                	j	80001abe <usertrap+0x5e>
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80001b04:	142025f3          	csrr	a1,scause
+    printf("usertrap(): unexpected scause 0x%lx pid=%d\n", r_scause(), p->pid);
+    80001b08:	5890                	lw	a2,48(s1)
+    80001b0a:	00005517          	auipc	a0,0x5
+    80001b0e:	7c650513          	addi	a0,a0,1990 # 800072d0 <etext+0x2d0>
+    80001b12:	7be030ef          	jal	800052d0 <printf>
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80001b16:	141025f3          	csrr	a1,sepc
+  asm volatile("csrr %0, stval" : "=r" (x) );
+    80001b1a:	14302673          	csrr	a2,stval
+    printf("            sepc=0x%lx stval=0x%lx\n", r_sepc(), r_stval());
+    80001b1e:	00005517          	auipc	a0,0x5
+    80001b22:	7e250513          	addi	a0,a0,2018 # 80007300 <etext+0x300>
+    80001b26:	7aa030ef          	jal	800052d0 <printf>
+    setkilled(p);
+    80001b2a:	8526                	mv	a0,s1
+    80001b2c:	a67ff0ef          	jal	80001592 <setkilled>
+    80001b30:	b75d                	j	80001ad6 <usertrap+0x76>
+    yield();
+    80001b32:	821ff0ef          	jal	80001352 <yield>
+    80001b36:	bf5d                	j	80001aec <usertrap+0x8c>
+
+0000000080001b38 <kerneltrap>:
+{
+    80001b38:	7179                	addi	sp,sp,-48
+    80001b3a:	f406                	sd	ra,40(sp)
+    80001b3c:	f022                	sd	s0,32(sp)
+    80001b3e:	ec26                	sd	s1,24(sp)
+    80001b40:	e84a                	sd	s2,16(sp)
+    80001b42:	e44e                	sd	s3,8(sp)
+    80001b44:	1800                	addi	s0,sp,48
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80001b46:	14102973          	csrr	s2,sepc
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001b4a:	100024f3          	csrr	s1,sstatus
+  asm volatile("csrr %0, scause" : "=r" (x) );
+    80001b4e:	142029f3          	csrr	s3,scause
+  if((sstatus & SSTATUS_SPP) == 0)
+    80001b52:	1004f793          	andi	a5,s1,256
+    80001b56:	c795                	beqz	a5,80001b82 <kerneltrap+0x4a>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80001b58:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    80001b5c:	8b89                	andi	a5,a5,2
+  if(intr_get() != 0)
+    80001b5e:	eb85                	bnez	a5,80001b8e <kerneltrap+0x56>
+  if((which_dev = devintr()) == 0){
+    80001b60:	e8dff0ef          	jal	800019ec <devintr>
+    80001b64:	c91d                	beqz	a0,80001b9a <kerneltrap+0x62>
+  if(which_dev == 2 && myproc() != 0)
+    80001b66:	4789                	li	a5,2
+    80001b68:	04f50a63          	beq	a0,a5,80001bbc <kerneltrap+0x84>
+  asm volatile("csrw sepc, %0" : : "r" (x));
+    80001b6c:	14191073          	csrw	sepc,s2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80001b70:	10049073          	csrw	sstatus,s1
+}
+    80001b74:	70a2                	ld	ra,40(sp)
+    80001b76:	7402                	ld	s0,32(sp)
+    80001b78:	64e2                	ld	s1,24(sp)
+    80001b7a:	6942                	ld	s2,16(sp)
+    80001b7c:	69a2                	ld	s3,8(sp)
+    80001b7e:	6145                	addi	sp,sp,48
+    80001b80:	8082                	ret
+    panic("kerneltrap: not from supervisor mode");
+    80001b82:	00005517          	auipc	a0,0x5
+    80001b86:	7a650513          	addi	a0,a0,1958 # 80007328 <etext+0x328>
+    80001b8a:	219030ef          	jal	800055a2 <panic>
+    panic("kerneltrap: interrupts enabled");
+    80001b8e:	00005517          	auipc	a0,0x5
+    80001b92:	7c250513          	addi	a0,a0,1986 # 80007350 <etext+0x350>
+    80001b96:	20d030ef          	jal	800055a2 <panic>
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+    80001b9a:	14102673          	csrr	a2,sepc
+  asm volatile("csrr %0, stval" : "=r" (x) );
+    80001b9e:	143026f3          	csrr	a3,stval
+    printf("scause=0x%lx sepc=0x%lx stval=0x%lx\n", scause, r_sepc(), r_stval());
+    80001ba2:	85ce                	mv	a1,s3
+    80001ba4:	00005517          	auipc	a0,0x5
+    80001ba8:	7cc50513          	addi	a0,a0,1996 # 80007370 <etext+0x370>
+    80001bac:	724030ef          	jal	800052d0 <printf>
+    panic("kerneltrap");
+    80001bb0:	00005517          	auipc	a0,0x5
+    80001bb4:	7e850513          	addi	a0,a0,2024 # 80007398 <etext+0x398>
+    80001bb8:	1eb030ef          	jal	800055a2 <panic>
+  if(which_dev == 2 && myproc() != 0)
+    80001bbc:	9ecff0ef          	jal	80000da8 <myproc>
+    80001bc0:	d555                	beqz	a0,80001b6c <kerneltrap+0x34>
+    yield();
+    80001bc2:	f90ff0ef          	jal	80001352 <yield>
+    80001bc6:	b75d                	j	80001b6c <kerneltrap+0x34>
+
+0000000080001bc8 <argraw>:
+  return strlen(buf);
+}
+
+static uint64
+argraw(int n)
+{
+    80001bc8:	1101                	addi	sp,sp,-32
+    80001bca:	ec06                	sd	ra,24(sp)
+    80001bcc:	e822                	sd	s0,16(sp)
+    80001bce:	e426                	sd	s1,8(sp)
+    80001bd0:	1000                	addi	s0,sp,32
+    80001bd2:	84aa                	mv	s1,a0
+  struct proc *p = myproc();
+    80001bd4:	9d4ff0ef          	jal	80000da8 <myproc>
+  switch (n) {
+    80001bd8:	4795                	li	a5,5
+    80001bda:	0497e163          	bltu	a5,s1,80001c1c <argraw+0x54>
+    80001bde:	048a                	slli	s1,s1,0x2
+    80001be0:	00006717          	auipc	a4,0x6
+    80001be4:	c9870713          	addi	a4,a4,-872 # 80007878 <states.0+0x30>
+    80001be8:	94ba                	add	s1,s1,a4
+    80001bea:	409c                	lw	a5,0(s1)
+    80001bec:	97ba                	add	a5,a5,a4
+    80001bee:	8782                	jr	a5
+  case 0:
+    return p->trapframe->a0;
+    80001bf0:	6d3c                	ld	a5,88(a0)
+    80001bf2:	7ba8                	ld	a0,112(a5)
+  case 5:
+    return p->trapframe->a5;
+  }
+  panic("argraw");
+  return -1;
+}
+    80001bf4:	60e2                	ld	ra,24(sp)
+    80001bf6:	6442                	ld	s0,16(sp)
+    80001bf8:	64a2                	ld	s1,8(sp)
+    80001bfa:	6105                	addi	sp,sp,32
+    80001bfc:	8082                	ret
+    return p->trapframe->a1;
+    80001bfe:	6d3c                	ld	a5,88(a0)
+    80001c00:	7fa8                	ld	a0,120(a5)
+    80001c02:	bfcd                	j	80001bf4 <argraw+0x2c>
+    return p->trapframe->a2;
+    80001c04:	6d3c                	ld	a5,88(a0)
+    80001c06:	63c8                	ld	a0,128(a5)
+    80001c08:	b7f5                	j	80001bf4 <argraw+0x2c>
+    return p->trapframe->a3;
+    80001c0a:	6d3c                	ld	a5,88(a0)
+    80001c0c:	67c8                	ld	a0,136(a5)
+    80001c0e:	b7dd                	j	80001bf4 <argraw+0x2c>
+    return p->trapframe->a4;
+    80001c10:	6d3c                	ld	a5,88(a0)
+    80001c12:	6bc8                	ld	a0,144(a5)
+    80001c14:	b7c5                	j	80001bf4 <argraw+0x2c>
+    return p->trapframe->a5;
+    80001c16:	6d3c                	ld	a5,88(a0)
+    80001c18:	6fc8                	ld	a0,152(a5)
+    80001c1a:	bfe9                	j	80001bf4 <argraw+0x2c>
+  panic("argraw");
+    80001c1c:	00005517          	auipc	a0,0x5
+    80001c20:	78c50513          	addi	a0,a0,1932 # 800073a8 <etext+0x3a8>
+    80001c24:	17f030ef          	jal	800055a2 <panic>
+
+0000000080001c28 <fetchaddr>:
+{
+    80001c28:	1101                	addi	sp,sp,-32
+    80001c2a:	ec06                	sd	ra,24(sp)
+    80001c2c:	e822                	sd	s0,16(sp)
+    80001c2e:	e426                	sd	s1,8(sp)
+    80001c30:	e04a                	sd	s2,0(sp)
+    80001c32:	1000                	addi	s0,sp,32
+    80001c34:	84aa                	mv	s1,a0
+    80001c36:	892e                	mv	s2,a1
+  struct proc *p = myproc();
+    80001c38:	970ff0ef          	jal	80000da8 <myproc>
+  if(addr >= p->sz || addr+sizeof(uint64) > p->sz) // both tests needed, in case of overflow
+    80001c3c:	653c                	ld	a5,72(a0)
+    80001c3e:	02f4f663          	bgeu	s1,a5,80001c6a <fetchaddr+0x42>
+    80001c42:	00848713          	addi	a4,s1,8
+    80001c46:	02e7e463          	bltu	a5,a4,80001c6e <fetchaddr+0x46>
+  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
+    80001c4a:	46a1                	li	a3,8
+    80001c4c:	8626                	mv	a2,s1
+    80001c4e:	85ca                	mv	a1,s2
+    80001c50:	6928                	ld	a0,80(a0)
+    80001c52:	e9ffe0ef          	jal	80000af0 <copyin>
+    80001c56:	00a03533          	snez	a0,a0
+    80001c5a:	40a00533          	neg	a0,a0
+}
+    80001c5e:	60e2                	ld	ra,24(sp)
+    80001c60:	6442                	ld	s0,16(sp)
+    80001c62:	64a2                	ld	s1,8(sp)
+    80001c64:	6902                	ld	s2,0(sp)
+    80001c66:	6105                	addi	sp,sp,32
+    80001c68:	8082                	ret
+    return -1;
+    80001c6a:	557d                	li	a0,-1
+    80001c6c:	bfcd                	j	80001c5e <fetchaddr+0x36>
+    80001c6e:	557d                	li	a0,-1
+    80001c70:	b7fd                	j	80001c5e <fetchaddr+0x36>
+
+0000000080001c72 <fetchstr>:
+{
+    80001c72:	7179                	addi	sp,sp,-48
+    80001c74:	f406                	sd	ra,40(sp)
+    80001c76:	f022                	sd	s0,32(sp)
+    80001c78:	ec26                	sd	s1,24(sp)
+    80001c7a:	e84a                	sd	s2,16(sp)
+    80001c7c:	e44e                	sd	s3,8(sp)
+    80001c7e:	1800                	addi	s0,sp,48
+    80001c80:	892a                	mv	s2,a0
+    80001c82:	84ae                	mv	s1,a1
+    80001c84:	89b2                	mv	s3,a2
+  struct proc *p = myproc();
+    80001c86:	922ff0ef          	jal	80000da8 <myproc>
+  if(copyinstr(p->pagetable, buf, addr, max) < 0)
+    80001c8a:	86ce                	mv	a3,s3
+    80001c8c:	864a                	mv	a2,s2
+    80001c8e:	85a6                	mv	a1,s1
+    80001c90:	6928                	ld	a0,80(a0)
+    80001c92:	ee5fe0ef          	jal	80000b76 <copyinstr>
+    80001c96:	00054c63          	bltz	a0,80001cae <fetchstr+0x3c>
+  return strlen(buf);
+    80001c9a:	8526                	mv	a0,s1
+    80001c9c:	e64fe0ef          	jal	80000300 <strlen>
+}
+    80001ca0:	70a2                	ld	ra,40(sp)
+    80001ca2:	7402                	ld	s0,32(sp)
+    80001ca4:	64e2                	ld	s1,24(sp)
+    80001ca6:	6942                	ld	s2,16(sp)
+    80001ca8:	69a2                	ld	s3,8(sp)
+    80001caa:	6145                	addi	sp,sp,48
+    80001cac:	8082                	ret
+    return -1;
+    80001cae:	557d                	li	a0,-1
+    80001cb0:	bfc5                	j	80001ca0 <fetchstr+0x2e>
+
+0000000080001cb2 <argint>:
+
+// Fetch the nth 32-bit system call argument.
+void
+argint(int n, int *ip)
+{
+    80001cb2:	1101                	addi	sp,sp,-32
+    80001cb4:	ec06                	sd	ra,24(sp)
+    80001cb6:	e822                	sd	s0,16(sp)
+    80001cb8:	e426                	sd	s1,8(sp)
+    80001cba:	1000                	addi	s0,sp,32
+    80001cbc:	84ae                	mv	s1,a1
+  *ip = argraw(n);
+    80001cbe:	f0bff0ef          	jal	80001bc8 <argraw>
+    80001cc2:	c088                	sw	a0,0(s1)
+}
+    80001cc4:	60e2                	ld	ra,24(sp)
+    80001cc6:	6442                	ld	s0,16(sp)
+    80001cc8:	64a2                	ld	s1,8(sp)
+    80001cca:	6105                	addi	sp,sp,32
+    80001ccc:	8082                	ret
+
+0000000080001cce <argaddr>:
+// Retrieve an argument as a pointer.
+// Doesn't check for legality, since
+// copyin/copyout will do that.
+void
+argaddr(int n, uint64 *ip)
+{
+    80001cce:	1101                	addi	sp,sp,-32
+    80001cd0:	ec06                	sd	ra,24(sp)
+    80001cd2:	e822                	sd	s0,16(sp)
+    80001cd4:	e426                	sd	s1,8(sp)
+    80001cd6:	1000                	addi	s0,sp,32
+    80001cd8:	84ae                	mv	s1,a1
+  *ip = argraw(n);
+    80001cda:	eefff0ef          	jal	80001bc8 <argraw>
+    80001cde:	e088                	sd	a0,0(s1)
+}
+    80001ce0:	60e2                	ld	ra,24(sp)
+    80001ce2:	6442                	ld	s0,16(sp)
+    80001ce4:	64a2                	ld	s1,8(sp)
+    80001ce6:	6105                	addi	sp,sp,32
+    80001ce8:	8082                	ret
+
+0000000080001cea <argstr>:
+// Fetch the nth word-sized system call argument as a null-terminated string.
+// Copies into buf, at most max.
+// Returns string length if OK (including nul), -1 if error.
+int
+argstr(int n, char *buf, int max)
+{
+    80001cea:	7179                	addi	sp,sp,-48
+    80001cec:	f406                	sd	ra,40(sp)
+    80001cee:	f022                	sd	s0,32(sp)
+    80001cf0:	ec26                	sd	s1,24(sp)
+    80001cf2:	e84a                	sd	s2,16(sp)
+    80001cf4:	1800                	addi	s0,sp,48
+    80001cf6:	84ae                	mv	s1,a1
+    80001cf8:	8932                	mv	s2,a2
+  uint64 addr;
+  argaddr(n, &addr);
+    80001cfa:	fd840593          	addi	a1,s0,-40
+    80001cfe:	fd1ff0ef          	jal	80001cce <argaddr>
+  return fetchstr(addr, buf, max);
+    80001d02:	864a                	mv	a2,s2
+    80001d04:	85a6                	mv	a1,s1
+    80001d06:	fd843503          	ld	a0,-40(s0)
+    80001d0a:	f69ff0ef          	jal	80001c72 <fetchstr>
+}
+    80001d0e:	70a2                	ld	ra,40(sp)
+    80001d10:	7402                	ld	s0,32(sp)
+    80001d12:	64e2                	ld	s1,24(sp)
+    80001d14:	6942                	ld	s2,16(sp)
+    80001d16:	6145                	addi	sp,sp,48
+    80001d18:	8082                	ret
+
+0000000080001d1a <syscall>:
+[SYS_sysinfo] sys_sysinfo
+};
+
+void
+syscall(void)
+{
+    80001d1a:	7179                	addi	sp,sp,-48
+    80001d1c:	f406                	sd	ra,40(sp)
+    80001d1e:	f022                	sd	s0,32(sp)
+    80001d20:	ec26                	sd	s1,24(sp)
+    80001d22:	e84a                	sd	s2,16(sp)
+    80001d24:	e44e                	sd	s3,8(sp)
+    80001d26:	1800                	addi	s0,sp,48
+  int num;
+  struct proc *p = myproc();
+    80001d28:	880ff0ef          	jal	80000da8 <myproc>
+    80001d2c:	84aa                	mv	s1,a0
+
+  num = p->trapframe->a7;
+    80001d2e:	05853903          	ld	s2,88(a0)
+    80001d32:	0a893783          	ld	a5,168(s2)
+    80001d36:	0007899b          	sext.w	s3,a5
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    80001d3a:	37fd                	addiw	a5,a5,-1
+    80001d3c:	475d                	li	a4,23
+    80001d3e:	04f76463          	bltu	a4,a5,80001d86 <syscall+0x6c>
+    80001d42:	00399713          	slli	a4,s3,0x3
+    80001d46:	00006797          	auipc	a5,0x6
+    80001d4a:	b4a78793          	addi	a5,a5,-1206 # 80007890 <syscalls>
+    80001d4e:	97ba                	add	a5,a5,a4
+    80001d50:	639c                	ld	a5,0(a5)
+    80001d52:	cb95                	beqz	a5,80001d86 <syscall+0x6c>
+    // Use num to lookup the system call function for num, call it,
+    // and store its return value in p->trapframe->a0
+    p->trapframe->a0 = syscalls[num]();
+    80001d54:	9782                	jalr	a5
+    80001d56:	06a93823          	sd	a0,112(s2)
+    // Check if tracing is enabled for this system call
+        if (p->trace_mask & (1 << num)) {
+    80001d5a:	58dc                	lw	a5,52(s1)
+    80001d5c:	4137d7bb          	sraw	a5,a5,s3
+    80001d60:	8b85                	andi	a5,a5,1
+    80001d62:	cf9d                	beqz	a5,80001da0 <syscall+0x86>
+            printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], p->trapframe->a0);
+    80001d64:	6cb8                	ld	a4,88(s1)
+    80001d66:	098e                	slli	s3,s3,0x3
+    80001d68:	00006797          	auipc	a5,0x6
+    80001d6c:	b2878793          	addi	a5,a5,-1240 # 80007890 <syscalls>
+    80001d70:	97ce                	add	a5,a5,s3
+    80001d72:	7b34                	ld	a3,112(a4)
+    80001d74:	67f0                	ld	a2,200(a5)
+    80001d76:	588c                	lw	a1,48(s1)
+    80001d78:	00005517          	auipc	a0,0x5
+    80001d7c:	63850513          	addi	a0,a0,1592 # 800073b0 <etext+0x3b0>
+    80001d80:	550030ef          	jal	800052d0 <printf>
+    80001d84:	a831                	j	80001da0 <syscall+0x86>
+        }
+  } else {
+    printf("%d %s: unknown sys call %d\n",
+    80001d86:	86ce                	mv	a3,s3
+    80001d88:	15848613          	addi	a2,s1,344
+    80001d8c:	588c                	lw	a1,48(s1)
+    80001d8e:	00005517          	auipc	a0,0x5
+    80001d92:	63a50513          	addi	a0,a0,1594 # 800073c8 <etext+0x3c8>
+    80001d96:	53a030ef          	jal	800052d0 <printf>
+            p->pid, p->name, num);
+    p->trapframe->a0 = -1;
+    80001d9a:	6cbc                	ld	a5,88(s1)
+    80001d9c:	577d                	li	a4,-1
+    80001d9e:	fbb8                	sd	a4,112(a5)
+  }
+}
+    80001da0:	70a2                	ld	ra,40(sp)
+    80001da2:	7402                	ld	s0,32(sp)
+    80001da4:	64e2                	ld	s1,24(sp)
+    80001da6:	6942                	ld	s2,16(sp)
+    80001da8:	69a2                	ld	s3,8(sp)
+    80001daa:	6145                	addi	sp,sp,48
+    80001dac:	8082                	ret
+
+0000000080001dae <sys_exit>:
+#include "sysinfo.h"
+
+
+uint64
+sys_exit(void)
+{
+    80001dae:	1101                	addi	sp,sp,-32
+    80001db0:	ec06                	sd	ra,24(sp)
+    80001db2:	e822                	sd	s0,16(sp)
+    80001db4:	1000                	addi	s0,sp,32
+  int n;
+  argint(0, &n);
+    80001db6:	fec40593          	addi	a1,s0,-20
+    80001dba:	4501                	li	a0,0
+    80001dbc:	ef7ff0ef          	jal	80001cb2 <argint>
+  exit(n);
+    80001dc0:	fec42503          	lw	a0,-20(s0)
+    80001dc4:	ec6ff0ef          	jal	8000148a <exit>
+  return 0;  // not reached
+}
+    80001dc8:	4501                	li	a0,0
+    80001dca:	60e2                	ld	ra,24(sp)
+    80001dcc:	6442                	ld	s0,16(sp)
+    80001dce:	6105                	addi	sp,sp,32
+    80001dd0:	8082                	ret
+
+0000000080001dd2 <sys_getpid>:
+
+uint64
+sys_getpid(void)
+{
+    80001dd2:	1141                	addi	sp,sp,-16
+    80001dd4:	e406                	sd	ra,8(sp)
+    80001dd6:	e022                	sd	s0,0(sp)
+    80001dd8:	0800                	addi	s0,sp,16
+  return myproc()->pid;
+    80001dda:	fcffe0ef          	jal	80000da8 <myproc>
+}
+    80001dde:	5908                	lw	a0,48(a0)
+    80001de0:	60a2                	ld	ra,8(sp)
+    80001de2:	6402                	ld	s0,0(sp)
+    80001de4:	0141                	addi	sp,sp,16
+    80001de6:	8082                	ret
+
+0000000080001de8 <sys_fork>:
+
+uint64
+sys_fork(void)
+{
+    80001de8:	1141                	addi	sp,sp,-16
+    80001dea:	e406                	sd	ra,8(sp)
+    80001dec:	e022                	sd	s0,0(sp)
+    80001dee:	0800                	addi	s0,sp,16
+  return fork();
+    80001df0:	adeff0ef          	jal	800010ce <fork>
+}
+    80001df4:	60a2                	ld	ra,8(sp)
+    80001df6:	6402                	ld	s0,0(sp)
+    80001df8:	0141                	addi	sp,sp,16
+    80001dfa:	8082                	ret
+
+0000000080001dfc <sys_wait>:
+
+uint64
+sys_wait(void)
+{
+    80001dfc:	1101                	addi	sp,sp,-32
+    80001dfe:	ec06                	sd	ra,24(sp)
+    80001e00:	e822                	sd	s0,16(sp)
+    80001e02:	1000                	addi	s0,sp,32
+  uint64 p;
+  argaddr(0, &p);
+    80001e04:	fe840593          	addi	a1,s0,-24
+    80001e08:	4501                	li	a0,0
+    80001e0a:	ec5ff0ef          	jal	80001cce <argaddr>
+  return wait(p);
+    80001e0e:	fe843503          	ld	a0,-24(s0)
+    80001e12:	fceff0ef          	jal	800015e0 <wait>
+}
+    80001e16:	60e2                	ld	ra,24(sp)
+    80001e18:	6442                	ld	s0,16(sp)
+    80001e1a:	6105                	addi	sp,sp,32
+    80001e1c:	8082                	ret
+
+0000000080001e1e <sys_sbrk>:
+
+uint64
+sys_sbrk(void)
+{
+    80001e1e:	7179                	addi	sp,sp,-48
+    80001e20:	f406                	sd	ra,40(sp)
+    80001e22:	f022                	sd	s0,32(sp)
+    80001e24:	ec26                	sd	s1,24(sp)
+    80001e26:	1800                	addi	s0,sp,48
+  uint64 addr;
+  int n;
+
+  argint(0, &n);
+    80001e28:	fdc40593          	addi	a1,s0,-36
+    80001e2c:	4501                	li	a0,0
+    80001e2e:	e85ff0ef          	jal	80001cb2 <argint>
+  addr = myproc()->sz;
+    80001e32:	f77fe0ef          	jal	80000da8 <myproc>
+    80001e36:	6524                	ld	s1,72(a0)
+  if(growproc(n) < 0)
+    80001e38:	fdc42503          	lw	a0,-36(s0)
+    80001e3c:	a42ff0ef          	jal	8000107e <growproc>
+    80001e40:	00054863          	bltz	a0,80001e50 <sys_sbrk+0x32>
+    return -1;
+  return addr;
+}
+    80001e44:	8526                	mv	a0,s1
+    80001e46:	70a2                	ld	ra,40(sp)
+    80001e48:	7402                	ld	s0,32(sp)
+    80001e4a:	64e2                	ld	s1,24(sp)
+    80001e4c:	6145                	addi	sp,sp,48
+    80001e4e:	8082                	ret
+    return -1;
+    80001e50:	54fd                	li	s1,-1
+    80001e52:	bfcd                	j	80001e44 <sys_sbrk+0x26>
+
+0000000080001e54 <sys_sleep>:
+
+uint64
+sys_sleep(void)
+{
+    80001e54:	7139                	addi	sp,sp,-64
+    80001e56:	fc06                	sd	ra,56(sp)
+    80001e58:	f822                	sd	s0,48(sp)
+    80001e5a:	f04a                	sd	s2,32(sp)
+    80001e5c:	0080                	addi	s0,sp,64
+  int n;
+  uint ticks0;
+
+  argint(0, &n);
+    80001e5e:	fcc40593          	addi	a1,s0,-52
+    80001e62:	4501                	li	a0,0
+    80001e64:	e4fff0ef          	jal	80001cb2 <argint>
+  if(n < 0)
+    80001e68:	fcc42783          	lw	a5,-52(s0)
+    80001e6c:	0607c763          	bltz	a5,80001eda <sys_sleep+0x86>
+    n = 0;
+  acquire(&tickslock);
+    80001e70:	0000c517          	auipc	a0,0xc
+    80001e74:	aa050513          	addi	a0,a0,-1376 # 8000d910 <tickslock>
+    80001e78:	259030ef          	jal	800058d0 <acquire>
+  ticks0 = ticks;
+    80001e7c:	00006917          	auipc	s2,0x6
+    80001e80:	c2c92903          	lw	s2,-980(s2) # 80007aa8 <ticks>
+  while(ticks - ticks0 < n){
+    80001e84:	fcc42783          	lw	a5,-52(s0)
+    80001e88:	cf8d                	beqz	a5,80001ec2 <sys_sleep+0x6e>
+    80001e8a:	f426                	sd	s1,40(sp)
+    80001e8c:	ec4e                	sd	s3,24(sp)
+    if(killed(myproc())){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+    80001e8e:	0000c997          	auipc	s3,0xc
+    80001e92:	a8298993          	addi	s3,s3,-1406 # 8000d910 <tickslock>
+    80001e96:	00006497          	auipc	s1,0x6
+    80001e9a:	c1248493          	addi	s1,s1,-1006 # 80007aa8 <ticks>
+    if(killed(myproc())){
+    80001e9e:	f0bfe0ef          	jal	80000da8 <myproc>
+    80001ea2:	f14ff0ef          	jal	800015b6 <killed>
+    80001ea6:	ed0d                	bnez	a0,80001ee0 <sys_sleep+0x8c>
+    sleep(&ticks, &tickslock);
+    80001ea8:	85ce                	mv	a1,s3
+    80001eaa:	8526                	mv	a0,s1
+    80001eac:	cd2ff0ef          	jal	8000137e <sleep>
+  while(ticks - ticks0 < n){
+    80001eb0:	409c                	lw	a5,0(s1)
+    80001eb2:	412787bb          	subw	a5,a5,s2
+    80001eb6:	fcc42703          	lw	a4,-52(s0)
+    80001eba:	fee7e2e3          	bltu	a5,a4,80001e9e <sys_sleep+0x4a>
+    80001ebe:	74a2                	ld	s1,40(sp)
+    80001ec0:	69e2                	ld	s3,24(sp)
+  }
+  release(&tickslock);
+    80001ec2:	0000c517          	auipc	a0,0xc
+    80001ec6:	a4e50513          	addi	a0,a0,-1458 # 8000d910 <tickslock>
+    80001eca:	29f030ef          	jal	80005968 <release>
+  return 0;
+    80001ece:	4501                	li	a0,0
+}
+    80001ed0:	70e2                	ld	ra,56(sp)
+    80001ed2:	7442                	ld	s0,48(sp)
+    80001ed4:	7902                	ld	s2,32(sp)
+    80001ed6:	6121                	addi	sp,sp,64
+    80001ed8:	8082                	ret
+    n = 0;
+    80001eda:	fc042623          	sw	zero,-52(s0)
+    80001ede:	bf49                	j	80001e70 <sys_sleep+0x1c>
+      release(&tickslock);
+    80001ee0:	0000c517          	auipc	a0,0xc
+    80001ee4:	a3050513          	addi	a0,a0,-1488 # 8000d910 <tickslock>
+    80001ee8:	281030ef          	jal	80005968 <release>
+      return -1;
+    80001eec:	557d                	li	a0,-1
+    80001eee:	74a2                	ld	s1,40(sp)
+    80001ef0:	69e2                	ld	s3,24(sp)
+    80001ef2:	bff9                	j	80001ed0 <sys_sleep+0x7c>
+
+0000000080001ef4 <sys_kill>:
+
+uint64
+sys_kill(void)
+{
+    80001ef4:	1101                	addi	sp,sp,-32
+    80001ef6:	ec06                	sd	ra,24(sp)
+    80001ef8:	e822                	sd	s0,16(sp)
+    80001efa:	1000                	addi	s0,sp,32
+  int pid;
+
+  argint(0, &pid);
+    80001efc:	fec40593          	addi	a1,s0,-20
+    80001f00:	4501                	li	a0,0
+    80001f02:	db1ff0ef          	jal	80001cb2 <argint>
+  return kill(pid);
+    80001f06:	fec42503          	lw	a0,-20(s0)
+    80001f0a:	e22ff0ef          	jal	8000152c <kill>
+}
+    80001f0e:	60e2                	ld	ra,24(sp)
+    80001f10:	6442                	ld	s0,16(sp)
+    80001f12:	6105                	addi	sp,sp,32
+    80001f14:	8082                	ret
+
+0000000080001f16 <sys_hello>:
+
+uint64 sys_hello(void)
+{
+    80001f16:	1141                	addi	sp,sp,-16
+    80001f18:	e406                	sd	ra,8(sp)
+    80001f1a:	e022                	sd	s0,0(sp)
+    80001f1c:	0800                	addi	s0,sp,16
+  printf("Hello, world!\n");
+    80001f1e:	00005517          	auipc	a0,0x5
+    80001f22:	58250513          	addi	a0,a0,1410 # 800074a0 <etext+0x4a0>
+    80001f26:	3aa030ef          	jal	800052d0 <printf>
+  return 0;
+}
+    80001f2a:	4501                	li	a0,0
+    80001f2c:	60a2                	ld	ra,8(sp)
+    80001f2e:	6402                	ld	s0,0(sp)
+    80001f30:	0141                	addi	sp,sp,16
+    80001f32:	8082                	ret
+
+0000000080001f34 <sys_trace>:
+
+uint64 sys_trace(void) {
+    80001f34:	1101                	addi	sp,sp,-32
+    80001f36:	ec06                	sd	ra,24(sp)
+    80001f38:	e822                	sd	s0,16(sp)
+    80001f3a:	1000                	addi	s0,sp,32
+    int mask;
+    argint(0, &mask);
+    80001f3c:	fec40593          	addi	a1,s0,-20
+    80001f40:	4501                	li	a0,0
+    80001f42:	d71ff0ef          	jal	80001cb2 <argint>
+    myproc()->trace_mask = mask;  // Store trace mask in the process
+    80001f46:	e63fe0ef          	jal	80000da8 <myproc>
+    80001f4a:	fec42783          	lw	a5,-20(s0)
+    80001f4e:	d95c                	sw	a5,52(a0)
+    return 0;
+}
+    80001f50:	4501                	li	a0,0
+    80001f52:	60e2                	ld	ra,24(sp)
+    80001f54:	6442                	ld	s0,16(sp)
+    80001f56:	6105                	addi	sp,sp,32
+    80001f58:	8082                	ret
+
+0000000080001f5a <sys_uptime>:
+
+// return how many clock tick interrupts have occurred
+// since start.
+uint64
+sys_uptime(void)
+{
+    80001f5a:	1101                	addi	sp,sp,-32
+    80001f5c:	ec06                	sd	ra,24(sp)
+    80001f5e:	e822                	sd	s0,16(sp)
+    80001f60:	e426                	sd	s1,8(sp)
+    80001f62:	1000                	addi	s0,sp,32
+  uint xticks;
+
+  acquire(&tickslock);
+    80001f64:	0000c517          	auipc	a0,0xc
+    80001f68:	9ac50513          	addi	a0,a0,-1620 # 8000d910 <tickslock>
+    80001f6c:	165030ef          	jal	800058d0 <acquire>
+  xticks = ticks;
+    80001f70:	00006497          	auipc	s1,0x6
+    80001f74:	b384a483          	lw	s1,-1224(s1) # 80007aa8 <ticks>
+  release(&tickslock);
+    80001f78:	0000c517          	auipc	a0,0xc
+    80001f7c:	99850513          	addi	a0,a0,-1640 # 8000d910 <tickslock>
+    80001f80:	1e9030ef          	jal	80005968 <release>
+  return xticks;
+}
+    80001f84:	02049513          	slli	a0,s1,0x20
+    80001f88:	9101                	srli	a0,a0,0x20
+    80001f8a:	60e2                	ld	ra,24(sp)
+    80001f8c:	6442                	ld	s0,16(sp)
+    80001f8e:	64a2                	ld	s1,8(sp)
+    80001f90:	6105                	addi	sp,sp,32
+    80001f92:	8082                	ret
+
+0000000080001f94 <sys_sysinfo>:
+
+uint64 count_freemem(void);
+uint64 count_nproc(void);
+uint64 count_openfiles(void);
+
+uint64 sys_sysinfo(void) {
+    80001f94:	7179                	addi	sp,sp,-48
+    80001f96:	f406                	sd	ra,40(sp)
+    80001f98:	f022                	sd	s0,32(sp)
+    80001f9a:	1800                	addi	s0,sp,48
+    struct sysinfo info;
+    uint64 addr;
+    
+    // Just call argaddr() without checking return value
+    argaddr(0, &addr);
+    80001f9c:	fd040593          	addi	a1,s0,-48
+    80001fa0:	4501                	li	a0,0
+    80001fa2:	d2dff0ef          	jal	80001cce <argaddr>
+
+    //Fill sysinfo struct
+    info.freemem = count_freemem();
+    80001fa6:	9a8fe0ef          	jal	8000014e <count_freemem>
+    80001faa:	fca43c23          	sd	a0,-40(s0)
+    info.nproc = count_nproc();
+    80001fae:	865ff0ef          	jal	80001812 <count_nproc>
+    80001fb2:	fea43023          	sd	a0,-32(s0)
+    info.nopenfiles = count_openfiles();
+    80001fb6:	79e010ef          	jal	80003754 <count_openfiles>
+    80001fba:	fea43423          	sd	a0,-24(s0)
+
+    // Copy struct to user space
+    if (copyout(myproc()->pagetable, addr, (char*)&info, sizeof(info)) < 0)
+    80001fbe:	debfe0ef          	jal	80000da8 <myproc>
+    80001fc2:	46e1                	li	a3,24
+    80001fc4:	fd840613          	addi	a2,s0,-40
+    80001fc8:	fd043583          	ld	a1,-48(s0)
+    80001fcc:	6928                	ld	a0,80(a0)
+    80001fce:	a4dfe0ef          	jal	80000a1a <copyout>
+        return -1;
+
+    return 0;
+}
+    80001fd2:	957d                	srai	a0,a0,0x3f
+    80001fd4:	70a2                	ld	ra,40(sp)
+    80001fd6:	7402                	ld	s0,32(sp)
+    80001fd8:	6145                	addi	sp,sp,48
+    80001fda:	8082                	ret
+
+0000000080001fdc <binit>:
+  struct buf head;
+} bcache;
+
+void
+binit(void)
+{
+    80001fdc:	7179                	addi	sp,sp,-48
+    80001fde:	f406                	sd	ra,40(sp)
+    80001fe0:	f022                	sd	s0,32(sp)
+    80001fe2:	ec26                	sd	s1,24(sp)
+    80001fe4:	e84a                	sd	s2,16(sp)
+    80001fe6:	e44e                	sd	s3,8(sp)
+    80001fe8:	e052                	sd	s4,0(sp)
+    80001fea:	1800                	addi	s0,sp,48
+  struct buf *b;
+
+  initlock(&bcache.lock, "bcache");
+    80001fec:	00005597          	auipc	a1,0x5
+    80001ff0:	4c458593          	addi	a1,a1,1220 # 800074b0 <etext+0x4b0>
+    80001ff4:	0000c517          	auipc	a0,0xc
+    80001ff8:	93450513          	addi	a0,a0,-1740 # 8000d928 <bcache>
+    80001ffc:	055030ef          	jal	80005850 <initlock>
+
+  // Create linked list of buffers
+  bcache.head.prev = &bcache.head;
+    80002000:	00014797          	auipc	a5,0x14
+    80002004:	92878793          	addi	a5,a5,-1752 # 80015928 <bcache+0x8000>
+    80002008:	00014717          	auipc	a4,0x14
+    8000200c:	b8870713          	addi	a4,a4,-1144 # 80015b90 <bcache+0x8268>
+    80002010:	2ae7b823          	sd	a4,688(a5)
+  bcache.head.next = &bcache.head;
+    80002014:	2ae7bc23          	sd	a4,696(a5)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    80002018:	0000c497          	auipc	s1,0xc
+    8000201c:	92848493          	addi	s1,s1,-1752 # 8000d940 <bcache+0x18>
+    b->next = bcache.head.next;
+    80002020:	893e                	mv	s2,a5
+    b->prev = &bcache.head;
+    80002022:	89ba                	mv	s3,a4
+    initsleeplock(&b->lock, "buffer");
+    80002024:	00005a17          	auipc	s4,0x5
+    80002028:	494a0a13          	addi	s4,s4,1172 # 800074b8 <etext+0x4b8>
+    b->next = bcache.head.next;
+    8000202c:	2b893783          	ld	a5,696(s2)
+    80002030:	e8bc                	sd	a5,80(s1)
+    b->prev = &bcache.head;
+    80002032:	0534b423          	sd	s3,72(s1)
+    initsleeplock(&b->lock, "buffer");
+    80002036:	85d2                	mv	a1,s4
+    80002038:	01048513          	addi	a0,s1,16
+    8000203c:	248010ef          	jal	80003284 <initsleeplock>
+    bcache.head.next->prev = b;
+    80002040:	2b893783          	ld	a5,696(s2)
+    80002044:	e7a4                	sd	s1,72(a5)
+    bcache.head.next = b;
+    80002046:	2a993c23          	sd	s1,696(s2)
+  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
+    8000204a:	45848493          	addi	s1,s1,1112
+    8000204e:	fd349fe3          	bne	s1,s3,8000202c <binit+0x50>
+  }
+}
+    80002052:	70a2                	ld	ra,40(sp)
+    80002054:	7402                	ld	s0,32(sp)
+    80002056:	64e2                	ld	s1,24(sp)
+    80002058:	6942                	ld	s2,16(sp)
+    8000205a:	69a2                	ld	s3,8(sp)
+    8000205c:	6a02                	ld	s4,0(sp)
+    8000205e:	6145                	addi	sp,sp,48
+    80002060:	8082                	ret
+
+0000000080002062 <bread>:
+}
+
+// Return a locked buf with the contents of the indicated block.
+struct buf*
+bread(uint dev, uint blockno)
+{
+    80002062:	7179                	addi	sp,sp,-48
+    80002064:	f406                	sd	ra,40(sp)
+    80002066:	f022                	sd	s0,32(sp)
+    80002068:	ec26                	sd	s1,24(sp)
+    8000206a:	e84a                	sd	s2,16(sp)
+    8000206c:	e44e                	sd	s3,8(sp)
+    8000206e:	1800                	addi	s0,sp,48
+    80002070:	892a                	mv	s2,a0
+    80002072:	89ae                	mv	s3,a1
+  acquire(&bcache.lock);
+    80002074:	0000c517          	auipc	a0,0xc
+    80002078:	8b450513          	addi	a0,a0,-1868 # 8000d928 <bcache>
+    8000207c:	055030ef          	jal	800058d0 <acquire>
+  for(b = bcache.head.next; b != &bcache.head; b = b->next){
+    80002080:	00014497          	auipc	s1,0x14
+    80002084:	b604b483          	ld	s1,-1184(s1) # 80015be0 <bcache+0x82b8>
+    80002088:	00014797          	auipc	a5,0x14
+    8000208c:	b0878793          	addi	a5,a5,-1272 # 80015b90 <bcache+0x8268>
+    80002090:	02f48b63          	beq	s1,a5,800020c6 <bread+0x64>
+    80002094:	873e                	mv	a4,a5
+    80002096:	a021                	j	8000209e <bread+0x3c>
+    80002098:	68a4                	ld	s1,80(s1)
+    8000209a:	02e48663          	beq	s1,a4,800020c6 <bread+0x64>
+    if(b->dev == dev && b->blockno == blockno){
+    8000209e:	449c                	lw	a5,8(s1)
+    800020a0:	ff279ce3          	bne	a5,s2,80002098 <bread+0x36>
+    800020a4:	44dc                	lw	a5,12(s1)
+    800020a6:	ff3799e3          	bne	a5,s3,80002098 <bread+0x36>
+      b->refcnt++;
+    800020aa:	40bc                	lw	a5,64(s1)
+    800020ac:	2785                	addiw	a5,a5,1
+    800020ae:	c0bc                	sw	a5,64(s1)
+      release(&bcache.lock);
+    800020b0:	0000c517          	auipc	a0,0xc
+    800020b4:	87850513          	addi	a0,a0,-1928 # 8000d928 <bcache>
+    800020b8:	0b1030ef          	jal	80005968 <release>
+      acquiresleep(&b->lock);
+    800020bc:	01048513          	addi	a0,s1,16
+    800020c0:	1fa010ef          	jal	800032ba <acquiresleep>
+      return b;
+    800020c4:	a889                	j	80002116 <bread+0xb4>
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    800020c6:	00014497          	auipc	s1,0x14
+    800020ca:	b124b483          	ld	s1,-1262(s1) # 80015bd8 <bcache+0x82b0>
+    800020ce:	00014797          	auipc	a5,0x14
+    800020d2:	ac278793          	addi	a5,a5,-1342 # 80015b90 <bcache+0x8268>
+    800020d6:	00f48863          	beq	s1,a5,800020e6 <bread+0x84>
+    800020da:	873e                	mv	a4,a5
+    if(b->refcnt == 0) {
+    800020dc:	40bc                	lw	a5,64(s1)
+    800020de:	cb91                	beqz	a5,800020f2 <bread+0x90>
+  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
+    800020e0:	64a4                	ld	s1,72(s1)
+    800020e2:	fee49de3          	bne	s1,a4,800020dc <bread+0x7a>
+  panic("bget: no buffers");
+    800020e6:	00005517          	auipc	a0,0x5
+    800020ea:	3da50513          	addi	a0,a0,986 # 800074c0 <etext+0x4c0>
+    800020ee:	4b4030ef          	jal	800055a2 <panic>
+      b->dev = dev;
+    800020f2:	0124a423          	sw	s2,8(s1)
+      b->blockno = blockno;
+    800020f6:	0134a623          	sw	s3,12(s1)
+      b->valid = 0;
+    800020fa:	0004a023          	sw	zero,0(s1)
+      b->refcnt = 1;
+    800020fe:	4785                	li	a5,1
+    80002100:	c0bc                	sw	a5,64(s1)
+      release(&bcache.lock);
+    80002102:	0000c517          	auipc	a0,0xc
+    80002106:	82650513          	addi	a0,a0,-2010 # 8000d928 <bcache>
+    8000210a:	05f030ef          	jal	80005968 <release>
+      acquiresleep(&b->lock);
+    8000210e:	01048513          	addi	a0,s1,16
+    80002112:	1a8010ef          	jal	800032ba <acquiresleep>
+  struct buf *b;
+
+  b = bget(dev, blockno);
+  if(!b->valid) {
+    80002116:	409c                	lw	a5,0(s1)
+    80002118:	cb89                	beqz	a5,8000212a <bread+0xc8>
+    virtio_disk_rw(b, 0);
+    b->valid = 1;
+  }
+  return b;
+}
+    8000211a:	8526                	mv	a0,s1
+    8000211c:	70a2                	ld	ra,40(sp)
+    8000211e:	7402                	ld	s0,32(sp)
+    80002120:	64e2                	ld	s1,24(sp)
+    80002122:	6942                	ld	s2,16(sp)
+    80002124:	69a2                	ld	s3,8(sp)
+    80002126:	6145                	addi	sp,sp,48
+    80002128:	8082                	ret
+    virtio_disk_rw(b, 0);
+    8000212a:	4581                	li	a1,0
+    8000212c:	8526                	mv	a0,s1
+    8000212e:	243020ef          	jal	80004b70 <virtio_disk_rw>
+    b->valid = 1;
+    80002132:	4785                	li	a5,1
+    80002134:	c09c                	sw	a5,0(s1)
+  return b;
+    80002136:	b7d5                	j	8000211a <bread+0xb8>
+
+0000000080002138 <bwrite>:
+
+// Write b's contents to disk.  Must be locked.
+void
+bwrite(struct buf *b)
+{
+    80002138:	1101                	addi	sp,sp,-32
+    8000213a:	ec06                	sd	ra,24(sp)
+    8000213c:	e822                	sd	s0,16(sp)
+    8000213e:	e426                	sd	s1,8(sp)
+    80002140:	1000                	addi	s0,sp,32
+    80002142:	84aa                	mv	s1,a0
+  if(!holdingsleep(&b->lock))
+    80002144:	0541                	addi	a0,a0,16
+    80002146:	1f2010ef          	jal	80003338 <holdingsleep>
+    8000214a:	c911                	beqz	a0,8000215e <bwrite+0x26>
+    panic("bwrite");
+  virtio_disk_rw(b, 1);
+    8000214c:	4585                	li	a1,1
+    8000214e:	8526                	mv	a0,s1
+    80002150:	221020ef          	jal	80004b70 <virtio_disk_rw>
+}
+    80002154:	60e2                	ld	ra,24(sp)
+    80002156:	6442                	ld	s0,16(sp)
+    80002158:	64a2                	ld	s1,8(sp)
+    8000215a:	6105                	addi	sp,sp,32
+    8000215c:	8082                	ret
+    panic("bwrite");
+    8000215e:	00005517          	auipc	a0,0x5
+    80002162:	37a50513          	addi	a0,a0,890 # 800074d8 <etext+0x4d8>
+    80002166:	43c030ef          	jal	800055a2 <panic>
+
+000000008000216a <brelse>:
+
+// Release a locked buffer.
+// Move to the head of the most-recently-used list.
+void
+brelse(struct buf *b)
+{
+    8000216a:	1101                	addi	sp,sp,-32
+    8000216c:	ec06                	sd	ra,24(sp)
+    8000216e:	e822                	sd	s0,16(sp)
+    80002170:	e426                	sd	s1,8(sp)
+    80002172:	e04a                	sd	s2,0(sp)
+    80002174:	1000                	addi	s0,sp,32
+    80002176:	84aa                	mv	s1,a0
+  if(!holdingsleep(&b->lock))
+    80002178:	01050913          	addi	s2,a0,16
+    8000217c:	854a                	mv	a0,s2
+    8000217e:	1ba010ef          	jal	80003338 <holdingsleep>
+    80002182:	c135                	beqz	a0,800021e6 <brelse+0x7c>
+    panic("brelse");
+
+  releasesleep(&b->lock);
+    80002184:	854a                	mv	a0,s2
+    80002186:	17a010ef          	jal	80003300 <releasesleep>
+
+  acquire(&bcache.lock);
+    8000218a:	0000b517          	auipc	a0,0xb
+    8000218e:	79e50513          	addi	a0,a0,1950 # 8000d928 <bcache>
+    80002192:	73e030ef          	jal	800058d0 <acquire>
+  b->refcnt--;
+    80002196:	40bc                	lw	a5,64(s1)
+    80002198:	37fd                	addiw	a5,a5,-1
+    8000219a:	0007871b          	sext.w	a4,a5
+    8000219e:	c0bc                	sw	a5,64(s1)
+  if (b->refcnt == 0) {
+    800021a0:	e71d                	bnez	a4,800021ce <brelse+0x64>
+    // no one is waiting for it.
+    b->next->prev = b->prev;
+    800021a2:	68b8                	ld	a4,80(s1)
+    800021a4:	64bc                	ld	a5,72(s1)
+    800021a6:	e73c                	sd	a5,72(a4)
+    b->prev->next = b->next;
+    800021a8:	68b8                	ld	a4,80(s1)
+    800021aa:	ebb8                	sd	a4,80(a5)
+    b->next = bcache.head.next;
+    800021ac:	00013797          	auipc	a5,0x13
+    800021b0:	77c78793          	addi	a5,a5,1916 # 80015928 <bcache+0x8000>
+    800021b4:	2b87b703          	ld	a4,696(a5)
+    800021b8:	e8b8                	sd	a4,80(s1)
+    b->prev = &bcache.head;
+    800021ba:	00014717          	auipc	a4,0x14
+    800021be:	9d670713          	addi	a4,a4,-1578 # 80015b90 <bcache+0x8268>
+    800021c2:	e4b8                	sd	a4,72(s1)
+    bcache.head.next->prev = b;
+    800021c4:	2b87b703          	ld	a4,696(a5)
+    800021c8:	e724                	sd	s1,72(a4)
+    bcache.head.next = b;
+    800021ca:	2a97bc23          	sd	s1,696(a5)
+  }
+  
+  release(&bcache.lock);
+    800021ce:	0000b517          	auipc	a0,0xb
+    800021d2:	75a50513          	addi	a0,a0,1882 # 8000d928 <bcache>
+    800021d6:	792030ef          	jal	80005968 <release>
+}
+    800021da:	60e2                	ld	ra,24(sp)
+    800021dc:	6442                	ld	s0,16(sp)
+    800021de:	64a2                	ld	s1,8(sp)
+    800021e0:	6902                	ld	s2,0(sp)
+    800021e2:	6105                	addi	sp,sp,32
+    800021e4:	8082                	ret
+    panic("brelse");
+    800021e6:	00005517          	auipc	a0,0x5
+    800021ea:	2fa50513          	addi	a0,a0,762 # 800074e0 <etext+0x4e0>
+    800021ee:	3b4030ef          	jal	800055a2 <panic>
+
+00000000800021f2 <bpin>:
+
+void
+bpin(struct buf *b) {
+    800021f2:	1101                	addi	sp,sp,-32
+    800021f4:	ec06                	sd	ra,24(sp)
+    800021f6:	e822                	sd	s0,16(sp)
+    800021f8:	e426                	sd	s1,8(sp)
+    800021fa:	1000                	addi	s0,sp,32
+    800021fc:	84aa                	mv	s1,a0
+  acquire(&bcache.lock);
+    800021fe:	0000b517          	auipc	a0,0xb
+    80002202:	72a50513          	addi	a0,a0,1834 # 8000d928 <bcache>
+    80002206:	6ca030ef          	jal	800058d0 <acquire>
+  b->refcnt++;
+    8000220a:	40bc                	lw	a5,64(s1)
+    8000220c:	2785                	addiw	a5,a5,1
+    8000220e:	c0bc                	sw	a5,64(s1)
+  release(&bcache.lock);
+    80002210:	0000b517          	auipc	a0,0xb
+    80002214:	71850513          	addi	a0,a0,1816 # 8000d928 <bcache>
+    80002218:	750030ef          	jal	80005968 <release>
+}
+    8000221c:	60e2                	ld	ra,24(sp)
+    8000221e:	6442                	ld	s0,16(sp)
+    80002220:	64a2                	ld	s1,8(sp)
+    80002222:	6105                	addi	sp,sp,32
+    80002224:	8082                	ret
+
+0000000080002226 <bunpin>:
+
+void
+bunpin(struct buf *b) {
+    80002226:	1101                	addi	sp,sp,-32
+    80002228:	ec06                	sd	ra,24(sp)
+    8000222a:	e822                	sd	s0,16(sp)
+    8000222c:	e426                	sd	s1,8(sp)
+    8000222e:	1000                	addi	s0,sp,32
+    80002230:	84aa                	mv	s1,a0
+  acquire(&bcache.lock);
+    80002232:	0000b517          	auipc	a0,0xb
+    80002236:	6f650513          	addi	a0,a0,1782 # 8000d928 <bcache>
+    8000223a:	696030ef          	jal	800058d0 <acquire>
+  b->refcnt--;
+    8000223e:	40bc                	lw	a5,64(s1)
+    80002240:	37fd                	addiw	a5,a5,-1
+    80002242:	c0bc                	sw	a5,64(s1)
+  release(&bcache.lock);
+    80002244:	0000b517          	auipc	a0,0xb
+    80002248:	6e450513          	addi	a0,a0,1764 # 8000d928 <bcache>
+    8000224c:	71c030ef          	jal	80005968 <release>
+}
+    80002250:	60e2                	ld	ra,24(sp)
+    80002252:	6442                	ld	s0,16(sp)
+    80002254:	64a2                	ld	s1,8(sp)
+    80002256:	6105                	addi	sp,sp,32
+    80002258:	8082                	ret
+
+000000008000225a <bfree>:
+}
+
+// Free a disk block.
+static void
+bfree(int dev, uint b)
+{
+    8000225a:	1101                	addi	sp,sp,-32
+    8000225c:	ec06                	sd	ra,24(sp)
+    8000225e:	e822                	sd	s0,16(sp)
+    80002260:	e426                	sd	s1,8(sp)
+    80002262:	e04a                	sd	s2,0(sp)
+    80002264:	1000                	addi	s0,sp,32
+    80002266:	84ae                	mv	s1,a1
+  struct buf *bp;
+  int bi, m;
+
+  bp = bread(dev, BBLOCK(b, sb));
+    80002268:	00d5d59b          	srliw	a1,a1,0xd
+    8000226c:	00014797          	auipc	a5,0x14
+    80002270:	d987a783          	lw	a5,-616(a5) # 80016004 <sb+0x1c>
+    80002274:	9dbd                	addw	a1,a1,a5
+    80002276:	dedff0ef          	jal	80002062 <bread>
+  bi = b % BPB;
+  m = 1 << (bi % 8);
+    8000227a:	0074f713          	andi	a4,s1,7
+    8000227e:	4785                	li	a5,1
+    80002280:	00e797bb          	sllw	a5,a5,a4
+  if((bp->data[bi/8] & m) == 0)
+    80002284:	14ce                	slli	s1,s1,0x33
+    80002286:	90d9                	srli	s1,s1,0x36
+    80002288:	00950733          	add	a4,a0,s1
+    8000228c:	05874703          	lbu	a4,88(a4)
+    80002290:	00e7f6b3          	and	a3,a5,a4
+    80002294:	c29d                	beqz	a3,800022ba <bfree+0x60>
+    80002296:	892a                	mv	s2,a0
+    panic("freeing free block");
+  bp->data[bi/8] &= ~m;
+    80002298:	94aa                	add	s1,s1,a0
+    8000229a:	fff7c793          	not	a5,a5
+    8000229e:	8f7d                	and	a4,a4,a5
+    800022a0:	04e48c23          	sb	a4,88(s1)
+  log_write(bp);
+    800022a4:	711000ef          	jal	800031b4 <log_write>
+  brelse(bp);
+    800022a8:	854a                	mv	a0,s2
+    800022aa:	ec1ff0ef          	jal	8000216a <brelse>
+}
+    800022ae:	60e2                	ld	ra,24(sp)
+    800022b0:	6442                	ld	s0,16(sp)
+    800022b2:	64a2                	ld	s1,8(sp)
+    800022b4:	6902                	ld	s2,0(sp)
+    800022b6:	6105                	addi	sp,sp,32
+    800022b8:	8082                	ret
+    panic("freeing free block");
+    800022ba:	00005517          	auipc	a0,0x5
+    800022be:	22e50513          	addi	a0,a0,558 # 800074e8 <etext+0x4e8>
+    800022c2:	2e0030ef          	jal	800055a2 <panic>
+
+00000000800022c6 <balloc>:
+{
+    800022c6:	711d                	addi	sp,sp,-96
+    800022c8:	ec86                	sd	ra,88(sp)
+    800022ca:	e8a2                	sd	s0,80(sp)
+    800022cc:	e4a6                	sd	s1,72(sp)
+    800022ce:	1080                	addi	s0,sp,96
+  for(b = 0; b < sb.size; b += BPB){
+    800022d0:	00014797          	auipc	a5,0x14
+    800022d4:	d1c7a783          	lw	a5,-740(a5) # 80015fec <sb+0x4>
+    800022d8:	0e078f63          	beqz	a5,800023d6 <balloc+0x110>
+    800022dc:	e0ca                	sd	s2,64(sp)
+    800022de:	fc4e                	sd	s3,56(sp)
+    800022e0:	f852                	sd	s4,48(sp)
+    800022e2:	f456                	sd	s5,40(sp)
+    800022e4:	f05a                	sd	s6,32(sp)
+    800022e6:	ec5e                	sd	s7,24(sp)
+    800022e8:	e862                	sd	s8,16(sp)
+    800022ea:	e466                	sd	s9,8(sp)
+    800022ec:	8baa                	mv	s7,a0
+    800022ee:	4a81                	li	s5,0
+    bp = bread(dev, BBLOCK(b, sb));
+    800022f0:	00014b17          	auipc	s6,0x14
+    800022f4:	cf8b0b13          	addi	s6,s6,-776 # 80015fe8 <sb>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    800022f8:	4c01                	li	s8,0
+      m = 1 << (bi % 8);
+    800022fa:	4985                	li	s3,1
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    800022fc:	6a09                	lui	s4,0x2
+  for(b = 0; b < sb.size; b += BPB){
+    800022fe:	6c89                	lui	s9,0x2
+    80002300:	a0b5                	j	8000236c <balloc+0xa6>
+        bp->data[bi/8] |= m;  // Mark block in use.
+    80002302:	97ca                	add	a5,a5,s2
+    80002304:	8e55                	or	a2,a2,a3
+    80002306:	04c78c23          	sb	a2,88(a5)
+        log_write(bp);
+    8000230a:	854a                	mv	a0,s2
+    8000230c:	6a9000ef          	jal	800031b4 <log_write>
+        brelse(bp);
+    80002310:	854a                	mv	a0,s2
+    80002312:	e59ff0ef          	jal	8000216a <brelse>
+  bp = bread(dev, bno);
+    80002316:	85a6                	mv	a1,s1
+    80002318:	855e                	mv	a0,s7
+    8000231a:	d49ff0ef          	jal	80002062 <bread>
+    8000231e:	892a                	mv	s2,a0
+  memset(bp->data, 0, BSIZE);
+    80002320:	40000613          	li	a2,1024
+    80002324:	4581                	li	a1,0
+    80002326:	05850513          	addi	a0,a0,88
+    8000232a:	e67fd0ef          	jal	80000190 <memset>
+  log_write(bp);
+    8000232e:	854a                	mv	a0,s2
+    80002330:	685000ef          	jal	800031b4 <log_write>
+  brelse(bp);
+    80002334:	854a                	mv	a0,s2
+    80002336:	e35ff0ef          	jal	8000216a <brelse>
+}
+    8000233a:	6906                	ld	s2,64(sp)
+    8000233c:	79e2                	ld	s3,56(sp)
+    8000233e:	7a42                	ld	s4,48(sp)
+    80002340:	7aa2                	ld	s5,40(sp)
+    80002342:	7b02                	ld	s6,32(sp)
+    80002344:	6be2                	ld	s7,24(sp)
+    80002346:	6c42                	ld	s8,16(sp)
+    80002348:	6ca2                	ld	s9,8(sp)
+}
+    8000234a:	8526                	mv	a0,s1
+    8000234c:	60e6                	ld	ra,88(sp)
+    8000234e:	6446                	ld	s0,80(sp)
+    80002350:	64a6                	ld	s1,72(sp)
+    80002352:	6125                	addi	sp,sp,96
+    80002354:	8082                	ret
+    brelse(bp);
+    80002356:	854a                	mv	a0,s2
+    80002358:	e13ff0ef          	jal	8000216a <brelse>
+  for(b = 0; b < sb.size; b += BPB){
+    8000235c:	015c87bb          	addw	a5,s9,s5
+    80002360:	00078a9b          	sext.w	s5,a5
+    80002364:	004b2703          	lw	a4,4(s6)
+    80002368:	04eaff63          	bgeu	s5,a4,800023c6 <balloc+0x100>
+    bp = bread(dev, BBLOCK(b, sb));
+    8000236c:	41fad79b          	sraiw	a5,s5,0x1f
+    80002370:	0137d79b          	srliw	a5,a5,0x13
+    80002374:	015787bb          	addw	a5,a5,s5
+    80002378:	40d7d79b          	sraiw	a5,a5,0xd
+    8000237c:	01cb2583          	lw	a1,28(s6)
+    80002380:	9dbd                	addw	a1,a1,a5
+    80002382:	855e                	mv	a0,s7
+    80002384:	cdfff0ef          	jal	80002062 <bread>
+    80002388:	892a                	mv	s2,a0
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    8000238a:	004b2503          	lw	a0,4(s6)
+    8000238e:	000a849b          	sext.w	s1,s5
+    80002392:	8762                	mv	a4,s8
+    80002394:	fca4f1e3          	bgeu	s1,a0,80002356 <balloc+0x90>
+      m = 1 << (bi % 8);
+    80002398:	00777693          	andi	a3,a4,7
+    8000239c:	00d996bb          	sllw	a3,s3,a3
+      if((bp->data[bi/8] & m) == 0){  // Is block free?
+    800023a0:	41f7579b          	sraiw	a5,a4,0x1f
+    800023a4:	01d7d79b          	srliw	a5,a5,0x1d
+    800023a8:	9fb9                	addw	a5,a5,a4
+    800023aa:	4037d79b          	sraiw	a5,a5,0x3
+    800023ae:	00f90633          	add	a2,s2,a5
+    800023b2:	05864603          	lbu	a2,88(a2)
+    800023b6:	00c6f5b3          	and	a1,a3,a2
+    800023ba:	d5a1                	beqz	a1,80002302 <balloc+0x3c>
+    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+    800023bc:	2705                	addiw	a4,a4,1
+    800023be:	2485                	addiw	s1,s1,1
+    800023c0:	fd471ae3          	bne	a4,s4,80002394 <balloc+0xce>
+    800023c4:	bf49                	j	80002356 <balloc+0x90>
+    800023c6:	6906                	ld	s2,64(sp)
+    800023c8:	79e2                	ld	s3,56(sp)
+    800023ca:	7a42                	ld	s4,48(sp)
+    800023cc:	7aa2                	ld	s5,40(sp)
+    800023ce:	7b02                	ld	s6,32(sp)
+    800023d0:	6be2                	ld	s7,24(sp)
+    800023d2:	6c42                	ld	s8,16(sp)
+    800023d4:	6ca2                	ld	s9,8(sp)
+  printf("balloc: out of blocks\n");
+    800023d6:	00005517          	auipc	a0,0x5
+    800023da:	12a50513          	addi	a0,a0,298 # 80007500 <etext+0x500>
+    800023de:	6f3020ef          	jal	800052d0 <printf>
+  return 0;
+    800023e2:	4481                	li	s1,0
+    800023e4:	b79d                	j	8000234a <balloc+0x84>
+
+00000000800023e6 <bmap>:
+// Return the disk block address of the nth block in inode ip.
+// If there is no such block, bmap allocates one.
+// returns 0 if out of disk space.
+static uint
+bmap(struct inode *ip, uint bn)
+{
+    800023e6:	7179                	addi	sp,sp,-48
+    800023e8:	f406                	sd	ra,40(sp)
+    800023ea:	f022                	sd	s0,32(sp)
+    800023ec:	ec26                	sd	s1,24(sp)
+    800023ee:	e84a                	sd	s2,16(sp)
+    800023f0:	e44e                	sd	s3,8(sp)
+    800023f2:	1800                	addi	s0,sp,48
+    800023f4:	89aa                	mv	s3,a0
+  uint addr, *a;
+  struct buf *bp;
+
+  if(bn < NDIRECT){
+    800023f6:	47ad                	li	a5,11
+    800023f8:	02b7e663          	bltu	a5,a1,80002424 <bmap+0x3e>
+    if((addr = ip->addrs[bn]) == 0){
+    800023fc:	02059793          	slli	a5,a1,0x20
+    80002400:	01e7d593          	srli	a1,a5,0x1e
+    80002404:	00b504b3          	add	s1,a0,a1
+    80002408:	0504a903          	lw	s2,80(s1)
+    8000240c:	06091a63          	bnez	s2,80002480 <bmap+0x9a>
+      addr = balloc(ip->dev);
+    80002410:	4108                	lw	a0,0(a0)
+    80002412:	eb5ff0ef          	jal	800022c6 <balloc>
+    80002416:	0005091b          	sext.w	s2,a0
+      if(addr == 0)
+    8000241a:	06090363          	beqz	s2,80002480 <bmap+0x9a>
+        return 0;
+      ip->addrs[bn] = addr;
+    8000241e:	0524a823          	sw	s2,80(s1)
+    80002422:	a8b9                	j	80002480 <bmap+0x9a>
+    }
+    return addr;
+  }
+  bn -= NDIRECT;
+    80002424:	ff45849b          	addiw	s1,a1,-12
+    80002428:	0004871b          	sext.w	a4,s1
+
+  if(bn < NINDIRECT){
+    8000242c:	0ff00793          	li	a5,255
+    80002430:	06e7ee63          	bltu	a5,a4,800024ac <bmap+0xc6>
+    // Load indirect block, allocating if necessary.
+    if((addr = ip->addrs[NDIRECT]) == 0){
+    80002434:	08052903          	lw	s2,128(a0)
+    80002438:	00091d63          	bnez	s2,80002452 <bmap+0x6c>
+      addr = balloc(ip->dev);
+    8000243c:	4108                	lw	a0,0(a0)
+    8000243e:	e89ff0ef          	jal	800022c6 <balloc>
+    80002442:	0005091b          	sext.w	s2,a0
+      if(addr == 0)
+    80002446:	02090d63          	beqz	s2,80002480 <bmap+0x9a>
+    8000244a:	e052                	sd	s4,0(sp)
+        return 0;
+      ip->addrs[NDIRECT] = addr;
+    8000244c:	0929a023          	sw	s2,128(s3)
+    80002450:	a011                	j	80002454 <bmap+0x6e>
+    80002452:	e052                	sd	s4,0(sp)
+    }
+    bp = bread(ip->dev, addr);
+    80002454:	85ca                	mv	a1,s2
+    80002456:	0009a503          	lw	a0,0(s3)
+    8000245a:	c09ff0ef          	jal	80002062 <bread>
+    8000245e:	8a2a                	mv	s4,a0
+    a = (uint*)bp->data;
+    80002460:	05850793          	addi	a5,a0,88
+    if((addr = a[bn]) == 0){
+    80002464:	02049713          	slli	a4,s1,0x20
+    80002468:	01e75593          	srli	a1,a4,0x1e
+    8000246c:	00b784b3          	add	s1,a5,a1
+    80002470:	0004a903          	lw	s2,0(s1)
+    80002474:	00090e63          	beqz	s2,80002490 <bmap+0xaa>
+      if(addr){
+        a[bn] = addr;
+        log_write(bp);
+      }
+    }
+    brelse(bp);
+    80002478:	8552                	mv	a0,s4
+    8000247a:	cf1ff0ef          	jal	8000216a <brelse>
+    return addr;
+    8000247e:	6a02                	ld	s4,0(sp)
+  }
+
+  panic("bmap: out of range");
+}
+    80002480:	854a                	mv	a0,s2
+    80002482:	70a2                	ld	ra,40(sp)
+    80002484:	7402                	ld	s0,32(sp)
+    80002486:	64e2                	ld	s1,24(sp)
+    80002488:	6942                	ld	s2,16(sp)
+    8000248a:	69a2                	ld	s3,8(sp)
+    8000248c:	6145                	addi	sp,sp,48
+    8000248e:	8082                	ret
+      addr = balloc(ip->dev);
+    80002490:	0009a503          	lw	a0,0(s3)
+    80002494:	e33ff0ef          	jal	800022c6 <balloc>
+    80002498:	0005091b          	sext.w	s2,a0
+      if(addr){
+    8000249c:	fc090ee3          	beqz	s2,80002478 <bmap+0x92>
+        a[bn] = addr;
+    800024a0:	0124a023          	sw	s2,0(s1)
+        log_write(bp);
+    800024a4:	8552                	mv	a0,s4
+    800024a6:	50f000ef          	jal	800031b4 <log_write>
+    800024aa:	b7f9                	j	80002478 <bmap+0x92>
+    800024ac:	e052                	sd	s4,0(sp)
+  panic("bmap: out of range");
+    800024ae:	00005517          	auipc	a0,0x5
+    800024b2:	06a50513          	addi	a0,a0,106 # 80007518 <etext+0x518>
+    800024b6:	0ec030ef          	jal	800055a2 <panic>
+
+00000000800024ba <iget>:
+{
+    800024ba:	7179                	addi	sp,sp,-48
+    800024bc:	f406                	sd	ra,40(sp)
+    800024be:	f022                	sd	s0,32(sp)
+    800024c0:	ec26                	sd	s1,24(sp)
+    800024c2:	e84a                	sd	s2,16(sp)
+    800024c4:	e44e                	sd	s3,8(sp)
+    800024c6:	e052                	sd	s4,0(sp)
+    800024c8:	1800                	addi	s0,sp,48
+    800024ca:	89aa                	mv	s3,a0
+    800024cc:	8a2e                	mv	s4,a1
+  acquire(&itable.lock);
+    800024ce:	00014517          	auipc	a0,0x14
+    800024d2:	b3a50513          	addi	a0,a0,-1222 # 80016008 <itable>
+    800024d6:	3fa030ef          	jal	800058d0 <acquire>
+  empty = 0;
+    800024da:	4901                	li	s2,0
+  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
+    800024dc:	00014497          	auipc	s1,0x14
+    800024e0:	b4448493          	addi	s1,s1,-1212 # 80016020 <itable+0x18>
+    800024e4:	00015697          	auipc	a3,0x15
+    800024e8:	5cc68693          	addi	a3,a3,1484 # 80017ab0 <log>
+    800024ec:	a039                	j	800024fa <iget+0x40>
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+    800024ee:	02090963          	beqz	s2,80002520 <iget+0x66>
+  for(ip = &itable.inode[0]; ip < &itable.inode[NINODE]; ip++){
+    800024f2:	08848493          	addi	s1,s1,136
+    800024f6:	02d48863          	beq	s1,a3,80002526 <iget+0x6c>
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+    800024fa:	449c                	lw	a5,8(s1)
+    800024fc:	fef059e3          	blez	a5,800024ee <iget+0x34>
+    80002500:	4098                	lw	a4,0(s1)
+    80002502:	ff3716e3          	bne	a4,s3,800024ee <iget+0x34>
+    80002506:	40d8                	lw	a4,4(s1)
+    80002508:	ff4713e3          	bne	a4,s4,800024ee <iget+0x34>
+      ip->ref++;
+    8000250c:	2785                	addiw	a5,a5,1
+    8000250e:	c49c                	sw	a5,8(s1)
+      release(&itable.lock);
+    80002510:	00014517          	auipc	a0,0x14
+    80002514:	af850513          	addi	a0,a0,-1288 # 80016008 <itable>
+    80002518:	450030ef          	jal	80005968 <release>
+      return ip;
+    8000251c:	8926                	mv	s2,s1
+    8000251e:	a02d                	j	80002548 <iget+0x8e>
+    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
+    80002520:	fbe9                	bnez	a5,800024f2 <iget+0x38>
+      empty = ip;
+    80002522:	8926                	mv	s2,s1
+    80002524:	b7f9                	j	800024f2 <iget+0x38>
+  if(empty == 0)
+    80002526:	02090a63          	beqz	s2,8000255a <iget+0xa0>
+  ip->dev = dev;
+    8000252a:	01392023          	sw	s3,0(s2)
+  ip->inum = inum;
+    8000252e:	01492223          	sw	s4,4(s2)
+  ip->ref = 1;
+    80002532:	4785                	li	a5,1
+    80002534:	00f92423          	sw	a5,8(s2)
+  ip->valid = 0;
+    80002538:	04092023          	sw	zero,64(s2)
+  release(&itable.lock);
+    8000253c:	00014517          	auipc	a0,0x14
+    80002540:	acc50513          	addi	a0,a0,-1332 # 80016008 <itable>
+    80002544:	424030ef          	jal	80005968 <release>
+}
+    80002548:	854a                	mv	a0,s2
+    8000254a:	70a2                	ld	ra,40(sp)
+    8000254c:	7402                	ld	s0,32(sp)
+    8000254e:	64e2                	ld	s1,24(sp)
+    80002550:	6942                	ld	s2,16(sp)
+    80002552:	69a2                	ld	s3,8(sp)
+    80002554:	6a02                	ld	s4,0(sp)
+    80002556:	6145                	addi	sp,sp,48
+    80002558:	8082                	ret
+    panic("iget: no inodes");
+    8000255a:	00005517          	auipc	a0,0x5
+    8000255e:	fd650513          	addi	a0,a0,-42 # 80007530 <etext+0x530>
+    80002562:	040030ef          	jal	800055a2 <panic>
+
+0000000080002566 <fsinit>:
+fsinit(int dev) {
+    80002566:	7179                	addi	sp,sp,-48
+    80002568:	f406                	sd	ra,40(sp)
+    8000256a:	f022                	sd	s0,32(sp)
+    8000256c:	ec26                	sd	s1,24(sp)
+    8000256e:	e84a                	sd	s2,16(sp)
+    80002570:	e44e                	sd	s3,8(sp)
+    80002572:	1800                	addi	s0,sp,48
+    80002574:	892a                	mv	s2,a0
+  bp = bread(dev, 1);
+    80002576:	4585                	li	a1,1
+    80002578:	aebff0ef          	jal	80002062 <bread>
+    8000257c:	84aa                	mv	s1,a0
+  memmove(sb, bp->data, sizeof(*sb));
+    8000257e:	00014997          	auipc	s3,0x14
+    80002582:	a6a98993          	addi	s3,s3,-1430 # 80015fe8 <sb>
+    80002586:	02000613          	li	a2,32
+    8000258a:	05850593          	addi	a1,a0,88
+    8000258e:	854e                	mv	a0,s3
+    80002590:	c5dfd0ef          	jal	800001ec <memmove>
+  brelse(bp);
+    80002594:	8526                	mv	a0,s1
+    80002596:	bd5ff0ef          	jal	8000216a <brelse>
+  if(sb.magic != FSMAGIC)
+    8000259a:	0009a703          	lw	a4,0(s3)
+    8000259e:	102037b7          	lui	a5,0x10203
+    800025a2:	04078793          	addi	a5,a5,64 # 10203040 <_entry-0x6fdfcfc0>
+    800025a6:	02f71063          	bne	a4,a5,800025c6 <fsinit+0x60>
+  initlog(dev, &sb);
+    800025aa:	00014597          	auipc	a1,0x14
+    800025ae:	a3e58593          	addi	a1,a1,-1474 # 80015fe8 <sb>
+    800025b2:	854a                	mv	a0,s2
+    800025b4:	1f9000ef          	jal	80002fac <initlog>
+}
+    800025b8:	70a2                	ld	ra,40(sp)
+    800025ba:	7402                	ld	s0,32(sp)
+    800025bc:	64e2                	ld	s1,24(sp)
+    800025be:	6942                	ld	s2,16(sp)
+    800025c0:	69a2                	ld	s3,8(sp)
+    800025c2:	6145                	addi	sp,sp,48
+    800025c4:	8082                	ret
+    panic("invalid file system");
+    800025c6:	00005517          	auipc	a0,0x5
+    800025ca:	f7a50513          	addi	a0,a0,-134 # 80007540 <etext+0x540>
+    800025ce:	7d5020ef          	jal	800055a2 <panic>
+
+00000000800025d2 <iinit>:
+{
+    800025d2:	7179                	addi	sp,sp,-48
+    800025d4:	f406                	sd	ra,40(sp)
+    800025d6:	f022                	sd	s0,32(sp)
+    800025d8:	ec26                	sd	s1,24(sp)
+    800025da:	e84a                	sd	s2,16(sp)
+    800025dc:	e44e                	sd	s3,8(sp)
+    800025de:	1800                	addi	s0,sp,48
+  initlock(&itable.lock, "itable");
+    800025e0:	00005597          	auipc	a1,0x5
+    800025e4:	f7858593          	addi	a1,a1,-136 # 80007558 <etext+0x558>
+    800025e8:	00014517          	auipc	a0,0x14
+    800025ec:	a2050513          	addi	a0,a0,-1504 # 80016008 <itable>
+    800025f0:	260030ef          	jal	80005850 <initlock>
+  for(i = 0; i < NINODE; i++) {
+    800025f4:	00014497          	auipc	s1,0x14
+    800025f8:	a3c48493          	addi	s1,s1,-1476 # 80016030 <itable+0x28>
+    800025fc:	00015997          	auipc	s3,0x15
+    80002600:	4c498993          	addi	s3,s3,1220 # 80017ac0 <log+0x10>
+    initsleeplock(&itable.inode[i].lock, "inode");
+    80002604:	00005917          	auipc	s2,0x5
+    80002608:	f5c90913          	addi	s2,s2,-164 # 80007560 <etext+0x560>
+    8000260c:	85ca                	mv	a1,s2
+    8000260e:	8526                	mv	a0,s1
+    80002610:	475000ef          	jal	80003284 <initsleeplock>
+  for(i = 0; i < NINODE; i++) {
+    80002614:	08848493          	addi	s1,s1,136
+    80002618:	ff349ae3          	bne	s1,s3,8000260c <iinit+0x3a>
+}
+    8000261c:	70a2                	ld	ra,40(sp)
+    8000261e:	7402                	ld	s0,32(sp)
+    80002620:	64e2                	ld	s1,24(sp)
+    80002622:	6942                	ld	s2,16(sp)
+    80002624:	69a2                	ld	s3,8(sp)
+    80002626:	6145                	addi	sp,sp,48
+    80002628:	8082                	ret
+
+000000008000262a <ialloc>:
+{
+    8000262a:	7139                	addi	sp,sp,-64
+    8000262c:	fc06                	sd	ra,56(sp)
+    8000262e:	f822                	sd	s0,48(sp)
+    80002630:	0080                	addi	s0,sp,64
+  for(inum = 1; inum < sb.ninodes; inum++){
+    80002632:	00014717          	auipc	a4,0x14
+    80002636:	9c272703          	lw	a4,-1598(a4) # 80015ff4 <sb+0xc>
+    8000263a:	4785                	li	a5,1
+    8000263c:	06e7f063          	bgeu	a5,a4,8000269c <ialloc+0x72>
+    80002640:	f426                	sd	s1,40(sp)
+    80002642:	f04a                	sd	s2,32(sp)
+    80002644:	ec4e                	sd	s3,24(sp)
+    80002646:	e852                	sd	s4,16(sp)
+    80002648:	e456                	sd	s5,8(sp)
+    8000264a:	e05a                	sd	s6,0(sp)
+    8000264c:	8aaa                	mv	s5,a0
+    8000264e:	8b2e                	mv	s6,a1
+    80002650:	4905                	li	s2,1
+    bp = bread(dev, IBLOCK(inum, sb));
+    80002652:	00014a17          	auipc	s4,0x14
+    80002656:	996a0a13          	addi	s4,s4,-1642 # 80015fe8 <sb>
+    8000265a:	00495593          	srli	a1,s2,0x4
+    8000265e:	018a2783          	lw	a5,24(s4)
+    80002662:	9dbd                	addw	a1,a1,a5
+    80002664:	8556                	mv	a0,s5
+    80002666:	9fdff0ef          	jal	80002062 <bread>
+    8000266a:	84aa                	mv	s1,a0
+    dip = (struct dinode*)bp->data + inum%IPB;
+    8000266c:	05850993          	addi	s3,a0,88
+    80002670:	00f97793          	andi	a5,s2,15
+    80002674:	079a                	slli	a5,a5,0x6
+    80002676:	99be                	add	s3,s3,a5
+    if(dip->type == 0){  // a free inode
+    80002678:	00099783          	lh	a5,0(s3)
+    8000267c:	cb9d                	beqz	a5,800026b2 <ialloc+0x88>
+    brelse(bp);
+    8000267e:	aedff0ef          	jal	8000216a <brelse>
+  for(inum = 1; inum < sb.ninodes; inum++){
+    80002682:	0905                	addi	s2,s2,1
+    80002684:	00ca2703          	lw	a4,12(s4)
+    80002688:	0009079b          	sext.w	a5,s2
+    8000268c:	fce7e7e3          	bltu	a5,a4,8000265a <ialloc+0x30>
+    80002690:	74a2                	ld	s1,40(sp)
+    80002692:	7902                	ld	s2,32(sp)
+    80002694:	69e2                	ld	s3,24(sp)
+    80002696:	6a42                	ld	s4,16(sp)
+    80002698:	6aa2                	ld	s5,8(sp)
+    8000269a:	6b02                	ld	s6,0(sp)
+  printf("ialloc: no inodes\n");
+    8000269c:	00005517          	auipc	a0,0x5
+    800026a0:	ecc50513          	addi	a0,a0,-308 # 80007568 <etext+0x568>
+    800026a4:	42d020ef          	jal	800052d0 <printf>
+  return 0;
+    800026a8:	4501                	li	a0,0
+}
+    800026aa:	70e2                	ld	ra,56(sp)
+    800026ac:	7442                	ld	s0,48(sp)
+    800026ae:	6121                	addi	sp,sp,64
+    800026b0:	8082                	ret
+      memset(dip, 0, sizeof(*dip));
+    800026b2:	04000613          	li	a2,64
+    800026b6:	4581                	li	a1,0
+    800026b8:	854e                	mv	a0,s3
+    800026ba:	ad7fd0ef          	jal	80000190 <memset>
+      dip->type = type;
+    800026be:	01699023          	sh	s6,0(s3)
+      log_write(bp);   // mark it allocated on the disk
+    800026c2:	8526                	mv	a0,s1
+    800026c4:	2f1000ef          	jal	800031b4 <log_write>
+      brelse(bp);
+    800026c8:	8526                	mv	a0,s1
+    800026ca:	aa1ff0ef          	jal	8000216a <brelse>
+      return iget(dev, inum);
+    800026ce:	0009059b          	sext.w	a1,s2
+    800026d2:	8556                	mv	a0,s5
+    800026d4:	de7ff0ef          	jal	800024ba <iget>
+    800026d8:	74a2                	ld	s1,40(sp)
+    800026da:	7902                	ld	s2,32(sp)
+    800026dc:	69e2                	ld	s3,24(sp)
+    800026de:	6a42                	ld	s4,16(sp)
+    800026e0:	6aa2                	ld	s5,8(sp)
+    800026e2:	6b02                	ld	s6,0(sp)
+    800026e4:	b7d9                	j	800026aa <ialloc+0x80>
+
+00000000800026e6 <iupdate>:
+{
+    800026e6:	1101                	addi	sp,sp,-32
+    800026e8:	ec06                	sd	ra,24(sp)
+    800026ea:	e822                	sd	s0,16(sp)
+    800026ec:	e426                	sd	s1,8(sp)
+    800026ee:	e04a                	sd	s2,0(sp)
+    800026f0:	1000                	addi	s0,sp,32
+    800026f2:	84aa                	mv	s1,a0
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    800026f4:	415c                	lw	a5,4(a0)
+    800026f6:	0047d79b          	srliw	a5,a5,0x4
+    800026fa:	00014597          	auipc	a1,0x14
+    800026fe:	9065a583          	lw	a1,-1786(a1) # 80016000 <sb+0x18>
+    80002702:	9dbd                	addw	a1,a1,a5
+    80002704:	4108                	lw	a0,0(a0)
+    80002706:	95dff0ef          	jal	80002062 <bread>
+    8000270a:	892a                	mv	s2,a0
+  dip = (struct dinode*)bp->data + ip->inum%IPB;
+    8000270c:	05850793          	addi	a5,a0,88
+    80002710:	40d8                	lw	a4,4(s1)
+    80002712:	8b3d                	andi	a4,a4,15
+    80002714:	071a                	slli	a4,a4,0x6
+    80002716:	97ba                	add	a5,a5,a4
+  dip->type = ip->type;
+    80002718:	04449703          	lh	a4,68(s1)
+    8000271c:	00e79023          	sh	a4,0(a5)
+  dip->major = ip->major;
+    80002720:	04649703          	lh	a4,70(s1)
+    80002724:	00e79123          	sh	a4,2(a5)
+  dip->minor = ip->minor;
+    80002728:	04849703          	lh	a4,72(s1)
+    8000272c:	00e79223          	sh	a4,4(a5)
+  dip->nlink = ip->nlink;
+    80002730:	04a49703          	lh	a4,74(s1)
+    80002734:	00e79323          	sh	a4,6(a5)
+  dip->size = ip->size;
+    80002738:	44f8                	lw	a4,76(s1)
+    8000273a:	c798                	sw	a4,8(a5)
+  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
+    8000273c:	03400613          	li	a2,52
+    80002740:	05048593          	addi	a1,s1,80
+    80002744:	00c78513          	addi	a0,a5,12
+    80002748:	aa5fd0ef          	jal	800001ec <memmove>
+  log_write(bp);
+    8000274c:	854a                	mv	a0,s2
+    8000274e:	267000ef          	jal	800031b4 <log_write>
+  brelse(bp);
+    80002752:	854a                	mv	a0,s2
+    80002754:	a17ff0ef          	jal	8000216a <brelse>
+}
+    80002758:	60e2                	ld	ra,24(sp)
+    8000275a:	6442                	ld	s0,16(sp)
+    8000275c:	64a2                	ld	s1,8(sp)
+    8000275e:	6902                	ld	s2,0(sp)
+    80002760:	6105                	addi	sp,sp,32
+    80002762:	8082                	ret
+
+0000000080002764 <idup>:
+{
+    80002764:	1101                	addi	sp,sp,-32
+    80002766:	ec06                	sd	ra,24(sp)
+    80002768:	e822                	sd	s0,16(sp)
+    8000276a:	e426                	sd	s1,8(sp)
+    8000276c:	1000                	addi	s0,sp,32
+    8000276e:	84aa                	mv	s1,a0
+  acquire(&itable.lock);
+    80002770:	00014517          	auipc	a0,0x14
+    80002774:	89850513          	addi	a0,a0,-1896 # 80016008 <itable>
+    80002778:	158030ef          	jal	800058d0 <acquire>
+  ip->ref++;
+    8000277c:	449c                	lw	a5,8(s1)
+    8000277e:	2785                	addiw	a5,a5,1
+    80002780:	c49c                	sw	a5,8(s1)
+  release(&itable.lock);
+    80002782:	00014517          	auipc	a0,0x14
+    80002786:	88650513          	addi	a0,a0,-1914 # 80016008 <itable>
+    8000278a:	1de030ef          	jal	80005968 <release>
+}
+    8000278e:	8526                	mv	a0,s1
+    80002790:	60e2                	ld	ra,24(sp)
+    80002792:	6442                	ld	s0,16(sp)
+    80002794:	64a2                	ld	s1,8(sp)
+    80002796:	6105                	addi	sp,sp,32
+    80002798:	8082                	ret
+
+000000008000279a <ilock>:
+{
+    8000279a:	1101                	addi	sp,sp,-32
+    8000279c:	ec06                	sd	ra,24(sp)
+    8000279e:	e822                	sd	s0,16(sp)
+    800027a0:	e426                	sd	s1,8(sp)
+    800027a2:	1000                	addi	s0,sp,32
+  if(ip == 0 || ip->ref < 1)
+    800027a4:	cd19                	beqz	a0,800027c2 <ilock+0x28>
+    800027a6:	84aa                	mv	s1,a0
+    800027a8:	451c                	lw	a5,8(a0)
+    800027aa:	00f05c63          	blez	a5,800027c2 <ilock+0x28>
+  acquiresleep(&ip->lock);
+    800027ae:	0541                	addi	a0,a0,16
+    800027b0:	30b000ef          	jal	800032ba <acquiresleep>
+  if(ip->valid == 0){
+    800027b4:	40bc                	lw	a5,64(s1)
+    800027b6:	cf89                	beqz	a5,800027d0 <ilock+0x36>
+}
+    800027b8:	60e2                	ld	ra,24(sp)
+    800027ba:	6442                	ld	s0,16(sp)
+    800027bc:	64a2                	ld	s1,8(sp)
+    800027be:	6105                	addi	sp,sp,32
+    800027c0:	8082                	ret
+    800027c2:	e04a                	sd	s2,0(sp)
+    panic("ilock");
+    800027c4:	00005517          	auipc	a0,0x5
+    800027c8:	dbc50513          	addi	a0,a0,-580 # 80007580 <etext+0x580>
+    800027cc:	5d7020ef          	jal	800055a2 <panic>
+    800027d0:	e04a                	sd	s2,0(sp)
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    800027d2:	40dc                	lw	a5,4(s1)
+    800027d4:	0047d79b          	srliw	a5,a5,0x4
+    800027d8:	00014597          	auipc	a1,0x14
+    800027dc:	8285a583          	lw	a1,-2008(a1) # 80016000 <sb+0x18>
+    800027e0:	9dbd                	addw	a1,a1,a5
+    800027e2:	4088                	lw	a0,0(s1)
+    800027e4:	87fff0ef          	jal	80002062 <bread>
+    800027e8:	892a                	mv	s2,a0
+    dip = (struct dinode*)bp->data + ip->inum%IPB;
+    800027ea:	05850593          	addi	a1,a0,88
+    800027ee:	40dc                	lw	a5,4(s1)
+    800027f0:	8bbd                	andi	a5,a5,15
+    800027f2:	079a                	slli	a5,a5,0x6
+    800027f4:	95be                	add	a1,a1,a5
+    ip->type = dip->type;
+    800027f6:	00059783          	lh	a5,0(a1)
+    800027fa:	04f49223          	sh	a5,68(s1)
+    ip->major = dip->major;
+    800027fe:	00259783          	lh	a5,2(a1)
+    80002802:	04f49323          	sh	a5,70(s1)
+    ip->minor = dip->minor;
+    80002806:	00459783          	lh	a5,4(a1)
+    8000280a:	04f49423          	sh	a5,72(s1)
+    ip->nlink = dip->nlink;
+    8000280e:	00659783          	lh	a5,6(a1)
+    80002812:	04f49523          	sh	a5,74(s1)
+    ip->size = dip->size;
+    80002816:	459c                	lw	a5,8(a1)
+    80002818:	c4fc                	sw	a5,76(s1)
+    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
+    8000281a:	03400613          	li	a2,52
+    8000281e:	05b1                	addi	a1,a1,12
+    80002820:	05048513          	addi	a0,s1,80
+    80002824:	9c9fd0ef          	jal	800001ec <memmove>
+    brelse(bp);
+    80002828:	854a                	mv	a0,s2
+    8000282a:	941ff0ef          	jal	8000216a <brelse>
+    ip->valid = 1;
+    8000282e:	4785                	li	a5,1
+    80002830:	c0bc                	sw	a5,64(s1)
+    if(ip->type == 0)
+    80002832:	04449783          	lh	a5,68(s1)
+    80002836:	c399                	beqz	a5,8000283c <ilock+0xa2>
+    80002838:	6902                	ld	s2,0(sp)
+    8000283a:	bfbd                	j	800027b8 <ilock+0x1e>
+      panic("ilock: no type");
+    8000283c:	00005517          	auipc	a0,0x5
+    80002840:	d4c50513          	addi	a0,a0,-692 # 80007588 <etext+0x588>
+    80002844:	55f020ef          	jal	800055a2 <panic>
+
+0000000080002848 <iunlock>:
+{
+    80002848:	1101                	addi	sp,sp,-32
+    8000284a:	ec06                	sd	ra,24(sp)
+    8000284c:	e822                	sd	s0,16(sp)
+    8000284e:	e426                	sd	s1,8(sp)
+    80002850:	e04a                	sd	s2,0(sp)
+    80002852:	1000                	addi	s0,sp,32
+  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
+    80002854:	c505                	beqz	a0,8000287c <iunlock+0x34>
+    80002856:	84aa                	mv	s1,a0
+    80002858:	01050913          	addi	s2,a0,16
+    8000285c:	854a                	mv	a0,s2
+    8000285e:	2db000ef          	jal	80003338 <holdingsleep>
+    80002862:	cd09                	beqz	a0,8000287c <iunlock+0x34>
+    80002864:	449c                	lw	a5,8(s1)
+    80002866:	00f05b63          	blez	a5,8000287c <iunlock+0x34>
+  releasesleep(&ip->lock);
+    8000286a:	854a                	mv	a0,s2
+    8000286c:	295000ef          	jal	80003300 <releasesleep>
+}
+    80002870:	60e2                	ld	ra,24(sp)
+    80002872:	6442                	ld	s0,16(sp)
+    80002874:	64a2                	ld	s1,8(sp)
+    80002876:	6902                	ld	s2,0(sp)
+    80002878:	6105                	addi	sp,sp,32
+    8000287a:	8082                	ret
+    panic("iunlock");
+    8000287c:	00005517          	auipc	a0,0x5
+    80002880:	d1c50513          	addi	a0,a0,-740 # 80007598 <etext+0x598>
+    80002884:	51f020ef          	jal	800055a2 <panic>
+
+0000000080002888 <itrunc>:
+
+// Truncate inode (discard contents).
+// Caller must hold ip->lock.
+void
+itrunc(struct inode *ip)
+{
+    80002888:	7179                	addi	sp,sp,-48
+    8000288a:	f406                	sd	ra,40(sp)
+    8000288c:	f022                	sd	s0,32(sp)
+    8000288e:	ec26                	sd	s1,24(sp)
+    80002890:	e84a                	sd	s2,16(sp)
+    80002892:	e44e                	sd	s3,8(sp)
+    80002894:	1800                	addi	s0,sp,48
+    80002896:	89aa                	mv	s3,a0
+  int i, j;
+  struct buf *bp;
+  uint *a;
+
+  for(i = 0; i < NDIRECT; i++){
+    80002898:	05050493          	addi	s1,a0,80
+    8000289c:	08050913          	addi	s2,a0,128
+    800028a0:	a021                	j	800028a8 <itrunc+0x20>
+    800028a2:	0491                	addi	s1,s1,4
+    800028a4:	01248b63          	beq	s1,s2,800028ba <itrunc+0x32>
+    if(ip->addrs[i]){
+    800028a8:	408c                	lw	a1,0(s1)
+    800028aa:	dde5                	beqz	a1,800028a2 <itrunc+0x1a>
+      bfree(ip->dev, ip->addrs[i]);
+    800028ac:	0009a503          	lw	a0,0(s3)
+    800028b0:	9abff0ef          	jal	8000225a <bfree>
+      ip->addrs[i] = 0;
+    800028b4:	0004a023          	sw	zero,0(s1)
+    800028b8:	b7ed                	j	800028a2 <itrunc+0x1a>
+    }
+  }
+
+  if(ip->addrs[NDIRECT]){
+    800028ba:	0809a583          	lw	a1,128(s3)
+    800028be:	ed89                	bnez	a1,800028d8 <itrunc+0x50>
+    brelse(bp);
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    ip->addrs[NDIRECT] = 0;
+  }
+
+  ip->size = 0;
+    800028c0:	0409a623          	sw	zero,76(s3)
+  iupdate(ip);
+    800028c4:	854e                	mv	a0,s3
+    800028c6:	e21ff0ef          	jal	800026e6 <iupdate>
+}
+    800028ca:	70a2                	ld	ra,40(sp)
+    800028cc:	7402                	ld	s0,32(sp)
+    800028ce:	64e2                	ld	s1,24(sp)
+    800028d0:	6942                	ld	s2,16(sp)
+    800028d2:	69a2                	ld	s3,8(sp)
+    800028d4:	6145                	addi	sp,sp,48
+    800028d6:	8082                	ret
+    800028d8:	e052                	sd	s4,0(sp)
+    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    800028da:	0009a503          	lw	a0,0(s3)
+    800028de:	f84ff0ef          	jal	80002062 <bread>
+    800028e2:	8a2a                	mv	s4,a0
+    for(j = 0; j < NINDIRECT; j++){
+    800028e4:	05850493          	addi	s1,a0,88
+    800028e8:	45850913          	addi	s2,a0,1112
+    800028ec:	a021                	j	800028f4 <itrunc+0x6c>
+    800028ee:	0491                	addi	s1,s1,4
+    800028f0:	01248963          	beq	s1,s2,80002902 <itrunc+0x7a>
+      if(a[j])
+    800028f4:	408c                	lw	a1,0(s1)
+    800028f6:	dde5                	beqz	a1,800028ee <itrunc+0x66>
+        bfree(ip->dev, a[j]);
+    800028f8:	0009a503          	lw	a0,0(s3)
+    800028fc:	95fff0ef          	jal	8000225a <bfree>
+    80002900:	b7fd                	j	800028ee <itrunc+0x66>
+    brelse(bp);
+    80002902:	8552                	mv	a0,s4
+    80002904:	867ff0ef          	jal	8000216a <brelse>
+    bfree(ip->dev, ip->addrs[NDIRECT]);
+    80002908:	0809a583          	lw	a1,128(s3)
+    8000290c:	0009a503          	lw	a0,0(s3)
+    80002910:	94bff0ef          	jal	8000225a <bfree>
+    ip->addrs[NDIRECT] = 0;
+    80002914:	0809a023          	sw	zero,128(s3)
+    80002918:	6a02                	ld	s4,0(sp)
+    8000291a:	b75d                	j	800028c0 <itrunc+0x38>
+
+000000008000291c <iput>:
+{
+    8000291c:	1101                	addi	sp,sp,-32
+    8000291e:	ec06                	sd	ra,24(sp)
+    80002920:	e822                	sd	s0,16(sp)
+    80002922:	e426                	sd	s1,8(sp)
+    80002924:	1000                	addi	s0,sp,32
+    80002926:	84aa                	mv	s1,a0
+  acquire(&itable.lock);
+    80002928:	00013517          	auipc	a0,0x13
+    8000292c:	6e050513          	addi	a0,a0,1760 # 80016008 <itable>
+    80002930:	7a1020ef          	jal	800058d0 <acquire>
+  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
+    80002934:	4498                	lw	a4,8(s1)
+    80002936:	4785                	li	a5,1
+    80002938:	02f70063          	beq	a4,a5,80002958 <iput+0x3c>
+  ip->ref--;
+    8000293c:	449c                	lw	a5,8(s1)
+    8000293e:	37fd                	addiw	a5,a5,-1
+    80002940:	c49c                	sw	a5,8(s1)
+  release(&itable.lock);
+    80002942:	00013517          	auipc	a0,0x13
+    80002946:	6c650513          	addi	a0,a0,1734 # 80016008 <itable>
+    8000294a:	01e030ef          	jal	80005968 <release>
+}
+    8000294e:	60e2                	ld	ra,24(sp)
+    80002950:	6442                	ld	s0,16(sp)
+    80002952:	64a2                	ld	s1,8(sp)
+    80002954:	6105                	addi	sp,sp,32
+    80002956:	8082                	ret
+  if(ip->ref == 1 && ip->valid && ip->nlink == 0){
+    80002958:	40bc                	lw	a5,64(s1)
+    8000295a:	d3ed                	beqz	a5,8000293c <iput+0x20>
+    8000295c:	04a49783          	lh	a5,74(s1)
+    80002960:	fff1                	bnez	a5,8000293c <iput+0x20>
+    80002962:	e04a                	sd	s2,0(sp)
+    acquiresleep(&ip->lock);
+    80002964:	01048913          	addi	s2,s1,16
+    80002968:	854a                	mv	a0,s2
+    8000296a:	151000ef          	jal	800032ba <acquiresleep>
+    release(&itable.lock);
+    8000296e:	00013517          	auipc	a0,0x13
+    80002972:	69a50513          	addi	a0,a0,1690 # 80016008 <itable>
+    80002976:	7f3020ef          	jal	80005968 <release>
+    itrunc(ip);
+    8000297a:	8526                	mv	a0,s1
+    8000297c:	f0dff0ef          	jal	80002888 <itrunc>
+    ip->type = 0;
+    80002980:	04049223          	sh	zero,68(s1)
+    iupdate(ip);
+    80002984:	8526                	mv	a0,s1
+    80002986:	d61ff0ef          	jal	800026e6 <iupdate>
+    ip->valid = 0;
+    8000298a:	0404a023          	sw	zero,64(s1)
+    releasesleep(&ip->lock);
+    8000298e:	854a                	mv	a0,s2
+    80002990:	171000ef          	jal	80003300 <releasesleep>
+    acquire(&itable.lock);
+    80002994:	00013517          	auipc	a0,0x13
+    80002998:	67450513          	addi	a0,a0,1652 # 80016008 <itable>
+    8000299c:	735020ef          	jal	800058d0 <acquire>
+    800029a0:	6902                	ld	s2,0(sp)
+    800029a2:	bf69                	j	8000293c <iput+0x20>
+
+00000000800029a4 <iunlockput>:
+{
+    800029a4:	1101                	addi	sp,sp,-32
+    800029a6:	ec06                	sd	ra,24(sp)
+    800029a8:	e822                	sd	s0,16(sp)
+    800029aa:	e426                	sd	s1,8(sp)
+    800029ac:	1000                	addi	s0,sp,32
+    800029ae:	84aa                	mv	s1,a0
+  iunlock(ip);
+    800029b0:	e99ff0ef          	jal	80002848 <iunlock>
+  iput(ip);
+    800029b4:	8526                	mv	a0,s1
+    800029b6:	f67ff0ef          	jal	8000291c <iput>
+}
+    800029ba:	60e2                	ld	ra,24(sp)
+    800029bc:	6442                	ld	s0,16(sp)
+    800029be:	64a2                	ld	s1,8(sp)
+    800029c0:	6105                	addi	sp,sp,32
+    800029c2:	8082                	ret
+
+00000000800029c4 <stati>:
+
+// Copy stat information from inode.
+// Caller must hold ip->lock.
+void
+stati(struct inode *ip, struct stat *st)
+{
+    800029c4:	1141                	addi	sp,sp,-16
+    800029c6:	e422                	sd	s0,8(sp)
+    800029c8:	0800                	addi	s0,sp,16
+  st->dev = ip->dev;
+    800029ca:	411c                	lw	a5,0(a0)
+    800029cc:	c19c                	sw	a5,0(a1)
+  st->ino = ip->inum;
+    800029ce:	415c                	lw	a5,4(a0)
+    800029d0:	c1dc                	sw	a5,4(a1)
+  st->type = ip->type;
+    800029d2:	04451783          	lh	a5,68(a0)
+    800029d6:	00f59423          	sh	a5,8(a1)
+  st->nlink = ip->nlink;
+    800029da:	04a51783          	lh	a5,74(a0)
+    800029de:	00f59523          	sh	a5,10(a1)
+  st->size = ip->size;
+    800029e2:	04c56783          	lwu	a5,76(a0)
+    800029e6:	e99c                	sd	a5,16(a1)
+}
+    800029e8:	6422                	ld	s0,8(sp)
+    800029ea:	0141                	addi	sp,sp,16
+    800029ec:	8082                	ret
+
+00000000800029ee <readi>:
+readi(struct inode *ip, int user_dst, uint64 dst, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    800029ee:	457c                	lw	a5,76(a0)
+    800029f0:	0ed7eb63          	bltu	a5,a3,80002ae6 <readi+0xf8>
+{
+    800029f4:	7159                	addi	sp,sp,-112
+    800029f6:	f486                	sd	ra,104(sp)
+    800029f8:	f0a2                	sd	s0,96(sp)
+    800029fa:	eca6                	sd	s1,88(sp)
+    800029fc:	e0d2                	sd	s4,64(sp)
+    800029fe:	fc56                	sd	s5,56(sp)
+    80002a00:	f85a                	sd	s6,48(sp)
+    80002a02:	f45e                	sd	s7,40(sp)
+    80002a04:	1880                	addi	s0,sp,112
+    80002a06:	8b2a                	mv	s6,a0
+    80002a08:	8bae                	mv	s7,a1
+    80002a0a:	8a32                	mv	s4,a2
+    80002a0c:	84b6                	mv	s1,a3
+    80002a0e:	8aba                	mv	s5,a4
+  if(off > ip->size || off + n < off)
+    80002a10:	9f35                	addw	a4,a4,a3
+    return 0;
+    80002a12:	4501                	li	a0,0
+  if(off > ip->size || off + n < off)
+    80002a14:	0cd76063          	bltu	a4,a3,80002ad4 <readi+0xe6>
+    80002a18:	e4ce                	sd	s3,72(sp)
+  if(off + n > ip->size)
+    80002a1a:	00e7f463          	bgeu	a5,a4,80002a22 <readi+0x34>
+    n = ip->size - off;
+    80002a1e:	40d78abb          	subw	s5,a5,a3
+
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    80002a22:	080a8f63          	beqz	s5,80002ac0 <readi+0xd2>
+    80002a26:	e8ca                	sd	s2,80(sp)
+    80002a28:	f062                	sd	s8,32(sp)
+    80002a2a:	ec66                	sd	s9,24(sp)
+    80002a2c:	e86a                	sd	s10,16(sp)
+    80002a2e:	e46e                	sd	s11,8(sp)
+    80002a30:	4981                	li	s3,0
+    uint addr = bmap(ip, off/BSIZE);
+    if(addr == 0)
+      break;
+    bp = bread(ip->dev, addr);
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80002a32:	40000c93          	li	s9,1024
+    if(either_copyout(user_dst, dst, bp->data + (off % BSIZE), m) == -1) {
+    80002a36:	5c7d                	li	s8,-1
+    80002a38:	a80d                	j	80002a6a <readi+0x7c>
+    80002a3a:	020d1d93          	slli	s11,s10,0x20
+    80002a3e:	020ddd93          	srli	s11,s11,0x20
+    80002a42:	05890613          	addi	a2,s2,88
+    80002a46:	86ee                	mv	a3,s11
+    80002a48:	963a                	add	a2,a2,a4
+    80002a4a:	85d2                	mv	a1,s4
+    80002a4c:	855e                	mv	a0,s7
+    80002a4e:	c8dfe0ef          	jal	800016da <either_copyout>
+    80002a52:	05850763          	beq	a0,s8,80002aa0 <readi+0xb2>
+      brelse(bp);
+      tot = -1;
+      break;
+    }
+    brelse(bp);
+    80002a56:	854a                	mv	a0,s2
+    80002a58:	f12ff0ef          	jal	8000216a <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    80002a5c:	013d09bb          	addw	s3,s10,s3
+    80002a60:	009d04bb          	addw	s1,s10,s1
+    80002a64:	9a6e                	add	s4,s4,s11
+    80002a66:	0559f763          	bgeu	s3,s5,80002ab4 <readi+0xc6>
+    uint addr = bmap(ip, off/BSIZE);
+    80002a6a:	00a4d59b          	srliw	a1,s1,0xa
+    80002a6e:	855a                	mv	a0,s6
+    80002a70:	977ff0ef          	jal	800023e6 <bmap>
+    80002a74:	0005059b          	sext.w	a1,a0
+    if(addr == 0)
+    80002a78:	c5b1                	beqz	a1,80002ac4 <readi+0xd6>
+    bp = bread(ip->dev, addr);
+    80002a7a:	000b2503          	lw	a0,0(s6)
+    80002a7e:	de4ff0ef          	jal	80002062 <bread>
+    80002a82:	892a                	mv	s2,a0
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80002a84:	3ff4f713          	andi	a4,s1,1023
+    80002a88:	40ec87bb          	subw	a5,s9,a4
+    80002a8c:	413a86bb          	subw	a3,s5,s3
+    80002a90:	8d3e                	mv	s10,a5
+    80002a92:	2781                	sext.w	a5,a5
+    80002a94:	0006861b          	sext.w	a2,a3
+    80002a98:	faf671e3          	bgeu	a2,a5,80002a3a <readi+0x4c>
+    80002a9c:	8d36                	mv	s10,a3
+    80002a9e:	bf71                	j	80002a3a <readi+0x4c>
+      brelse(bp);
+    80002aa0:	854a                	mv	a0,s2
+    80002aa2:	ec8ff0ef          	jal	8000216a <brelse>
+      tot = -1;
+    80002aa6:	59fd                	li	s3,-1
+      break;
+    80002aa8:	6946                	ld	s2,80(sp)
+    80002aaa:	7c02                	ld	s8,32(sp)
+    80002aac:	6ce2                	ld	s9,24(sp)
+    80002aae:	6d42                	ld	s10,16(sp)
+    80002ab0:	6da2                	ld	s11,8(sp)
+    80002ab2:	a831                	j	80002ace <readi+0xe0>
+    80002ab4:	6946                	ld	s2,80(sp)
+    80002ab6:	7c02                	ld	s8,32(sp)
+    80002ab8:	6ce2                	ld	s9,24(sp)
+    80002aba:	6d42                	ld	s10,16(sp)
+    80002abc:	6da2                	ld	s11,8(sp)
+    80002abe:	a801                	j	80002ace <readi+0xe0>
+  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
+    80002ac0:	89d6                	mv	s3,s5
+    80002ac2:	a031                	j	80002ace <readi+0xe0>
+    80002ac4:	6946                	ld	s2,80(sp)
+    80002ac6:	7c02                	ld	s8,32(sp)
+    80002ac8:	6ce2                	ld	s9,24(sp)
+    80002aca:	6d42                	ld	s10,16(sp)
+    80002acc:	6da2                	ld	s11,8(sp)
+  }
+  return tot;
+    80002ace:	0009851b          	sext.w	a0,s3
+    80002ad2:	69a6                	ld	s3,72(sp)
+}
+    80002ad4:	70a6                	ld	ra,104(sp)
+    80002ad6:	7406                	ld	s0,96(sp)
+    80002ad8:	64e6                	ld	s1,88(sp)
+    80002ada:	6a06                	ld	s4,64(sp)
+    80002adc:	7ae2                	ld	s5,56(sp)
+    80002ade:	7b42                	ld	s6,48(sp)
+    80002ae0:	7ba2                	ld	s7,40(sp)
+    80002ae2:	6165                	addi	sp,sp,112
+    80002ae4:	8082                	ret
+    return 0;
+    80002ae6:	4501                	li	a0,0
+}
+    80002ae8:	8082                	ret
+
+0000000080002aea <writei>:
+writei(struct inode *ip, int user_src, uint64 src, uint off, uint n)
+{
+  uint tot, m;
+  struct buf *bp;
+
+  if(off > ip->size || off + n < off)
+    80002aea:	457c                	lw	a5,76(a0)
+    80002aec:	10d7e063          	bltu	a5,a3,80002bec <writei+0x102>
+{
+    80002af0:	7159                	addi	sp,sp,-112
+    80002af2:	f486                	sd	ra,104(sp)
+    80002af4:	f0a2                	sd	s0,96(sp)
+    80002af6:	e8ca                	sd	s2,80(sp)
+    80002af8:	e0d2                	sd	s4,64(sp)
+    80002afa:	fc56                	sd	s5,56(sp)
+    80002afc:	f85a                	sd	s6,48(sp)
+    80002afe:	f45e                	sd	s7,40(sp)
+    80002b00:	1880                	addi	s0,sp,112
+    80002b02:	8aaa                	mv	s5,a0
+    80002b04:	8bae                	mv	s7,a1
+    80002b06:	8a32                	mv	s4,a2
+    80002b08:	8936                	mv	s2,a3
+    80002b0a:	8b3a                	mv	s6,a4
+  if(off > ip->size || off + n < off)
+    80002b0c:	00e687bb          	addw	a5,a3,a4
+    80002b10:	0ed7e063          	bltu	a5,a3,80002bf0 <writei+0x106>
+    return -1;
+  if(off + n > MAXFILE*BSIZE)
+    80002b14:	00043737          	lui	a4,0x43
+    80002b18:	0cf76e63          	bltu	a4,a5,80002bf4 <writei+0x10a>
+    80002b1c:	e4ce                	sd	s3,72(sp)
+    return -1;
+
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    80002b1e:	0a0b0f63          	beqz	s6,80002bdc <writei+0xf2>
+    80002b22:	eca6                	sd	s1,88(sp)
+    80002b24:	f062                	sd	s8,32(sp)
+    80002b26:	ec66                	sd	s9,24(sp)
+    80002b28:	e86a                	sd	s10,16(sp)
+    80002b2a:	e46e                	sd	s11,8(sp)
+    80002b2c:	4981                	li	s3,0
+    uint addr = bmap(ip, off/BSIZE);
+    if(addr == 0)
+      break;
+    bp = bread(ip->dev, addr);
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80002b2e:	40000c93          	li	s9,1024
+    if(either_copyin(bp->data + (off % BSIZE), user_src, src, m) == -1) {
+    80002b32:	5c7d                	li	s8,-1
+    80002b34:	a825                	j	80002b6c <writei+0x82>
+    80002b36:	020d1d93          	slli	s11,s10,0x20
+    80002b3a:	020ddd93          	srli	s11,s11,0x20
+    80002b3e:	05848513          	addi	a0,s1,88
+    80002b42:	86ee                	mv	a3,s11
+    80002b44:	8652                	mv	a2,s4
+    80002b46:	85de                	mv	a1,s7
+    80002b48:	953a                	add	a0,a0,a4
+    80002b4a:	bdbfe0ef          	jal	80001724 <either_copyin>
+    80002b4e:	05850a63          	beq	a0,s8,80002ba2 <writei+0xb8>
+      brelse(bp);
+      break;
+    }
+    log_write(bp);
+    80002b52:	8526                	mv	a0,s1
+    80002b54:	660000ef          	jal	800031b4 <log_write>
+    brelse(bp);
+    80002b58:	8526                	mv	a0,s1
+    80002b5a:	e10ff0ef          	jal	8000216a <brelse>
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    80002b5e:	013d09bb          	addw	s3,s10,s3
+    80002b62:	012d093b          	addw	s2,s10,s2
+    80002b66:	9a6e                	add	s4,s4,s11
+    80002b68:	0569f063          	bgeu	s3,s6,80002ba8 <writei+0xbe>
+    uint addr = bmap(ip, off/BSIZE);
+    80002b6c:	00a9559b          	srliw	a1,s2,0xa
+    80002b70:	8556                	mv	a0,s5
+    80002b72:	875ff0ef          	jal	800023e6 <bmap>
+    80002b76:	0005059b          	sext.w	a1,a0
+    if(addr == 0)
+    80002b7a:	c59d                	beqz	a1,80002ba8 <writei+0xbe>
+    bp = bread(ip->dev, addr);
+    80002b7c:	000aa503          	lw	a0,0(s5)
+    80002b80:	ce2ff0ef          	jal	80002062 <bread>
+    80002b84:	84aa                	mv	s1,a0
+    m = min(n - tot, BSIZE - off%BSIZE);
+    80002b86:	3ff97713          	andi	a4,s2,1023
+    80002b8a:	40ec87bb          	subw	a5,s9,a4
+    80002b8e:	413b06bb          	subw	a3,s6,s3
+    80002b92:	8d3e                	mv	s10,a5
+    80002b94:	2781                	sext.w	a5,a5
+    80002b96:	0006861b          	sext.w	a2,a3
+    80002b9a:	f8f67ee3          	bgeu	a2,a5,80002b36 <writei+0x4c>
+    80002b9e:	8d36                	mv	s10,a3
+    80002ba0:	bf59                	j	80002b36 <writei+0x4c>
+      brelse(bp);
+    80002ba2:	8526                	mv	a0,s1
+    80002ba4:	dc6ff0ef          	jal	8000216a <brelse>
+  }
+
+  if(off > ip->size)
+    80002ba8:	04caa783          	lw	a5,76(s5)
+    80002bac:	0327fa63          	bgeu	a5,s2,80002be0 <writei+0xf6>
+    ip->size = off;
+    80002bb0:	052aa623          	sw	s2,76(s5)
+    80002bb4:	64e6                	ld	s1,88(sp)
+    80002bb6:	7c02                	ld	s8,32(sp)
+    80002bb8:	6ce2                	ld	s9,24(sp)
+    80002bba:	6d42                	ld	s10,16(sp)
+    80002bbc:	6da2                	ld	s11,8(sp)
+
+  // write the i-node back to disk even if the size didn't change
+  // because the loop above might have called bmap() and added a new
+  // block to ip->addrs[].
+  iupdate(ip);
+    80002bbe:	8556                	mv	a0,s5
+    80002bc0:	b27ff0ef          	jal	800026e6 <iupdate>
+
+  return tot;
+    80002bc4:	0009851b          	sext.w	a0,s3
+    80002bc8:	69a6                	ld	s3,72(sp)
+}
+    80002bca:	70a6                	ld	ra,104(sp)
+    80002bcc:	7406                	ld	s0,96(sp)
+    80002bce:	6946                	ld	s2,80(sp)
+    80002bd0:	6a06                	ld	s4,64(sp)
+    80002bd2:	7ae2                	ld	s5,56(sp)
+    80002bd4:	7b42                	ld	s6,48(sp)
+    80002bd6:	7ba2                	ld	s7,40(sp)
+    80002bd8:	6165                	addi	sp,sp,112
+    80002bda:	8082                	ret
+  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
+    80002bdc:	89da                	mv	s3,s6
+    80002bde:	b7c5                	j	80002bbe <writei+0xd4>
+    80002be0:	64e6                	ld	s1,88(sp)
+    80002be2:	7c02                	ld	s8,32(sp)
+    80002be4:	6ce2                	ld	s9,24(sp)
+    80002be6:	6d42                	ld	s10,16(sp)
+    80002be8:	6da2                	ld	s11,8(sp)
+    80002bea:	bfd1                	j	80002bbe <writei+0xd4>
+    return -1;
+    80002bec:	557d                	li	a0,-1
+}
+    80002bee:	8082                	ret
+    return -1;
+    80002bf0:	557d                	li	a0,-1
+    80002bf2:	bfe1                	j	80002bca <writei+0xe0>
+    return -1;
+    80002bf4:	557d                	li	a0,-1
+    80002bf6:	bfd1                	j	80002bca <writei+0xe0>
+
+0000000080002bf8 <namecmp>:
+
+// Directories
+
+int
+namecmp(const char *s, const char *t)
+{
+    80002bf8:	1141                	addi	sp,sp,-16
+    80002bfa:	e406                	sd	ra,8(sp)
+    80002bfc:	e022                	sd	s0,0(sp)
+    80002bfe:	0800                	addi	s0,sp,16
+  return strncmp(s, t, DIRSIZ);
+    80002c00:	4639                	li	a2,14
+    80002c02:	e5afd0ef          	jal	8000025c <strncmp>
+}
+    80002c06:	60a2                	ld	ra,8(sp)
+    80002c08:	6402                	ld	s0,0(sp)
+    80002c0a:	0141                	addi	sp,sp,16
+    80002c0c:	8082                	ret
+
+0000000080002c0e <dirlookup>:
+
+// Look for a directory entry in a directory.
+// If found, set *poff to byte offset of entry.
+struct inode*
+dirlookup(struct inode *dp, char *name, uint *poff)
+{
+    80002c0e:	7139                	addi	sp,sp,-64
+    80002c10:	fc06                	sd	ra,56(sp)
+    80002c12:	f822                	sd	s0,48(sp)
+    80002c14:	f426                	sd	s1,40(sp)
+    80002c16:	f04a                	sd	s2,32(sp)
+    80002c18:	ec4e                	sd	s3,24(sp)
+    80002c1a:	e852                	sd	s4,16(sp)
+    80002c1c:	0080                	addi	s0,sp,64
+  uint off, inum;
+  struct dirent de;
+
+  if(dp->type != T_DIR)
+    80002c1e:	04451703          	lh	a4,68(a0)
+    80002c22:	4785                	li	a5,1
+    80002c24:	00f71a63          	bne	a4,a5,80002c38 <dirlookup+0x2a>
+    80002c28:	892a                	mv	s2,a0
+    80002c2a:	89ae                	mv	s3,a1
+    80002c2c:	8a32                	mv	s4,a2
+    panic("dirlookup not DIR");
+
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80002c2e:	457c                	lw	a5,76(a0)
+    80002c30:	4481                	li	s1,0
+      inum = de.inum;
+      return iget(dp->dev, inum);
+    }
+  }
+
+  return 0;
+    80002c32:	4501                	li	a0,0
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80002c34:	e39d                	bnez	a5,80002c5a <dirlookup+0x4c>
+    80002c36:	a095                	j	80002c9a <dirlookup+0x8c>
+    panic("dirlookup not DIR");
+    80002c38:	00005517          	auipc	a0,0x5
+    80002c3c:	96850513          	addi	a0,a0,-1688 # 800075a0 <etext+0x5a0>
+    80002c40:	163020ef          	jal	800055a2 <panic>
+      panic("dirlookup read");
+    80002c44:	00005517          	auipc	a0,0x5
+    80002c48:	97450513          	addi	a0,a0,-1676 # 800075b8 <etext+0x5b8>
+    80002c4c:	157020ef          	jal	800055a2 <panic>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80002c50:	24c1                	addiw	s1,s1,16
+    80002c52:	04c92783          	lw	a5,76(s2)
+    80002c56:	04f4f163          	bgeu	s1,a5,80002c98 <dirlookup+0x8a>
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80002c5a:	4741                	li	a4,16
+    80002c5c:	86a6                	mv	a3,s1
+    80002c5e:	fc040613          	addi	a2,s0,-64
+    80002c62:	4581                	li	a1,0
+    80002c64:	854a                	mv	a0,s2
+    80002c66:	d89ff0ef          	jal	800029ee <readi>
+    80002c6a:	47c1                	li	a5,16
+    80002c6c:	fcf51ce3          	bne	a0,a5,80002c44 <dirlookup+0x36>
+    if(de.inum == 0)
+    80002c70:	fc045783          	lhu	a5,-64(s0)
+    80002c74:	dff1                	beqz	a5,80002c50 <dirlookup+0x42>
+    if(namecmp(name, de.name) == 0){
+    80002c76:	fc240593          	addi	a1,s0,-62
+    80002c7a:	854e                	mv	a0,s3
+    80002c7c:	f7dff0ef          	jal	80002bf8 <namecmp>
+    80002c80:	f961                	bnez	a0,80002c50 <dirlookup+0x42>
+      if(poff)
+    80002c82:	000a0463          	beqz	s4,80002c8a <dirlookup+0x7c>
+        *poff = off;
+    80002c86:	009a2023          	sw	s1,0(s4)
+      return iget(dp->dev, inum);
+    80002c8a:	fc045583          	lhu	a1,-64(s0)
+    80002c8e:	00092503          	lw	a0,0(s2)
+    80002c92:	829ff0ef          	jal	800024ba <iget>
+    80002c96:	a011                	j	80002c9a <dirlookup+0x8c>
+  return 0;
+    80002c98:	4501                	li	a0,0
+}
+    80002c9a:	70e2                	ld	ra,56(sp)
+    80002c9c:	7442                	ld	s0,48(sp)
+    80002c9e:	74a2                	ld	s1,40(sp)
+    80002ca0:	7902                	ld	s2,32(sp)
+    80002ca2:	69e2                	ld	s3,24(sp)
+    80002ca4:	6a42                	ld	s4,16(sp)
+    80002ca6:	6121                	addi	sp,sp,64
+    80002ca8:	8082                	ret
+
+0000000080002caa <namex>:
+// If parent != 0, return the inode for the parent and copy the final
+// path element into name, which must have room for DIRSIZ bytes.
+// Must be called inside a transaction since it calls iput().
+static struct inode*
+namex(char *path, int nameiparent, char *name)
+{
+    80002caa:	711d                	addi	sp,sp,-96
+    80002cac:	ec86                	sd	ra,88(sp)
+    80002cae:	e8a2                	sd	s0,80(sp)
+    80002cb0:	e4a6                	sd	s1,72(sp)
+    80002cb2:	e0ca                	sd	s2,64(sp)
+    80002cb4:	fc4e                	sd	s3,56(sp)
+    80002cb6:	f852                	sd	s4,48(sp)
+    80002cb8:	f456                	sd	s5,40(sp)
+    80002cba:	f05a                	sd	s6,32(sp)
+    80002cbc:	ec5e                	sd	s7,24(sp)
+    80002cbe:	e862                	sd	s8,16(sp)
+    80002cc0:	e466                	sd	s9,8(sp)
+    80002cc2:	1080                	addi	s0,sp,96
+    80002cc4:	84aa                	mv	s1,a0
+    80002cc6:	8b2e                	mv	s6,a1
+    80002cc8:	8ab2                	mv	s5,a2
+  struct inode *ip, *next;
+
+  if(*path == '/')
+    80002cca:	00054703          	lbu	a4,0(a0)
+    80002cce:	02f00793          	li	a5,47
+    80002cd2:	00f70e63          	beq	a4,a5,80002cee <namex+0x44>
+    ip = iget(ROOTDEV, ROOTINO);
+  else
+    ip = idup(myproc()->cwd);
+    80002cd6:	8d2fe0ef          	jal	80000da8 <myproc>
+    80002cda:	15053503          	ld	a0,336(a0)
+    80002cde:	a87ff0ef          	jal	80002764 <idup>
+    80002ce2:	8a2a                	mv	s4,a0
+  while(*path == '/')
+    80002ce4:	02f00913          	li	s2,47
+  if(len >= DIRSIZ)
+    80002ce8:	4c35                	li	s8,13
+
+  while((path = skipelem(path, name)) != 0){
+    ilock(ip);
+    if(ip->type != T_DIR){
+    80002cea:	4b85                	li	s7,1
+    80002cec:	a871                	j	80002d88 <namex+0xde>
+    ip = iget(ROOTDEV, ROOTINO);
+    80002cee:	4585                	li	a1,1
+    80002cf0:	4505                	li	a0,1
+    80002cf2:	fc8ff0ef          	jal	800024ba <iget>
+    80002cf6:	8a2a                	mv	s4,a0
+    80002cf8:	b7f5                	j	80002ce4 <namex+0x3a>
+      iunlockput(ip);
+    80002cfa:	8552                	mv	a0,s4
+    80002cfc:	ca9ff0ef          	jal	800029a4 <iunlockput>
+      return 0;
+    80002d00:	4a01                	li	s4,0
+  if(nameiparent){
+    iput(ip);
+    return 0;
+  }
+  return ip;
+}
+    80002d02:	8552                	mv	a0,s4
+    80002d04:	60e6                	ld	ra,88(sp)
+    80002d06:	6446                	ld	s0,80(sp)
+    80002d08:	64a6                	ld	s1,72(sp)
+    80002d0a:	6906                	ld	s2,64(sp)
+    80002d0c:	79e2                	ld	s3,56(sp)
+    80002d0e:	7a42                	ld	s4,48(sp)
+    80002d10:	7aa2                	ld	s5,40(sp)
+    80002d12:	7b02                	ld	s6,32(sp)
+    80002d14:	6be2                	ld	s7,24(sp)
+    80002d16:	6c42                	ld	s8,16(sp)
+    80002d18:	6ca2                	ld	s9,8(sp)
+    80002d1a:	6125                	addi	sp,sp,96
+    80002d1c:	8082                	ret
+      iunlock(ip);
+    80002d1e:	8552                	mv	a0,s4
+    80002d20:	b29ff0ef          	jal	80002848 <iunlock>
+      return ip;
+    80002d24:	bff9                	j	80002d02 <namex+0x58>
+      iunlockput(ip);
+    80002d26:	8552                	mv	a0,s4
+    80002d28:	c7dff0ef          	jal	800029a4 <iunlockput>
+      return 0;
+    80002d2c:	8a4e                	mv	s4,s3
+    80002d2e:	bfd1                	j	80002d02 <namex+0x58>
+  len = path - s;
+    80002d30:	40998633          	sub	a2,s3,s1
+    80002d34:	00060c9b          	sext.w	s9,a2
+  if(len >= DIRSIZ)
+    80002d38:	099c5063          	bge	s8,s9,80002db8 <namex+0x10e>
+    memmove(name, s, DIRSIZ);
+    80002d3c:	4639                	li	a2,14
+    80002d3e:	85a6                	mv	a1,s1
+    80002d40:	8556                	mv	a0,s5
+    80002d42:	caafd0ef          	jal	800001ec <memmove>
+    80002d46:	84ce                	mv	s1,s3
+  while(*path == '/')
+    80002d48:	0004c783          	lbu	a5,0(s1)
+    80002d4c:	01279763          	bne	a5,s2,80002d5a <namex+0xb0>
+    path++;
+    80002d50:	0485                	addi	s1,s1,1
+  while(*path == '/')
+    80002d52:	0004c783          	lbu	a5,0(s1)
+    80002d56:	ff278de3          	beq	a5,s2,80002d50 <namex+0xa6>
+    ilock(ip);
+    80002d5a:	8552                	mv	a0,s4
+    80002d5c:	a3fff0ef          	jal	8000279a <ilock>
+    if(ip->type != T_DIR){
+    80002d60:	044a1783          	lh	a5,68(s4)
+    80002d64:	f9779be3          	bne	a5,s7,80002cfa <namex+0x50>
+    if(nameiparent && *path == '\0'){
+    80002d68:	000b0563          	beqz	s6,80002d72 <namex+0xc8>
+    80002d6c:	0004c783          	lbu	a5,0(s1)
+    80002d70:	d7dd                	beqz	a5,80002d1e <namex+0x74>
+    if((next = dirlookup(ip, name, 0)) == 0){
+    80002d72:	4601                	li	a2,0
+    80002d74:	85d6                	mv	a1,s5
+    80002d76:	8552                	mv	a0,s4
+    80002d78:	e97ff0ef          	jal	80002c0e <dirlookup>
+    80002d7c:	89aa                	mv	s3,a0
+    80002d7e:	d545                	beqz	a0,80002d26 <namex+0x7c>
+    iunlockput(ip);
+    80002d80:	8552                	mv	a0,s4
+    80002d82:	c23ff0ef          	jal	800029a4 <iunlockput>
+    ip = next;
+    80002d86:	8a4e                	mv	s4,s3
+  while(*path == '/')
+    80002d88:	0004c783          	lbu	a5,0(s1)
+    80002d8c:	01279763          	bne	a5,s2,80002d9a <namex+0xf0>
+    path++;
+    80002d90:	0485                	addi	s1,s1,1
+  while(*path == '/')
+    80002d92:	0004c783          	lbu	a5,0(s1)
+    80002d96:	ff278de3          	beq	a5,s2,80002d90 <namex+0xe6>
+  if(*path == 0)
+    80002d9a:	cb8d                	beqz	a5,80002dcc <namex+0x122>
+  while(*path != '/' && *path != 0)
+    80002d9c:	0004c783          	lbu	a5,0(s1)
+    80002da0:	89a6                	mv	s3,s1
+  len = path - s;
+    80002da2:	4c81                	li	s9,0
+    80002da4:	4601                	li	a2,0
+  while(*path != '/' && *path != 0)
+    80002da6:	01278963          	beq	a5,s2,80002db8 <namex+0x10e>
+    80002daa:	d3d9                	beqz	a5,80002d30 <namex+0x86>
+    path++;
+    80002dac:	0985                	addi	s3,s3,1
+  while(*path != '/' && *path != 0)
+    80002dae:	0009c783          	lbu	a5,0(s3)
+    80002db2:	ff279ce3          	bne	a5,s2,80002daa <namex+0x100>
+    80002db6:	bfad                	j	80002d30 <namex+0x86>
+    memmove(name, s, len);
+    80002db8:	2601                	sext.w	a2,a2
+    80002dba:	85a6                	mv	a1,s1
+    80002dbc:	8556                	mv	a0,s5
+    80002dbe:	c2efd0ef          	jal	800001ec <memmove>
+    name[len] = 0;
+    80002dc2:	9cd6                	add	s9,s9,s5
+    80002dc4:	000c8023          	sb	zero,0(s9) # 2000 <_entry-0x7fffe000>
+    80002dc8:	84ce                	mv	s1,s3
+    80002dca:	bfbd                	j	80002d48 <namex+0x9e>
+  if(nameiparent){
+    80002dcc:	f20b0be3          	beqz	s6,80002d02 <namex+0x58>
+    iput(ip);
+    80002dd0:	8552                	mv	a0,s4
+    80002dd2:	b4bff0ef          	jal	8000291c <iput>
+    return 0;
+    80002dd6:	4a01                	li	s4,0
+    80002dd8:	b72d                	j	80002d02 <namex+0x58>
+
+0000000080002dda <dirlink>:
+{
+    80002dda:	7139                	addi	sp,sp,-64
+    80002ddc:	fc06                	sd	ra,56(sp)
+    80002dde:	f822                	sd	s0,48(sp)
+    80002de0:	f04a                	sd	s2,32(sp)
+    80002de2:	ec4e                	sd	s3,24(sp)
+    80002de4:	e852                	sd	s4,16(sp)
+    80002de6:	0080                	addi	s0,sp,64
+    80002de8:	892a                	mv	s2,a0
+    80002dea:	8a2e                	mv	s4,a1
+    80002dec:	89b2                	mv	s3,a2
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    80002dee:	4601                	li	a2,0
+    80002df0:	e1fff0ef          	jal	80002c0e <dirlookup>
+    80002df4:	e535                	bnez	a0,80002e60 <dirlink+0x86>
+    80002df6:	f426                	sd	s1,40(sp)
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80002df8:	04c92483          	lw	s1,76(s2)
+    80002dfc:	c48d                	beqz	s1,80002e26 <dirlink+0x4c>
+    80002dfe:	4481                	li	s1,0
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80002e00:	4741                	li	a4,16
+    80002e02:	86a6                	mv	a3,s1
+    80002e04:	fc040613          	addi	a2,s0,-64
+    80002e08:	4581                	li	a1,0
+    80002e0a:	854a                	mv	a0,s2
+    80002e0c:	be3ff0ef          	jal	800029ee <readi>
+    80002e10:	47c1                	li	a5,16
+    80002e12:	04f51b63          	bne	a0,a5,80002e68 <dirlink+0x8e>
+    if(de.inum == 0)
+    80002e16:	fc045783          	lhu	a5,-64(s0)
+    80002e1a:	c791                	beqz	a5,80002e26 <dirlink+0x4c>
+  for(off = 0; off < dp->size; off += sizeof(de)){
+    80002e1c:	24c1                	addiw	s1,s1,16
+    80002e1e:	04c92783          	lw	a5,76(s2)
+    80002e22:	fcf4efe3          	bltu	s1,a5,80002e00 <dirlink+0x26>
+  strncpy(de.name, name, DIRSIZ);
+    80002e26:	4639                	li	a2,14
+    80002e28:	85d2                	mv	a1,s4
+    80002e2a:	fc240513          	addi	a0,s0,-62
+    80002e2e:	c64fd0ef          	jal	80000292 <strncpy>
+  de.inum = inum;
+    80002e32:	fd341023          	sh	s3,-64(s0)
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    80002e36:	4741                	li	a4,16
+    80002e38:	86a6                	mv	a3,s1
+    80002e3a:	fc040613          	addi	a2,s0,-64
+    80002e3e:	4581                	li	a1,0
+    80002e40:	854a                	mv	a0,s2
+    80002e42:	ca9ff0ef          	jal	80002aea <writei>
+    80002e46:	1541                	addi	a0,a0,-16
+    80002e48:	00a03533          	snez	a0,a0
+    80002e4c:	40a00533          	neg	a0,a0
+    80002e50:	74a2                	ld	s1,40(sp)
+}
+    80002e52:	70e2                	ld	ra,56(sp)
+    80002e54:	7442                	ld	s0,48(sp)
+    80002e56:	7902                	ld	s2,32(sp)
+    80002e58:	69e2                	ld	s3,24(sp)
+    80002e5a:	6a42                	ld	s4,16(sp)
+    80002e5c:	6121                	addi	sp,sp,64
+    80002e5e:	8082                	ret
+    iput(ip);
+    80002e60:	abdff0ef          	jal	8000291c <iput>
+    return -1;
+    80002e64:	557d                	li	a0,-1
+    80002e66:	b7f5                	j	80002e52 <dirlink+0x78>
+      panic("dirlink read");
+    80002e68:	00004517          	auipc	a0,0x4
+    80002e6c:	76050513          	addi	a0,a0,1888 # 800075c8 <etext+0x5c8>
+    80002e70:	732020ef          	jal	800055a2 <panic>
+
+0000000080002e74 <namei>:
+
+struct inode*
+namei(char *path)
+{
+    80002e74:	1101                	addi	sp,sp,-32
+    80002e76:	ec06                	sd	ra,24(sp)
+    80002e78:	e822                	sd	s0,16(sp)
+    80002e7a:	1000                	addi	s0,sp,32
+  char name[DIRSIZ];
+  return namex(path, 0, name);
+    80002e7c:	fe040613          	addi	a2,s0,-32
+    80002e80:	4581                	li	a1,0
+    80002e82:	e29ff0ef          	jal	80002caa <namex>
+}
+    80002e86:	60e2                	ld	ra,24(sp)
+    80002e88:	6442                	ld	s0,16(sp)
+    80002e8a:	6105                	addi	sp,sp,32
+    80002e8c:	8082                	ret
+
+0000000080002e8e <nameiparent>:
+
+struct inode*
+nameiparent(char *path, char *name)
+{
+    80002e8e:	1141                	addi	sp,sp,-16
+    80002e90:	e406                	sd	ra,8(sp)
+    80002e92:	e022                	sd	s0,0(sp)
+    80002e94:	0800                	addi	s0,sp,16
+    80002e96:	862e                	mv	a2,a1
+  return namex(path, 1, name);
+    80002e98:	4585                	li	a1,1
+    80002e9a:	e11ff0ef          	jal	80002caa <namex>
+}
+    80002e9e:	60a2                	ld	ra,8(sp)
+    80002ea0:	6402                	ld	s0,0(sp)
+    80002ea2:	0141                	addi	sp,sp,16
+    80002ea4:	8082                	ret
+
+0000000080002ea6 <write_head>:
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+    80002ea6:	1101                	addi	sp,sp,-32
+    80002ea8:	ec06                	sd	ra,24(sp)
+    80002eaa:	e822                	sd	s0,16(sp)
+    80002eac:	e426                	sd	s1,8(sp)
+    80002eae:	e04a                	sd	s2,0(sp)
+    80002eb0:	1000                	addi	s0,sp,32
+  struct buf *buf = bread(log.dev, log.start);
+    80002eb2:	00015917          	auipc	s2,0x15
+    80002eb6:	bfe90913          	addi	s2,s2,-1026 # 80017ab0 <log>
+    80002eba:	01892583          	lw	a1,24(s2)
+    80002ebe:	02892503          	lw	a0,40(s2)
+    80002ec2:	9a0ff0ef          	jal	80002062 <bread>
+    80002ec6:	84aa                	mv	s1,a0
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+    80002ec8:	02c92603          	lw	a2,44(s2)
+    80002ecc:	cd30                	sw	a2,88(a0)
+  for (i = 0; i < log.lh.n; i++) {
+    80002ece:	00c05f63          	blez	a2,80002eec <write_head+0x46>
+    80002ed2:	00015717          	auipc	a4,0x15
+    80002ed6:	c0e70713          	addi	a4,a4,-1010 # 80017ae0 <log+0x30>
+    80002eda:	87aa                	mv	a5,a0
+    80002edc:	060a                	slli	a2,a2,0x2
+    80002ede:	962a                	add	a2,a2,a0
+    hb->block[i] = log.lh.block[i];
+    80002ee0:	4314                	lw	a3,0(a4)
+    80002ee2:	cff4                	sw	a3,92(a5)
+  for (i = 0; i < log.lh.n; i++) {
+    80002ee4:	0711                	addi	a4,a4,4
+    80002ee6:	0791                	addi	a5,a5,4
+    80002ee8:	fec79ce3          	bne	a5,a2,80002ee0 <write_head+0x3a>
+  }
+  bwrite(buf);
+    80002eec:	8526                	mv	a0,s1
+    80002eee:	a4aff0ef          	jal	80002138 <bwrite>
+  brelse(buf);
+    80002ef2:	8526                	mv	a0,s1
+    80002ef4:	a76ff0ef          	jal	8000216a <brelse>
+}
+    80002ef8:	60e2                	ld	ra,24(sp)
+    80002efa:	6442                	ld	s0,16(sp)
+    80002efc:	64a2                	ld	s1,8(sp)
+    80002efe:	6902                	ld	s2,0(sp)
+    80002f00:	6105                	addi	sp,sp,32
+    80002f02:	8082                	ret
+
+0000000080002f04 <install_trans>:
+  for (tail = 0; tail < log.lh.n; tail++) {
+    80002f04:	00015797          	auipc	a5,0x15
+    80002f08:	bd87a783          	lw	a5,-1064(a5) # 80017adc <log+0x2c>
+    80002f0c:	08f05f63          	blez	a5,80002faa <install_trans+0xa6>
+{
+    80002f10:	7139                	addi	sp,sp,-64
+    80002f12:	fc06                	sd	ra,56(sp)
+    80002f14:	f822                	sd	s0,48(sp)
+    80002f16:	f426                	sd	s1,40(sp)
+    80002f18:	f04a                	sd	s2,32(sp)
+    80002f1a:	ec4e                	sd	s3,24(sp)
+    80002f1c:	e852                	sd	s4,16(sp)
+    80002f1e:	e456                	sd	s5,8(sp)
+    80002f20:	e05a                	sd	s6,0(sp)
+    80002f22:	0080                	addi	s0,sp,64
+    80002f24:	8b2a                	mv	s6,a0
+    80002f26:	00015a97          	auipc	s5,0x15
+    80002f2a:	bbaa8a93          	addi	s5,s5,-1094 # 80017ae0 <log+0x30>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    80002f2e:	4a01                	li	s4,0
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    80002f30:	00015997          	auipc	s3,0x15
+    80002f34:	b8098993          	addi	s3,s3,-1152 # 80017ab0 <log>
+    80002f38:	a829                	j	80002f52 <install_trans+0x4e>
+    brelse(lbuf);
+    80002f3a:	854a                	mv	a0,s2
+    80002f3c:	a2eff0ef          	jal	8000216a <brelse>
+    brelse(dbuf);
+    80002f40:	8526                	mv	a0,s1
+    80002f42:	a28ff0ef          	jal	8000216a <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    80002f46:	2a05                	addiw	s4,s4,1
+    80002f48:	0a91                	addi	s5,s5,4
+    80002f4a:	02c9a783          	lw	a5,44(s3)
+    80002f4e:	04fa5463          	bge	s4,a5,80002f96 <install_trans+0x92>
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    80002f52:	0189a583          	lw	a1,24(s3)
+    80002f56:	014585bb          	addw	a1,a1,s4
+    80002f5a:	2585                	addiw	a1,a1,1
+    80002f5c:	0289a503          	lw	a0,40(s3)
+    80002f60:	902ff0ef          	jal	80002062 <bread>
+    80002f64:	892a                	mv	s2,a0
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+    80002f66:	000aa583          	lw	a1,0(s5)
+    80002f6a:	0289a503          	lw	a0,40(s3)
+    80002f6e:	8f4ff0ef          	jal	80002062 <bread>
+    80002f72:	84aa                	mv	s1,a0
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    80002f74:	40000613          	li	a2,1024
+    80002f78:	05890593          	addi	a1,s2,88
+    80002f7c:	05850513          	addi	a0,a0,88
+    80002f80:	a6cfd0ef          	jal	800001ec <memmove>
+    bwrite(dbuf);  // write dst to disk
+    80002f84:	8526                	mv	a0,s1
+    80002f86:	9b2ff0ef          	jal	80002138 <bwrite>
+    if(recovering == 0)
+    80002f8a:	fa0b18e3          	bnez	s6,80002f3a <install_trans+0x36>
+      bunpin(dbuf);
+    80002f8e:	8526                	mv	a0,s1
+    80002f90:	a96ff0ef          	jal	80002226 <bunpin>
+    80002f94:	b75d                	j	80002f3a <install_trans+0x36>
+}
+    80002f96:	70e2                	ld	ra,56(sp)
+    80002f98:	7442                	ld	s0,48(sp)
+    80002f9a:	74a2                	ld	s1,40(sp)
+    80002f9c:	7902                	ld	s2,32(sp)
+    80002f9e:	69e2                	ld	s3,24(sp)
+    80002fa0:	6a42                	ld	s4,16(sp)
+    80002fa2:	6aa2                	ld	s5,8(sp)
+    80002fa4:	6b02                	ld	s6,0(sp)
+    80002fa6:	6121                	addi	sp,sp,64
+    80002fa8:	8082                	ret
+    80002faa:	8082                	ret
+
+0000000080002fac <initlog>:
+{
+    80002fac:	7179                	addi	sp,sp,-48
+    80002fae:	f406                	sd	ra,40(sp)
+    80002fb0:	f022                	sd	s0,32(sp)
+    80002fb2:	ec26                	sd	s1,24(sp)
+    80002fb4:	e84a                	sd	s2,16(sp)
+    80002fb6:	e44e                	sd	s3,8(sp)
+    80002fb8:	1800                	addi	s0,sp,48
+    80002fba:	892a                	mv	s2,a0
+    80002fbc:	89ae                	mv	s3,a1
+  initlock(&log.lock, "log");
+    80002fbe:	00015497          	auipc	s1,0x15
+    80002fc2:	af248493          	addi	s1,s1,-1294 # 80017ab0 <log>
+    80002fc6:	00004597          	auipc	a1,0x4
+    80002fca:	61258593          	addi	a1,a1,1554 # 800075d8 <etext+0x5d8>
+    80002fce:	8526                	mv	a0,s1
+    80002fd0:	081020ef          	jal	80005850 <initlock>
+  log.start = sb->logstart;
+    80002fd4:	0149a583          	lw	a1,20(s3)
+    80002fd8:	cc8c                	sw	a1,24(s1)
+  log.size = sb->nlog;
+    80002fda:	0109a783          	lw	a5,16(s3)
+    80002fde:	ccdc                	sw	a5,28(s1)
+  log.dev = dev;
+    80002fe0:	0324a423          	sw	s2,40(s1)
+  struct buf *buf = bread(log.dev, log.start);
+    80002fe4:	854a                	mv	a0,s2
+    80002fe6:	87cff0ef          	jal	80002062 <bread>
+  log.lh.n = lh->n;
+    80002fea:	4d30                	lw	a2,88(a0)
+    80002fec:	d4d0                	sw	a2,44(s1)
+  for (i = 0; i < log.lh.n; i++) {
+    80002fee:	00c05f63          	blez	a2,8000300c <initlog+0x60>
+    80002ff2:	87aa                	mv	a5,a0
+    80002ff4:	00015717          	auipc	a4,0x15
+    80002ff8:	aec70713          	addi	a4,a4,-1300 # 80017ae0 <log+0x30>
+    80002ffc:	060a                	slli	a2,a2,0x2
+    80002ffe:	962a                	add	a2,a2,a0
+    log.lh.block[i] = lh->block[i];
+    80003000:	4ff4                	lw	a3,92(a5)
+    80003002:	c314                	sw	a3,0(a4)
+  for (i = 0; i < log.lh.n; i++) {
+    80003004:	0791                	addi	a5,a5,4
+    80003006:	0711                	addi	a4,a4,4
+    80003008:	fec79ce3          	bne	a5,a2,80003000 <initlog+0x54>
+  brelse(buf);
+    8000300c:	95eff0ef          	jal	8000216a <brelse>
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(1); // if committed, copy from log to disk
+    80003010:	4505                	li	a0,1
+    80003012:	ef3ff0ef          	jal	80002f04 <install_trans>
+  log.lh.n = 0;
+    80003016:	00015797          	auipc	a5,0x15
+    8000301a:	ac07a323          	sw	zero,-1338(a5) # 80017adc <log+0x2c>
+  write_head(); // clear the log
+    8000301e:	e89ff0ef          	jal	80002ea6 <write_head>
+}
+    80003022:	70a2                	ld	ra,40(sp)
+    80003024:	7402                	ld	s0,32(sp)
+    80003026:	64e2                	ld	s1,24(sp)
+    80003028:	6942                	ld	s2,16(sp)
+    8000302a:	69a2                	ld	s3,8(sp)
+    8000302c:	6145                	addi	sp,sp,48
+    8000302e:	8082                	ret
+
+0000000080003030 <begin_op>:
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+    80003030:	1101                	addi	sp,sp,-32
+    80003032:	ec06                	sd	ra,24(sp)
+    80003034:	e822                	sd	s0,16(sp)
+    80003036:	e426                	sd	s1,8(sp)
+    80003038:	e04a                	sd	s2,0(sp)
+    8000303a:	1000                	addi	s0,sp,32
+  acquire(&log.lock);
+    8000303c:	00015517          	auipc	a0,0x15
+    80003040:	a7450513          	addi	a0,a0,-1420 # 80017ab0 <log>
+    80003044:	08d020ef          	jal	800058d0 <acquire>
+  while(1){
+    if(log.committing){
+    80003048:	00015497          	auipc	s1,0x15
+    8000304c:	a6848493          	addi	s1,s1,-1432 # 80017ab0 <log>
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+    80003050:	4979                	li	s2,30
+    80003052:	a029                	j	8000305c <begin_op+0x2c>
+      sleep(&log, &log.lock);
+    80003054:	85a6                	mv	a1,s1
+    80003056:	8526                	mv	a0,s1
+    80003058:	b26fe0ef          	jal	8000137e <sleep>
+    if(log.committing){
+    8000305c:	50dc                	lw	a5,36(s1)
+    8000305e:	fbfd                	bnez	a5,80003054 <begin_op+0x24>
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+    80003060:	5098                	lw	a4,32(s1)
+    80003062:	2705                	addiw	a4,a4,1
+    80003064:	0027179b          	slliw	a5,a4,0x2
+    80003068:	9fb9                	addw	a5,a5,a4
+    8000306a:	0017979b          	slliw	a5,a5,0x1
+    8000306e:	54d4                	lw	a3,44(s1)
+    80003070:	9fb5                	addw	a5,a5,a3
+    80003072:	00f95763          	bge	s2,a5,80003080 <begin_op+0x50>
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    80003076:	85a6                	mv	a1,s1
+    80003078:	8526                	mv	a0,s1
+    8000307a:	b04fe0ef          	jal	8000137e <sleep>
+    8000307e:	bff9                	j	8000305c <begin_op+0x2c>
+    } else {
+      log.outstanding += 1;
+    80003080:	00015517          	auipc	a0,0x15
+    80003084:	a3050513          	addi	a0,a0,-1488 # 80017ab0 <log>
+    80003088:	d118                	sw	a4,32(a0)
+      release(&log.lock);
+    8000308a:	0df020ef          	jal	80005968 <release>
+      break;
+    }
+  }
+}
+    8000308e:	60e2                	ld	ra,24(sp)
+    80003090:	6442                	ld	s0,16(sp)
+    80003092:	64a2                	ld	s1,8(sp)
+    80003094:	6902                	ld	s2,0(sp)
+    80003096:	6105                	addi	sp,sp,32
+    80003098:	8082                	ret
+
+000000008000309a <end_op>:
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+    8000309a:	7139                	addi	sp,sp,-64
+    8000309c:	fc06                	sd	ra,56(sp)
+    8000309e:	f822                	sd	s0,48(sp)
+    800030a0:	f426                	sd	s1,40(sp)
+    800030a2:	f04a                	sd	s2,32(sp)
+    800030a4:	0080                	addi	s0,sp,64
+  int do_commit = 0;
+
+  acquire(&log.lock);
+    800030a6:	00015497          	auipc	s1,0x15
+    800030aa:	a0a48493          	addi	s1,s1,-1526 # 80017ab0 <log>
+    800030ae:	8526                	mv	a0,s1
+    800030b0:	021020ef          	jal	800058d0 <acquire>
+  log.outstanding -= 1;
+    800030b4:	509c                	lw	a5,32(s1)
+    800030b6:	37fd                	addiw	a5,a5,-1
+    800030b8:	0007891b          	sext.w	s2,a5
+    800030bc:	d09c                	sw	a5,32(s1)
+  if(log.committing)
+    800030be:	50dc                	lw	a5,36(s1)
+    800030c0:	ef9d                	bnez	a5,800030fe <end_op+0x64>
+    panic("log.committing");
+  if(log.outstanding == 0){
+    800030c2:	04091763          	bnez	s2,80003110 <end_op+0x76>
+    do_commit = 1;
+    log.committing = 1;
+    800030c6:	00015497          	auipc	s1,0x15
+    800030ca:	9ea48493          	addi	s1,s1,-1558 # 80017ab0 <log>
+    800030ce:	4785                	li	a5,1
+    800030d0:	d0dc                	sw	a5,36(s1)
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+    800030d2:	8526                	mv	a0,s1
+    800030d4:	095020ef          	jal	80005968 <release>
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+    800030d8:	54dc                	lw	a5,44(s1)
+    800030da:	04f04b63          	bgtz	a5,80003130 <end_op+0x96>
+    acquire(&log.lock);
+    800030de:	00015497          	auipc	s1,0x15
+    800030e2:	9d248493          	addi	s1,s1,-1582 # 80017ab0 <log>
+    800030e6:	8526                	mv	a0,s1
+    800030e8:	7e8020ef          	jal	800058d0 <acquire>
+    log.committing = 0;
+    800030ec:	0204a223          	sw	zero,36(s1)
+    wakeup(&log);
+    800030f0:	8526                	mv	a0,s1
+    800030f2:	ad8fe0ef          	jal	800013ca <wakeup>
+    release(&log.lock);
+    800030f6:	8526                	mv	a0,s1
+    800030f8:	071020ef          	jal	80005968 <release>
+}
+    800030fc:	a025                	j	80003124 <end_op+0x8a>
+    800030fe:	ec4e                	sd	s3,24(sp)
+    80003100:	e852                	sd	s4,16(sp)
+    80003102:	e456                	sd	s5,8(sp)
+    panic("log.committing");
+    80003104:	00004517          	auipc	a0,0x4
+    80003108:	4dc50513          	addi	a0,a0,1244 # 800075e0 <etext+0x5e0>
+    8000310c:	496020ef          	jal	800055a2 <panic>
+    wakeup(&log);
+    80003110:	00015497          	auipc	s1,0x15
+    80003114:	9a048493          	addi	s1,s1,-1632 # 80017ab0 <log>
+    80003118:	8526                	mv	a0,s1
+    8000311a:	ab0fe0ef          	jal	800013ca <wakeup>
+  release(&log.lock);
+    8000311e:	8526                	mv	a0,s1
+    80003120:	049020ef          	jal	80005968 <release>
+}
+    80003124:	70e2                	ld	ra,56(sp)
+    80003126:	7442                	ld	s0,48(sp)
+    80003128:	74a2                	ld	s1,40(sp)
+    8000312a:	7902                	ld	s2,32(sp)
+    8000312c:	6121                	addi	sp,sp,64
+    8000312e:	8082                	ret
+    80003130:	ec4e                	sd	s3,24(sp)
+    80003132:	e852                	sd	s4,16(sp)
+    80003134:	e456                	sd	s5,8(sp)
+  for (tail = 0; tail < log.lh.n; tail++) {
+    80003136:	00015a97          	auipc	s5,0x15
+    8000313a:	9aaa8a93          	addi	s5,s5,-1622 # 80017ae0 <log+0x30>
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+    8000313e:	00015a17          	auipc	s4,0x15
+    80003142:	972a0a13          	addi	s4,s4,-1678 # 80017ab0 <log>
+    80003146:	018a2583          	lw	a1,24(s4)
+    8000314a:	012585bb          	addw	a1,a1,s2
+    8000314e:	2585                	addiw	a1,a1,1
+    80003150:	028a2503          	lw	a0,40(s4)
+    80003154:	f0ffe0ef          	jal	80002062 <bread>
+    80003158:	84aa                	mv	s1,a0
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+    8000315a:	000aa583          	lw	a1,0(s5)
+    8000315e:	028a2503          	lw	a0,40(s4)
+    80003162:	f01fe0ef          	jal	80002062 <bread>
+    80003166:	89aa                	mv	s3,a0
+    memmove(to->data, from->data, BSIZE);
+    80003168:	40000613          	li	a2,1024
+    8000316c:	05850593          	addi	a1,a0,88
+    80003170:	05848513          	addi	a0,s1,88
+    80003174:	878fd0ef          	jal	800001ec <memmove>
+    bwrite(to);  // write the log
+    80003178:	8526                	mv	a0,s1
+    8000317a:	fbffe0ef          	jal	80002138 <bwrite>
+    brelse(from);
+    8000317e:	854e                	mv	a0,s3
+    80003180:	febfe0ef          	jal	8000216a <brelse>
+    brelse(to);
+    80003184:	8526                	mv	a0,s1
+    80003186:	fe5fe0ef          	jal	8000216a <brelse>
+  for (tail = 0; tail < log.lh.n; tail++) {
+    8000318a:	2905                	addiw	s2,s2,1
+    8000318c:	0a91                	addi	s5,s5,4
+    8000318e:	02ca2783          	lw	a5,44(s4)
+    80003192:	faf94ae3          	blt	s2,a5,80003146 <end_op+0xac>
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+    80003196:	d11ff0ef          	jal	80002ea6 <write_head>
+    install_trans(0); // Now install writes to home locations
+    8000319a:	4501                	li	a0,0
+    8000319c:	d69ff0ef          	jal	80002f04 <install_trans>
+    log.lh.n = 0;
+    800031a0:	00015797          	auipc	a5,0x15
+    800031a4:	9207ae23          	sw	zero,-1732(a5) # 80017adc <log+0x2c>
+    write_head();    // Erase the transaction from the log
+    800031a8:	cffff0ef          	jal	80002ea6 <write_head>
+    800031ac:	69e2                	ld	s3,24(sp)
+    800031ae:	6a42                	ld	s4,16(sp)
+    800031b0:	6aa2                	ld	s5,8(sp)
+    800031b2:	b735                	j	800030de <end_op+0x44>
+
+00000000800031b4 <log_write>:
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+    800031b4:	1101                	addi	sp,sp,-32
+    800031b6:	ec06                	sd	ra,24(sp)
+    800031b8:	e822                	sd	s0,16(sp)
+    800031ba:	e426                	sd	s1,8(sp)
+    800031bc:	e04a                	sd	s2,0(sp)
+    800031be:	1000                	addi	s0,sp,32
+    800031c0:	84aa                	mv	s1,a0
+  int i;
+
+  acquire(&log.lock);
+    800031c2:	00015917          	auipc	s2,0x15
+    800031c6:	8ee90913          	addi	s2,s2,-1810 # 80017ab0 <log>
+    800031ca:	854a                	mv	a0,s2
+    800031cc:	704020ef          	jal	800058d0 <acquire>
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+    800031d0:	02c92603          	lw	a2,44(s2)
+    800031d4:	47f5                	li	a5,29
+    800031d6:	06c7c363          	blt	a5,a2,8000323c <log_write+0x88>
+    800031da:	00015797          	auipc	a5,0x15
+    800031de:	8f27a783          	lw	a5,-1806(a5) # 80017acc <log+0x1c>
+    800031e2:	37fd                	addiw	a5,a5,-1
+    800031e4:	04f65c63          	bge	a2,a5,8000323c <log_write+0x88>
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    800031e8:	00015797          	auipc	a5,0x15
+    800031ec:	8e87a783          	lw	a5,-1816(a5) # 80017ad0 <log+0x20>
+    800031f0:	04f05c63          	blez	a5,80003248 <log_write+0x94>
+    panic("log_write outside of trans");
+
+  for (i = 0; i < log.lh.n; i++) {
+    800031f4:	4781                	li	a5,0
+    800031f6:	04c05f63          	blez	a2,80003254 <log_write+0xa0>
+    if (log.lh.block[i] == b->blockno)   // log absorption
+    800031fa:	44cc                	lw	a1,12(s1)
+    800031fc:	00015717          	auipc	a4,0x15
+    80003200:	8e470713          	addi	a4,a4,-1820 # 80017ae0 <log+0x30>
+  for (i = 0; i < log.lh.n; i++) {
+    80003204:	4781                	li	a5,0
+    if (log.lh.block[i] == b->blockno)   // log absorption
+    80003206:	4314                	lw	a3,0(a4)
+    80003208:	04b68663          	beq	a3,a1,80003254 <log_write+0xa0>
+  for (i = 0; i < log.lh.n; i++) {
+    8000320c:	2785                	addiw	a5,a5,1
+    8000320e:	0711                	addi	a4,a4,4
+    80003210:	fef61be3          	bne	a2,a5,80003206 <log_write+0x52>
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+    80003214:	0621                	addi	a2,a2,8
+    80003216:	060a                	slli	a2,a2,0x2
+    80003218:	00015797          	auipc	a5,0x15
+    8000321c:	89878793          	addi	a5,a5,-1896 # 80017ab0 <log>
+    80003220:	97b2                	add	a5,a5,a2
+    80003222:	44d8                	lw	a4,12(s1)
+    80003224:	cb98                	sw	a4,16(a5)
+  if (i == log.lh.n) {  // Add new block to log?
+    bpin(b);
+    80003226:	8526                	mv	a0,s1
+    80003228:	fcbfe0ef          	jal	800021f2 <bpin>
+    log.lh.n++;
+    8000322c:	00015717          	auipc	a4,0x15
+    80003230:	88470713          	addi	a4,a4,-1916 # 80017ab0 <log>
+    80003234:	575c                	lw	a5,44(a4)
+    80003236:	2785                	addiw	a5,a5,1
+    80003238:	d75c                	sw	a5,44(a4)
+    8000323a:	a80d                	j	8000326c <log_write+0xb8>
+    panic("too big a transaction");
+    8000323c:	00004517          	auipc	a0,0x4
+    80003240:	3b450513          	addi	a0,a0,948 # 800075f0 <etext+0x5f0>
+    80003244:	35e020ef          	jal	800055a2 <panic>
+    panic("log_write outside of trans");
+    80003248:	00004517          	auipc	a0,0x4
+    8000324c:	3c050513          	addi	a0,a0,960 # 80007608 <etext+0x608>
+    80003250:	352020ef          	jal	800055a2 <panic>
+  log.lh.block[i] = b->blockno;
+    80003254:	00878693          	addi	a3,a5,8
+    80003258:	068a                	slli	a3,a3,0x2
+    8000325a:	00015717          	auipc	a4,0x15
+    8000325e:	85670713          	addi	a4,a4,-1962 # 80017ab0 <log>
+    80003262:	9736                	add	a4,a4,a3
+    80003264:	44d4                	lw	a3,12(s1)
+    80003266:	cb14                	sw	a3,16(a4)
+  if (i == log.lh.n) {  // Add new block to log?
+    80003268:	faf60fe3          	beq	a2,a5,80003226 <log_write+0x72>
+  }
+  release(&log.lock);
+    8000326c:	00015517          	auipc	a0,0x15
+    80003270:	84450513          	addi	a0,a0,-1980 # 80017ab0 <log>
+    80003274:	6f4020ef          	jal	80005968 <release>
+}
+    80003278:	60e2                	ld	ra,24(sp)
+    8000327a:	6442                	ld	s0,16(sp)
+    8000327c:	64a2                	ld	s1,8(sp)
+    8000327e:	6902                	ld	s2,0(sp)
+    80003280:	6105                	addi	sp,sp,32
+    80003282:	8082                	ret
+
+0000000080003284 <initsleeplock>:
+#include "proc.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+    80003284:	1101                	addi	sp,sp,-32
+    80003286:	ec06                	sd	ra,24(sp)
+    80003288:	e822                	sd	s0,16(sp)
+    8000328a:	e426                	sd	s1,8(sp)
+    8000328c:	e04a                	sd	s2,0(sp)
+    8000328e:	1000                	addi	s0,sp,32
+    80003290:	84aa                	mv	s1,a0
+    80003292:	892e                	mv	s2,a1
+  initlock(&lk->lk, "sleep lock");
+    80003294:	00004597          	auipc	a1,0x4
+    80003298:	39458593          	addi	a1,a1,916 # 80007628 <etext+0x628>
+    8000329c:	0521                	addi	a0,a0,8
+    8000329e:	5b2020ef          	jal	80005850 <initlock>
+  lk->name = name;
+    800032a2:	0324b023          	sd	s2,32(s1)
+  lk->locked = 0;
+    800032a6:	0004a023          	sw	zero,0(s1)
+  lk->pid = 0;
+    800032aa:	0204a423          	sw	zero,40(s1)
+}
+    800032ae:	60e2                	ld	ra,24(sp)
+    800032b0:	6442                	ld	s0,16(sp)
+    800032b2:	64a2                	ld	s1,8(sp)
+    800032b4:	6902                	ld	s2,0(sp)
+    800032b6:	6105                	addi	sp,sp,32
+    800032b8:	8082                	ret
+
+00000000800032ba <acquiresleep>:
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+    800032ba:	1101                	addi	sp,sp,-32
+    800032bc:	ec06                	sd	ra,24(sp)
+    800032be:	e822                	sd	s0,16(sp)
+    800032c0:	e426                	sd	s1,8(sp)
+    800032c2:	e04a                	sd	s2,0(sp)
+    800032c4:	1000                	addi	s0,sp,32
+    800032c6:	84aa                	mv	s1,a0
+  acquire(&lk->lk);
+    800032c8:	00850913          	addi	s2,a0,8
+    800032cc:	854a                	mv	a0,s2
+    800032ce:	602020ef          	jal	800058d0 <acquire>
+  while (lk->locked) {
+    800032d2:	409c                	lw	a5,0(s1)
+    800032d4:	c799                	beqz	a5,800032e2 <acquiresleep+0x28>
+    sleep(lk, &lk->lk);
+    800032d6:	85ca                	mv	a1,s2
+    800032d8:	8526                	mv	a0,s1
+    800032da:	8a4fe0ef          	jal	8000137e <sleep>
+  while (lk->locked) {
+    800032de:	409c                	lw	a5,0(s1)
+    800032e0:	fbfd                	bnez	a5,800032d6 <acquiresleep+0x1c>
+  }
+  lk->locked = 1;
+    800032e2:	4785                	li	a5,1
+    800032e4:	c09c                	sw	a5,0(s1)
+  lk->pid = myproc()->pid;
+    800032e6:	ac3fd0ef          	jal	80000da8 <myproc>
+    800032ea:	591c                	lw	a5,48(a0)
+    800032ec:	d49c                	sw	a5,40(s1)
+  release(&lk->lk);
+    800032ee:	854a                	mv	a0,s2
+    800032f0:	678020ef          	jal	80005968 <release>
+}
+    800032f4:	60e2                	ld	ra,24(sp)
+    800032f6:	6442                	ld	s0,16(sp)
+    800032f8:	64a2                	ld	s1,8(sp)
+    800032fa:	6902                	ld	s2,0(sp)
+    800032fc:	6105                	addi	sp,sp,32
+    800032fe:	8082                	ret
+
+0000000080003300 <releasesleep>:
+
+void
+releasesleep(struct sleeplock *lk)
+{
+    80003300:	1101                	addi	sp,sp,-32
+    80003302:	ec06                	sd	ra,24(sp)
+    80003304:	e822                	sd	s0,16(sp)
+    80003306:	e426                	sd	s1,8(sp)
+    80003308:	e04a                	sd	s2,0(sp)
+    8000330a:	1000                	addi	s0,sp,32
+    8000330c:	84aa                	mv	s1,a0
+  acquire(&lk->lk);
+    8000330e:	00850913          	addi	s2,a0,8
+    80003312:	854a                	mv	a0,s2
+    80003314:	5bc020ef          	jal	800058d0 <acquire>
+  lk->locked = 0;
+    80003318:	0004a023          	sw	zero,0(s1)
+  lk->pid = 0;
+    8000331c:	0204a423          	sw	zero,40(s1)
+  wakeup(lk);
+    80003320:	8526                	mv	a0,s1
+    80003322:	8a8fe0ef          	jal	800013ca <wakeup>
+  release(&lk->lk);
+    80003326:	854a                	mv	a0,s2
+    80003328:	640020ef          	jal	80005968 <release>
+}
+    8000332c:	60e2                	ld	ra,24(sp)
+    8000332e:	6442                	ld	s0,16(sp)
+    80003330:	64a2                	ld	s1,8(sp)
+    80003332:	6902                	ld	s2,0(sp)
+    80003334:	6105                	addi	sp,sp,32
+    80003336:	8082                	ret
+
+0000000080003338 <holdingsleep>:
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+    80003338:	7179                	addi	sp,sp,-48
+    8000333a:	f406                	sd	ra,40(sp)
+    8000333c:	f022                	sd	s0,32(sp)
+    8000333e:	ec26                	sd	s1,24(sp)
+    80003340:	e84a                	sd	s2,16(sp)
+    80003342:	1800                	addi	s0,sp,48
+    80003344:	84aa                	mv	s1,a0
+  int r;
+  
+  acquire(&lk->lk);
+    80003346:	00850913          	addi	s2,a0,8
+    8000334a:	854a                	mv	a0,s2
+    8000334c:	584020ef          	jal	800058d0 <acquire>
+  r = lk->locked && (lk->pid == myproc()->pid);
+    80003350:	409c                	lw	a5,0(s1)
+    80003352:	ef81                	bnez	a5,8000336a <holdingsleep+0x32>
+    80003354:	4481                	li	s1,0
+  release(&lk->lk);
+    80003356:	854a                	mv	a0,s2
+    80003358:	610020ef          	jal	80005968 <release>
+  return r;
+}
+    8000335c:	8526                	mv	a0,s1
+    8000335e:	70a2                	ld	ra,40(sp)
+    80003360:	7402                	ld	s0,32(sp)
+    80003362:	64e2                	ld	s1,24(sp)
+    80003364:	6942                	ld	s2,16(sp)
+    80003366:	6145                	addi	sp,sp,48
+    80003368:	8082                	ret
+    8000336a:	e44e                	sd	s3,8(sp)
+  r = lk->locked && (lk->pid == myproc()->pid);
+    8000336c:	0284a983          	lw	s3,40(s1)
+    80003370:	a39fd0ef          	jal	80000da8 <myproc>
+    80003374:	5904                	lw	s1,48(a0)
+    80003376:	413484b3          	sub	s1,s1,s3
+    8000337a:	0014b493          	seqz	s1,s1
+    8000337e:	69a2                	ld	s3,8(sp)
+    80003380:	bfd9                	j	80003356 <holdingsleep+0x1e>
+
+0000000080003382 <fileinit>:
+  struct file file[NFILE];
+} ftable;
+
+void
+fileinit(void)
+{
+    80003382:	1141                	addi	sp,sp,-16
+    80003384:	e406                	sd	ra,8(sp)
+    80003386:	e022                	sd	s0,0(sp)
+    80003388:	0800                	addi	s0,sp,16
+  initlock(&ftable.lock, "ftable");
+    8000338a:	00004597          	auipc	a1,0x4
+    8000338e:	2ae58593          	addi	a1,a1,686 # 80007638 <etext+0x638>
+    80003392:	00015517          	auipc	a0,0x15
+    80003396:	86650513          	addi	a0,a0,-1946 # 80017bf8 <ftable>
+    8000339a:	4b6020ef          	jal	80005850 <initlock>
+}
+    8000339e:	60a2                	ld	ra,8(sp)
+    800033a0:	6402                	ld	s0,0(sp)
+    800033a2:	0141                	addi	sp,sp,16
+    800033a4:	8082                	ret
+
+00000000800033a6 <filealloc>:
+
+// Allocate a file structure.
+struct file*
+filealloc(void)
+{
+    800033a6:	1101                	addi	sp,sp,-32
+    800033a8:	ec06                	sd	ra,24(sp)
+    800033aa:	e822                	sd	s0,16(sp)
+    800033ac:	e426                	sd	s1,8(sp)
+    800033ae:	1000                	addi	s0,sp,32
+  struct file *f;
+
+  acquire(&ftable.lock);
+    800033b0:	00015517          	auipc	a0,0x15
+    800033b4:	84850513          	addi	a0,a0,-1976 # 80017bf8 <ftable>
+    800033b8:	518020ef          	jal	800058d0 <acquire>
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    800033bc:	00015497          	auipc	s1,0x15
+    800033c0:	85448493          	addi	s1,s1,-1964 # 80017c10 <ftable+0x18>
+    800033c4:	00015717          	auipc	a4,0x15
+    800033c8:	7ec70713          	addi	a4,a4,2028 # 80018bb0 <disk>
+    if(f->ref == 0){
+    800033cc:	40dc                	lw	a5,4(s1)
+    800033ce:	cf89                	beqz	a5,800033e8 <filealloc+0x42>
+  for(f = ftable.file; f < ftable.file + NFILE; f++){
+    800033d0:	02848493          	addi	s1,s1,40
+    800033d4:	fee49ce3          	bne	s1,a4,800033cc <filealloc+0x26>
+      f->ref = 1;
+      release(&ftable.lock);
+      return f;
+    }
+  }
+  release(&ftable.lock);
+    800033d8:	00015517          	auipc	a0,0x15
+    800033dc:	82050513          	addi	a0,a0,-2016 # 80017bf8 <ftable>
+    800033e0:	588020ef          	jal	80005968 <release>
+  return 0;
+    800033e4:	4481                	li	s1,0
+    800033e6:	a809                	j	800033f8 <filealloc+0x52>
+      f->ref = 1;
+    800033e8:	4785                	li	a5,1
+    800033ea:	c0dc                	sw	a5,4(s1)
+      release(&ftable.lock);
+    800033ec:	00015517          	auipc	a0,0x15
+    800033f0:	80c50513          	addi	a0,a0,-2036 # 80017bf8 <ftable>
+    800033f4:	574020ef          	jal	80005968 <release>
+}
+    800033f8:	8526                	mv	a0,s1
+    800033fa:	60e2                	ld	ra,24(sp)
+    800033fc:	6442                	ld	s0,16(sp)
+    800033fe:	64a2                	ld	s1,8(sp)
+    80003400:	6105                	addi	sp,sp,32
+    80003402:	8082                	ret
+
+0000000080003404 <filedup>:
+
+// Increment ref count for file f.
+struct file*
+filedup(struct file *f)
+{
+    80003404:	1101                	addi	sp,sp,-32
+    80003406:	ec06                	sd	ra,24(sp)
+    80003408:	e822                	sd	s0,16(sp)
+    8000340a:	e426                	sd	s1,8(sp)
+    8000340c:	1000                	addi	s0,sp,32
+    8000340e:	84aa                	mv	s1,a0
+  acquire(&ftable.lock);
+    80003410:	00014517          	auipc	a0,0x14
+    80003414:	7e850513          	addi	a0,a0,2024 # 80017bf8 <ftable>
+    80003418:	4b8020ef          	jal	800058d0 <acquire>
+  if(f->ref < 1)
+    8000341c:	40dc                	lw	a5,4(s1)
+    8000341e:	02f05063          	blez	a5,8000343e <filedup+0x3a>
+    panic("filedup");
+  f->ref++;
+    80003422:	2785                	addiw	a5,a5,1
+    80003424:	c0dc                	sw	a5,4(s1)
+  release(&ftable.lock);
+    80003426:	00014517          	auipc	a0,0x14
+    8000342a:	7d250513          	addi	a0,a0,2002 # 80017bf8 <ftable>
+    8000342e:	53a020ef          	jal	80005968 <release>
+  return f;
+}
+    80003432:	8526                	mv	a0,s1
+    80003434:	60e2                	ld	ra,24(sp)
+    80003436:	6442                	ld	s0,16(sp)
+    80003438:	64a2                	ld	s1,8(sp)
+    8000343a:	6105                	addi	sp,sp,32
+    8000343c:	8082                	ret
+    panic("filedup");
+    8000343e:	00004517          	auipc	a0,0x4
+    80003442:	20250513          	addi	a0,a0,514 # 80007640 <etext+0x640>
+    80003446:	15c020ef          	jal	800055a2 <panic>
+
+000000008000344a <fileclose>:
+
+// Close file f.  (Decrement ref count, close when reaches 0.)
+void
+fileclose(struct file *f)
+{
+    8000344a:	7139                	addi	sp,sp,-64
+    8000344c:	fc06                	sd	ra,56(sp)
+    8000344e:	f822                	sd	s0,48(sp)
+    80003450:	f426                	sd	s1,40(sp)
+    80003452:	0080                	addi	s0,sp,64
+    80003454:	84aa                	mv	s1,a0
+  struct file ff;
+
+  acquire(&ftable.lock);
+    80003456:	00014517          	auipc	a0,0x14
+    8000345a:	7a250513          	addi	a0,a0,1954 # 80017bf8 <ftable>
+    8000345e:	472020ef          	jal	800058d0 <acquire>
+  if(f->ref < 1)
+    80003462:	40dc                	lw	a5,4(s1)
+    80003464:	04f05a63          	blez	a5,800034b8 <fileclose+0x6e>
+    panic("fileclose");
+  if(--f->ref > 0){
+    80003468:	37fd                	addiw	a5,a5,-1
+    8000346a:	0007871b          	sext.w	a4,a5
+    8000346e:	c0dc                	sw	a5,4(s1)
+    80003470:	04e04e63          	bgtz	a4,800034cc <fileclose+0x82>
+    80003474:	f04a                	sd	s2,32(sp)
+    80003476:	ec4e                	sd	s3,24(sp)
+    80003478:	e852                	sd	s4,16(sp)
+    8000347a:	e456                	sd	s5,8(sp)
+    release(&ftable.lock);
+    return;
+  }
+  ff = *f;
+    8000347c:	0004a903          	lw	s2,0(s1)
+    80003480:	0094ca83          	lbu	s5,9(s1)
+    80003484:	0104ba03          	ld	s4,16(s1)
+    80003488:	0184b983          	ld	s3,24(s1)
+  f->ref = 0;
+    8000348c:	0004a223          	sw	zero,4(s1)
+  f->type = FD_NONE;
+    80003490:	0004a023          	sw	zero,0(s1)
+  release(&ftable.lock);
+    80003494:	00014517          	auipc	a0,0x14
+    80003498:	76450513          	addi	a0,a0,1892 # 80017bf8 <ftable>
+    8000349c:	4cc020ef          	jal	80005968 <release>
+
+  if(ff.type == FD_PIPE){
+    800034a0:	4785                	li	a5,1
+    800034a2:	04f90063          	beq	s2,a5,800034e2 <fileclose+0x98>
+    pipeclose(ff.pipe, ff.writable);
+  } else if(ff.type == FD_INODE || ff.type == FD_DEVICE){
+    800034a6:	3979                	addiw	s2,s2,-2
+    800034a8:	4785                	li	a5,1
+    800034aa:	0527f563          	bgeu	a5,s2,800034f4 <fileclose+0xaa>
+    800034ae:	7902                	ld	s2,32(sp)
+    800034b0:	69e2                	ld	s3,24(sp)
+    800034b2:	6a42                	ld	s4,16(sp)
+    800034b4:	6aa2                	ld	s5,8(sp)
+    800034b6:	a00d                	j	800034d8 <fileclose+0x8e>
+    800034b8:	f04a                	sd	s2,32(sp)
+    800034ba:	ec4e                	sd	s3,24(sp)
+    800034bc:	e852                	sd	s4,16(sp)
+    800034be:	e456                	sd	s5,8(sp)
+    panic("fileclose");
+    800034c0:	00004517          	auipc	a0,0x4
+    800034c4:	18850513          	addi	a0,a0,392 # 80007648 <etext+0x648>
+    800034c8:	0da020ef          	jal	800055a2 <panic>
+    release(&ftable.lock);
+    800034cc:	00014517          	auipc	a0,0x14
+    800034d0:	72c50513          	addi	a0,a0,1836 # 80017bf8 <ftable>
+    800034d4:	494020ef          	jal	80005968 <release>
+    begin_op();
+    iput(ff.ip);
+    end_op();
+  }
+}
+    800034d8:	70e2                	ld	ra,56(sp)
+    800034da:	7442                	ld	s0,48(sp)
+    800034dc:	74a2                	ld	s1,40(sp)
+    800034de:	6121                	addi	sp,sp,64
+    800034e0:	8082                	ret
+    pipeclose(ff.pipe, ff.writable);
+    800034e2:	85d6                	mv	a1,s5
+    800034e4:	8552                	mv	a0,s4
+    800034e6:	38a000ef          	jal	80003870 <pipeclose>
+    800034ea:	7902                	ld	s2,32(sp)
+    800034ec:	69e2                	ld	s3,24(sp)
+    800034ee:	6a42                	ld	s4,16(sp)
+    800034f0:	6aa2                	ld	s5,8(sp)
+    800034f2:	b7dd                	j	800034d8 <fileclose+0x8e>
+    begin_op();
+    800034f4:	b3dff0ef          	jal	80003030 <begin_op>
+    iput(ff.ip);
+    800034f8:	854e                	mv	a0,s3
+    800034fa:	c22ff0ef          	jal	8000291c <iput>
+    end_op();
+    800034fe:	b9dff0ef          	jal	8000309a <end_op>
+    80003502:	7902                	ld	s2,32(sp)
+    80003504:	69e2                	ld	s3,24(sp)
+    80003506:	6a42                	ld	s4,16(sp)
+    80003508:	6aa2                	ld	s5,8(sp)
+    8000350a:	b7f9                	j	800034d8 <fileclose+0x8e>
+
+000000008000350c <filestat>:
+
+// Get metadata about file f.
+// addr is a user virtual address, pointing to a struct stat.
+int
+filestat(struct file *f, uint64 addr)
+{
+    8000350c:	715d                	addi	sp,sp,-80
+    8000350e:	e486                	sd	ra,72(sp)
+    80003510:	e0a2                	sd	s0,64(sp)
+    80003512:	fc26                	sd	s1,56(sp)
+    80003514:	f44e                	sd	s3,40(sp)
+    80003516:	0880                	addi	s0,sp,80
+    80003518:	84aa                	mv	s1,a0
+    8000351a:	89ae                	mv	s3,a1
+  struct proc *p = myproc();
+    8000351c:	88dfd0ef          	jal	80000da8 <myproc>
+  struct stat st;
+  
+  if(f->type == FD_INODE || f->type == FD_DEVICE){
+    80003520:	409c                	lw	a5,0(s1)
+    80003522:	37f9                	addiw	a5,a5,-2
+    80003524:	4705                	li	a4,1
+    80003526:	04f76063          	bltu	a4,a5,80003566 <filestat+0x5a>
+    8000352a:	f84a                	sd	s2,48(sp)
+    8000352c:	892a                	mv	s2,a0
+    ilock(f->ip);
+    8000352e:	6c88                	ld	a0,24(s1)
+    80003530:	a6aff0ef          	jal	8000279a <ilock>
+    stati(f->ip, &st);
+    80003534:	fb840593          	addi	a1,s0,-72
+    80003538:	6c88                	ld	a0,24(s1)
+    8000353a:	c8aff0ef          	jal	800029c4 <stati>
+    iunlock(f->ip);
+    8000353e:	6c88                	ld	a0,24(s1)
+    80003540:	b08ff0ef          	jal	80002848 <iunlock>
+    if(copyout(p->pagetable, addr, (char *)&st, sizeof(st)) < 0)
+    80003544:	46e1                	li	a3,24
+    80003546:	fb840613          	addi	a2,s0,-72
+    8000354a:	85ce                	mv	a1,s3
+    8000354c:	05093503          	ld	a0,80(s2)
+    80003550:	ccafd0ef          	jal	80000a1a <copyout>
+    80003554:	41f5551b          	sraiw	a0,a0,0x1f
+    80003558:	7942                	ld	s2,48(sp)
+      return -1;
+    return 0;
+  }
+  return -1;
+}
+    8000355a:	60a6                	ld	ra,72(sp)
+    8000355c:	6406                	ld	s0,64(sp)
+    8000355e:	74e2                	ld	s1,56(sp)
+    80003560:	79a2                	ld	s3,40(sp)
+    80003562:	6161                	addi	sp,sp,80
+    80003564:	8082                	ret
+  return -1;
+    80003566:	557d                	li	a0,-1
+    80003568:	bfcd                	j	8000355a <filestat+0x4e>
+
+000000008000356a <fileread>:
+
+// Read from file f.
+// addr is a user virtual address.
+int
+fileread(struct file *f, uint64 addr, int n)
+{
+    8000356a:	7179                	addi	sp,sp,-48
+    8000356c:	f406                	sd	ra,40(sp)
+    8000356e:	f022                	sd	s0,32(sp)
+    80003570:	e84a                	sd	s2,16(sp)
+    80003572:	1800                	addi	s0,sp,48
+  int r = 0;
+
+  if(f->readable == 0)
+    80003574:	00854783          	lbu	a5,8(a0)
+    80003578:	cfd1                	beqz	a5,80003614 <fileread+0xaa>
+    8000357a:	ec26                	sd	s1,24(sp)
+    8000357c:	e44e                	sd	s3,8(sp)
+    8000357e:	84aa                	mv	s1,a0
+    80003580:	89ae                	mv	s3,a1
+    80003582:	8932                	mv	s2,a2
+    return -1;
+
+  if(f->type == FD_PIPE){
+    80003584:	411c                	lw	a5,0(a0)
+    80003586:	4705                	li	a4,1
+    80003588:	04e78363          	beq	a5,a4,800035ce <fileread+0x64>
+    r = piperead(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    8000358c:	470d                	li	a4,3
+    8000358e:	04e78763          	beq	a5,a4,800035dc <fileread+0x72>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
+      return -1;
+    r = devsw[f->major].read(1, addr, n);
+  } else if(f->type == FD_INODE){
+    80003592:	4709                	li	a4,2
+    80003594:	06e79a63          	bne	a5,a4,80003608 <fileread+0x9e>
+    ilock(f->ip);
+    80003598:	6d08                	ld	a0,24(a0)
+    8000359a:	a00ff0ef          	jal	8000279a <ilock>
+    if((r = readi(f->ip, 1, addr, f->off, n)) > 0)
+    8000359e:	874a                	mv	a4,s2
+    800035a0:	5094                	lw	a3,32(s1)
+    800035a2:	864e                	mv	a2,s3
+    800035a4:	4585                	li	a1,1
+    800035a6:	6c88                	ld	a0,24(s1)
+    800035a8:	c46ff0ef          	jal	800029ee <readi>
+    800035ac:	892a                	mv	s2,a0
+    800035ae:	00a05563          	blez	a0,800035b8 <fileread+0x4e>
+      f->off += r;
+    800035b2:	509c                	lw	a5,32(s1)
+    800035b4:	9fa9                	addw	a5,a5,a0
+    800035b6:	d09c                	sw	a5,32(s1)
+    iunlock(f->ip);
+    800035b8:	6c88                	ld	a0,24(s1)
+    800035ba:	a8eff0ef          	jal	80002848 <iunlock>
+    800035be:	64e2                	ld	s1,24(sp)
+    800035c0:	69a2                	ld	s3,8(sp)
+  } else {
+    panic("fileread");
+  }
+
+  return r;
+}
+    800035c2:	854a                	mv	a0,s2
+    800035c4:	70a2                	ld	ra,40(sp)
+    800035c6:	7402                	ld	s0,32(sp)
+    800035c8:	6942                	ld	s2,16(sp)
+    800035ca:	6145                	addi	sp,sp,48
+    800035cc:	8082                	ret
+    r = piperead(f->pipe, addr, n);
+    800035ce:	6908                	ld	a0,16(a0)
+    800035d0:	3dc000ef          	jal	800039ac <piperead>
+    800035d4:	892a                	mv	s2,a0
+    800035d6:	64e2                	ld	s1,24(sp)
+    800035d8:	69a2                	ld	s3,8(sp)
+    800035da:	b7e5                	j	800035c2 <fileread+0x58>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].read)
+    800035dc:	02451783          	lh	a5,36(a0)
+    800035e0:	03079693          	slli	a3,a5,0x30
+    800035e4:	92c1                	srli	a3,a3,0x30
+    800035e6:	4725                	li	a4,9
+    800035e8:	02d76863          	bltu	a4,a3,80003618 <fileread+0xae>
+    800035ec:	0792                	slli	a5,a5,0x4
+    800035ee:	00014717          	auipc	a4,0x14
+    800035f2:	56a70713          	addi	a4,a4,1386 # 80017b58 <devsw>
+    800035f6:	97ba                	add	a5,a5,a4
+    800035f8:	639c                	ld	a5,0(a5)
+    800035fa:	c39d                	beqz	a5,80003620 <fileread+0xb6>
+    r = devsw[f->major].read(1, addr, n);
+    800035fc:	4505                	li	a0,1
+    800035fe:	9782                	jalr	a5
+    80003600:	892a                	mv	s2,a0
+    80003602:	64e2                	ld	s1,24(sp)
+    80003604:	69a2                	ld	s3,8(sp)
+    80003606:	bf75                	j	800035c2 <fileread+0x58>
+    panic("fileread");
+    80003608:	00004517          	auipc	a0,0x4
+    8000360c:	05050513          	addi	a0,a0,80 # 80007658 <etext+0x658>
+    80003610:	793010ef          	jal	800055a2 <panic>
+    return -1;
+    80003614:	597d                	li	s2,-1
+    80003616:	b775                	j	800035c2 <fileread+0x58>
+      return -1;
+    80003618:	597d                	li	s2,-1
+    8000361a:	64e2                	ld	s1,24(sp)
+    8000361c:	69a2                	ld	s3,8(sp)
+    8000361e:	b755                	j	800035c2 <fileread+0x58>
+    80003620:	597d                	li	s2,-1
+    80003622:	64e2                	ld	s1,24(sp)
+    80003624:	69a2                	ld	s3,8(sp)
+    80003626:	bf71                	j	800035c2 <fileread+0x58>
+
+0000000080003628 <filewrite>:
+int
+filewrite(struct file *f, uint64 addr, int n)
+{
+  int r, ret = 0;
+
+  if(f->writable == 0)
+    80003628:	00954783          	lbu	a5,9(a0)
+    8000362c:	10078b63          	beqz	a5,80003742 <filewrite+0x11a>
+{
+    80003630:	715d                	addi	sp,sp,-80
+    80003632:	e486                	sd	ra,72(sp)
+    80003634:	e0a2                	sd	s0,64(sp)
+    80003636:	f84a                	sd	s2,48(sp)
+    80003638:	f052                	sd	s4,32(sp)
+    8000363a:	e85a                	sd	s6,16(sp)
+    8000363c:	0880                	addi	s0,sp,80
+    8000363e:	892a                	mv	s2,a0
+    80003640:	8b2e                	mv	s6,a1
+    80003642:	8a32                	mv	s4,a2
+    return -1;
+
+  if(f->type == FD_PIPE){
+    80003644:	411c                	lw	a5,0(a0)
+    80003646:	4705                	li	a4,1
+    80003648:	02e78763          	beq	a5,a4,80003676 <filewrite+0x4e>
+    ret = pipewrite(f->pipe, addr, n);
+  } else if(f->type == FD_DEVICE){
+    8000364c:	470d                	li	a4,3
+    8000364e:	02e78863          	beq	a5,a4,8000367e <filewrite+0x56>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+      return -1;
+    ret = devsw[f->major].write(1, addr, n);
+  } else if(f->type == FD_INODE){
+    80003652:	4709                	li	a4,2
+    80003654:	0ce79c63          	bne	a5,a4,8000372c <filewrite+0x104>
+    80003658:	f44e                	sd	s3,40(sp)
+    // and 2 blocks of slop for non-aligned writes.
+    // this really belongs lower down, since writei()
+    // might be writing a device like the console.
+    int max = ((MAXOPBLOCKS-1-1-2) / 2) * BSIZE;
+    int i = 0;
+    while(i < n){
+    8000365a:	0ac05863          	blez	a2,8000370a <filewrite+0xe2>
+    8000365e:	fc26                	sd	s1,56(sp)
+    80003660:	ec56                	sd	s5,24(sp)
+    80003662:	e45e                	sd	s7,8(sp)
+    80003664:	e062                	sd	s8,0(sp)
+    int i = 0;
+    80003666:	4981                	li	s3,0
+      int n1 = n - i;
+      if(n1 > max)
+    80003668:	6b85                	lui	s7,0x1
+    8000366a:	c00b8b93          	addi	s7,s7,-1024 # c00 <_entry-0x7ffff400>
+    8000366e:	6c05                	lui	s8,0x1
+    80003670:	c00c0c1b          	addiw	s8,s8,-1024 # c00 <_entry-0x7ffff400>
+    80003674:	a8b5                	j	800036f0 <filewrite+0xc8>
+    ret = pipewrite(f->pipe, addr, n);
+    80003676:	6908                	ld	a0,16(a0)
+    80003678:	250000ef          	jal	800038c8 <pipewrite>
+    8000367c:	a04d                	j	8000371e <filewrite+0xf6>
+    if(f->major < 0 || f->major >= NDEV || !devsw[f->major].write)
+    8000367e:	02451783          	lh	a5,36(a0)
+    80003682:	03079693          	slli	a3,a5,0x30
+    80003686:	92c1                	srli	a3,a3,0x30
+    80003688:	4725                	li	a4,9
+    8000368a:	0ad76e63          	bltu	a4,a3,80003746 <filewrite+0x11e>
+    8000368e:	0792                	slli	a5,a5,0x4
+    80003690:	00014717          	auipc	a4,0x14
+    80003694:	4c870713          	addi	a4,a4,1224 # 80017b58 <devsw>
+    80003698:	97ba                	add	a5,a5,a4
+    8000369a:	679c                	ld	a5,8(a5)
+    8000369c:	c7dd                	beqz	a5,8000374a <filewrite+0x122>
+    ret = devsw[f->major].write(1, addr, n);
+    8000369e:	4505                	li	a0,1
+    800036a0:	9782                	jalr	a5
+    800036a2:	a8b5                	j	8000371e <filewrite+0xf6>
+      if(n1 > max)
+    800036a4:	00048a9b          	sext.w	s5,s1
+        n1 = max;
+
+      begin_op();
+    800036a8:	989ff0ef          	jal	80003030 <begin_op>
+      ilock(f->ip);
+    800036ac:	01893503          	ld	a0,24(s2)
+    800036b0:	8eaff0ef          	jal	8000279a <ilock>
+      if ((r = writei(f->ip, 1, addr + i, f->off, n1)) > 0)
+    800036b4:	8756                	mv	a4,s5
+    800036b6:	02092683          	lw	a3,32(s2)
+    800036ba:	01698633          	add	a2,s3,s6
+    800036be:	4585                	li	a1,1
+    800036c0:	01893503          	ld	a0,24(s2)
+    800036c4:	c26ff0ef          	jal	80002aea <writei>
+    800036c8:	84aa                	mv	s1,a0
+    800036ca:	00a05763          	blez	a0,800036d8 <filewrite+0xb0>
+        f->off += r;
+    800036ce:	02092783          	lw	a5,32(s2)
+    800036d2:	9fa9                	addw	a5,a5,a0
+    800036d4:	02f92023          	sw	a5,32(s2)
+      iunlock(f->ip);
+    800036d8:	01893503          	ld	a0,24(s2)
+    800036dc:	96cff0ef          	jal	80002848 <iunlock>
+      end_op();
+    800036e0:	9bbff0ef          	jal	8000309a <end_op>
+
+      if(r != n1){
+    800036e4:	029a9563          	bne	s5,s1,8000370e <filewrite+0xe6>
+        // error from writei
+        break;
+      }
+      i += r;
+    800036e8:	013489bb          	addw	s3,s1,s3
+    while(i < n){
+    800036ec:	0149da63          	bge	s3,s4,80003700 <filewrite+0xd8>
+      int n1 = n - i;
+    800036f0:	413a04bb          	subw	s1,s4,s3
+      if(n1 > max)
+    800036f4:	0004879b          	sext.w	a5,s1
+    800036f8:	fafbd6e3          	bge	s7,a5,800036a4 <filewrite+0x7c>
+    800036fc:	84e2                	mv	s1,s8
+    800036fe:	b75d                	j	800036a4 <filewrite+0x7c>
+    80003700:	74e2                	ld	s1,56(sp)
+    80003702:	6ae2                	ld	s5,24(sp)
+    80003704:	6ba2                	ld	s7,8(sp)
+    80003706:	6c02                	ld	s8,0(sp)
+    80003708:	a039                	j	80003716 <filewrite+0xee>
+    int i = 0;
+    8000370a:	4981                	li	s3,0
+    8000370c:	a029                	j	80003716 <filewrite+0xee>
+    8000370e:	74e2                	ld	s1,56(sp)
+    80003710:	6ae2                	ld	s5,24(sp)
+    80003712:	6ba2                	ld	s7,8(sp)
+    80003714:	6c02                	ld	s8,0(sp)
+    }
+    ret = (i == n ? n : -1);
+    80003716:	033a1c63          	bne	s4,s3,8000374e <filewrite+0x126>
+    8000371a:	8552                	mv	a0,s4
+    8000371c:	79a2                	ld	s3,40(sp)
+  } else {
+    panic("filewrite");
+  }
+
+  return ret;
+}
+    8000371e:	60a6                	ld	ra,72(sp)
+    80003720:	6406                	ld	s0,64(sp)
+    80003722:	7942                	ld	s2,48(sp)
+    80003724:	7a02                	ld	s4,32(sp)
+    80003726:	6b42                	ld	s6,16(sp)
+    80003728:	6161                	addi	sp,sp,80
+    8000372a:	8082                	ret
+    8000372c:	fc26                	sd	s1,56(sp)
+    8000372e:	f44e                	sd	s3,40(sp)
+    80003730:	ec56                	sd	s5,24(sp)
+    80003732:	e45e                	sd	s7,8(sp)
+    80003734:	e062                	sd	s8,0(sp)
+    panic("filewrite");
+    80003736:	00004517          	auipc	a0,0x4
+    8000373a:	f3250513          	addi	a0,a0,-206 # 80007668 <etext+0x668>
+    8000373e:	665010ef          	jal	800055a2 <panic>
+    return -1;
+    80003742:	557d                	li	a0,-1
+}
+    80003744:	8082                	ret
+      return -1;
+    80003746:	557d                	li	a0,-1
+    80003748:	bfd9                	j	8000371e <filewrite+0xf6>
+    8000374a:	557d                	li	a0,-1
+    8000374c:	bfc9                	j	8000371e <filewrite+0xf6>
+    ret = (i == n ? n : -1);
+    8000374e:	557d                	li	a0,-1
+    80003750:	79a2                	ld	s3,40(sp)
+    80003752:	b7f1                	j	8000371e <filewrite+0xf6>
+
+0000000080003754 <count_openfiles>:
+
+uint64 count_openfiles(void) {
+    80003754:	1101                	addi	sp,sp,-32
+    80003756:	ec06                	sd	ra,24(sp)
+    80003758:	e822                	sd	s0,16(sp)
+    8000375a:	e426                	sd	s1,8(sp)
+    8000375c:	1000                	addi	s0,sp,32
+    struct file *f;
+    int count = 0;
+
+    acquire(&ftable.lock);
+    8000375e:	00014517          	auipc	a0,0x14
+    80003762:	49a50513          	addi	a0,a0,1178 # 80017bf8 <ftable>
+    80003766:	16a020ef          	jal	800058d0 <acquire>
+    int count = 0;
+    8000376a:	4481                	li	s1,0
+    for (f = ftable.file; f < &ftable.file[NFILE]; f++) {
+    8000376c:	00014797          	auipc	a5,0x14
+    80003770:	4a478793          	addi	a5,a5,1188 # 80017c10 <ftable+0x18>
+    80003774:	00015697          	auipc	a3,0x15
+    80003778:	43c68693          	addi	a3,a3,1084 # 80018bb0 <disk>
+    8000377c:	a029                	j	80003786 <count_openfiles+0x32>
+    8000377e:	02878793          	addi	a5,a5,40
+    80003782:	00d78763          	beq	a5,a3,80003790 <count_openfiles+0x3c>
+        if (f->ref > 0)  // Count files with active references
+    80003786:	43d8                	lw	a4,4(a5)
+    80003788:	fee05be3          	blez	a4,8000377e <count_openfiles+0x2a>
+            count++;
+    8000378c:	2485                	addiw	s1,s1,1
+    8000378e:	bfc5                	j	8000377e <count_openfiles+0x2a>
+    }
+    release(&ftable.lock);
+    80003790:	00014517          	auipc	a0,0x14
+    80003794:	46850513          	addi	a0,a0,1128 # 80017bf8 <ftable>
+    80003798:	1d0020ef          	jal	80005968 <release>
+
+    return count;
+}
+    8000379c:	8526                	mv	a0,s1
+    8000379e:	60e2                	ld	ra,24(sp)
+    800037a0:	6442                	ld	s0,16(sp)
+    800037a2:	64a2                	ld	s1,8(sp)
+    800037a4:	6105                	addi	sp,sp,32
+    800037a6:	8082                	ret
+
+00000000800037a8 <pipealloc>:
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+    800037a8:	7179                	addi	sp,sp,-48
+    800037aa:	f406                	sd	ra,40(sp)
+    800037ac:	f022                	sd	s0,32(sp)
+    800037ae:	ec26                	sd	s1,24(sp)
+    800037b0:	e052                	sd	s4,0(sp)
+    800037b2:	1800                	addi	s0,sp,48
+    800037b4:	84aa                	mv	s1,a0
+    800037b6:	8a2e                	mv	s4,a1
+  struct pipe *pi;
+
+  pi = 0;
+  *f0 = *f1 = 0;
+    800037b8:	0005b023          	sd	zero,0(a1)
+    800037bc:	00053023          	sd	zero,0(a0)
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    800037c0:	be7ff0ef          	jal	800033a6 <filealloc>
+    800037c4:	e088                	sd	a0,0(s1)
+    800037c6:	c549                	beqz	a0,80003850 <pipealloc+0xa8>
+    800037c8:	bdfff0ef          	jal	800033a6 <filealloc>
+    800037cc:	00aa3023          	sd	a0,0(s4)
+    800037d0:	cd25                	beqz	a0,80003848 <pipealloc+0xa0>
+    800037d2:	e84a                	sd	s2,16(sp)
+    goto bad;
+  if((pi = (struct pipe*)kalloc()) == 0)
+    800037d4:	92bfc0ef          	jal	800000fe <kalloc>
+    800037d8:	892a                	mv	s2,a0
+    800037da:	c12d                	beqz	a0,8000383c <pipealloc+0x94>
+    800037dc:	e44e                	sd	s3,8(sp)
+    goto bad;
+  pi->readopen = 1;
+    800037de:	4985                	li	s3,1
+    800037e0:	23352023          	sw	s3,544(a0)
+  pi->writeopen = 1;
+    800037e4:	23352223          	sw	s3,548(a0)
+  pi->nwrite = 0;
+    800037e8:	20052e23          	sw	zero,540(a0)
+  pi->nread = 0;
+    800037ec:	20052c23          	sw	zero,536(a0)
+  initlock(&pi->lock, "pipe");
+    800037f0:	00004597          	auipc	a1,0x4
+    800037f4:	c1058593          	addi	a1,a1,-1008 # 80007400 <etext+0x400>
+    800037f8:	058020ef          	jal	80005850 <initlock>
+  (*f0)->type = FD_PIPE;
+    800037fc:	609c                	ld	a5,0(s1)
+    800037fe:	0137a023          	sw	s3,0(a5)
+  (*f0)->readable = 1;
+    80003802:	609c                	ld	a5,0(s1)
+    80003804:	01378423          	sb	s3,8(a5)
+  (*f0)->writable = 0;
+    80003808:	609c                	ld	a5,0(s1)
+    8000380a:	000784a3          	sb	zero,9(a5)
+  (*f0)->pipe = pi;
+    8000380e:	609c                	ld	a5,0(s1)
+    80003810:	0127b823          	sd	s2,16(a5)
+  (*f1)->type = FD_PIPE;
+    80003814:	000a3783          	ld	a5,0(s4)
+    80003818:	0137a023          	sw	s3,0(a5)
+  (*f1)->readable = 0;
+    8000381c:	000a3783          	ld	a5,0(s4)
+    80003820:	00078423          	sb	zero,8(a5)
+  (*f1)->writable = 1;
+    80003824:	000a3783          	ld	a5,0(s4)
+    80003828:	013784a3          	sb	s3,9(a5)
+  (*f1)->pipe = pi;
+    8000382c:	000a3783          	ld	a5,0(s4)
+    80003830:	0127b823          	sd	s2,16(a5)
+  return 0;
+    80003834:	4501                	li	a0,0
+    80003836:	6942                	ld	s2,16(sp)
+    80003838:	69a2                	ld	s3,8(sp)
+    8000383a:	a01d                	j	80003860 <pipealloc+0xb8>
+
+ bad:
+  if(pi)
+    kfree((char*)pi);
+  if(*f0)
+    8000383c:	6088                	ld	a0,0(s1)
+    8000383e:	c119                	beqz	a0,80003844 <pipealloc+0x9c>
+    80003840:	6942                	ld	s2,16(sp)
+    80003842:	a029                	j	8000384c <pipealloc+0xa4>
+    80003844:	6942                	ld	s2,16(sp)
+    80003846:	a029                	j	80003850 <pipealloc+0xa8>
+    80003848:	6088                	ld	a0,0(s1)
+    8000384a:	c10d                	beqz	a0,8000386c <pipealloc+0xc4>
+    fileclose(*f0);
+    8000384c:	bffff0ef          	jal	8000344a <fileclose>
+  if(*f1)
+    80003850:	000a3783          	ld	a5,0(s4)
+    fileclose(*f1);
+  return -1;
+    80003854:	557d                	li	a0,-1
+  if(*f1)
+    80003856:	c789                	beqz	a5,80003860 <pipealloc+0xb8>
+    fileclose(*f1);
+    80003858:	853e                	mv	a0,a5
+    8000385a:	bf1ff0ef          	jal	8000344a <fileclose>
+  return -1;
+    8000385e:	557d                	li	a0,-1
+}
+    80003860:	70a2                	ld	ra,40(sp)
+    80003862:	7402                	ld	s0,32(sp)
+    80003864:	64e2                	ld	s1,24(sp)
+    80003866:	6a02                	ld	s4,0(sp)
+    80003868:	6145                	addi	sp,sp,48
+    8000386a:	8082                	ret
+  return -1;
+    8000386c:	557d                	li	a0,-1
+    8000386e:	bfcd                	j	80003860 <pipealloc+0xb8>
+
+0000000080003870 <pipeclose>:
+
+void
+pipeclose(struct pipe *pi, int writable)
+{
+    80003870:	1101                	addi	sp,sp,-32
+    80003872:	ec06                	sd	ra,24(sp)
+    80003874:	e822                	sd	s0,16(sp)
+    80003876:	e426                	sd	s1,8(sp)
+    80003878:	e04a                	sd	s2,0(sp)
+    8000387a:	1000                	addi	s0,sp,32
+    8000387c:	84aa                	mv	s1,a0
+    8000387e:	892e                	mv	s2,a1
+  acquire(&pi->lock);
+    80003880:	050020ef          	jal	800058d0 <acquire>
+  if(writable){
+    80003884:	02090763          	beqz	s2,800038b2 <pipeclose+0x42>
+    pi->writeopen = 0;
+    80003888:	2204a223          	sw	zero,548(s1)
+    wakeup(&pi->nread);
+    8000388c:	21848513          	addi	a0,s1,536
+    80003890:	b3bfd0ef          	jal	800013ca <wakeup>
+  } else {
+    pi->readopen = 0;
+    wakeup(&pi->nwrite);
+  }
+  if(pi->readopen == 0 && pi->writeopen == 0){
+    80003894:	2204b783          	ld	a5,544(s1)
+    80003898:	e785                	bnez	a5,800038c0 <pipeclose+0x50>
+    release(&pi->lock);
+    8000389a:	8526                	mv	a0,s1
+    8000389c:	0cc020ef          	jal	80005968 <release>
+    kfree((char*)pi);
+    800038a0:	8526                	mv	a0,s1
+    800038a2:	f7afc0ef          	jal	8000001c <kfree>
+  } else
+    release(&pi->lock);
+}
+    800038a6:	60e2                	ld	ra,24(sp)
+    800038a8:	6442                	ld	s0,16(sp)
+    800038aa:	64a2                	ld	s1,8(sp)
+    800038ac:	6902                	ld	s2,0(sp)
+    800038ae:	6105                	addi	sp,sp,32
+    800038b0:	8082                	ret
+    pi->readopen = 0;
+    800038b2:	2204a023          	sw	zero,544(s1)
+    wakeup(&pi->nwrite);
+    800038b6:	21c48513          	addi	a0,s1,540
+    800038ba:	b11fd0ef          	jal	800013ca <wakeup>
+    800038be:	bfd9                	j	80003894 <pipeclose+0x24>
+    release(&pi->lock);
+    800038c0:	8526                	mv	a0,s1
+    800038c2:	0a6020ef          	jal	80005968 <release>
+}
+    800038c6:	b7c5                	j	800038a6 <pipeclose+0x36>
+
+00000000800038c8 <pipewrite>:
+
+int
+pipewrite(struct pipe *pi, uint64 addr, int n)
+{
+    800038c8:	711d                	addi	sp,sp,-96
+    800038ca:	ec86                	sd	ra,88(sp)
+    800038cc:	e8a2                	sd	s0,80(sp)
+    800038ce:	e4a6                	sd	s1,72(sp)
+    800038d0:	e0ca                	sd	s2,64(sp)
+    800038d2:	fc4e                	sd	s3,56(sp)
+    800038d4:	f852                	sd	s4,48(sp)
+    800038d6:	f456                	sd	s5,40(sp)
+    800038d8:	1080                	addi	s0,sp,96
+    800038da:	84aa                	mv	s1,a0
+    800038dc:	8aae                	mv	s5,a1
+    800038de:	8a32                	mv	s4,a2
+  int i = 0;
+  struct proc *pr = myproc();
+    800038e0:	cc8fd0ef          	jal	80000da8 <myproc>
+    800038e4:	89aa                	mv	s3,a0
+
+  acquire(&pi->lock);
+    800038e6:	8526                	mv	a0,s1
+    800038e8:	7e9010ef          	jal	800058d0 <acquire>
+  while(i < n){
+    800038ec:	0b405a63          	blez	s4,800039a0 <pipewrite+0xd8>
+    800038f0:	f05a                	sd	s6,32(sp)
+    800038f2:	ec5e                	sd	s7,24(sp)
+    800038f4:	e862                	sd	s8,16(sp)
+  int i = 0;
+    800038f6:	4901                	li	s2,0
+    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
+      wakeup(&pi->nread);
+      sleep(&pi->nwrite, &pi->lock);
+    } else {
+      char ch;
+      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
+    800038f8:	5b7d                	li	s6,-1
+      wakeup(&pi->nread);
+    800038fa:	21848c13          	addi	s8,s1,536
+      sleep(&pi->nwrite, &pi->lock);
+    800038fe:	21c48b93          	addi	s7,s1,540
+    80003902:	a81d                	j	80003938 <pipewrite+0x70>
+      release(&pi->lock);
+    80003904:	8526                	mv	a0,s1
+    80003906:	062020ef          	jal	80005968 <release>
+      return -1;
+    8000390a:	597d                	li	s2,-1
+    8000390c:	7b02                	ld	s6,32(sp)
+    8000390e:	6be2                	ld	s7,24(sp)
+    80003910:	6c42                	ld	s8,16(sp)
+  }
+  wakeup(&pi->nread);
+  release(&pi->lock);
+
+  return i;
+}
+    80003912:	854a                	mv	a0,s2
+    80003914:	60e6                	ld	ra,88(sp)
+    80003916:	6446                	ld	s0,80(sp)
+    80003918:	64a6                	ld	s1,72(sp)
+    8000391a:	6906                	ld	s2,64(sp)
+    8000391c:	79e2                	ld	s3,56(sp)
+    8000391e:	7a42                	ld	s4,48(sp)
+    80003920:	7aa2                	ld	s5,40(sp)
+    80003922:	6125                	addi	sp,sp,96
+    80003924:	8082                	ret
+      wakeup(&pi->nread);
+    80003926:	8562                	mv	a0,s8
+    80003928:	aa3fd0ef          	jal	800013ca <wakeup>
+      sleep(&pi->nwrite, &pi->lock);
+    8000392c:	85a6                	mv	a1,s1
+    8000392e:	855e                	mv	a0,s7
+    80003930:	a4ffd0ef          	jal	8000137e <sleep>
+  while(i < n){
+    80003934:	05495b63          	bge	s2,s4,8000398a <pipewrite+0xc2>
+    if(pi->readopen == 0 || killed(pr)){
+    80003938:	2204a783          	lw	a5,544(s1)
+    8000393c:	d7e1                	beqz	a5,80003904 <pipewrite+0x3c>
+    8000393e:	854e                	mv	a0,s3
+    80003940:	c77fd0ef          	jal	800015b6 <killed>
+    80003944:	f161                	bnez	a0,80003904 <pipewrite+0x3c>
+    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
+    80003946:	2184a783          	lw	a5,536(s1)
+    8000394a:	21c4a703          	lw	a4,540(s1)
+    8000394e:	2007879b          	addiw	a5,a5,512
+    80003952:	fcf70ae3          	beq	a4,a5,80003926 <pipewrite+0x5e>
+      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
+    80003956:	4685                	li	a3,1
+    80003958:	01590633          	add	a2,s2,s5
+    8000395c:	faf40593          	addi	a1,s0,-81
+    80003960:	0509b503          	ld	a0,80(s3)
+    80003964:	98cfd0ef          	jal	80000af0 <copyin>
+    80003968:	03650e63          	beq	a0,s6,800039a4 <pipewrite+0xdc>
+      pi->data[pi->nwrite++ % PIPESIZE] = ch;
+    8000396c:	21c4a783          	lw	a5,540(s1)
+    80003970:	0017871b          	addiw	a4,a5,1
+    80003974:	20e4ae23          	sw	a4,540(s1)
+    80003978:	1ff7f793          	andi	a5,a5,511
+    8000397c:	97a6                	add	a5,a5,s1
+    8000397e:	faf44703          	lbu	a4,-81(s0)
+    80003982:	00e78c23          	sb	a4,24(a5)
+      i++;
+    80003986:	2905                	addiw	s2,s2,1
+    80003988:	b775                	j	80003934 <pipewrite+0x6c>
+    8000398a:	7b02                	ld	s6,32(sp)
+    8000398c:	6be2                	ld	s7,24(sp)
+    8000398e:	6c42                	ld	s8,16(sp)
+  wakeup(&pi->nread);
+    80003990:	21848513          	addi	a0,s1,536
+    80003994:	a37fd0ef          	jal	800013ca <wakeup>
+  release(&pi->lock);
+    80003998:	8526                	mv	a0,s1
+    8000399a:	7cf010ef          	jal	80005968 <release>
+  return i;
+    8000399e:	bf95                	j	80003912 <pipewrite+0x4a>
+  int i = 0;
+    800039a0:	4901                	li	s2,0
+    800039a2:	b7fd                	j	80003990 <pipewrite+0xc8>
+    800039a4:	7b02                	ld	s6,32(sp)
+    800039a6:	6be2                	ld	s7,24(sp)
+    800039a8:	6c42                	ld	s8,16(sp)
+    800039aa:	b7dd                	j	80003990 <pipewrite+0xc8>
+
+00000000800039ac <piperead>:
+
+int
+piperead(struct pipe *pi, uint64 addr, int n)
+{
+    800039ac:	715d                	addi	sp,sp,-80
+    800039ae:	e486                	sd	ra,72(sp)
+    800039b0:	e0a2                	sd	s0,64(sp)
+    800039b2:	fc26                	sd	s1,56(sp)
+    800039b4:	f84a                	sd	s2,48(sp)
+    800039b6:	f44e                	sd	s3,40(sp)
+    800039b8:	f052                	sd	s4,32(sp)
+    800039ba:	ec56                	sd	s5,24(sp)
+    800039bc:	0880                	addi	s0,sp,80
+    800039be:	84aa                	mv	s1,a0
+    800039c0:	892e                	mv	s2,a1
+    800039c2:	8ab2                	mv	s5,a2
+  int i;
+  struct proc *pr = myproc();
+    800039c4:	be4fd0ef          	jal	80000da8 <myproc>
+    800039c8:	8a2a                	mv	s4,a0
+  char ch;
+
+  acquire(&pi->lock);
+    800039ca:	8526                	mv	a0,s1
+    800039cc:	705010ef          	jal	800058d0 <acquire>
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    800039d0:	2184a703          	lw	a4,536(s1)
+    800039d4:	21c4a783          	lw	a5,540(s1)
+    if(killed(pr)){
+      release(&pi->lock);
+      return -1;
+    }
+    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
+    800039d8:	21848993          	addi	s3,s1,536
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    800039dc:	02f71563          	bne	a4,a5,80003a06 <piperead+0x5a>
+    800039e0:	2244a783          	lw	a5,548(s1)
+    800039e4:	cb85                	beqz	a5,80003a14 <piperead+0x68>
+    if(killed(pr)){
+    800039e6:	8552                	mv	a0,s4
+    800039e8:	bcffd0ef          	jal	800015b6 <killed>
+    800039ec:	ed19                	bnez	a0,80003a0a <piperead+0x5e>
+    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
+    800039ee:	85a6                	mv	a1,s1
+    800039f0:	854e                	mv	a0,s3
+    800039f2:	98dfd0ef          	jal	8000137e <sleep>
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    800039f6:	2184a703          	lw	a4,536(s1)
+    800039fa:	21c4a783          	lw	a5,540(s1)
+    800039fe:	fef701e3          	beq	a4,a5,800039e0 <piperead+0x34>
+    80003a02:	e85a                	sd	s6,16(sp)
+    80003a04:	a809                	j	80003a16 <piperead+0x6a>
+    80003a06:	e85a                	sd	s6,16(sp)
+    80003a08:	a039                	j	80003a16 <piperead+0x6a>
+      release(&pi->lock);
+    80003a0a:	8526                	mv	a0,s1
+    80003a0c:	75d010ef          	jal	80005968 <release>
+      return -1;
+    80003a10:	59fd                	li	s3,-1
+    80003a12:	a8b1                	j	80003a6e <piperead+0xc2>
+    80003a14:	e85a                	sd	s6,16(sp)
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    80003a16:	4981                	li	s3,0
+    if(pi->nread == pi->nwrite)
+      break;
+    ch = pi->data[pi->nread++ % PIPESIZE];
+    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
+    80003a18:	5b7d                	li	s6,-1
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    80003a1a:	05505263          	blez	s5,80003a5e <piperead+0xb2>
+    if(pi->nread == pi->nwrite)
+    80003a1e:	2184a783          	lw	a5,536(s1)
+    80003a22:	21c4a703          	lw	a4,540(s1)
+    80003a26:	02f70c63          	beq	a4,a5,80003a5e <piperead+0xb2>
+    ch = pi->data[pi->nread++ % PIPESIZE];
+    80003a2a:	0017871b          	addiw	a4,a5,1
+    80003a2e:	20e4ac23          	sw	a4,536(s1)
+    80003a32:	1ff7f793          	andi	a5,a5,511
+    80003a36:	97a6                	add	a5,a5,s1
+    80003a38:	0187c783          	lbu	a5,24(a5)
+    80003a3c:	faf40fa3          	sb	a5,-65(s0)
+    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
+    80003a40:	4685                	li	a3,1
+    80003a42:	fbf40613          	addi	a2,s0,-65
+    80003a46:	85ca                	mv	a1,s2
+    80003a48:	050a3503          	ld	a0,80(s4)
+    80003a4c:	fcffc0ef          	jal	80000a1a <copyout>
+    80003a50:	01650763          	beq	a0,s6,80003a5e <piperead+0xb2>
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    80003a54:	2985                	addiw	s3,s3,1
+    80003a56:	0905                	addi	s2,s2,1
+    80003a58:	fd3a93e3          	bne	s5,s3,80003a1e <piperead+0x72>
+    80003a5c:	89d6                	mv	s3,s5
+      break;
+  }
+  wakeup(&pi->nwrite);  //DOC: piperead-wakeup
+    80003a5e:	21c48513          	addi	a0,s1,540
+    80003a62:	969fd0ef          	jal	800013ca <wakeup>
+  release(&pi->lock);
+    80003a66:	8526                	mv	a0,s1
+    80003a68:	701010ef          	jal	80005968 <release>
+    80003a6c:	6b42                	ld	s6,16(sp)
+  return i;
+}
+    80003a6e:	854e                	mv	a0,s3
+    80003a70:	60a6                	ld	ra,72(sp)
+    80003a72:	6406                	ld	s0,64(sp)
+    80003a74:	74e2                	ld	s1,56(sp)
+    80003a76:	7942                	ld	s2,48(sp)
+    80003a78:	79a2                	ld	s3,40(sp)
+    80003a7a:	7a02                	ld	s4,32(sp)
+    80003a7c:	6ae2                	ld	s5,24(sp)
+    80003a7e:	6161                	addi	sp,sp,80
+    80003a80:	8082                	ret
+
+0000000080003a82 <flags2perm>:
+#include "elf.h"
+
+static int loadseg(pde_t *, uint64, struct inode *, uint, uint);
+
+int flags2perm(int flags)
+{
+    80003a82:	1141                	addi	sp,sp,-16
+    80003a84:	e422                	sd	s0,8(sp)
+    80003a86:	0800                	addi	s0,sp,16
+    80003a88:	87aa                	mv	a5,a0
+    int perm = 0;
+    if(flags & 0x1)
+    80003a8a:	8905                	andi	a0,a0,1
+    80003a8c:	050e                	slli	a0,a0,0x3
+      perm = PTE_X;
+    if(flags & 0x2)
+    80003a8e:	8b89                	andi	a5,a5,2
+    80003a90:	c399                	beqz	a5,80003a96 <flags2perm+0x14>
+      perm |= PTE_W;
+    80003a92:	00456513          	ori	a0,a0,4
+    return perm;
+}
+    80003a96:	6422                	ld	s0,8(sp)
+    80003a98:	0141                	addi	sp,sp,16
+    80003a9a:	8082                	ret
+
+0000000080003a9c <exec>:
+
+int
+exec(char *path, char **argv)
+{
+    80003a9c:	df010113          	addi	sp,sp,-528
+    80003aa0:	20113423          	sd	ra,520(sp)
+    80003aa4:	20813023          	sd	s0,512(sp)
+    80003aa8:	ffa6                	sd	s1,504(sp)
+    80003aaa:	fbca                	sd	s2,496(sp)
+    80003aac:	0c00                	addi	s0,sp,528
+    80003aae:	892a                	mv	s2,a0
+    80003ab0:	dea43c23          	sd	a0,-520(s0)
+    80003ab4:	e0b43023          	sd	a1,-512(s0)
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+  struct elfhdr elf;
+  struct inode *ip;
+  struct proghdr ph;
+  pagetable_t pagetable = 0, oldpagetable;
+  struct proc *p = myproc();
+    80003ab8:	af0fd0ef          	jal	80000da8 <myproc>
+    80003abc:	84aa                	mv	s1,a0
+
+  begin_op();
+    80003abe:	d72ff0ef          	jal	80003030 <begin_op>
+
+  if((ip = namei(path)) == 0){
+    80003ac2:	854a                	mv	a0,s2
+    80003ac4:	bb0ff0ef          	jal	80002e74 <namei>
+    80003ac8:	c931                	beqz	a0,80003b1c <exec+0x80>
+    80003aca:	f3d2                	sd	s4,480(sp)
+    80003acc:	8a2a                	mv	s4,a0
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+    80003ace:	ccdfe0ef          	jal	8000279a <ilock>
+
+  // Check ELF header
+  if(readi(ip, 0, (uint64)&elf, 0, sizeof(elf)) != sizeof(elf))
+    80003ad2:	04000713          	li	a4,64
+    80003ad6:	4681                	li	a3,0
+    80003ad8:	e5040613          	addi	a2,s0,-432
+    80003adc:	4581                	li	a1,0
+    80003ade:	8552                	mv	a0,s4
+    80003ae0:	f0ffe0ef          	jal	800029ee <readi>
+    80003ae4:	04000793          	li	a5,64
+    80003ae8:	00f51a63          	bne	a0,a5,80003afc <exec+0x60>
+    goto bad;
+
+  if(elf.magic != ELF_MAGIC)
+    80003aec:	e5042703          	lw	a4,-432(s0)
+    80003af0:	464c47b7          	lui	a5,0x464c4
+    80003af4:	57f78793          	addi	a5,a5,1407 # 464c457f <_entry-0x39b3ba81>
+    80003af8:	02f70663          	beq	a4,a5,80003b24 <exec+0x88>
+
+ bad:
+  if(pagetable)
+    proc_freepagetable(pagetable, sz);
+  if(ip){
+    iunlockput(ip);
+    80003afc:	8552                	mv	a0,s4
+    80003afe:	ea7fe0ef          	jal	800029a4 <iunlockput>
+    end_op();
+    80003b02:	d98ff0ef          	jal	8000309a <end_op>
+  }
+  return -1;
+    80003b06:	557d                	li	a0,-1
+    80003b08:	7a1e                	ld	s4,480(sp)
+}
+    80003b0a:	20813083          	ld	ra,520(sp)
+    80003b0e:	20013403          	ld	s0,512(sp)
+    80003b12:	74fe                	ld	s1,504(sp)
+    80003b14:	795e                	ld	s2,496(sp)
+    80003b16:	21010113          	addi	sp,sp,528
+    80003b1a:	8082                	ret
+    end_op();
+    80003b1c:	d7eff0ef          	jal	8000309a <end_op>
+    return -1;
+    80003b20:	557d                	li	a0,-1
+    80003b22:	b7e5                	j	80003b0a <exec+0x6e>
+    80003b24:	ebda                	sd	s6,464(sp)
+  if((pagetable = proc_pagetable(p)) == 0)
+    80003b26:	8526                	mv	a0,s1
+    80003b28:	b28fd0ef          	jal	80000e50 <proc_pagetable>
+    80003b2c:	8b2a                	mv	s6,a0
+    80003b2e:	2c050b63          	beqz	a0,80003e04 <exec+0x368>
+    80003b32:	f7ce                	sd	s3,488(sp)
+    80003b34:	efd6                	sd	s5,472(sp)
+    80003b36:	e7de                	sd	s7,456(sp)
+    80003b38:	e3e2                	sd	s8,448(sp)
+    80003b3a:	ff66                	sd	s9,440(sp)
+    80003b3c:	fb6a                	sd	s10,432(sp)
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    80003b3e:	e7042d03          	lw	s10,-400(s0)
+    80003b42:	e8845783          	lhu	a5,-376(s0)
+    80003b46:	12078963          	beqz	a5,80003c78 <exec+0x1dc>
+    80003b4a:	f76e                	sd	s11,424(sp)
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+    80003b4c:	4901                	li	s2,0
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    80003b4e:	4d81                	li	s11,0
+    if(ph.vaddr % PGSIZE != 0)
+    80003b50:	6c85                	lui	s9,0x1
+    80003b52:	fffc8793          	addi	a5,s9,-1 # fff <_entry-0x7ffff001>
+    80003b56:	def43823          	sd	a5,-528(s0)
+
+  for(i = 0; i < sz; i += PGSIZE){
+    pa = walkaddr(pagetable, va + i);
+    if(pa == 0)
+      panic("loadseg: address should exist");
+    if(sz - i < PGSIZE)
+    80003b5a:	6a85                	lui	s5,0x1
+    80003b5c:	a085                	j	80003bbc <exec+0x120>
+      panic("loadseg: address should exist");
+    80003b5e:	00004517          	auipc	a0,0x4
+    80003b62:	b1a50513          	addi	a0,a0,-1254 # 80007678 <etext+0x678>
+    80003b66:	23d010ef          	jal	800055a2 <panic>
+    if(sz - i < PGSIZE)
+    80003b6a:	2481                	sext.w	s1,s1
+      n = sz - i;
+    else
+      n = PGSIZE;
+    if(readi(ip, 0, (uint64)pa, offset+i, n) != n)
+    80003b6c:	8726                	mv	a4,s1
+    80003b6e:	012c06bb          	addw	a3,s8,s2
+    80003b72:	4581                	li	a1,0
+    80003b74:	8552                	mv	a0,s4
+    80003b76:	e79fe0ef          	jal	800029ee <readi>
+    80003b7a:	2501                	sext.w	a0,a0
+    80003b7c:	24a49a63          	bne	s1,a0,80003dd0 <exec+0x334>
+  for(i = 0; i < sz; i += PGSIZE){
+    80003b80:	012a893b          	addw	s2,s5,s2
+    80003b84:	03397363          	bgeu	s2,s3,80003baa <exec+0x10e>
+    pa = walkaddr(pagetable, va + i);
+    80003b88:	02091593          	slli	a1,s2,0x20
+    80003b8c:	9181                	srli	a1,a1,0x20
+    80003b8e:	95de                	add	a1,a1,s7
+    80003b90:	855a                	mv	a0,s6
+    80003b92:	90dfc0ef          	jal	8000049e <walkaddr>
+    80003b96:	862a                	mv	a2,a0
+    if(pa == 0)
+    80003b98:	d179                	beqz	a0,80003b5e <exec+0xc2>
+    if(sz - i < PGSIZE)
+    80003b9a:	412984bb          	subw	s1,s3,s2
+    80003b9e:	0004879b          	sext.w	a5,s1
+    80003ba2:	fcfcf4e3          	bgeu	s9,a5,80003b6a <exec+0xce>
+    80003ba6:	84d6                	mv	s1,s5
+    80003ba8:	b7c9                	j	80003b6a <exec+0xce>
+    sz = sz1;
+    80003baa:	e0843903          	ld	s2,-504(s0)
+  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
+    80003bae:	2d85                	addiw	s11,s11,1
+    80003bb0:	038d0d1b          	addiw	s10,s10,56 # 1038 <_entry-0x7fffefc8>
+    80003bb4:	e8845783          	lhu	a5,-376(s0)
+    80003bb8:	08fdd063          	bge	s11,a5,80003c38 <exec+0x19c>
+    if(readi(ip, 0, (uint64)&ph, off, sizeof(ph)) != sizeof(ph))
+    80003bbc:	2d01                	sext.w	s10,s10
+    80003bbe:	03800713          	li	a4,56
+    80003bc2:	86ea                	mv	a3,s10
+    80003bc4:	e1840613          	addi	a2,s0,-488
+    80003bc8:	4581                	li	a1,0
+    80003bca:	8552                	mv	a0,s4
+    80003bcc:	e23fe0ef          	jal	800029ee <readi>
+    80003bd0:	03800793          	li	a5,56
+    80003bd4:	1cf51663          	bne	a0,a5,80003da0 <exec+0x304>
+    if(ph.type != ELF_PROG_LOAD)
+    80003bd8:	e1842783          	lw	a5,-488(s0)
+    80003bdc:	4705                	li	a4,1
+    80003bde:	fce798e3          	bne	a5,a4,80003bae <exec+0x112>
+    if(ph.memsz < ph.filesz)
+    80003be2:	e4043483          	ld	s1,-448(s0)
+    80003be6:	e3843783          	ld	a5,-456(s0)
+    80003bea:	1af4ef63          	bltu	s1,a5,80003da8 <exec+0x30c>
+    if(ph.vaddr + ph.memsz < ph.vaddr)
+    80003bee:	e2843783          	ld	a5,-472(s0)
+    80003bf2:	94be                	add	s1,s1,a5
+    80003bf4:	1af4ee63          	bltu	s1,a5,80003db0 <exec+0x314>
+    if(ph.vaddr % PGSIZE != 0)
+    80003bf8:	df043703          	ld	a4,-528(s0)
+    80003bfc:	8ff9                	and	a5,a5,a4
+    80003bfe:	1a079d63          	bnez	a5,80003db8 <exec+0x31c>
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    80003c02:	e1c42503          	lw	a0,-484(s0)
+    80003c06:	e7dff0ef          	jal	80003a82 <flags2perm>
+    80003c0a:	86aa                	mv	a3,a0
+    80003c0c:	8626                	mv	a2,s1
+    80003c0e:	85ca                	mv	a1,s2
+    80003c10:	855a                	mv	a0,s6
+    80003c12:	bf5fc0ef          	jal	80000806 <uvmalloc>
+    80003c16:	e0a43423          	sd	a0,-504(s0)
+    80003c1a:	1a050363          	beqz	a0,80003dc0 <exec+0x324>
+    if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
+    80003c1e:	e2843b83          	ld	s7,-472(s0)
+    80003c22:	e2042c03          	lw	s8,-480(s0)
+    80003c26:	e3842983          	lw	s3,-456(s0)
+  for(i = 0; i < sz; i += PGSIZE){
+    80003c2a:	00098463          	beqz	s3,80003c32 <exec+0x196>
+    80003c2e:	4901                	li	s2,0
+    80003c30:	bfa1                	j	80003b88 <exec+0xec>
+    sz = sz1;
+    80003c32:	e0843903          	ld	s2,-504(s0)
+    80003c36:	bfa5                	j	80003bae <exec+0x112>
+    80003c38:	7dba                	ld	s11,424(sp)
+  iunlockput(ip);
+    80003c3a:	8552                	mv	a0,s4
+    80003c3c:	d69fe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    80003c40:	c5aff0ef          	jal	8000309a <end_op>
+  p = myproc();
+    80003c44:	964fd0ef          	jal	80000da8 <myproc>
+    80003c48:	8aaa                	mv	s5,a0
+  uint64 oldsz = p->sz;
+    80003c4a:	04853c83          	ld	s9,72(a0)
+  sz = PGROUNDUP(sz);
+    80003c4e:	6985                	lui	s3,0x1
+    80003c50:	19fd                	addi	s3,s3,-1 # fff <_entry-0x7ffff001>
+    80003c52:	99ca                	add	s3,s3,s2
+    80003c54:	77fd                	lui	a5,0xfffff
+    80003c56:	00f9f9b3          	and	s3,s3,a5
+  if((sz1 = uvmalloc(pagetable, sz, sz + (USERSTACK+1)*PGSIZE, PTE_W)) == 0)
+    80003c5a:	4691                	li	a3,4
+    80003c5c:	660d                	lui	a2,0x3
+    80003c5e:	964e                	add	a2,a2,s3
+    80003c60:	85ce                	mv	a1,s3
+    80003c62:	855a                	mv	a0,s6
+    80003c64:	ba3fc0ef          	jal	80000806 <uvmalloc>
+    80003c68:	892a                	mv	s2,a0
+    80003c6a:	e0a43423          	sd	a0,-504(s0)
+    80003c6e:	e519                	bnez	a0,80003c7c <exec+0x1e0>
+  if(pagetable)
+    80003c70:	e1343423          	sd	s3,-504(s0)
+    80003c74:	4a01                	li	s4,0
+    80003c76:	aab1                	j	80003dd2 <exec+0x336>
+  uint64 argc, sz = 0, sp, ustack[MAXARG], stackbase;
+    80003c78:	4901                	li	s2,0
+    80003c7a:	b7c1                	j	80003c3a <exec+0x19e>
+  uvmclear(pagetable, sz-(USERSTACK+1)*PGSIZE);
+    80003c7c:	75f5                	lui	a1,0xffffd
+    80003c7e:	95aa                	add	a1,a1,a0
+    80003c80:	855a                	mv	a0,s6
+    80003c82:	d6ffc0ef          	jal	800009f0 <uvmclear>
+  stackbase = sp - USERSTACK*PGSIZE;
+    80003c86:	7bf9                	lui	s7,0xffffe
+    80003c88:	9bca                	add	s7,s7,s2
+  for(argc = 0; argv[argc]; argc++) {
+    80003c8a:	e0043783          	ld	a5,-512(s0)
+    80003c8e:	6388                	ld	a0,0(a5)
+    80003c90:	cd39                	beqz	a0,80003cee <exec+0x252>
+    80003c92:	e9040993          	addi	s3,s0,-368
+    80003c96:	f9040c13          	addi	s8,s0,-112
+    80003c9a:	4481                	li	s1,0
+    sp -= strlen(argv[argc]) + 1;
+    80003c9c:	e64fc0ef          	jal	80000300 <strlen>
+    80003ca0:	0015079b          	addiw	a5,a0,1
+    80003ca4:	40f907b3          	sub	a5,s2,a5
+    sp -= sp % 16; // riscv sp must be 16-byte aligned
+    80003ca8:	ff07f913          	andi	s2,a5,-16
+    if(sp < stackbase)
+    80003cac:	11796e63          	bltu	s2,s7,80003dc8 <exec+0x32c>
+    if(copyout(pagetable, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
+    80003cb0:	e0043d03          	ld	s10,-512(s0)
+    80003cb4:	000d3a03          	ld	s4,0(s10)
+    80003cb8:	8552                	mv	a0,s4
+    80003cba:	e46fc0ef          	jal	80000300 <strlen>
+    80003cbe:	0015069b          	addiw	a3,a0,1
+    80003cc2:	8652                	mv	a2,s4
+    80003cc4:	85ca                	mv	a1,s2
+    80003cc6:	855a                	mv	a0,s6
+    80003cc8:	d53fc0ef          	jal	80000a1a <copyout>
+    80003ccc:	10054063          	bltz	a0,80003dcc <exec+0x330>
+    ustack[argc] = sp;
+    80003cd0:	0129b023          	sd	s2,0(s3)
+  for(argc = 0; argv[argc]; argc++) {
+    80003cd4:	0485                	addi	s1,s1,1
+    80003cd6:	008d0793          	addi	a5,s10,8
+    80003cda:	e0f43023          	sd	a5,-512(s0)
+    80003cde:	008d3503          	ld	a0,8(s10)
+    80003ce2:	c909                	beqz	a0,80003cf4 <exec+0x258>
+    if(argc >= MAXARG)
+    80003ce4:	09a1                	addi	s3,s3,8
+    80003ce6:	fb899be3          	bne	s3,s8,80003c9c <exec+0x200>
+  ip = 0;
+    80003cea:	4a01                	li	s4,0
+    80003cec:	a0dd                	j	80003dd2 <exec+0x336>
+  sp = sz;
+    80003cee:	e0843903          	ld	s2,-504(s0)
+  for(argc = 0; argv[argc]; argc++) {
+    80003cf2:	4481                	li	s1,0
+  ustack[argc] = 0;
+    80003cf4:	00349793          	slli	a5,s1,0x3
+    80003cf8:	f9078793          	addi	a5,a5,-112 # ffffffffffffef90 <end+0xffffffff7ffde1a0>
+    80003cfc:	97a2                	add	a5,a5,s0
+    80003cfe:	f007b023          	sd	zero,-256(a5)
+  sp -= (argc+1) * sizeof(uint64);
+    80003d02:	00148693          	addi	a3,s1,1
+    80003d06:	068e                	slli	a3,a3,0x3
+    80003d08:	40d90933          	sub	s2,s2,a3
+  sp -= sp % 16;
+    80003d0c:	ff097913          	andi	s2,s2,-16
+  sz = sz1;
+    80003d10:	e0843983          	ld	s3,-504(s0)
+  if(sp < stackbase)
+    80003d14:	f5796ee3          	bltu	s2,s7,80003c70 <exec+0x1d4>
+  if(copyout(pagetable, sp, (char *)ustack, (argc+1)*sizeof(uint64)) < 0)
+    80003d18:	e9040613          	addi	a2,s0,-368
+    80003d1c:	85ca                	mv	a1,s2
+    80003d1e:	855a                	mv	a0,s6
+    80003d20:	cfbfc0ef          	jal	80000a1a <copyout>
+    80003d24:	0e054263          	bltz	a0,80003e08 <exec+0x36c>
+  p->trapframe->a1 = sp;
+    80003d28:	058ab783          	ld	a5,88(s5) # 1058 <_entry-0x7fffefa8>
+    80003d2c:	0727bc23          	sd	s2,120(a5)
+  for(last=s=path; *s; s++)
+    80003d30:	df843783          	ld	a5,-520(s0)
+    80003d34:	0007c703          	lbu	a4,0(a5)
+    80003d38:	cf11                	beqz	a4,80003d54 <exec+0x2b8>
+    80003d3a:	0785                	addi	a5,a5,1
+    if(*s == '/')
+    80003d3c:	02f00693          	li	a3,47
+    80003d40:	a039                	j	80003d4e <exec+0x2b2>
+      last = s+1;
+    80003d42:	def43c23          	sd	a5,-520(s0)
+  for(last=s=path; *s; s++)
+    80003d46:	0785                	addi	a5,a5,1
+    80003d48:	fff7c703          	lbu	a4,-1(a5)
+    80003d4c:	c701                	beqz	a4,80003d54 <exec+0x2b8>
+    if(*s == '/')
+    80003d4e:	fed71ce3          	bne	a4,a3,80003d46 <exec+0x2aa>
+    80003d52:	bfc5                	j	80003d42 <exec+0x2a6>
+  safestrcpy(p->name, last, sizeof(p->name));
+    80003d54:	4641                	li	a2,16
+    80003d56:	df843583          	ld	a1,-520(s0)
+    80003d5a:	158a8513          	addi	a0,s5,344
+    80003d5e:	d70fc0ef          	jal	800002ce <safestrcpy>
+  oldpagetable = p->pagetable;
+    80003d62:	050ab503          	ld	a0,80(s5)
+  p->pagetable = pagetable;
+    80003d66:	056ab823          	sd	s6,80(s5)
+  p->sz = sz;
+    80003d6a:	e0843783          	ld	a5,-504(s0)
+    80003d6e:	04fab423          	sd	a5,72(s5)
+  p->trapframe->epc = elf.entry;  // initial program counter = main
+    80003d72:	058ab783          	ld	a5,88(s5)
+    80003d76:	e6843703          	ld	a4,-408(s0)
+    80003d7a:	ef98                	sd	a4,24(a5)
+  p->trapframe->sp = sp; // initial stack pointer
+    80003d7c:	058ab783          	ld	a5,88(s5)
+    80003d80:	0327b823          	sd	s2,48(a5)
+  proc_freepagetable(oldpagetable, oldsz);
+    80003d84:	85e6                	mv	a1,s9
+    80003d86:	94efd0ef          	jal	80000ed4 <proc_freepagetable>
+  return argc; // this ends up in a0, the first argument to main(argc, argv)
+    80003d8a:	0004851b          	sext.w	a0,s1
+    80003d8e:	79be                	ld	s3,488(sp)
+    80003d90:	7a1e                	ld	s4,480(sp)
+    80003d92:	6afe                	ld	s5,472(sp)
+    80003d94:	6b5e                	ld	s6,464(sp)
+    80003d96:	6bbe                	ld	s7,456(sp)
+    80003d98:	6c1e                	ld	s8,448(sp)
+    80003d9a:	7cfa                	ld	s9,440(sp)
+    80003d9c:	7d5a                	ld	s10,432(sp)
+    80003d9e:	b3b5                	j	80003b0a <exec+0x6e>
+    80003da0:	e1243423          	sd	s2,-504(s0)
+    80003da4:	7dba                	ld	s11,424(sp)
+    80003da6:	a035                	j	80003dd2 <exec+0x336>
+    80003da8:	e1243423          	sd	s2,-504(s0)
+    80003dac:	7dba                	ld	s11,424(sp)
+    80003dae:	a015                	j	80003dd2 <exec+0x336>
+    80003db0:	e1243423          	sd	s2,-504(s0)
+    80003db4:	7dba                	ld	s11,424(sp)
+    80003db6:	a831                	j	80003dd2 <exec+0x336>
+    80003db8:	e1243423          	sd	s2,-504(s0)
+    80003dbc:	7dba                	ld	s11,424(sp)
+    80003dbe:	a811                	j	80003dd2 <exec+0x336>
+    80003dc0:	e1243423          	sd	s2,-504(s0)
+    80003dc4:	7dba                	ld	s11,424(sp)
+    80003dc6:	a031                	j	80003dd2 <exec+0x336>
+  ip = 0;
+    80003dc8:	4a01                	li	s4,0
+    80003dca:	a021                	j	80003dd2 <exec+0x336>
+    80003dcc:	4a01                	li	s4,0
+  if(pagetable)
+    80003dce:	a011                	j	80003dd2 <exec+0x336>
+    80003dd0:	7dba                	ld	s11,424(sp)
+    proc_freepagetable(pagetable, sz);
+    80003dd2:	e0843583          	ld	a1,-504(s0)
+    80003dd6:	855a                	mv	a0,s6
+    80003dd8:	8fcfd0ef          	jal	80000ed4 <proc_freepagetable>
+  return -1;
+    80003ddc:	557d                	li	a0,-1
+  if(ip){
+    80003dde:	000a1b63          	bnez	s4,80003df4 <exec+0x358>
+    80003de2:	79be                	ld	s3,488(sp)
+    80003de4:	7a1e                	ld	s4,480(sp)
+    80003de6:	6afe                	ld	s5,472(sp)
+    80003de8:	6b5e                	ld	s6,464(sp)
+    80003dea:	6bbe                	ld	s7,456(sp)
+    80003dec:	6c1e                	ld	s8,448(sp)
+    80003dee:	7cfa                	ld	s9,440(sp)
+    80003df0:	7d5a                	ld	s10,432(sp)
+    80003df2:	bb21                	j	80003b0a <exec+0x6e>
+    80003df4:	79be                	ld	s3,488(sp)
+    80003df6:	6afe                	ld	s5,472(sp)
+    80003df8:	6b5e                	ld	s6,464(sp)
+    80003dfa:	6bbe                	ld	s7,456(sp)
+    80003dfc:	6c1e                	ld	s8,448(sp)
+    80003dfe:	7cfa                	ld	s9,440(sp)
+    80003e00:	7d5a                	ld	s10,432(sp)
+    80003e02:	b9ed                	j	80003afc <exec+0x60>
+    80003e04:	6b5e                	ld	s6,464(sp)
+    80003e06:	b9dd                	j	80003afc <exec+0x60>
+  sz = sz1;
+    80003e08:	e0843983          	ld	s3,-504(s0)
+    80003e0c:	b595                	j	80003c70 <exec+0x1d4>
+
+0000000080003e0e <argfd>:
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+    80003e0e:	7179                	addi	sp,sp,-48
+    80003e10:	f406                	sd	ra,40(sp)
+    80003e12:	f022                	sd	s0,32(sp)
+    80003e14:	ec26                	sd	s1,24(sp)
+    80003e16:	e84a                	sd	s2,16(sp)
+    80003e18:	1800                	addi	s0,sp,48
+    80003e1a:	892e                	mv	s2,a1
+    80003e1c:	84b2                	mv	s1,a2
+  int fd;
+  struct file *f;
+
+  argint(n, &fd);
+    80003e1e:	fdc40593          	addi	a1,s0,-36
+    80003e22:	e91fd0ef          	jal	80001cb2 <argint>
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    80003e26:	fdc42703          	lw	a4,-36(s0)
+    80003e2a:	47bd                	li	a5,15
+    80003e2c:	02e7e963          	bltu	a5,a4,80003e5e <argfd+0x50>
+    80003e30:	f79fc0ef          	jal	80000da8 <myproc>
+    80003e34:	fdc42703          	lw	a4,-36(s0)
+    80003e38:	01a70793          	addi	a5,a4,26
+    80003e3c:	078e                	slli	a5,a5,0x3
+    80003e3e:	953e                	add	a0,a0,a5
+    80003e40:	611c                	ld	a5,0(a0)
+    80003e42:	c385                	beqz	a5,80003e62 <argfd+0x54>
+    return -1;
+  if(pfd)
+    80003e44:	00090463          	beqz	s2,80003e4c <argfd+0x3e>
+    *pfd = fd;
+    80003e48:	00e92023          	sw	a4,0(s2)
+  if(pf)
+    *pf = f;
+  return 0;
+    80003e4c:	4501                	li	a0,0
+  if(pf)
+    80003e4e:	c091                	beqz	s1,80003e52 <argfd+0x44>
+    *pf = f;
+    80003e50:	e09c                	sd	a5,0(s1)
+}
+    80003e52:	70a2                	ld	ra,40(sp)
+    80003e54:	7402                	ld	s0,32(sp)
+    80003e56:	64e2                	ld	s1,24(sp)
+    80003e58:	6942                	ld	s2,16(sp)
+    80003e5a:	6145                	addi	sp,sp,48
+    80003e5c:	8082                	ret
+    return -1;
+    80003e5e:	557d                	li	a0,-1
+    80003e60:	bfcd                	j	80003e52 <argfd+0x44>
+    80003e62:	557d                	li	a0,-1
+    80003e64:	b7fd                	j	80003e52 <argfd+0x44>
+
+0000000080003e66 <fdalloc>:
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+    80003e66:	1101                	addi	sp,sp,-32
+    80003e68:	ec06                	sd	ra,24(sp)
+    80003e6a:	e822                	sd	s0,16(sp)
+    80003e6c:	e426                	sd	s1,8(sp)
+    80003e6e:	1000                	addi	s0,sp,32
+    80003e70:	84aa                	mv	s1,a0
+  int fd;
+  struct proc *p = myproc();
+    80003e72:	f37fc0ef          	jal	80000da8 <myproc>
+    80003e76:	862a                	mv	a2,a0
+
+  for(fd = 0; fd < NOFILE; fd++){
+    80003e78:	0d050793          	addi	a5,a0,208
+    80003e7c:	4501                	li	a0,0
+    80003e7e:	46c1                	li	a3,16
+    if(p->ofile[fd] == 0){
+    80003e80:	6398                	ld	a4,0(a5)
+    80003e82:	cb19                	beqz	a4,80003e98 <fdalloc+0x32>
+  for(fd = 0; fd < NOFILE; fd++){
+    80003e84:	2505                	addiw	a0,a0,1
+    80003e86:	07a1                	addi	a5,a5,8
+    80003e88:	fed51ce3          	bne	a0,a3,80003e80 <fdalloc+0x1a>
+      p->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+    80003e8c:	557d                	li	a0,-1
+}
+    80003e8e:	60e2                	ld	ra,24(sp)
+    80003e90:	6442                	ld	s0,16(sp)
+    80003e92:	64a2                	ld	s1,8(sp)
+    80003e94:	6105                	addi	sp,sp,32
+    80003e96:	8082                	ret
+      p->ofile[fd] = f;
+    80003e98:	01a50793          	addi	a5,a0,26
+    80003e9c:	078e                	slli	a5,a5,0x3
+    80003e9e:	963e                	add	a2,a2,a5
+    80003ea0:	e204                	sd	s1,0(a2)
+      return fd;
+    80003ea2:	b7f5                	j	80003e8e <fdalloc+0x28>
+
+0000000080003ea4 <create>:
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+    80003ea4:	715d                	addi	sp,sp,-80
+    80003ea6:	e486                	sd	ra,72(sp)
+    80003ea8:	e0a2                	sd	s0,64(sp)
+    80003eaa:	fc26                	sd	s1,56(sp)
+    80003eac:	f84a                	sd	s2,48(sp)
+    80003eae:	f44e                	sd	s3,40(sp)
+    80003eb0:	ec56                	sd	s5,24(sp)
+    80003eb2:	e85a                	sd	s6,16(sp)
+    80003eb4:	0880                	addi	s0,sp,80
+    80003eb6:	8b2e                	mv	s6,a1
+    80003eb8:	89b2                	mv	s3,a2
+    80003eba:	8936                	mv	s2,a3
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    80003ebc:	fb040593          	addi	a1,s0,-80
+    80003ec0:	fcffe0ef          	jal	80002e8e <nameiparent>
+    80003ec4:	84aa                	mv	s1,a0
+    80003ec6:	10050a63          	beqz	a0,80003fda <create+0x136>
+    return 0;
+
+  ilock(dp);
+    80003eca:	8d1fe0ef          	jal	8000279a <ilock>
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    80003ece:	4601                	li	a2,0
+    80003ed0:	fb040593          	addi	a1,s0,-80
+    80003ed4:	8526                	mv	a0,s1
+    80003ed6:	d39fe0ef          	jal	80002c0e <dirlookup>
+    80003eda:	8aaa                	mv	s5,a0
+    80003edc:	c129                	beqz	a0,80003f1e <create+0x7a>
+    iunlockput(dp);
+    80003ede:	8526                	mv	a0,s1
+    80003ee0:	ac5fe0ef          	jal	800029a4 <iunlockput>
+    ilock(ip);
+    80003ee4:	8556                	mv	a0,s5
+    80003ee6:	8b5fe0ef          	jal	8000279a <ilock>
+    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
+    80003eea:	4789                	li	a5,2
+    80003eec:	02fb1463          	bne	s6,a5,80003f14 <create+0x70>
+    80003ef0:	044ad783          	lhu	a5,68(s5)
+    80003ef4:	37f9                	addiw	a5,a5,-2
+    80003ef6:	17c2                	slli	a5,a5,0x30
+    80003ef8:	93c1                	srli	a5,a5,0x30
+    80003efa:	4705                	li	a4,1
+    80003efc:	00f76c63          	bltu	a4,a5,80003f14 <create+0x70>
+  ip->nlink = 0;
+  iupdate(ip);
+  iunlockput(ip);
+  iunlockput(dp);
+  return 0;
+}
+    80003f00:	8556                	mv	a0,s5
+    80003f02:	60a6                	ld	ra,72(sp)
+    80003f04:	6406                	ld	s0,64(sp)
+    80003f06:	74e2                	ld	s1,56(sp)
+    80003f08:	7942                	ld	s2,48(sp)
+    80003f0a:	79a2                	ld	s3,40(sp)
+    80003f0c:	6ae2                	ld	s5,24(sp)
+    80003f0e:	6b42                	ld	s6,16(sp)
+    80003f10:	6161                	addi	sp,sp,80
+    80003f12:	8082                	ret
+    iunlockput(ip);
+    80003f14:	8556                	mv	a0,s5
+    80003f16:	a8ffe0ef          	jal	800029a4 <iunlockput>
+    return 0;
+    80003f1a:	4a81                	li	s5,0
+    80003f1c:	b7d5                	j	80003f00 <create+0x5c>
+    80003f1e:	f052                	sd	s4,32(sp)
+  if((ip = ialloc(dp->dev, type)) == 0){
+    80003f20:	85da                	mv	a1,s6
+    80003f22:	4088                	lw	a0,0(s1)
+    80003f24:	f06fe0ef          	jal	8000262a <ialloc>
+    80003f28:	8a2a                	mv	s4,a0
+    80003f2a:	cd15                	beqz	a0,80003f66 <create+0xc2>
+  ilock(ip);
+    80003f2c:	86ffe0ef          	jal	8000279a <ilock>
+  ip->major = major;
+    80003f30:	053a1323          	sh	s3,70(s4)
+  ip->minor = minor;
+    80003f34:	052a1423          	sh	s2,72(s4)
+  ip->nlink = 1;
+    80003f38:	4905                	li	s2,1
+    80003f3a:	052a1523          	sh	s2,74(s4)
+  iupdate(ip);
+    80003f3e:	8552                	mv	a0,s4
+    80003f40:	fa6fe0ef          	jal	800026e6 <iupdate>
+  if(type == T_DIR){  // Create . and .. entries.
+    80003f44:	032b0763          	beq	s6,s2,80003f72 <create+0xce>
+  if(dirlink(dp, name, ip->inum) < 0)
+    80003f48:	004a2603          	lw	a2,4(s4)
+    80003f4c:	fb040593          	addi	a1,s0,-80
+    80003f50:	8526                	mv	a0,s1
+    80003f52:	e89fe0ef          	jal	80002dda <dirlink>
+    80003f56:	06054563          	bltz	a0,80003fc0 <create+0x11c>
+  iunlockput(dp);
+    80003f5a:	8526                	mv	a0,s1
+    80003f5c:	a49fe0ef          	jal	800029a4 <iunlockput>
+  return ip;
+    80003f60:	8ad2                	mv	s5,s4
+    80003f62:	7a02                	ld	s4,32(sp)
+    80003f64:	bf71                	j	80003f00 <create+0x5c>
+    iunlockput(dp);
+    80003f66:	8526                	mv	a0,s1
+    80003f68:	a3dfe0ef          	jal	800029a4 <iunlockput>
+    return 0;
+    80003f6c:	8ad2                	mv	s5,s4
+    80003f6e:	7a02                	ld	s4,32(sp)
+    80003f70:	bf41                	j	80003f00 <create+0x5c>
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+    80003f72:	004a2603          	lw	a2,4(s4)
+    80003f76:	00003597          	auipc	a1,0x3
+    80003f7a:	72258593          	addi	a1,a1,1826 # 80007698 <etext+0x698>
+    80003f7e:	8552                	mv	a0,s4
+    80003f80:	e5bfe0ef          	jal	80002dda <dirlink>
+    80003f84:	02054e63          	bltz	a0,80003fc0 <create+0x11c>
+    80003f88:	40d0                	lw	a2,4(s1)
+    80003f8a:	00003597          	auipc	a1,0x3
+    80003f8e:	71658593          	addi	a1,a1,1814 # 800076a0 <etext+0x6a0>
+    80003f92:	8552                	mv	a0,s4
+    80003f94:	e47fe0ef          	jal	80002dda <dirlink>
+    80003f98:	02054463          	bltz	a0,80003fc0 <create+0x11c>
+  if(dirlink(dp, name, ip->inum) < 0)
+    80003f9c:	004a2603          	lw	a2,4(s4)
+    80003fa0:	fb040593          	addi	a1,s0,-80
+    80003fa4:	8526                	mv	a0,s1
+    80003fa6:	e35fe0ef          	jal	80002dda <dirlink>
+    80003faa:	00054b63          	bltz	a0,80003fc0 <create+0x11c>
+    dp->nlink++;  // for ".."
+    80003fae:	04a4d783          	lhu	a5,74(s1)
+    80003fb2:	2785                	addiw	a5,a5,1
+    80003fb4:	04f49523          	sh	a5,74(s1)
+    iupdate(dp);
+    80003fb8:	8526                	mv	a0,s1
+    80003fba:	f2cfe0ef          	jal	800026e6 <iupdate>
+    80003fbe:	bf71                	j	80003f5a <create+0xb6>
+  ip->nlink = 0;
+    80003fc0:	040a1523          	sh	zero,74(s4)
+  iupdate(ip);
+    80003fc4:	8552                	mv	a0,s4
+    80003fc6:	f20fe0ef          	jal	800026e6 <iupdate>
+  iunlockput(ip);
+    80003fca:	8552                	mv	a0,s4
+    80003fcc:	9d9fe0ef          	jal	800029a4 <iunlockput>
+  iunlockput(dp);
+    80003fd0:	8526                	mv	a0,s1
+    80003fd2:	9d3fe0ef          	jal	800029a4 <iunlockput>
+  return 0;
+    80003fd6:	7a02                	ld	s4,32(sp)
+    80003fd8:	b725                	j	80003f00 <create+0x5c>
+    return 0;
+    80003fda:	8aaa                	mv	s5,a0
+    80003fdc:	b715                	j	80003f00 <create+0x5c>
+
+0000000080003fde <sys_dup>:
+{
+    80003fde:	7179                	addi	sp,sp,-48
+    80003fe0:	f406                	sd	ra,40(sp)
+    80003fe2:	f022                	sd	s0,32(sp)
+    80003fe4:	1800                	addi	s0,sp,48
+  if(argfd(0, 0, &f) < 0)
+    80003fe6:	fd840613          	addi	a2,s0,-40
+    80003fea:	4581                	li	a1,0
+    80003fec:	4501                	li	a0,0
+    80003fee:	e21ff0ef          	jal	80003e0e <argfd>
+    return -1;
+    80003ff2:	57fd                	li	a5,-1
+  if(argfd(0, 0, &f) < 0)
+    80003ff4:	02054363          	bltz	a0,8000401a <sys_dup+0x3c>
+    80003ff8:	ec26                	sd	s1,24(sp)
+    80003ffa:	e84a                	sd	s2,16(sp)
+  if((fd=fdalloc(f)) < 0)
+    80003ffc:	fd843903          	ld	s2,-40(s0)
+    80004000:	854a                	mv	a0,s2
+    80004002:	e65ff0ef          	jal	80003e66 <fdalloc>
+    80004006:	84aa                	mv	s1,a0
+    return -1;
+    80004008:	57fd                	li	a5,-1
+  if((fd=fdalloc(f)) < 0)
+    8000400a:	00054d63          	bltz	a0,80004024 <sys_dup+0x46>
+  filedup(f);
+    8000400e:	854a                	mv	a0,s2
+    80004010:	bf4ff0ef          	jal	80003404 <filedup>
+  return fd;
+    80004014:	87a6                	mv	a5,s1
+    80004016:	64e2                	ld	s1,24(sp)
+    80004018:	6942                	ld	s2,16(sp)
+}
+    8000401a:	853e                	mv	a0,a5
+    8000401c:	70a2                	ld	ra,40(sp)
+    8000401e:	7402                	ld	s0,32(sp)
+    80004020:	6145                	addi	sp,sp,48
+    80004022:	8082                	ret
+    80004024:	64e2                	ld	s1,24(sp)
+    80004026:	6942                	ld	s2,16(sp)
+    80004028:	bfcd                	j	8000401a <sys_dup+0x3c>
+
+000000008000402a <sys_read>:
+{
+    8000402a:	7179                	addi	sp,sp,-48
+    8000402c:	f406                	sd	ra,40(sp)
+    8000402e:	f022                	sd	s0,32(sp)
+    80004030:	1800                	addi	s0,sp,48
+  argaddr(1, &p);
+    80004032:	fd840593          	addi	a1,s0,-40
+    80004036:	4505                	li	a0,1
+    80004038:	c97fd0ef          	jal	80001cce <argaddr>
+  argint(2, &n);
+    8000403c:	fe440593          	addi	a1,s0,-28
+    80004040:	4509                	li	a0,2
+    80004042:	c71fd0ef          	jal	80001cb2 <argint>
+  if(argfd(0, 0, &f) < 0)
+    80004046:	fe840613          	addi	a2,s0,-24
+    8000404a:	4581                	li	a1,0
+    8000404c:	4501                	li	a0,0
+    8000404e:	dc1ff0ef          	jal	80003e0e <argfd>
+    80004052:	87aa                	mv	a5,a0
+    return -1;
+    80004054:	557d                	li	a0,-1
+  if(argfd(0, 0, &f) < 0)
+    80004056:	0007ca63          	bltz	a5,8000406a <sys_read+0x40>
+  return fileread(f, p, n);
+    8000405a:	fe442603          	lw	a2,-28(s0)
+    8000405e:	fd843583          	ld	a1,-40(s0)
+    80004062:	fe843503          	ld	a0,-24(s0)
+    80004066:	d04ff0ef          	jal	8000356a <fileread>
+}
+    8000406a:	70a2                	ld	ra,40(sp)
+    8000406c:	7402                	ld	s0,32(sp)
+    8000406e:	6145                	addi	sp,sp,48
+    80004070:	8082                	ret
+
+0000000080004072 <sys_write>:
+{
+    80004072:	7179                	addi	sp,sp,-48
+    80004074:	f406                	sd	ra,40(sp)
+    80004076:	f022                	sd	s0,32(sp)
+    80004078:	1800                	addi	s0,sp,48
+  argaddr(1, &p);
+    8000407a:	fd840593          	addi	a1,s0,-40
+    8000407e:	4505                	li	a0,1
+    80004080:	c4ffd0ef          	jal	80001cce <argaddr>
+  argint(2, &n);
+    80004084:	fe440593          	addi	a1,s0,-28
+    80004088:	4509                	li	a0,2
+    8000408a:	c29fd0ef          	jal	80001cb2 <argint>
+  if(argfd(0, 0, &f) < 0)
+    8000408e:	fe840613          	addi	a2,s0,-24
+    80004092:	4581                	li	a1,0
+    80004094:	4501                	li	a0,0
+    80004096:	d79ff0ef          	jal	80003e0e <argfd>
+    8000409a:	87aa                	mv	a5,a0
+    return -1;
+    8000409c:	557d                	li	a0,-1
+  if(argfd(0, 0, &f) < 0)
+    8000409e:	0007ca63          	bltz	a5,800040b2 <sys_write+0x40>
+  return filewrite(f, p, n);
+    800040a2:	fe442603          	lw	a2,-28(s0)
+    800040a6:	fd843583          	ld	a1,-40(s0)
+    800040aa:	fe843503          	ld	a0,-24(s0)
+    800040ae:	d7aff0ef          	jal	80003628 <filewrite>
+}
+    800040b2:	70a2                	ld	ra,40(sp)
+    800040b4:	7402                	ld	s0,32(sp)
+    800040b6:	6145                	addi	sp,sp,48
+    800040b8:	8082                	ret
+
+00000000800040ba <sys_close>:
+{
+    800040ba:	1101                	addi	sp,sp,-32
+    800040bc:	ec06                	sd	ra,24(sp)
+    800040be:	e822                	sd	s0,16(sp)
+    800040c0:	1000                	addi	s0,sp,32
+  if(argfd(0, &fd, &f) < 0)
+    800040c2:	fe040613          	addi	a2,s0,-32
+    800040c6:	fec40593          	addi	a1,s0,-20
+    800040ca:	4501                	li	a0,0
+    800040cc:	d43ff0ef          	jal	80003e0e <argfd>
+    return -1;
+    800040d0:	57fd                	li	a5,-1
+  if(argfd(0, &fd, &f) < 0)
+    800040d2:	02054063          	bltz	a0,800040f2 <sys_close+0x38>
+  myproc()->ofile[fd] = 0;
+    800040d6:	cd3fc0ef          	jal	80000da8 <myproc>
+    800040da:	fec42783          	lw	a5,-20(s0)
+    800040de:	07e9                	addi	a5,a5,26
+    800040e0:	078e                	slli	a5,a5,0x3
+    800040e2:	953e                	add	a0,a0,a5
+    800040e4:	00053023          	sd	zero,0(a0)
+  fileclose(f);
+    800040e8:	fe043503          	ld	a0,-32(s0)
+    800040ec:	b5eff0ef          	jal	8000344a <fileclose>
+  return 0;
+    800040f0:	4781                	li	a5,0
+}
+    800040f2:	853e                	mv	a0,a5
+    800040f4:	60e2                	ld	ra,24(sp)
+    800040f6:	6442                	ld	s0,16(sp)
+    800040f8:	6105                	addi	sp,sp,32
+    800040fa:	8082                	ret
+
+00000000800040fc <sys_fstat>:
+{
+    800040fc:	1101                	addi	sp,sp,-32
+    800040fe:	ec06                	sd	ra,24(sp)
+    80004100:	e822                	sd	s0,16(sp)
+    80004102:	1000                	addi	s0,sp,32
+  argaddr(1, &st);
+    80004104:	fe040593          	addi	a1,s0,-32
+    80004108:	4505                	li	a0,1
+    8000410a:	bc5fd0ef          	jal	80001cce <argaddr>
+  if(argfd(0, 0, &f) < 0)
+    8000410e:	fe840613          	addi	a2,s0,-24
+    80004112:	4581                	li	a1,0
+    80004114:	4501                	li	a0,0
+    80004116:	cf9ff0ef          	jal	80003e0e <argfd>
+    8000411a:	87aa                	mv	a5,a0
+    return -1;
+    8000411c:	557d                	li	a0,-1
+  if(argfd(0, 0, &f) < 0)
+    8000411e:	0007c863          	bltz	a5,8000412e <sys_fstat+0x32>
+  return filestat(f, st);
+    80004122:	fe043583          	ld	a1,-32(s0)
+    80004126:	fe843503          	ld	a0,-24(s0)
+    8000412a:	be2ff0ef          	jal	8000350c <filestat>
+}
+    8000412e:	60e2                	ld	ra,24(sp)
+    80004130:	6442                	ld	s0,16(sp)
+    80004132:	6105                	addi	sp,sp,32
+    80004134:	8082                	ret
+
+0000000080004136 <sys_link>:
+{
+    80004136:	7169                	addi	sp,sp,-304
+    80004138:	f606                	sd	ra,296(sp)
+    8000413a:	f222                	sd	s0,288(sp)
+    8000413c:	1a00                	addi	s0,sp,304
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    8000413e:	08000613          	li	a2,128
+    80004142:	ed040593          	addi	a1,s0,-304
+    80004146:	4501                	li	a0,0
+    80004148:	ba3fd0ef          	jal	80001cea <argstr>
+    return -1;
+    8000414c:	57fd                	li	a5,-1
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    8000414e:	0c054e63          	bltz	a0,8000422a <sys_link+0xf4>
+    80004152:	08000613          	li	a2,128
+    80004156:	f5040593          	addi	a1,s0,-176
+    8000415a:	4505                	li	a0,1
+    8000415c:	b8ffd0ef          	jal	80001cea <argstr>
+    return -1;
+    80004160:	57fd                	li	a5,-1
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    80004162:	0c054463          	bltz	a0,8000422a <sys_link+0xf4>
+    80004166:	ee26                	sd	s1,280(sp)
+  begin_op();
+    80004168:	ec9fe0ef          	jal	80003030 <begin_op>
+  if((ip = namei(old)) == 0){
+    8000416c:	ed040513          	addi	a0,s0,-304
+    80004170:	d05fe0ef          	jal	80002e74 <namei>
+    80004174:	84aa                	mv	s1,a0
+    80004176:	c53d                	beqz	a0,800041e4 <sys_link+0xae>
+  ilock(ip);
+    80004178:	e22fe0ef          	jal	8000279a <ilock>
+  if(ip->type == T_DIR){
+    8000417c:	04449703          	lh	a4,68(s1)
+    80004180:	4785                	li	a5,1
+    80004182:	06f70663          	beq	a4,a5,800041ee <sys_link+0xb8>
+    80004186:	ea4a                	sd	s2,272(sp)
+  ip->nlink++;
+    80004188:	04a4d783          	lhu	a5,74(s1)
+    8000418c:	2785                	addiw	a5,a5,1
+    8000418e:	04f49523          	sh	a5,74(s1)
+  iupdate(ip);
+    80004192:	8526                	mv	a0,s1
+    80004194:	d52fe0ef          	jal	800026e6 <iupdate>
+  iunlock(ip);
+    80004198:	8526                	mv	a0,s1
+    8000419a:	eaefe0ef          	jal	80002848 <iunlock>
+  if((dp = nameiparent(new, name)) == 0)
+    8000419e:	fd040593          	addi	a1,s0,-48
+    800041a2:	f5040513          	addi	a0,s0,-176
+    800041a6:	ce9fe0ef          	jal	80002e8e <nameiparent>
+    800041aa:	892a                	mv	s2,a0
+    800041ac:	cd21                	beqz	a0,80004204 <sys_link+0xce>
+  ilock(dp);
+    800041ae:	decfe0ef          	jal	8000279a <ilock>
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    800041b2:	00092703          	lw	a4,0(s2)
+    800041b6:	409c                	lw	a5,0(s1)
+    800041b8:	04f71363          	bne	a4,a5,800041fe <sys_link+0xc8>
+    800041bc:	40d0                	lw	a2,4(s1)
+    800041be:	fd040593          	addi	a1,s0,-48
+    800041c2:	854a                	mv	a0,s2
+    800041c4:	c17fe0ef          	jal	80002dda <dirlink>
+    800041c8:	02054b63          	bltz	a0,800041fe <sys_link+0xc8>
+  iunlockput(dp);
+    800041cc:	854a                	mv	a0,s2
+    800041ce:	fd6fe0ef          	jal	800029a4 <iunlockput>
+  iput(ip);
+    800041d2:	8526                	mv	a0,s1
+    800041d4:	f48fe0ef          	jal	8000291c <iput>
+  end_op();
+    800041d8:	ec3fe0ef          	jal	8000309a <end_op>
+  return 0;
+    800041dc:	4781                	li	a5,0
+    800041de:	64f2                	ld	s1,280(sp)
+    800041e0:	6952                	ld	s2,272(sp)
+    800041e2:	a0a1                	j	8000422a <sys_link+0xf4>
+    end_op();
+    800041e4:	eb7fe0ef          	jal	8000309a <end_op>
+    return -1;
+    800041e8:	57fd                	li	a5,-1
+    800041ea:	64f2                	ld	s1,280(sp)
+    800041ec:	a83d                	j	8000422a <sys_link+0xf4>
+    iunlockput(ip);
+    800041ee:	8526                	mv	a0,s1
+    800041f0:	fb4fe0ef          	jal	800029a4 <iunlockput>
+    end_op();
+    800041f4:	ea7fe0ef          	jal	8000309a <end_op>
+    return -1;
+    800041f8:	57fd                	li	a5,-1
+    800041fa:	64f2                	ld	s1,280(sp)
+    800041fc:	a03d                	j	8000422a <sys_link+0xf4>
+    iunlockput(dp);
+    800041fe:	854a                	mv	a0,s2
+    80004200:	fa4fe0ef          	jal	800029a4 <iunlockput>
+  ilock(ip);
+    80004204:	8526                	mv	a0,s1
+    80004206:	d94fe0ef          	jal	8000279a <ilock>
+  ip->nlink--;
+    8000420a:	04a4d783          	lhu	a5,74(s1)
+    8000420e:	37fd                	addiw	a5,a5,-1
+    80004210:	04f49523          	sh	a5,74(s1)
+  iupdate(ip);
+    80004214:	8526                	mv	a0,s1
+    80004216:	cd0fe0ef          	jal	800026e6 <iupdate>
+  iunlockput(ip);
+    8000421a:	8526                	mv	a0,s1
+    8000421c:	f88fe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    80004220:	e7bfe0ef          	jal	8000309a <end_op>
+  return -1;
+    80004224:	57fd                	li	a5,-1
+    80004226:	64f2                	ld	s1,280(sp)
+    80004228:	6952                	ld	s2,272(sp)
+}
+    8000422a:	853e                	mv	a0,a5
+    8000422c:	70b2                	ld	ra,296(sp)
+    8000422e:	7412                	ld	s0,288(sp)
+    80004230:	6155                	addi	sp,sp,304
+    80004232:	8082                	ret
+
+0000000080004234 <sys_unlink>:
+{
+    80004234:	7151                	addi	sp,sp,-240
+    80004236:	f586                	sd	ra,232(sp)
+    80004238:	f1a2                	sd	s0,224(sp)
+    8000423a:	1980                	addi	s0,sp,240
+  if(argstr(0, path, MAXPATH) < 0)
+    8000423c:	08000613          	li	a2,128
+    80004240:	f3040593          	addi	a1,s0,-208
+    80004244:	4501                	li	a0,0
+    80004246:	aa5fd0ef          	jal	80001cea <argstr>
+    8000424a:	16054063          	bltz	a0,800043aa <sys_unlink+0x176>
+    8000424e:	eda6                	sd	s1,216(sp)
+  begin_op();
+    80004250:	de1fe0ef          	jal	80003030 <begin_op>
+  if((dp = nameiparent(path, name)) == 0){
+    80004254:	fb040593          	addi	a1,s0,-80
+    80004258:	f3040513          	addi	a0,s0,-208
+    8000425c:	c33fe0ef          	jal	80002e8e <nameiparent>
+    80004260:	84aa                	mv	s1,a0
+    80004262:	c945                	beqz	a0,80004312 <sys_unlink+0xde>
+  ilock(dp);
+    80004264:	d36fe0ef          	jal	8000279a <ilock>
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    80004268:	00003597          	auipc	a1,0x3
+    8000426c:	43058593          	addi	a1,a1,1072 # 80007698 <etext+0x698>
+    80004270:	fb040513          	addi	a0,s0,-80
+    80004274:	985fe0ef          	jal	80002bf8 <namecmp>
+    80004278:	10050e63          	beqz	a0,80004394 <sys_unlink+0x160>
+    8000427c:	00003597          	auipc	a1,0x3
+    80004280:	42458593          	addi	a1,a1,1060 # 800076a0 <etext+0x6a0>
+    80004284:	fb040513          	addi	a0,s0,-80
+    80004288:	971fe0ef          	jal	80002bf8 <namecmp>
+    8000428c:	10050463          	beqz	a0,80004394 <sys_unlink+0x160>
+    80004290:	e9ca                	sd	s2,208(sp)
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    80004292:	f2c40613          	addi	a2,s0,-212
+    80004296:	fb040593          	addi	a1,s0,-80
+    8000429a:	8526                	mv	a0,s1
+    8000429c:	973fe0ef          	jal	80002c0e <dirlookup>
+    800042a0:	892a                	mv	s2,a0
+    800042a2:	0e050863          	beqz	a0,80004392 <sys_unlink+0x15e>
+  ilock(ip);
+    800042a6:	cf4fe0ef          	jal	8000279a <ilock>
+  if(ip->nlink < 1)
+    800042aa:	04a91783          	lh	a5,74(s2)
+    800042ae:	06f05763          	blez	a5,8000431c <sys_unlink+0xe8>
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    800042b2:	04491703          	lh	a4,68(s2)
+    800042b6:	4785                	li	a5,1
+    800042b8:	06f70963          	beq	a4,a5,8000432a <sys_unlink+0xf6>
+  memset(&de, 0, sizeof(de));
+    800042bc:	4641                	li	a2,16
+    800042be:	4581                	li	a1,0
+    800042c0:	fc040513          	addi	a0,s0,-64
+    800042c4:	ecdfb0ef          	jal	80000190 <memset>
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    800042c8:	4741                	li	a4,16
+    800042ca:	f2c42683          	lw	a3,-212(s0)
+    800042ce:	fc040613          	addi	a2,s0,-64
+    800042d2:	4581                	li	a1,0
+    800042d4:	8526                	mv	a0,s1
+    800042d6:	815fe0ef          	jal	80002aea <writei>
+    800042da:	47c1                	li	a5,16
+    800042dc:	08f51b63          	bne	a0,a5,80004372 <sys_unlink+0x13e>
+  if(ip->type == T_DIR){
+    800042e0:	04491703          	lh	a4,68(s2)
+    800042e4:	4785                	li	a5,1
+    800042e6:	08f70d63          	beq	a4,a5,80004380 <sys_unlink+0x14c>
+  iunlockput(dp);
+    800042ea:	8526                	mv	a0,s1
+    800042ec:	eb8fe0ef          	jal	800029a4 <iunlockput>
+  ip->nlink--;
+    800042f0:	04a95783          	lhu	a5,74(s2)
+    800042f4:	37fd                	addiw	a5,a5,-1
+    800042f6:	04f91523          	sh	a5,74(s2)
+  iupdate(ip);
+    800042fa:	854a                	mv	a0,s2
+    800042fc:	beafe0ef          	jal	800026e6 <iupdate>
+  iunlockput(ip);
+    80004300:	854a                	mv	a0,s2
+    80004302:	ea2fe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    80004306:	d95fe0ef          	jal	8000309a <end_op>
+  return 0;
+    8000430a:	4501                	li	a0,0
+    8000430c:	64ee                	ld	s1,216(sp)
+    8000430e:	694e                	ld	s2,208(sp)
+    80004310:	a849                	j	800043a2 <sys_unlink+0x16e>
+    end_op();
+    80004312:	d89fe0ef          	jal	8000309a <end_op>
+    return -1;
+    80004316:	557d                	li	a0,-1
+    80004318:	64ee                	ld	s1,216(sp)
+    8000431a:	a061                	j	800043a2 <sys_unlink+0x16e>
+    8000431c:	e5ce                	sd	s3,200(sp)
+    panic("unlink: nlink < 1");
+    8000431e:	00003517          	auipc	a0,0x3
+    80004322:	38a50513          	addi	a0,a0,906 # 800076a8 <etext+0x6a8>
+    80004326:	27c010ef          	jal	800055a2 <panic>
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    8000432a:	04c92703          	lw	a4,76(s2)
+    8000432e:	02000793          	li	a5,32
+    80004332:	f8e7f5e3          	bgeu	a5,a4,800042bc <sys_unlink+0x88>
+    80004336:	e5ce                	sd	s3,200(sp)
+    80004338:	02000993          	li	s3,32
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    8000433c:	4741                	li	a4,16
+    8000433e:	86ce                	mv	a3,s3
+    80004340:	f1840613          	addi	a2,s0,-232
+    80004344:	4581                	li	a1,0
+    80004346:	854a                	mv	a0,s2
+    80004348:	ea6fe0ef          	jal	800029ee <readi>
+    8000434c:	47c1                	li	a5,16
+    8000434e:	00f51c63          	bne	a0,a5,80004366 <sys_unlink+0x132>
+    if(de.inum != 0)
+    80004352:	f1845783          	lhu	a5,-232(s0)
+    80004356:	efa1                	bnez	a5,800043ae <sys_unlink+0x17a>
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    80004358:	29c1                	addiw	s3,s3,16
+    8000435a:	04c92783          	lw	a5,76(s2)
+    8000435e:	fcf9efe3          	bltu	s3,a5,8000433c <sys_unlink+0x108>
+    80004362:	69ae                	ld	s3,200(sp)
+    80004364:	bfa1                	j	800042bc <sys_unlink+0x88>
+      panic("isdirempty: readi");
+    80004366:	00003517          	auipc	a0,0x3
+    8000436a:	35a50513          	addi	a0,a0,858 # 800076c0 <etext+0x6c0>
+    8000436e:	234010ef          	jal	800055a2 <panic>
+    80004372:	e5ce                	sd	s3,200(sp)
+    panic("unlink: writei");
+    80004374:	00003517          	auipc	a0,0x3
+    80004378:	36450513          	addi	a0,a0,868 # 800076d8 <etext+0x6d8>
+    8000437c:	226010ef          	jal	800055a2 <panic>
+    dp->nlink--;
+    80004380:	04a4d783          	lhu	a5,74(s1)
+    80004384:	37fd                	addiw	a5,a5,-1
+    80004386:	04f49523          	sh	a5,74(s1)
+    iupdate(dp);
+    8000438a:	8526                	mv	a0,s1
+    8000438c:	b5afe0ef          	jal	800026e6 <iupdate>
+    80004390:	bfa9                	j	800042ea <sys_unlink+0xb6>
+    80004392:	694e                	ld	s2,208(sp)
+  iunlockput(dp);
+    80004394:	8526                	mv	a0,s1
+    80004396:	e0efe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    8000439a:	d01fe0ef          	jal	8000309a <end_op>
+  return -1;
+    8000439e:	557d                	li	a0,-1
+    800043a0:	64ee                	ld	s1,216(sp)
+}
+    800043a2:	70ae                	ld	ra,232(sp)
+    800043a4:	740e                	ld	s0,224(sp)
+    800043a6:	616d                	addi	sp,sp,240
+    800043a8:	8082                	ret
+    return -1;
+    800043aa:	557d                	li	a0,-1
+    800043ac:	bfdd                	j	800043a2 <sys_unlink+0x16e>
+    iunlockput(ip);
+    800043ae:	854a                	mv	a0,s2
+    800043b0:	df4fe0ef          	jal	800029a4 <iunlockput>
+    goto bad;
+    800043b4:	694e                	ld	s2,208(sp)
+    800043b6:	69ae                	ld	s3,200(sp)
+    800043b8:	bff1                	j	80004394 <sys_unlink+0x160>
+
+00000000800043ba <sys_open>:
+
+uint64
+sys_open(void)
+{
+    800043ba:	7131                	addi	sp,sp,-192
+    800043bc:	fd06                	sd	ra,184(sp)
+    800043be:	f922                	sd	s0,176(sp)
+    800043c0:	0180                	addi	s0,sp,192
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+  int n;
+
+  argint(1, &omode);
+    800043c2:	f4c40593          	addi	a1,s0,-180
+    800043c6:	4505                	li	a0,1
+    800043c8:	8ebfd0ef          	jal	80001cb2 <argint>
+  if((n = argstr(0, path, MAXPATH)) < 0)
+    800043cc:	08000613          	li	a2,128
+    800043d0:	f5040593          	addi	a1,s0,-176
+    800043d4:	4501                	li	a0,0
+    800043d6:	915fd0ef          	jal	80001cea <argstr>
+    800043da:	87aa                	mv	a5,a0
+    return -1;
+    800043dc:	557d                	li	a0,-1
+  if((n = argstr(0, path, MAXPATH)) < 0)
+    800043de:	0a07c263          	bltz	a5,80004482 <sys_open+0xc8>
+    800043e2:	f526                	sd	s1,168(sp)
+
+  begin_op();
+    800043e4:	c4dfe0ef          	jal	80003030 <begin_op>
+
+  if(omode & O_CREATE){
+    800043e8:	f4c42783          	lw	a5,-180(s0)
+    800043ec:	2007f793          	andi	a5,a5,512
+    800043f0:	c3d5                	beqz	a5,80004494 <sys_open+0xda>
+    ip = create(path, T_FILE, 0, 0);
+    800043f2:	4681                	li	a3,0
+    800043f4:	4601                	li	a2,0
+    800043f6:	4589                	li	a1,2
+    800043f8:	f5040513          	addi	a0,s0,-176
+    800043fc:	aa9ff0ef          	jal	80003ea4 <create>
+    80004400:	84aa                	mv	s1,a0
+    if(ip == 0){
+    80004402:	c541                	beqz	a0,8000448a <sys_open+0xd0>
+      end_op();
+      return -1;
+    }
+  }
+
+  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
+    80004404:	04449703          	lh	a4,68(s1)
+    80004408:	478d                	li	a5,3
+    8000440a:	00f71763          	bne	a4,a5,80004418 <sys_open+0x5e>
+    8000440e:	0464d703          	lhu	a4,70(s1)
+    80004412:	47a5                	li	a5,9
+    80004414:	0ae7ed63          	bltu	a5,a4,800044ce <sys_open+0x114>
+    80004418:	f14a                	sd	s2,160(sp)
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    8000441a:	f8dfe0ef          	jal	800033a6 <filealloc>
+    8000441e:	892a                	mv	s2,a0
+    80004420:	c179                	beqz	a0,800044e6 <sys_open+0x12c>
+    80004422:	ed4e                	sd	s3,152(sp)
+    80004424:	a43ff0ef          	jal	80003e66 <fdalloc>
+    80004428:	89aa                	mv	s3,a0
+    8000442a:	0a054a63          	bltz	a0,800044de <sys_open+0x124>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if(ip->type == T_DEVICE){
+    8000442e:	04449703          	lh	a4,68(s1)
+    80004432:	478d                	li	a5,3
+    80004434:	0cf70263          	beq	a4,a5,800044f8 <sys_open+0x13e>
+    f->type = FD_DEVICE;
+    f->major = ip->major;
+  } else {
+    f->type = FD_INODE;
+    80004438:	4789                	li	a5,2
+    8000443a:	00f92023          	sw	a5,0(s2)
+    f->off = 0;
+    8000443e:	02092023          	sw	zero,32(s2)
+  }
+  f->ip = ip;
+    80004442:	00993c23          	sd	s1,24(s2)
+  f->readable = !(omode & O_WRONLY);
+    80004446:	f4c42783          	lw	a5,-180(s0)
+    8000444a:	0017c713          	xori	a4,a5,1
+    8000444e:	8b05                	andi	a4,a4,1
+    80004450:	00e90423          	sb	a4,8(s2)
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+    80004454:	0037f713          	andi	a4,a5,3
+    80004458:	00e03733          	snez	a4,a4
+    8000445c:	00e904a3          	sb	a4,9(s2)
+
+  if((omode & O_TRUNC) && ip->type == T_FILE){
+    80004460:	4007f793          	andi	a5,a5,1024
+    80004464:	c791                	beqz	a5,80004470 <sys_open+0xb6>
+    80004466:	04449703          	lh	a4,68(s1)
+    8000446a:	4789                	li	a5,2
+    8000446c:	08f70d63          	beq	a4,a5,80004506 <sys_open+0x14c>
+    itrunc(ip);
+  }
+
+  iunlock(ip);
+    80004470:	8526                	mv	a0,s1
+    80004472:	bd6fe0ef          	jal	80002848 <iunlock>
+  end_op();
+    80004476:	c25fe0ef          	jal	8000309a <end_op>
+
+  return fd;
+    8000447a:	854e                	mv	a0,s3
+    8000447c:	74aa                	ld	s1,168(sp)
+    8000447e:	790a                	ld	s2,160(sp)
+    80004480:	69ea                	ld	s3,152(sp)
+}
+    80004482:	70ea                	ld	ra,184(sp)
+    80004484:	744a                	ld	s0,176(sp)
+    80004486:	6129                	addi	sp,sp,192
+    80004488:	8082                	ret
+      end_op();
+    8000448a:	c11fe0ef          	jal	8000309a <end_op>
+      return -1;
+    8000448e:	557d                	li	a0,-1
+    80004490:	74aa                	ld	s1,168(sp)
+    80004492:	bfc5                	j	80004482 <sys_open+0xc8>
+    if((ip = namei(path)) == 0){
+    80004494:	f5040513          	addi	a0,s0,-176
+    80004498:	9ddfe0ef          	jal	80002e74 <namei>
+    8000449c:	84aa                	mv	s1,a0
+    8000449e:	c11d                	beqz	a0,800044c4 <sys_open+0x10a>
+    ilock(ip);
+    800044a0:	afafe0ef          	jal	8000279a <ilock>
+    if(ip->type == T_DIR && omode != O_RDONLY){
+    800044a4:	04449703          	lh	a4,68(s1)
+    800044a8:	4785                	li	a5,1
+    800044aa:	f4f71de3          	bne	a4,a5,80004404 <sys_open+0x4a>
+    800044ae:	f4c42783          	lw	a5,-180(s0)
+    800044b2:	d3bd                	beqz	a5,80004418 <sys_open+0x5e>
+      iunlockput(ip);
+    800044b4:	8526                	mv	a0,s1
+    800044b6:	ceefe0ef          	jal	800029a4 <iunlockput>
+      end_op();
+    800044ba:	be1fe0ef          	jal	8000309a <end_op>
+      return -1;
+    800044be:	557d                	li	a0,-1
+    800044c0:	74aa                	ld	s1,168(sp)
+    800044c2:	b7c1                	j	80004482 <sys_open+0xc8>
+      end_op();
+    800044c4:	bd7fe0ef          	jal	8000309a <end_op>
+      return -1;
+    800044c8:	557d                	li	a0,-1
+    800044ca:	74aa                	ld	s1,168(sp)
+    800044cc:	bf5d                	j	80004482 <sys_open+0xc8>
+    iunlockput(ip);
+    800044ce:	8526                	mv	a0,s1
+    800044d0:	cd4fe0ef          	jal	800029a4 <iunlockput>
+    end_op();
+    800044d4:	bc7fe0ef          	jal	8000309a <end_op>
+    return -1;
+    800044d8:	557d                	li	a0,-1
+    800044da:	74aa                	ld	s1,168(sp)
+    800044dc:	b75d                	j	80004482 <sys_open+0xc8>
+      fileclose(f);
+    800044de:	854a                	mv	a0,s2
+    800044e0:	f6bfe0ef          	jal	8000344a <fileclose>
+    800044e4:	69ea                	ld	s3,152(sp)
+    iunlockput(ip);
+    800044e6:	8526                	mv	a0,s1
+    800044e8:	cbcfe0ef          	jal	800029a4 <iunlockput>
+    end_op();
+    800044ec:	baffe0ef          	jal	8000309a <end_op>
+    return -1;
+    800044f0:	557d                	li	a0,-1
+    800044f2:	74aa                	ld	s1,168(sp)
+    800044f4:	790a                	ld	s2,160(sp)
+    800044f6:	b771                	j	80004482 <sys_open+0xc8>
+    f->type = FD_DEVICE;
+    800044f8:	00f92023          	sw	a5,0(s2)
+    f->major = ip->major;
+    800044fc:	04649783          	lh	a5,70(s1)
+    80004500:	02f91223          	sh	a5,36(s2)
+    80004504:	bf3d                	j	80004442 <sys_open+0x88>
+    itrunc(ip);
+    80004506:	8526                	mv	a0,s1
+    80004508:	b80fe0ef          	jal	80002888 <itrunc>
+    8000450c:	b795                	j	80004470 <sys_open+0xb6>
+
+000000008000450e <sys_mkdir>:
+
+uint64
+sys_mkdir(void)
+{
+    8000450e:	7175                	addi	sp,sp,-144
+    80004510:	e506                	sd	ra,136(sp)
+    80004512:	e122                	sd	s0,128(sp)
+    80004514:	0900                	addi	s0,sp,144
+  char path[MAXPATH];
+  struct inode *ip;
+
+  begin_op();
+    80004516:	b1bfe0ef          	jal	80003030 <begin_op>
+  if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    8000451a:	08000613          	li	a2,128
+    8000451e:	f7040593          	addi	a1,s0,-144
+    80004522:	4501                	li	a0,0
+    80004524:	fc6fd0ef          	jal	80001cea <argstr>
+    80004528:	02054363          	bltz	a0,8000454e <sys_mkdir+0x40>
+    8000452c:	4681                	li	a3,0
+    8000452e:	4601                	li	a2,0
+    80004530:	4585                	li	a1,1
+    80004532:	f7040513          	addi	a0,s0,-144
+    80004536:	96fff0ef          	jal	80003ea4 <create>
+    8000453a:	c911                	beqz	a0,8000454e <sys_mkdir+0x40>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+    8000453c:	c68fe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    80004540:	b5bfe0ef          	jal	8000309a <end_op>
+  return 0;
+    80004544:	4501                	li	a0,0
+}
+    80004546:	60aa                	ld	ra,136(sp)
+    80004548:	640a                	ld	s0,128(sp)
+    8000454a:	6149                	addi	sp,sp,144
+    8000454c:	8082                	ret
+    end_op();
+    8000454e:	b4dfe0ef          	jal	8000309a <end_op>
+    return -1;
+    80004552:	557d                	li	a0,-1
+    80004554:	bfcd                	j	80004546 <sys_mkdir+0x38>
+
+0000000080004556 <sys_mknod>:
+
+uint64
+sys_mknod(void)
+{
+    80004556:	7135                	addi	sp,sp,-160
+    80004558:	ed06                	sd	ra,152(sp)
+    8000455a:	e922                	sd	s0,144(sp)
+    8000455c:	1100                	addi	s0,sp,160
+  struct inode *ip;
+  char path[MAXPATH];
+  int major, minor;
+
+  begin_op();
+    8000455e:	ad3fe0ef          	jal	80003030 <begin_op>
+  argint(1, &major);
+    80004562:	f6c40593          	addi	a1,s0,-148
+    80004566:	4505                	li	a0,1
+    80004568:	f4afd0ef          	jal	80001cb2 <argint>
+  argint(2, &minor);
+    8000456c:	f6840593          	addi	a1,s0,-152
+    80004570:	4509                	li	a0,2
+    80004572:	f40fd0ef          	jal	80001cb2 <argint>
+  if((argstr(0, path, MAXPATH)) < 0 ||
+    80004576:	08000613          	li	a2,128
+    8000457a:	f7040593          	addi	a1,s0,-144
+    8000457e:	4501                	li	a0,0
+    80004580:	f6afd0ef          	jal	80001cea <argstr>
+    80004584:	02054563          	bltz	a0,800045ae <sys_mknod+0x58>
+     (ip = create(path, T_DEVICE, major, minor)) == 0){
+    80004588:	f6841683          	lh	a3,-152(s0)
+    8000458c:	f6c41603          	lh	a2,-148(s0)
+    80004590:	458d                	li	a1,3
+    80004592:	f7040513          	addi	a0,s0,-144
+    80004596:	90fff0ef          	jal	80003ea4 <create>
+  if((argstr(0, path, MAXPATH)) < 0 ||
+    8000459a:	c911                	beqz	a0,800045ae <sys_mknod+0x58>
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+    8000459c:	c08fe0ef          	jal	800029a4 <iunlockput>
+  end_op();
+    800045a0:	afbfe0ef          	jal	8000309a <end_op>
+  return 0;
+    800045a4:	4501                	li	a0,0
+}
+    800045a6:	60ea                	ld	ra,152(sp)
+    800045a8:	644a                	ld	s0,144(sp)
+    800045aa:	610d                	addi	sp,sp,160
+    800045ac:	8082                	ret
+    end_op();
+    800045ae:	aedfe0ef          	jal	8000309a <end_op>
+    return -1;
+    800045b2:	557d                	li	a0,-1
+    800045b4:	bfcd                	j	800045a6 <sys_mknod+0x50>
+
+00000000800045b6 <sys_chdir>:
+
+uint64
+sys_chdir(void)
+{
+    800045b6:	7135                	addi	sp,sp,-160
+    800045b8:	ed06                	sd	ra,152(sp)
+    800045ba:	e922                	sd	s0,144(sp)
+    800045bc:	e14a                	sd	s2,128(sp)
+    800045be:	1100                	addi	s0,sp,160
+  char path[MAXPATH];
+  struct inode *ip;
+  struct proc *p = myproc();
+    800045c0:	fe8fc0ef          	jal	80000da8 <myproc>
+    800045c4:	892a                	mv	s2,a0
+  
+  begin_op();
+    800045c6:	a6bfe0ef          	jal	80003030 <begin_op>
+  if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
+    800045ca:	08000613          	li	a2,128
+    800045ce:	f6040593          	addi	a1,s0,-160
+    800045d2:	4501                	li	a0,0
+    800045d4:	f16fd0ef          	jal	80001cea <argstr>
+    800045d8:	04054363          	bltz	a0,8000461e <sys_chdir+0x68>
+    800045dc:	e526                	sd	s1,136(sp)
+    800045de:	f6040513          	addi	a0,s0,-160
+    800045e2:	893fe0ef          	jal	80002e74 <namei>
+    800045e6:	84aa                	mv	s1,a0
+    800045e8:	c915                	beqz	a0,8000461c <sys_chdir+0x66>
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+    800045ea:	9b0fe0ef          	jal	8000279a <ilock>
+  if(ip->type != T_DIR){
+    800045ee:	04449703          	lh	a4,68(s1)
+    800045f2:	4785                	li	a5,1
+    800045f4:	02f71963          	bne	a4,a5,80004626 <sys_chdir+0x70>
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+    800045f8:	8526                	mv	a0,s1
+    800045fa:	a4efe0ef          	jal	80002848 <iunlock>
+  iput(p->cwd);
+    800045fe:	15093503          	ld	a0,336(s2)
+    80004602:	b1afe0ef          	jal	8000291c <iput>
+  end_op();
+    80004606:	a95fe0ef          	jal	8000309a <end_op>
+  p->cwd = ip;
+    8000460a:	14993823          	sd	s1,336(s2)
+  return 0;
+    8000460e:	4501                	li	a0,0
+    80004610:	64aa                	ld	s1,136(sp)
+}
+    80004612:	60ea                	ld	ra,152(sp)
+    80004614:	644a                	ld	s0,144(sp)
+    80004616:	690a                	ld	s2,128(sp)
+    80004618:	610d                	addi	sp,sp,160
+    8000461a:	8082                	ret
+    8000461c:	64aa                	ld	s1,136(sp)
+    end_op();
+    8000461e:	a7dfe0ef          	jal	8000309a <end_op>
+    return -1;
+    80004622:	557d                	li	a0,-1
+    80004624:	b7fd                	j	80004612 <sys_chdir+0x5c>
+    iunlockput(ip);
+    80004626:	8526                	mv	a0,s1
+    80004628:	b7cfe0ef          	jal	800029a4 <iunlockput>
+    end_op();
+    8000462c:	a6ffe0ef          	jal	8000309a <end_op>
+    return -1;
+    80004630:	557d                	li	a0,-1
+    80004632:	64aa                	ld	s1,136(sp)
+    80004634:	bff9                	j	80004612 <sys_chdir+0x5c>
+
+0000000080004636 <sys_exec>:
+
+uint64
+sys_exec(void)
+{
+    80004636:	7121                	addi	sp,sp,-448
+    80004638:	ff06                	sd	ra,440(sp)
+    8000463a:	fb22                	sd	s0,432(sp)
+    8000463c:	0380                	addi	s0,sp,448
+  char path[MAXPATH], *argv[MAXARG];
+  int i;
+  uint64 uargv, uarg;
+
+  argaddr(1, &uargv);
+    8000463e:	e4840593          	addi	a1,s0,-440
+    80004642:	4505                	li	a0,1
+    80004644:	e8afd0ef          	jal	80001cce <argaddr>
+  if(argstr(0, path, MAXPATH) < 0) {
+    80004648:	08000613          	li	a2,128
+    8000464c:	f5040593          	addi	a1,s0,-176
+    80004650:	4501                	li	a0,0
+    80004652:	e98fd0ef          	jal	80001cea <argstr>
+    80004656:	87aa                	mv	a5,a0
+    return -1;
+    80004658:	557d                	li	a0,-1
+  if(argstr(0, path, MAXPATH) < 0) {
+    8000465a:	0c07c463          	bltz	a5,80004722 <sys_exec+0xec>
+    8000465e:	f726                	sd	s1,424(sp)
+    80004660:	f34a                	sd	s2,416(sp)
+    80004662:	ef4e                	sd	s3,408(sp)
+    80004664:	eb52                	sd	s4,400(sp)
+  }
+  memset(argv, 0, sizeof(argv));
+    80004666:	10000613          	li	a2,256
+    8000466a:	4581                	li	a1,0
+    8000466c:	e5040513          	addi	a0,s0,-432
+    80004670:	b21fb0ef          	jal	80000190 <memset>
+  for(i=0;; i++){
+    if(i >= NELEM(argv)){
+    80004674:	e5040493          	addi	s1,s0,-432
+  memset(argv, 0, sizeof(argv));
+    80004678:	89a6                	mv	s3,s1
+    8000467a:	4901                	li	s2,0
+    if(i >= NELEM(argv)){
+    8000467c:	02000a13          	li	s4,32
+      goto bad;
+    }
+    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
+    80004680:	00391513          	slli	a0,s2,0x3
+    80004684:	e4040593          	addi	a1,s0,-448
+    80004688:	e4843783          	ld	a5,-440(s0)
+    8000468c:	953e                	add	a0,a0,a5
+    8000468e:	d9afd0ef          	jal	80001c28 <fetchaddr>
+    80004692:	02054663          	bltz	a0,800046be <sys_exec+0x88>
+      goto bad;
+    }
+    if(uarg == 0){
+    80004696:	e4043783          	ld	a5,-448(s0)
+    8000469a:	c3a9                	beqz	a5,800046dc <sys_exec+0xa6>
+      argv[i] = 0;
+      break;
+    }
+    argv[i] = kalloc();
+    8000469c:	a63fb0ef          	jal	800000fe <kalloc>
+    800046a0:	85aa                	mv	a1,a0
+    800046a2:	00a9b023          	sd	a0,0(s3)
+    if(argv[i] == 0)
+    800046a6:	cd01                	beqz	a0,800046be <sys_exec+0x88>
+      goto bad;
+    if(fetchstr(uarg, argv[i], PGSIZE) < 0)
+    800046a8:	6605                	lui	a2,0x1
+    800046aa:	e4043503          	ld	a0,-448(s0)
+    800046ae:	dc4fd0ef          	jal	80001c72 <fetchstr>
+    800046b2:	00054663          	bltz	a0,800046be <sys_exec+0x88>
+    if(i >= NELEM(argv)){
+    800046b6:	0905                	addi	s2,s2,1
+    800046b8:	09a1                	addi	s3,s3,8
+    800046ba:	fd4913e3          	bne	s2,s4,80004680 <sys_exec+0x4a>
+    kfree(argv[i]);
+
+  return ret;
+
+ bad:
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    800046be:	f5040913          	addi	s2,s0,-176
+    800046c2:	6088                	ld	a0,0(s1)
+    800046c4:	c931                	beqz	a0,80004718 <sys_exec+0xe2>
+    kfree(argv[i]);
+    800046c6:	957fb0ef          	jal	8000001c <kfree>
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    800046ca:	04a1                	addi	s1,s1,8
+    800046cc:	ff249be3          	bne	s1,s2,800046c2 <sys_exec+0x8c>
+  return -1;
+    800046d0:	557d                	li	a0,-1
+    800046d2:	74ba                	ld	s1,424(sp)
+    800046d4:	791a                	ld	s2,416(sp)
+    800046d6:	69fa                	ld	s3,408(sp)
+    800046d8:	6a5a                	ld	s4,400(sp)
+    800046da:	a0a1                	j	80004722 <sys_exec+0xec>
+      argv[i] = 0;
+    800046dc:	0009079b          	sext.w	a5,s2
+    800046e0:	078e                	slli	a5,a5,0x3
+    800046e2:	fd078793          	addi	a5,a5,-48
+    800046e6:	97a2                	add	a5,a5,s0
+    800046e8:	e807b023          	sd	zero,-384(a5)
+  int ret = exec(path, argv);
+    800046ec:	e5040593          	addi	a1,s0,-432
+    800046f0:	f5040513          	addi	a0,s0,-176
+    800046f4:	ba8ff0ef          	jal	80003a9c <exec>
+    800046f8:	892a                	mv	s2,a0
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    800046fa:	f5040993          	addi	s3,s0,-176
+    800046fe:	6088                	ld	a0,0(s1)
+    80004700:	c511                	beqz	a0,8000470c <sys_exec+0xd6>
+    kfree(argv[i]);
+    80004702:	91bfb0ef          	jal	8000001c <kfree>
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    80004706:	04a1                	addi	s1,s1,8
+    80004708:	ff349be3          	bne	s1,s3,800046fe <sys_exec+0xc8>
+  return ret;
+    8000470c:	854a                	mv	a0,s2
+    8000470e:	74ba                	ld	s1,424(sp)
+    80004710:	791a                	ld	s2,416(sp)
+    80004712:	69fa                	ld	s3,408(sp)
+    80004714:	6a5a                	ld	s4,400(sp)
+    80004716:	a031                	j	80004722 <sys_exec+0xec>
+  return -1;
+    80004718:	557d                	li	a0,-1
+    8000471a:	74ba                	ld	s1,424(sp)
+    8000471c:	791a                	ld	s2,416(sp)
+    8000471e:	69fa                	ld	s3,408(sp)
+    80004720:	6a5a                	ld	s4,400(sp)
+}
+    80004722:	70fa                	ld	ra,440(sp)
+    80004724:	745a                	ld	s0,432(sp)
+    80004726:	6139                	addi	sp,sp,448
+    80004728:	8082                	ret
+
+000000008000472a <sys_pipe>:
+
+uint64
+sys_pipe(void)
+{
+    8000472a:	7139                	addi	sp,sp,-64
+    8000472c:	fc06                	sd	ra,56(sp)
+    8000472e:	f822                	sd	s0,48(sp)
+    80004730:	f426                	sd	s1,40(sp)
+    80004732:	0080                	addi	s0,sp,64
+  uint64 fdarray; // user pointer to array of two integers
+  struct file *rf, *wf;
+  int fd0, fd1;
+  struct proc *p = myproc();
+    80004734:	e74fc0ef          	jal	80000da8 <myproc>
+    80004738:	84aa                	mv	s1,a0
+
+  argaddr(0, &fdarray);
+    8000473a:	fd840593          	addi	a1,s0,-40
+    8000473e:	4501                	li	a0,0
+    80004740:	d8efd0ef          	jal	80001cce <argaddr>
+  if(pipealloc(&rf, &wf) < 0)
+    80004744:	fc840593          	addi	a1,s0,-56
+    80004748:	fd040513          	addi	a0,s0,-48
+    8000474c:	85cff0ef          	jal	800037a8 <pipealloc>
+    return -1;
+    80004750:	57fd                	li	a5,-1
+  if(pipealloc(&rf, &wf) < 0)
+    80004752:	0a054463          	bltz	a0,800047fa <sys_pipe+0xd0>
+  fd0 = -1;
+    80004756:	fcf42223          	sw	a5,-60(s0)
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    8000475a:	fd043503          	ld	a0,-48(s0)
+    8000475e:	f08ff0ef          	jal	80003e66 <fdalloc>
+    80004762:	fca42223          	sw	a0,-60(s0)
+    80004766:	08054163          	bltz	a0,800047e8 <sys_pipe+0xbe>
+    8000476a:	fc843503          	ld	a0,-56(s0)
+    8000476e:	ef8ff0ef          	jal	80003e66 <fdalloc>
+    80004772:	fca42023          	sw	a0,-64(s0)
+    80004776:	06054063          	bltz	a0,800047d6 <sys_pipe+0xac>
+      p->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
+    8000477a:	4691                	li	a3,4
+    8000477c:	fc440613          	addi	a2,s0,-60
+    80004780:	fd843583          	ld	a1,-40(s0)
+    80004784:	68a8                	ld	a0,80(s1)
+    80004786:	a94fc0ef          	jal	80000a1a <copyout>
+    8000478a:	00054e63          	bltz	a0,800047a6 <sys_pipe+0x7c>
+     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
+    8000478e:	4691                	li	a3,4
+    80004790:	fc040613          	addi	a2,s0,-64
+    80004794:	fd843583          	ld	a1,-40(s0)
+    80004798:	0591                	addi	a1,a1,4
+    8000479a:	68a8                	ld	a0,80(s1)
+    8000479c:	a7efc0ef          	jal	80000a1a <copyout>
+    p->ofile[fd1] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  return 0;
+    800047a0:	4781                	li	a5,0
+  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
+    800047a2:	04055c63          	bgez	a0,800047fa <sys_pipe+0xd0>
+    p->ofile[fd0] = 0;
+    800047a6:	fc442783          	lw	a5,-60(s0)
+    800047aa:	07e9                	addi	a5,a5,26
+    800047ac:	078e                	slli	a5,a5,0x3
+    800047ae:	97a6                	add	a5,a5,s1
+    800047b0:	0007b023          	sd	zero,0(a5)
+    p->ofile[fd1] = 0;
+    800047b4:	fc042783          	lw	a5,-64(s0)
+    800047b8:	07e9                	addi	a5,a5,26
+    800047ba:	078e                	slli	a5,a5,0x3
+    800047bc:	94be                	add	s1,s1,a5
+    800047be:	0004b023          	sd	zero,0(s1)
+    fileclose(rf);
+    800047c2:	fd043503          	ld	a0,-48(s0)
+    800047c6:	c85fe0ef          	jal	8000344a <fileclose>
+    fileclose(wf);
+    800047ca:	fc843503          	ld	a0,-56(s0)
+    800047ce:	c7dfe0ef          	jal	8000344a <fileclose>
+    return -1;
+    800047d2:	57fd                	li	a5,-1
+    800047d4:	a01d                	j	800047fa <sys_pipe+0xd0>
+    if(fd0 >= 0)
+    800047d6:	fc442783          	lw	a5,-60(s0)
+    800047da:	0007c763          	bltz	a5,800047e8 <sys_pipe+0xbe>
+      p->ofile[fd0] = 0;
+    800047de:	07e9                	addi	a5,a5,26
+    800047e0:	078e                	slli	a5,a5,0x3
+    800047e2:	97a6                	add	a5,a5,s1
+    800047e4:	0007b023          	sd	zero,0(a5)
+    fileclose(rf);
+    800047e8:	fd043503          	ld	a0,-48(s0)
+    800047ec:	c5ffe0ef          	jal	8000344a <fileclose>
+    fileclose(wf);
+    800047f0:	fc843503          	ld	a0,-56(s0)
+    800047f4:	c57fe0ef          	jal	8000344a <fileclose>
+    return -1;
+    800047f8:	57fd                	li	a5,-1
+}
+    800047fa:	853e                	mv	a0,a5
+    800047fc:	70e2                	ld	ra,56(sp)
+    800047fe:	7442                	ld	s0,48(sp)
+    80004800:	74a2                	ld	s1,40(sp)
+    80004802:	6121                	addi	sp,sp,64
+    80004804:	8082                	ret
+	...
+
+0000000080004810 <kernelvec>:
+    80004810:	7111                	addi	sp,sp,-256
+    80004812:	e006                	sd	ra,0(sp)
+    80004814:	e40a                	sd	sp,8(sp)
+    80004816:	e80e                	sd	gp,16(sp)
+    80004818:	ec12                	sd	tp,24(sp)
+    8000481a:	f016                	sd	t0,32(sp)
+    8000481c:	f41a                	sd	t1,40(sp)
+    8000481e:	f81e                	sd	t2,48(sp)
+    80004820:	e4aa                	sd	a0,72(sp)
+    80004822:	e8ae                	sd	a1,80(sp)
+    80004824:	ecb2                	sd	a2,88(sp)
+    80004826:	f0b6                	sd	a3,96(sp)
+    80004828:	f4ba                	sd	a4,104(sp)
+    8000482a:	f8be                	sd	a5,112(sp)
+    8000482c:	fcc2                	sd	a6,120(sp)
+    8000482e:	e146                	sd	a7,128(sp)
+    80004830:	edf2                	sd	t3,216(sp)
+    80004832:	f1f6                	sd	t4,224(sp)
+    80004834:	f5fa                	sd	t5,232(sp)
+    80004836:	f9fe                	sd	t6,240(sp)
+    80004838:	b00fd0ef          	jal	80001b38 <kerneltrap>
+    8000483c:	6082                	ld	ra,0(sp)
+    8000483e:	6122                	ld	sp,8(sp)
+    80004840:	61c2                	ld	gp,16(sp)
+    80004842:	7282                	ld	t0,32(sp)
+    80004844:	7322                	ld	t1,40(sp)
+    80004846:	73c2                	ld	t2,48(sp)
+    80004848:	6526                	ld	a0,72(sp)
+    8000484a:	65c6                	ld	a1,80(sp)
+    8000484c:	6666                	ld	a2,88(sp)
+    8000484e:	7686                	ld	a3,96(sp)
+    80004850:	7726                	ld	a4,104(sp)
+    80004852:	77c6                	ld	a5,112(sp)
+    80004854:	7866                	ld	a6,120(sp)
+    80004856:	688a                	ld	a7,128(sp)
+    80004858:	6e6e                	ld	t3,216(sp)
+    8000485a:	7e8e                	ld	t4,224(sp)
+    8000485c:	7f2e                	ld	t5,232(sp)
+    8000485e:	7fce                	ld	t6,240(sp)
+    80004860:	6111                	addi	sp,sp,256
+    80004862:	10200073          	sret
+	...
+
+000000008000486e <plicinit>:
+// the riscv Platform Level Interrupt Controller (PLIC).
+//
+
+void
+plicinit(void)
+{
+    8000486e:	1141                	addi	sp,sp,-16
+    80004870:	e422                	sd	s0,8(sp)
+    80004872:	0800                	addi	s0,sp,16
+  // set desired IRQ priorities non-zero (otherwise disabled).
+  *(uint32*)(PLIC + UART0_IRQ*4) = 1;
+    80004874:	0c0007b7          	lui	a5,0xc000
+    80004878:	4705                	li	a4,1
+    8000487a:	d798                	sw	a4,40(a5)
+  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
+    8000487c:	0c0007b7          	lui	a5,0xc000
+    80004880:	c3d8                	sw	a4,4(a5)
+}
+    80004882:	6422                	ld	s0,8(sp)
+    80004884:	0141                	addi	sp,sp,16
+    80004886:	8082                	ret
+
+0000000080004888 <plicinithart>:
+
+void
+plicinithart(void)
+{
+    80004888:	1141                	addi	sp,sp,-16
+    8000488a:	e406                	sd	ra,8(sp)
+    8000488c:	e022                	sd	s0,0(sp)
+    8000488e:	0800                	addi	s0,sp,16
+  int hart = cpuid();
+    80004890:	cecfc0ef          	jal	80000d7c <cpuid>
+  
+  // set enable bits for this hart's S-mode
+  // for the uart and virtio disk.
+  *(uint32*)PLIC_SENABLE(hart) = (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
+    80004894:	0085171b          	slliw	a4,a0,0x8
+    80004898:	0c0027b7          	lui	a5,0xc002
+    8000489c:	97ba                	add	a5,a5,a4
+    8000489e:	40200713          	li	a4,1026
+    800048a2:	08e7a023          	sw	a4,128(a5) # c002080 <_entry-0x73ffdf80>
+
+  // set this hart's S-mode priority threshold to 0.
+  *(uint32*)PLIC_SPRIORITY(hart) = 0;
+    800048a6:	00d5151b          	slliw	a0,a0,0xd
+    800048aa:	0c2017b7          	lui	a5,0xc201
+    800048ae:	97aa                	add	a5,a5,a0
+    800048b0:	0007a023          	sw	zero,0(a5) # c201000 <_entry-0x73dff000>
+}
+    800048b4:	60a2                	ld	ra,8(sp)
+    800048b6:	6402                	ld	s0,0(sp)
+    800048b8:	0141                	addi	sp,sp,16
+    800048ba:	8082                	ret
+
+00000000800048bc <plic_claim>:
+
+// ask the PLIC what interrupt we should serve.
+int
+plic_claim(void)
+{
+    800048bc:	1141                	addi	sp,sp,-16
+    800048be:	e406                	sd	ra,8(sp)
+    800048c0:	e022                	sd	s0,0(sp)
+    800048c2:	0800                	addi	s0,sp,16
+  int hart = cpuid();
+    800048c4:	cb8fc0ef          	jal	80000d7c <cpuid>
+  int irq = *(uint32*)PLIC_SCLAIM(hart);
+    800048c8:	00d5151b          	slliw	a0,a0,0xd
+    800048cc:	0c2017b7          	lui	a5,0xc201
+    800048d0:	97aa                	add	a5,a5,a0
+  return irq;
+}
+    800048d2:	43c8                	lw	a0,4(a5)
+    800048d4:	60a2                	ld	ra,8(sp)
+    800048d6:	6402                	ld	s0,0(sp)
+    800048d8:	0141                	addi	sp,sp,16
+    800048da:	8082                	ret
+
+00000000800048dc <plic_complete>:
+
+// tell the PLIC we've served this IRQ.
+void
+plic_complete(int irq)
+{
+    800048dc:	1101                	addi	sp,sp,-32
+    800048de:	ec06                	sd	ra,24(sp)
+    800048e0:	e822                	sd	s0,16(sp)
+    800048e2:	e426                	sd	s1,8(sp)
+    800048e4:	1000                	addi	s0,sp,32
+    800048e6:	84aa                	mv	s1,a0
+  int hart = cpuid();
+    800048e8:	c94fc0ef          	jal	80000d7c <cpuid>
+  *(uint32*)PLIC_SCLAIM(hart) = irq;
+    800048ec:	00d5151b          	slliw	a0,a0,0xd
+    800048f0:	0c2017b7          	lui	a5,0xc201
+    800048f4:	97aa                	add	a5,a5,a0
+    800048f6:	c3c4                	sw	s1,4(a5)
+}
+    800048f8:	60e2                	ld	ra,24(sp)
+    800048fa:	6442                	ld	s0,16(sp)
+    800048fc:	64a2                	ld	s1,8(sp)
+    800048fe:	6105                	addi	sp,sp,32
+    80004900:	8082                	ret
+
+0000000080004902 <free_desc>:
+}
+
+// mark a descriptor as free.
+static void
+free_desc(int i)
+{
+    80004902:	1141                	addi	sp,sp,-16
+    80004904:	e406                	sd	ra,8(sp)
+    80004906:	e022                	sd	s0,0(sp)
+    80004908:	0800                	addi	s0,sp,16
+  if(i >= NUM)
+    8000490a:	479d                	li	a5,7
+    8000490c:	04a7ca63          	blt	a5,a0,80004960 <free_desc+0x5e>
+    panic("free_desc 1");
+  if(disk.free[i])
+    80004910:	00014797          	auipc	a5,0x14
+    80004914:	2a078793          	addi	a5,a5,672 # 80018bb0 <disk>
+    80004918:	97aa                	add	a5,a5,a0
+    8000491a:	0187c783          	lbu	a5,24(a5)
+    8000491e:	e7b9                	bnez	a5,8000496c <free_desc+0x6a>
+    panic("free_desc 2");
+  disk.desc[i].addr = 0;
+    80004920:	00451693          	slli	a3,a0,0x4
+    80004924:	00014797          	auipc	a5,0x14
+    80004928:	28c78793          	addi	a5,a5,652 # 80018bb0 <disk>
+    8000492c:	6398                	ld	a4,0(a5)
+    8000492e:	9736                	add	a4,a4,a3
+    80004930:	00073023          	sd	zero,0(a4)
+  disk.desc[i].len = 0;
+    80004934:	6398                	ld	a4,0(a5)
+    80004936:	9736                	add	a4,a4,a3
+    80004938:	00072423          	sw	zero,8(a4)
+  disk.desc[i].flags = 0;
+    8000493c:	00071623          	sh	zero,12(a4)
+  disk.desc[i].next = 0;
+    80004940:	00071723          	sh	zero,14(a4)
+  disk.free[i] = 1;
+    80004944:	97aa                	add	a5,a5,a0
+    80004946:	4705                	li	a4,1
+    80004948:	00e78c23          	sb	a4,24(a5)
+  wakeup(&disk.free[0]);
+    8000494c:	00014517          	auipc	a0,0x14
+    80004950:	27c50513          	addi	a0,a0,636 # 80018bc8 <disk+0x18>
+    80004954:	a77fc0ef          	jal	800013ca <wakeup>
+}
+    80004958:	60a2                	ld	ra,8(sp)
+    8000495a:	6402                	ld	s0,0(sp)
+    8000495c:	0141                	addi	sp,sp,16
+    8000495e:	8082                	ret
+    panic("free_desc 1");
+    80004960:	00003517          	auipc	a0,0x3
+    80004964:	d8850513          	addi	a0,a0,-632 # 800076e8 <etext+0x6e8>
+    80004968:	43b000ef          	jal	800055a2 <panic>
+    panic("free_desc 2");
+    8000496c:	00003517          	auipc	a0,0x3
+    80004970:	d8c50513          	addi	a0,a0,-628 # 800076f8 <etext+0x6f8>
+    80004974:	42f000ef          	jal	800055a2 <panic>
+
+0000000080004978 <virtio_disk_init>:
+{
+    80004978:	1101                	addi	sp,sp,-32
+    8000497a:	ec06                	sd	ra,24(sp)
+    8000497c:	e822                	sd	s0,16(sp)
+    8000497e:	e426                	sd	s1,8(sp)
+    80004980:	e04a                	sd	s2,0(sp)
+    80004982:	1000                	addi	s0,sp,32
+  initlock(&disk.vdisk_lock, "virtio_disk");
+    80004984:	00003597          	auipc	a1,0x3
+    80004988:	d8458593          	addi	a1,a1,-636 # 80007708 <etext+0x708>
+    8000498c:	00014517          	auipc	a0,0x14
+    80004990:	34c50513          	addi	a0,a0,844 # 80018cd8 <disk+0x128>
+    80004994:	6bd000ef          	jal	80005850 <initlock>
+  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
+    80004998:	100017b7          	lui	a5,0x10001
+    8000499c:	4398                	lw	a4,0(a5)
+    8000499e:	2701                	sext.w	a4,a4
+    800049a0:	747277b7          	lui	a5,0x74727
+    800049a4:	97678793          	addi	a5,a5,-1674 # 74726976 <_entry-0xb8d968a>
+    800049a8:	18f71063          	bne	a4,a5,80004b28 <virtio_disk_init+0x1b0>
+     *R(VIRTIO_MMIO_VERSION) != 2 ||
+    800049ac:	100017b7          	lui	a5,0x10001
+    800049b0:	0791                	addi	a5,a5,4 # 10001004 <_entry-0x6fffeffc>
+    800049b2:	439c                	lw	a5,0(a5)
+    800049b4:	2781                	sext.w	a5,a5
+  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
+    800049b6:	4709                	li	a4,2
+    800049b8:	16e79863          	bne	a5,a4,80004b28 <virtio_disk_init+0x1b0>
+     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
+    800049bc:	100017b7          	lui	a5,0x10001
+    800049c0:	07a1                	addi	a5,a5,8 # 10001008 <_entry-0x6fffeff8>
+    800049c2:	439c                	lw	a5,0(a5)
+    800049c4:	2781                	sext.w	a5,a5
+     *R(VIRTIO_MMIO_VERSION) != 2 ||
+    800049c6:	16e79163          	bne	a5,a4,80004b28 <virtio_disk_init+0x1b0>
+     *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
+    800049ca:	100017b7          	lui	a5,0x10001
+    800049ce:	47d8                	lw	a4,12(a5)
+    800049d0:	2701                	sext.w	a4,a4
+     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
+    800049d2:	554d47b7          	lui	a5,0x554d4
+    800049d6:	55178793          	addi	a5,a5,1361 # 554d4551 <_entry-0x2ab2baaf>
+    800049da:	14f71763          	bne	a4,a5,80004b28 <virtio_disk_init+0x1b0>
+  *R(VIRTIO_MMIO_STATUS) = status;
+    800049de:	100017b7          	lui	a5,0x10001
+    800049e2:	0607a823          	sw	zero,112(a5) # 10001070 <_entry-0x6fffef90>
+  *R(VIRTIO_MMIO_STATUS) = status;
+    800049e6:	4705                	li	a4,1
+    800049e8:	dbb8                	sw	a4,112(a5)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    800049ea:	470d                	li	a4,3
+    800049ec:	dbb8                	sw	a4,112(a5)
+  uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
+    800049ee:	10001737          	lui	a4,0x10001
+    800049f2:	4b14                	lw	a3,16(a4)
+  features &= ~(1 << VIRTIO_RING_F_INDIRECT_DESC);
+    800049f4:	c7ffe737          	lui	a4,0xc7ffe
+    800049f8:	75f70713          	addi	a4,a4,1887 # ffffffffc7ffe75f <end+0xffffffff47fdd96f>
+  *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
+    800049fc:	8ef9                	and	a3,a3,a4
+    800049fe:	10001737          	lui	a4,0x10001
+    80004a02:	d314                	sw	a3,32(a4)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80004a04:	472d                	li	a4,11
+    80004a06:	dbb8                	sw	a4,112(a5)
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80004a08:	07078793          	addi	a5,a5,112
+  status = *R(VIRTIO_MMIO_STATUS);
+    80004a0c:	439c                	lw	a5,0(a5)
+    80004a0e:	0007891b          	sext.w	s2,a5
+  if(!(status & VIRTIO_CONFIG_S_FEATURES_OK))
+    80004a12:	8ba1                	andi	a5,a5,8
+    80004a14:	12078063          	beqz	a5,80004b34 <virtio_disk_init+0x1bc>
+  *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
+    80004a18:	100017b7          	lui	a5,0x10001
+    80004a1c:	0207a823          	sw	zero,48(a5) # 10001030 <_entry-0x6fffefd0>
+  if(*R(VIRTIO_MMIO_QUEUE_READY))
+    80004a20:	100017b7          	lui	a5,0x10001
+    80004a24:	04478793          	addi	a5,a5,68 # 10001044 <_entry-0x6fffefbc>
+    80004a28:	439c                	lw	a5,0(a5)
+    80004a2a:	2781                	sext.w	a5,a5
+    80004a2c:	10079a63          	bnez	a5,80004b40 <virtio_disk_init+0x1c8>
+  uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
+    80004a30:	100017b7          	lui	a5,0x10001
+    80004a34:	03478793          	addi	a5,a5,52 # 10001034 <_entry-0x6fffefcc>
+    80004a38:	439c                	lw	a5,0(a5)
+    80004a3a:	2781                	sext.w	a5,a5
+  if(max == 0)
+    80004a3c:	10078863          	beqz	a5,80004b4c <virtio_disk_init+0x1d4>
+  if(max < NUM)
+    80004a40:	471d                	li	a4,7
+    80004a42:	10f77b63          	bgeu	a4,a5,80004b58 <virtio_disk_init+0x1e0>
+  disk.desc = kalloc();
+    80004a46:	eb8fb0ef          	jal	800000fe <kalloc>
+    80004a4a:	00014497          	auipc	s1,0x14
+    80004a4e:	16648493          	addi	s1,s1,358 # 80018bb0 <disk>
+    80004a52:	e088                	sd	a0,0(s1)
+  disk.avail = kalloc();
+    80004a54:	eaafb0ef          	jal	800000fe <kalloc>
+    80004a58:	e488                	sd	a0,8(s1)
+  disk.used = kalloc();
+    80004a5a:	ea4fb0ef          	jal	800000fe <kalloc>
+    80004a5e:	87aa                	mv	a5,a0
+    80004a60:	e888                	sd	a0,16(s1)
+  if(!disk.desc || !disk.avail || !disk.used)
+    80004a62:	6088                	ld	a0,0(s1)
+    80004a64:	10050063          	beqz	a0,80004b64 <virtio_disk_init+0x1ec>
+    80004a68:	00014717          	auipc	a4,0x14
+    80004a6c:	15073703          	ld	a4,336(a4) # 80018bb8 <disk+0x8>
+    80004a70:	0e070a63          	beqz	a4,80004b64 <virtio_disk_init+0x1ec>
+    80004a74:	0e078863          	beqz	a5,80004b64 <virtio_disk_init+0x1ec>
+  memset(disk.desc, 0, PGSIZE);
+    80004a78:	6605                	lui	a2,0x1
+    80004a7a:	4581                	li	a1,0
+    80004a7c:	f14fb0ef          	jal	80000190 <memset>
+  memset(disk.avail, 0, PGSIZE);
+    80004a80:	00014497          	auipc	s1,0x14
+    80004a84:	13048493          	addi	s1,s1,304 # 80018bb0 <disk>
+    80004a88:	6605                	lui	a2,0x1
+    80004a8a:	4581                	li	a1,0
+    80004a8c:	6488                	ld	a0,8(s1)
+    80004a8e:	f02fb0ef          	jal	80000190 <memset>
+  memset(disk.used, 0, PGSIZE);
+    80004a92:	6605                	lui	a2,0x1
+    80004a94:	4581                	li	a1,0
+    80004a96:	6888                	ld	a0,16(s1)
+    80004a98:	ef8fb0ef          	jal	80000190 <memset>
+  *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
+    80004a9c:	100017b7          	lui	a5,0x10001
+    80004aa0:	4721                	li	a4,8
+    80004aa2:	df98                	sw	a4,56(a5)
+  *R(VIRTIO_MMIO_QUEUE_DESC_LOW) = (uint64)disk.desc;
+    80004aa4:	4098                	lw	a4,0(s1)
+    80004aa6:	100017b7          	lui	a5,0x10001
+    80004aaa:	08e7a023          	sw	a4,128(a5) # 10001080 <_entry-0x6fffef80>
+  *R(VIRTIO_MMIO_QUEUE_DESC_HIGH) = (uint64)disk.desc >> 32;
+    80004aae:	40d8                	lw	a4,4(s1)
+    80004ab0:	100017b7          	lui	a5,0x10001
+    80004ab4:	08e7a223          	sw	a4,132(a5) # 10001084 <_entry-0x6fffef7c>
+  *R(VIRTIO_MMIO_DRIVER_DESC_LOW) = (uint64)disk.avail;
+    80004ab8:	649c                	ld	a5,8(s1)
+    80004aba:	0007869b          	sext.w	a3,a5
+    80004abe:	10001737          	lui	a4,0x10001
+    80004ac2:	08d72823          	sw	a3,144(a4) # 10001090 <_entry-0x6fffef70>
+  *R(VIRTIO_MMIO_DRIVER_DESC_HIGH) = (uint64)disk.avail >> 32;
+    80004ac6:	9781                	srai	a5,a5,0x20
+    80004ac8:	10001737          	lui	a4,0x10001
+    80004acc:	08f72a23          	sw	a5,148(a4) # 10001094 <_entry-0x6fffef6c>
+  *R(VIRTIO_MMIO_DEVICE_DESC_LOW) = (uint64)disk.used;
+    80004ad0:	689c                	ld	a5,16(s1)
+    80004ad2:	0007869b          	sext.w	a3,a5
+    80004ad6:	10001737          	lui	a4,0x10001
+    80004ada:	0ad72023          	sw	a3,160(a4) # 100010a0 <_entry-0x6fffef60>
+  *R(VIRTIO_MMIO_DEVICE_DESC_HIGH) = (uint64)disk.used >> 32;
+    80004ade:	9781                	srai	a5,a5,0x20
+    80004ae0:	10001737          	lui	a4,0x10001
+    80004ae4:	0af72223          	sw	a5,164(a4) # 100010a4 <_entry-0x6fffef5c>
+  *R(VIRTIO_MMIO_QUEUE_READY) = 0x1;
+    80004ae8:	10001737          	lui	a4,0x10001
+    80004aec:	4785                	li	a5,1
+    80004aee:	c37c                	sw	a5,68(a4)
+    disk.free[i] = 1;
+    80004af0:	00f48c23          	sb	a5,24(s1)
+    80004af4:	00f48ca3          	sb	a5,25(s1)
+    80004af8:	00f48d23          	sb	a5,26(s1)
+    80004afc:	00f48da3          	sb	a5,27(s1)
+    80004b00:	00f48e23          	sb	a5,28(s1)
+    80004b04:	00f48ea3          	sb	a5,29(s1)
+    80004b08:	00f48f23          	sb	a5,30(s1)
+    80004b0c:	00f48fa3          	sb	a5,31(s1)
+  status |= VIRTIO_CONFIG_S_DRIVER_OK;
+    80004b10:	00496913          	ori	s2,s2,4
+  *R(VIRTIO_MMIO_STATUS) = status;
+    80004b14:	100017b7          	lui	a5,0x10001
+    80004b18:	0727a823          	sw	s2,112(a5) # 10001070 <_entry-0x6fffef90>
+}
+    80004b1c:	60e2                	ld	ra,24(sp)
+    80004b1e:	6442                	ld	s0,16(sp)
+    80004b20:	64a2                	ld	s1,8(sp)
+    80004b22:	6902                	ld	s2,0(sp)
+    80004b24:	6105                	addi	sp,sp,32
+    80004b26:	8082                	ret
+    panic("could not find virtio disk");
+    80004b28:	00003517          	auipc	a0,0x3
+    80004b2c:	bf050513          	addi	a0,a0,-1040 # 80007718 <etext+0x718>
+    80004b30:	273000ef          	jal	800055a2 <panic>
+    panic("virtio disk FEATURES_OK unset");
+    80004b34:	00003517          	auipc	a0,0x3
+    80004b38:	c0450513          	addi	a0,a0,-1020 # 80007738 <etext+0x738>
+    80004b3c:	267000ef          	jal	800055a2 <panic>
+    panic("virtio disk should not be ready");
+    80004b40:	00003517          	auipc	a0,0x3
+    80004b44:	c1850513          	addi	a0,a0,-1000 # 80007758 <etext+0x758>
+    80004b48:	25b000ef          	jal	800055a2 <panic>
+    panic("virtio disk has no queue 0");
+    80004b4c:	00003517          	auipc	a0,0x3
+    80004b50:	c2c50513          	addi	a0,a0,-980 # 80007778 <etext+0x778>
+    80004b54:	24f000ef          	jal	800055a2 <panic>
+    panic("virtio disk max queue too short");
+    80004b58:	00003517          	auipc	a0,0x3
+    80004b5c:	c4050513          	addi	a0,a0,-960 # 80007798 <etext+0x798>
+    80004b60:	243000ef          	jal	800055a2 <panic>
+    panic("virtio disk kalloc");
+    80004b64:	00003517          	auipc	a0,0x3
+    80004b68:	c5450513          	addi	a0,a0,-940 # 800077b8 <etext+0x7b8>
+    80004b6c:	237000ef          	jal	800055a2 <panic>
+
+0000000080004b70 <virtio_disk_rw>:
+  return 0;
+}
+
+void
+virtio_disk_rw(struct buf *b, int write)
+{
+    80004b70:	7159                	addi	sp,sp,-112
+    80004b72:	f486                	sd	ra,104(sp)
+    80004b74:	f0a2                	sd	s0,96(sp)
+    80004b76:	eca6                	sd	s1,88(sp)
+    80004b78:	e8ca                	sd	s2,80(sp)
+    80004b7a:	e4ce                	sd	s3,72(sp)
+    80004b7c:	e0d2                	sd	s4,64(sp)
+    80004b7e:	fc56                	sd	s5,56(sp)
+    80004b80:	f85a                	sd	s6,48(sp)
+    80004b82:	f45e                	sd	s7,40(sp)
+    80004b84:	f062                	sd	s8,32(sp)
+    80004b86:	ec66                	sd	s9,24(sp)
+    80004b88:	1880                	addi	s0,sp,112
+    80004b8a:	8a2a                	mv	s4,a0
+    80004b8c:	8bae                	mv	s7,a1
+  uint64 sector = b->blockno * (BSIZE / 512);
+    80004b8e:	00c52c83          	lw	s9,12(a0)
+    80004b92:	001c9c9b          	slliw	s9,s9,0x1
+    80004b96:	1c82                	slli	s9,s9,0x20
+    80004b98:	020cdc93          	srli	s9,s9,0x20
+
+  acquire(&disk.vdisk_lock);
+    80004b9c:	00014517          	auipc	a0,0x14
+    80004ba0:	13c50513          	addi	a0,a0,316 # 80018cd8 <disk+0x128>
+    80004ba4:	52d000ef          	jal	800058d0 <acquire>
+  for(int i = 0; i < 3; i++){
+    80004ba8:	4981                	li	s3,0
+  for(int i = 0; i < NUM; i++){
+    80004baa:	44a1                	li	s1,8
+      disk.free[i] = 0;
+    80004bac:	00014b17          	auipc	s6,0x14
+    80004bb0:	004b0b13          	addi	s6,s6,4 # 80018bb0 <disk>
+  for(int i = 0; i < 3; i++){
+    80004bb4:	4a8d                	li	s5,3
+  int idx[3];
+  while(1){
+    if(alloc3_desc(idx) == 0) {
+      break;
+    }
+    sleep(&disk.free[0], &disk.vdisk_lock);
+    80004bb6:	00014c17          	auipc	s8,0x14
+    80004bba:	122c0c13          	addi	s8,s8,290 # 80018cd8 <disk+0x128>
+    80004bbe:	a8b9                	j	80004c1c <virtio_disk_rw+0xac>
+      disk.free[i] = 0;
+    80004bc0:	00fb0733          	add	a4,s6,a5
+    80004bc4:	00070c23          	sb	zero,24(a4) # 10001018 <_entry-0x6fffefe8>
+    idx[i] = alloc_desc();
+    80004bc8:	c19c                	sw	a5,0(a1)
+    if(idx[i] < 0){
+    80004bca:	0207c563          	bltz	a5,80004bf4 <virtio_disk_rw+0x84>
+  for(int i = 0; i < 3; i++){
+    80004bce:	2905                	addiw	s2,s2,1
+    80004bd0:	0611                	addi	a2,a2,4 # 1004 <_entry-0x7fffeffc>
+    80004bd2:	05590963          	beq	s2,s5,80004c24 <virtio_disk_rw+0xb4>
+    idx[i] = alloc_desc();
+    80004bd6:	85b2                	mv	a1,a2
+  for(int i = 0; i < NUM; i++){
+    80004bd8:	00014717          	auipc	a4,0x14
+    80004bdc:	fd870713          	addi	a4,a4,-40 # 80018bb0 <disk>
+    80004be0:	87ce                	mv	a5,s3
+    if(disk.free[i]){
+    80004be2:	01874683          	lbu	a3,24(a4)
+    80004be6:	fee9                	bnez	a3,80004bc0 <virtio_disk_rw+0x50>
+  for(int i = 0; i < NUM; i++){
+    80004be8:	2785                	addiw	a5,a5,1
+    80004bea:	0705                	addi	a4,a4,1
+    80004bec:	fe979be3          	bne	a5,s1,80004be2 <virtio_disk_rw+0x72>
+    idx[i] = alloc_desc();
+    80004bf0:	57fd                	li	a5,-1
+    80004bf2:	c19c                	sw	a5,0(a1)
+      for(int j = 0; j < i; j++)
+    80004bf4:	01205d63          	blez	s2,80004c0e <virtio_disk_rw+0x9e>
+        free_desc(idx[j]);
+    80004bf8:	f9042503          	lw	a0,-112(s0)
+    80004bfc:	d07ff0ef          	jal	80004902 <free_desc>
+      for(int j = 0; j < i; j++)
+    80004c00:	4785                	li	a5,1
+    80004c02:	0127d663          	bge	a5,s2,80004c0e <virtio_disk_rw+0x9e>
+        free_desc(idx[j]);
+    80004c06:	f9442503          	lw	a0,-108(s0)
+    80004c0a:	cf9ff0ef          	jal	80004902 <free_desc>
+    sleep(&disk.free[0], &disk.vdisk_lock);
+    80004c0e:	85e2                	mv	a1,s8
+    80004c10:	00014517          	auipc	a0,0x14
+    80004c14:	fb850513          	addi	a0,a0,-72 # 80018bc8 <disk+0x18>
+    80004c18:	f66fc0ef          	jal	8000137e <sleep>
+  for(int i = 0; i < 3; i++){
+    80004c1c:	f9040613          	addi	a2,s0,-112
+    80004c20:	894e                	mv	s2,s3
+    80004c22:	bf55                	j	80004bd6 <virtio_disk_rw+0x66>
+  }
+
+  // format the three descriptors.
+  // qemu's virtio-blk.c reads them.
+
+  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
+    80004c24:	f9042503          	lw	a0,-112(s0)
+    80004c28:	00451693          	slli	a3,a0,0x4
+
+  if(write)
+    80004c2c:	00014797          	auipc	a5,0x14
+    80004c30:	f8478793          	addi	a5,a5,-124 # 80018bb0 <disk>
+    80004c34:	00a50713          	addi	a4,a0,10
+    80004c38:	0712                	slli	a4,a4,0x4
+    80004c3a:	973e                	add	a4,a4,a5
+    80004c3c:	01703633          	snez	a2,s7
+    80004c40:	c710                	sw	a2,8(a4)
+    buf0->type = VIRTIO_BLK_T_OUT; // write the disk
+  else
+    buf0->type = VIRTIO_BLK_T_IN; // read the disk
+  buf0->reserved = 0;
+    80004c42:	00072623          	sw	zero,12(a4)
+  buf0->sector = sector;
+    80004c46:	01973823          	sd	s9,16(a4)
+
+  disk.desc[idx[0]].addr = (uint64) buf0;
+    80004c4a:	6398                	ld	a4,0(a5)
+    80004c4c:	9736                	add	a4,a4,a3
+  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
+    80004c4e:	0a868613          	addi	a2,a3,168
+    80004c52:	963e                	add	a2,a2,a5
+  disk.desc[idx[0]].addr = (uint64) buf0;
+    80004c54:	e310                	sd	a2,0(a4)
+  disk.desc[idx[0]].len = sizeof(struct virtio_blk_req);
+    80004c56:	6390                	ld	a2,0(a5)
+    80004c58:	00d605b3          	add	a1,a2,a3
+    80004c5c:	4741                	li	a4,16
+    80004c5e:	c598                	sw	a4,8(a1)
+  disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
+    80004c60:	4805                	li	a6,1
+    80004c62:	01059623          	sh	a6,12(a1)
+  disk.desc[idx[0]].next = idx[1];
+    80004c66:	f9442703          	lw	a4,-108(s0)
+    80004c6a:	00e59723          	sh	a4,14(a1)
+
+  disk.desc[idx[1]].addr = (uint64) b->data;
+    80004c6e:	0712                	slli	a4,a4,0x4
+    80004c70:	963a                	add	a2,a2,a4
+    80004c72:	058a0593          	addi	a1,s4,88
+    80004c76:	e20c                	sd	a1,0(a2)
+  disk.desc[idx[1]].len = BSIZE;
+    80004c78:	0007b883          	ld	a7,0(a5)
+    80004c7c:	9746                	add	a4,a4,a7
+    80004c7e:	40000613          	li	a2,1024
+    80004c82:	c710                	sw	a2,8(a4)
+  if(write)
+    80004c84:	001bb613          	seqz	a2,s7
+    80004c88:	0016161b          	slliw	a2,a2,0x1
+    disk.desc[idx[1]].flags = 0; // device reads b->data
+  else
+    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
+  disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
+    80004c8c:	00166613          	ori	a2,a2,1
+    80004c90:	00c71623          	sh	a2,12(a4)
+  disk.desc[idx[1]].next = idx[2];
+    80004c94:	f9842583          	lw	a1,-104(s0)
+    80004c98:	00b71723          	sh	a1,14(a4)
+
+  disk.info[idx[0]].status = 0xff; // device writes 0 on success
+    80004c9c:	00250613          	addi	a2,a0,2
+    80004ca0:	0612                	slli	a2,a2,0x4
+    80004ca2:	963e                	add	a2,a2,a5
+    80004ca4:	577d                	li	a4,-1
+    80004ca6:	00e60823          	sb	a4,16(a2)
+  disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
+    80004caa:	0592                	slli	a1,a1,0x4
+    80004cac:	98ae                	add	a7,a7,a1
+    80004cae:	03068713          	addi	a4,a3,48
+    80004cb2:	973e                	add	a4,a4,a5
+    80004cb4:	00e8b023          	sd	a4,0(a7)
+  disk.desc[idx[2]].len = 1;
+    80004cb8:	6398                	ld	a4,0(a5)
+    80004cba:	972e                	add	a4,a4,a1
+    80004cbc:	01072423          	sw	a6,8(a4)
+  disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; // device writes the status
+    80004cc0:	4689                	li	a3,2
+    80004cc2:	00d71623          	sh	a3,12(a4)
+  disk.desc[idx[2]].next = 0;
+    80004cc6:	00071723          	sh	zero,14(a4)
+
+  // record struct buf for virtio_disk_intr().
+  b->disk = 1;
+    80004cca:	010a2223          	sw	a6,4(s4)
+  disk.info[idx[0]].b = b;
+    80004cce:	01463423          	sd	s4,8(a2)
+
+  // tell the device the first index in our chain of descriptors.
+  disk.avail->ring[disk.avail->idx % NUM] = idx[0];
+    80004cd2:	6794                	ld	a3,8(a5)
+    80004cd4:	0026d703          	lhu	a4,2(a3)
+    80004cd8:	8b1d                	andi	a4,a4,7
+    80004cda:	0706                	slli	a4,a4,0x1
+    80004cdc:	96ba                	add	a3,a3,a4
+    80004cde:	00a69223          	sh	a0,4(a3)
+
+  __sync_synchronize();
+    80004ce2:	0ff0000f          	fence
+
+  // tell the device another avail ring entry is available.
+  disk.avail->idx += 1; // not % NUM ...
+    80004ce6:	6798                	ld	a4,8(a5)
+    80004ce8:	00275783          	lhu	a5,2(a4)
+    80004cec:	2785                	addiw	a5,a5,1
+    80004cee:	00f71123          	sh	a5,2(a4)
+
+  __sync_synchronize();
+    80004cf2:	0ff0000f          	fence
+
+  *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; // value is queue number
+    80004cf6:	100017b7          	lui	a5,0x10001
+    80004cfa:	0407a823          	sw	zero,80(a5) # 10001050 <_entry-0x6fffefb0>
+
+  // Wait for virtio_disk_intr() to say request has finished.
+  while(b->disk == 1) {
+    80004cfe:	004a2783          	lw	a5,4(s4)
+    sleep(b, &disk.vdisk_lock);
+    80004d02:	00014917          	auipc	s2,0x14
+    80004d06:	fd690913          	addi	s2,s2,-42 # 80018cd8 <disk+0x128>
+  while(b->disk == 1) {
+    80004d0a:	4485                	li	s1,1
+    80004d0c:	01079a63          	bne	a5,a6,80004d20 <virtio_disk_rw+0x1b0>
+    sleep(b, &disk.vdisk_lock);
+    80004d10:	85ca                	mv	a1,s2
+    80004d12:	8552                	mv	a0,s4
+    80004d14:	e6afc0ef          	jal	8000137e <sleep>
+  while(b->disk == 1) {
+    80004d18:	004a2783          	lw	a5,4(s4)
+    80004d1c:	fe978ae3          	beq	a5,s1,80004d10 <virtio_disk_rw+0x1a0>
+  }
+
+  disk.info[idx[0]].b = 0;
+    80004d20:	f9042903          	lw	s2,-112(s0)
+    80004d24:	00290713          	addi	a4,s2,2
+    80004d28:	0712                	slli	a4,a4,0x4
+    80004d2a:	00014797          	auipc	a5,0x14
+    80004d2e:	e8678793          	addi	a5,a5,-378 # 80018bb0 <disk>
+    80004d32:	97ba                	add	a5,a5,a4
+    80004d34:	0007b423          	sd	zero,8(a5)
+    int flag = disk.desc[i].flags;
+    80004d38:	00014997          	auipc	s3,0x14
+    80004d3c:	e7898993          	addi	s3,s3,-392 # 80018bb0 <disk>
+    80004d40:	00491713          	slli	a4,s2,0x4
+    80004d44:	0009b783          	ld	a5,0(s3)
+    80004d48:	97ba                	add	a5,a5,a4
+    80004d4a:	00c7d483          	lhu	s1,12(a5)
+    int nxt = disk.desc[i].next;
+    80004d4e:	854a                	mv	a0,s2
+    80004d50:	00e7d903          	lhu	s2,14(a5)
+    free_desc(i);
+    80004d54:	bafff0ef          	jal	80004902 <free_desc>
+    if(flag & VRING_DESC_F_NEXT)
+    80004d58:	8885                	andi	s1,s1,1
+    80004d5a:	f0fd                	bnez	s1,80004d40 <virtio_disk_rw+0x1d0>
+  free_chain(idx[0]);
+
+  release(&disk.vdisk_lock);
+    80004d5c:	00014517          	auipc	a0,0x14
+    80004d60:	f7c50513          	addi	a0,a0,-132 # 80018cd8 <disk+0x128>
+    80004d64:	405000ef          	jal	80005968 <release>
+}
+    80004d68:	70a6                	ld	ra,104(sp)
+    80004d6a:	7406                	ld	s0,96(sp)
+    80004d6c:	64e6                	ld	s1,88(sp)
+    80004d6e:	6946                	ld	s2,80(sp)
+    80004d70:	69a6                	ld	s3,72(sp)
+    80004d72:	6a06                	ld	s4,64(sp)
+    80004d74:	7ae2                	ld	s5,56(sp)
+    80004d76:	7b42                	ld	s6,48(sp)
+    80004d78:	7ba2                	ld	s7,40(sp)
+    80004d7a:	7c02                	ld	s8,32(sp)
+    80004d7c:	6ce2                	ld	s9,24(sp)
+    80004d7e:	6165                	addi	sp,sp,112
+    80004d80:	8082                	ret
+
+0000000080004d82 <virtio_disk_intr>:
+
+void
+virtio_disk_intr()
+{
+    80004d82:	1101                	addi	sp,sp,-32
+    80004d84:	ec06                	sd	ra,24(sp)
+    80004d86:	e822                	sd	s0,16(sp)
+    80004d88:	e426                	sd	s1,8(sp)
+    80004d8a:	1000                	addi	s0,sp,32
+  acquire(&disk.vdisk_lock);
+    80004d8c:	00014497          	auipc	s1,0x14
+    80004d90:	e2448493          	addi	s1,s1,-476 # 80018bb0 <disk>
+    80004d94:	00014517          	auipc	a0,0x14
+    80004d98:	f4450513          	addi	a0,a0,-188 # 80018cd8 <disk+0x128>
+    80004d9c:	335000ef          	jal	800058d0 <acquire>
+  // we've seen this interrupt, which the following line does.
+  // this may race with the device writing new entries to
+  // the "used" ring, in which case we may process the new
+  // completion entries in this interrupt, and have nothing to do
+  // in the next interrupt, which is harmless.
+  *R(VIRTIO_MMIO_INTERRUPT_ACK) = *R(VIRTIO_MMIO_INTERRUPT_STATUS) & 0x3;
+    80004da0:	100017b7          	lui	a5,0x10001
+    80004da4:	53b8                	lw	a4,96(a5)
+    80004da6:	8b0d                	andi	a4,a4,3
+    80004da8:	100017b7          	lui	a5,0x10001
+    80004dac:	d3f8                	sw	a4,100(a5)
+
+  __sync_synchronize();
+    80004dae:	0ff0000f          	fence
+
+  // the device increments disk.used->idx when it
+  // adds an entry to the used ring.
+
+  while(disk.used_idx != disk.used->idx){
+    80004db2:	689c                	ld	a5,16(s1)
+    80004db4:	0204d703          	lhu	a4,32(s1)
+    80004db8:	0027d783          	lhu	a5,2(a5) # 10001002 <_entry-0x6fffeffe>
+    80004dbc:	04f70663          	beq	a4,a5,80004e08 <virtio_disk_intr+0x86>
+    __sync_synchronize();
+    80004dc0:	0ff0000f          	fence
+    int id = disk.used->ring[disk.used_idx % NUM].id;
+    80004dc4:	6898                	ld	a4,16(s1)
+    80004dc6:	0204d783          	lhu	a5,32(s1)
+    80004dca:	8b9d                	andi	a5,a5,7
+    80004dcc:	078e                	slli	a5,a5,0x3
+    80004dce:	97ba                	add	a5,a5,a4
+    80004dd0:	43dc                	lw	a5,4(a5)
+
+    if(disk.info[id].status != 0)
+    80004dd2:	00278713          	addi	a4,a5,2
+    80004dd6:	0712                	slli	a4,a4,0x4
+    80004dd8:	9726                	add	a4,a4,s1
+    80004dda:	01074703          	lbu	a4,16(a4)
+    80004dde:	e321                	bnez	a4,80004e1e <virtio_disk_intr+0x9c>
+      panic("virtio_disk_intr status");
+
+    struct buf *b = disk.info[id].b;
+    80004de0:	0789                	addi	a5,a5,2
+    80004de2:	0792                	slli	a5,a5,0x4
+    80004de4:	97a6                	add	a5,a5,s1
+    80004de6:	6788                	ld	a0,8(a5)
+    b->disk = 0;   // disk is done with buf
+    80004de8:	00052223          	sw	zero,4(a0)
+    wakeup(b);
+    80004dec:	ddefc0ef          	jal	800013ca <wakeup>
+
+    disk.used_idx += 1;
+    80004df0:	0204d783          	lhu	a5,32(s1)
+    80004df4:	2785                	addiw	a5,a5,1
+    80004df6:	17c2                	slli	a5,a5,0x30
+    80004df8:	93c1                	srli	a5,a5,0x30
+    80004dfa:	02f49023          	sh	a5,32(s1)
+  while(disk.used_idx != disk.used->idx){
+    80004dfe:	6898                	ld	a4,16(s1)
+    80004e00:	00275703          	lhu	a4,2(a4)
+    80004e04:	faf71ee3          	bne	a4,a5,80004dc0 <virtio_disk_intr+0x3e>
+  }
+
+  release(&disk.vdisk_lock);
+    80004e08:	00014517          	auipc	a0,0x14
+    80004e0c:	ed050513          	addi	a0,a0,-304 # 80018cd8 <disk+0x128>
+    80004e10:	359000ef          	jal	80005968 <release>
+}
+    80004e14:	60e2                	ld	ra,24(sp)
+    80004e16:	6442                	ld	s0,16(sp)
+    80004e18:	64a2                	ld	s1,8(sp)
+    80004e1a:	6105                	addi	sp,sp,32
+    80004e1c:	8082                	ret
+      panic("virtio_disk_intr status");
+    80004e1e:	00003517          	auipc	a0,0x3
+    80004e22:	9b250513          	addi	a0,a0,-1614 # 800077d0 <etext+0x7d0>
+    80004e26:	77c000ef          	jal	800055a2 <panic>
+
+0000000080004e2a <timerinit>:
+}
+
+// ask each hart to generate timer interrupts.
+void
+timerinit()
+{
+    80004e2a:	1141                	addi	sp,sp,-16
+    80004e2c:	e422                	sd	s0,8(sp)
+    80004e2e:	0800                	addi	s0,sp,16
+  asm volatile("csrr %0, mie" : "=r" (x) );
+    80004e30:	304027f3          	csrr	a5,mie
+  // enable supervisor-mode timer interrupts.
+  w_mie(r_mie() | MIE_STIE);
+    80004e34:	0207e793          	ori	a5,a5,32
+  asm volatile("csrw mie, %0" : : "r" (x));
+    80004e38:	30479073          	csrw	mie,a5
+  asm volatile("csrr %0, 0x30a" : "=r" (x) );
+    80004e3c:	30a027f3          	csrr	a5,0x30a
+  
+  // enable the sstc extension (i.e. stimecmp).
+  w_menvcfg(r_menvcfg() | (1L << 63)); 
+    80004e40:	577d                	li	a4,-1
+    80004e42:	177e                	slli	a4,a4,0x3f
+    80004e44:	8fd9                	or	a5,a5,a4
+  asm volatile("csrw 0x30a, %0" : : "r" (x));
+    80004e46:	30a79073          	csrw	0x30a,a5
+  asm volatile("csrr %0, mcounteren" : "=r" (x) );
+    80004e4a:	306027f3          	csrr	a5,mcounteren
+  
+  // allow supervisor to use stimecmp and time.
+  w_mcounteren(r_mcounteren() | 2);
+    80004e4e:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw mcounteren, %0" : : "r" (x));
+    80004e52:	30679073          	csrw	mcounteren,a5
+  asm volatile("csrr %0, time" : "=r" (x) );
+    80004e56:	c01027f3          	rdtime	a5
+  
+  // ask for the very first timer interrupt.
+  w_stimecmp(r_time() + 1000000);
+    80004e5a:	000f4737          	lui	a4,0xf4
+    80004e5e:	24070713          	addi	a4,a4,576 # f4240 <_entry-0x7ff0bdc0>
+    80004e62:	97ba                	add	a5,a5,a4
+  asm volatile("csrw 0x14d, %0" : : "r" (x));
+    80004e64:	14d79073          	csrw	stimecmp,a5
+}
+    80004e68:	6422                	ld	s0,8(sp)
+    80004e6a:	0141                	addi	sp,sp,16
+    80004e6c:	8082                	ret
+
+0000000080004e6e <start>:
+{
+    80004e6e:	1141                	addi	sp,sp,-16
+    80004e70:	e406                	sd	ra,8(sp)
+    80004e72:	e022                	sd	s0,0(sp)
+    80004e74:	0800                	addi	s0,sp,16
+  asm volatile("csrr %0, mstatus" : "=r" (x) );
+    80004e76:	300027f3          	csrr	a5,mstatus
+  x &= ~MSTATUS_MPP_MASK;
+    80004e7a:	7779                	lui	a4,0xffffe
+    80004e7c:	7ff70713          	addi	a4,a4,2047 # ffffffffffffe7ff <end+0xffffffff7ffdda0f>
+    80004e80:	8ff9                	and	a5,a5,a4
+  x |= MSTATUS_MPP_S;
+    80004e82:	6705                	lui	a4,0x1
+    80004e84:	80070713          	addi	a4,a4,-2048 # 800 <_entry-0x7ffff800>
+    80004e88:	8fd9                	or	a5,a5,a4
+  asm volatile("csrw mstatus, %0" : : "r" (x));
+    80004e8a:	30079073          	csrw	mstatus,a5
+  asm volatile("csrw mepc, %0" : : "r" (x));
+    80004e8e:	ffffb797          	auipc	a5,0xffffb
+    80004e92:	49c78793          	addi	a5,a5,1180 # 8000032a <main>
+    80004e96:	34179073          	csrw	mepc,a5
+  asm volatile("csrw satp, %0" : : "r" (x));
+    80004e9a:	4781                	li	a5,0
+    80004e9c:	18079073          	csrw	satp,a5
+  asm volatile("csrw medeleg, %0" : : "r" (x));
+    80004ea0:	67c1                	lui	a5,0x10
+    80004ea2:	17fd                	addi	a5,a5,-1 # ffff <_entry-0x7fff0001>
+    80004ea4:	30279073          	csrw	medeleg,a5
+  asm volatile("csrw mideleg, %0" : : "r" (x));
+    80004ea8:	30379073          	csrw	mideleg,a5
+  asm volatile("csrr %0, sie" : "=r" (x) );
+    80004eac:	104027f3          	csrr	a5,sie
+  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
+    80004eb0:	2227e793          	ori	a5,a5,546
+  asm volatile("csrw sie, %0" : : "r" (x));
+    80004eb4:	10479073          	csrw	sie,a5
+  asm volatile("csrw pmpaddr0, %0" : : "r" (x));
+    80004eb8:	57fd                	li	a5,-1
+    80004eba:	83a9                	srli	a5,a5,0xa
+    80004ebc:	3b079073          	csrw	pmpaddr0,a5
+  asm volatile("csrw pmpcfg0, %0" : : "r" (x));
+    80004ec0:	47bd                	li	a5,15
+    80004ec2:	3a079073          	csrw	pmpcfg0,a5
+  timerinit();
+    80004ec6:	f65ff0ef          	jal	80004e2a <timerinit>
+  asm volatile("csrr %0, mhartid" : "=r" (x) );
+    80004eca:	f14027f3          	csrr	a5,mhartid
+  w_tp(id);
+    80004ece:	2781                	sext.w	a5,a5
+  asm volatile("mv tp, %0" : : "r" (x));
+    80004ed0:	823e                	mv	tp,a5
+  asm volatile("mret");
+    80004ed2:	30200073          	mret
+}
+    80004ed6:	60a2                	ld	ra,8(sp)
+    80004ed8:	6402                	ld	s0,0(sp)
+    80004eda:	0141                	addi	sp,sp,16
+    80004edc:	8082                	ret
+
+0000000080004ede <consolewrite>:
+//
+// user write()s to the console go here.
+//
+int
+consolewrite(int user_src, uint64 src, int n)
+{
+    80004ede:	715d                	addi	sp,sp,-80
+    80004ee0:	e486                	sd	ra,72(sp)
+    80004ee2:	e0a2                	sd	s0,64(sp)
+    80004ee4:	f84a                	sd	s2,48(sp)
+    80004ee6:	0880                	addi	s0,sp,80
+  int i;
+
+  for(i = 0; i < n; i++){
+    80004ee8:	04c05263          	blez	a2,80004f2c <consolewrite+0x4e>
+    80004eec:	fc26                	sd	s1,56(sp)
+    80004eee:	f44e                	sd	s3,40(sp)
+    80004ef0:	f052                	sd	s4,32(sp)
+    80004ef2:	ec56                	sd	s5,24(sp)
+    80004ef4:	8a2a                	mv	s4,a0
+    80004ef6:	84ae                	mv	s1,a1
+    80004ef8:	89b2                	mv	s3,a2
+    80004efa:	4901                	li	s2,0
+    char c;
+    if(either_copyin(&c, user_src, src+i, 1) == -1)
+    80004efc:	5afd                	li	s5,-1
+    80004efe:	4685                	li	a3,1
+    80004f00:	8626                	mv	a2,s1
+    80004f02:	85d2                	mv	a1,s4
+    80004f04:	fbf40513          	addi	a0,s0,-65
+    80004f08:	81dfc0ef          	jal	80001724 <either_copyin>
+    80004f0c:	03550263          	beq	a0,s5,80004f30 <consolewrite+0x52>
+      break;
+    uartputc(c);
+    80004f10:	fbf44503          	lbu	a0,-65(s0)
+    80004f14:	035000ef          	jal	80005748 <uartputc>
+  for(i = 0; i < n; i++){
+    80004f18:	2905                	addiw	s2,s2,1
+    80004f1a:	0485                	addi	s1,s1,1
+    80004f1c:	ff2991e3          	bne	s3,s2,80004efe <consolewrite+0x20>
+    80004f20:	894e                	mv	s2,s3
+    80004f22:	74e2                	ld	s1,56(sp)
+    80004f24:	79a2                	ld	s3,40(sp)
+    80004f26:	7a02                	ld	s4,32(sp)
+    80004f28:	6ae2                	ld	s5,24(sp)
+    80004f2a:	a039                	j	80004f38 <consolewrite+0x5a>
+    80004f2c:	4901                	li	s2,0
+    80004f2e:	a029                	j	80004f38 <consolewrite+0x5a>
+    80004f30:	74e2                	ld	s1,56(sp)
+    80004f32:	79a2                	ld	s3,40(sp)
+    80004f34:	7a02                	ld	s4,32(sp)
+    80004f36:	6ae2                	ld	s5,24(sp)
+  }
+
+  return i;
+}
+    80004f38:	854a                	mv	a0,s2
+    80004f3a:	60a6                	ld	ra,72(sp)
+    80004f3c:	6406                	ld	s0,64(sp)
+    80004f3e:	7942                	ld	s2,48(sp)
+    80004f40:	6161                	addi	sp,sp,80
+    80004f42:	8082                	ret
+
+0000000080004f44 <consoleread>:
+// user_dist indicates whether dst is a user
+// or kernel address.
+//
+int
+consoleread(int user_dst, uint64 dst, int n)
+{
+    80004f44:	711d                	addi	sp,sp,-96
+    80004f46:	ec86                	sd	ra,88(sp)
+    80004f48:	e8a2                	sd	s0,80(sp)
+    80004f4a:	e4a6                	sd	s1,72(sp)
+    80004f4c:	e0ca                	sd	s2,64(sp)
+    80004f4e:	fc4e                	sd	s3,56(sp)
+    80004f50:	f852                	sd	s4,48(sp)
+    80004f52:	f456                	sd	s5,40(sp)
+    80004f54:	f05a                	sd	s6,32(sp)
+    80004f56:	1080                	addi	s0,sp,96
+    80004f58:	8aaa                	mv	s5,a0
+    80004f5a:	8a2e                	mv	s4,a1
+    80004f5c:	89b2                	mv	s3,a2
+  uint target;
+  int c;
+  char cbuf;
+
+  target = n;
+    80004f5e:	00060b1b          	sext.w	s6,a2
+  acquire(&cons.lock);
+    80004f62:	0001c517          	auipc	a0,0x1c
+    80004f66:	d8e50513          	addi	a0,a0,-626 # 80020cf0 <cons>
+    80004f6a:	167000ef          	jal	800058d0 <acquire>
+  while(n > 0){
+    // wait until interrupt handler has put some
+    // input into cons.buffer.
+    while(cons.r == cons.w){
+    80004f6e:	0001c497          	auipc	s1,0x1c
+    80004f72:	d8248493          	addi	s1,s1,-638 # 80020cf0 <cons>
+      if(killed(myproc())){
+        release(&cons.lock);
+        return -1;
+      }
+      sleep(&cons.r, &cons.lock);
+    80004f76:	0001c917          	auipc	s2,0x1c
+    80004f7a:	e1290913          	addi	s2,s2,-494 # 80020d88 <cons+0x98>
+  while(n > 0){
+    80004f7e:	0b305d63          	blez	s3,80005038 <consoleread+0xf4>
+    while(cons.r == cons.w){
+    80004f82:	0984a783          	lw	a5,152(s1)
+    80004f86:	09c4a703          	lw	a4,156(s1)
+    80004f8a:	0af71263          	bne	a4,a5,8000502e <consoleread+0xea>
+      if(killed(myproc())){
+    80004f8e:	e1bfb0ef          	jal	80000da8 <myproc>
+    80004f92:	e24fc0ef          	jal	800015b6 <killed>
+    80004f96:	e12d                	bnez	a0,80004ff8 <consoleread+0xb4>
+      sleep(&cons.r, &cons.lock);
+    80004f98:	85a6                	mv	a1,s1
+    80004f9a:	854a                	mv	a0,s2
+    80004f9c:	be2fc0ef          	jal	8000137e <sleep>
+    while(cons.r == cons.w){
+    80004fa0:	0984a783          	lw	a5,152(s1)
+    80004fa4:	09c4a703          	lw	a4,156(s1)
+    80004fa8:	fef703e3          	beq	a4,a5,80004f8e <consoleread+0x4a>
+    80004fac:	ec5e                	sd	s7,24(sp)
+    }
+
+    c = cons.buf[cons.r++ % INPUT_BUF_SIZE];
+    80004fae:	0001c717          	auipc	a4,0x1c
+    80004fb2:	d4270713          	addi	a4,a4,-702 # 80020cf0 <cons>
+    80004fb6:	0017869b          	addiw	a3,a5,1
+    80004fba:	08d72c23          	sw	a3,152(a4)
+    80004fbe:	07f7f693          	andi	a3,a5,127
+    80004fc2:	9736                	add	a4,a4,a3
+    80004fc4:	01874703          	lbu	a4,24(a4)
+    80004fc8:	00070b9b          	sext.w	s7,a4
+
+    if(c == C('D')){  // end-of-file
+    80004fcc:	4691                	li	a3,4
+    80004fce:	04db8663          	beq	s7,a3,8000501a <consoleread+0xd6>
+      }
+      break;
+    }
+
+    // copy the input byte to the user-space buffer.
+    cbuf = c;
+    80004fd2:	fae407a3          	sb	a4,-81(s0)
+    if(either_copyout(user_dst, dst, &cbuf, 1) == -1)
+    80004fd6:	4685                	li	a3,1
+    80004fd8:	faf40613          	addi	a2,s0,-81
+    80004fdc:	85d2                	mv	a1,s4
+    80004fde:	8556                	mv	a0,s5
+    80004fe0:	efafc0ef          	jal	800016da <either_copyout>
+    80004fe4:	57fd                	li	a5,-1
+    80004fe6:	04f50863          	beq	a0,a5,80005036 <consoleread+0xf2>
+      break;
+
+    dst++;
+    80004fea:	0a05                	addi	s4,s4,1
+    --n;
+    80004fec:	39fd                	addiw	s3,s3,-1
+
+    if(c == '\n'){
+    80004fee:	47a9                	li	a5,10
+    80004ff0:	04fb8d63          	beq	s7,a5,8000504a <consoleread+0x106>
+    80004ff4:	6be2                	ld	s7,24(sp)
+    80004ff6:	b761                	j	80004f7e <consoleread+0x3a>
+        release(&cons.lock);
+    80004ff8:	0001c517          	auipc	a0,0x1c
+    80004ffc:	cf850513          	addi	a0,a0,-776 # 80020cf0 <cons>
+    80005000:	169000ef          	jal	80005968 <release>
+        return -1;
+    80005004:	557d                	li	a0,-1
+    }
+  }
+  release(&cons.lock);
+
+  return target - n;
+}
+    80005006:	60e6                	ld	ra,88(sp)
+    80005008:	6446                	ld	s0,80(sp)
+    8000500a:	64a6                	ld	s1,72(sp)
+    8000500c:	6906                	ld	s2,64(sp)
+    8000500e:	79e2                	ld	s3,56(sp)
+    80005010:	7a42                	ld	s4,48(sp)
+    80005012:	7aa2                	ld	s5,40(sp)
+    80005014:	7b02                	ld	s6,32(sp)
+    80005016:	6125                	addi	sp,sp,96
+    80005018:	8082                	ret
+      if(n < target){
+    8000501a:	0009871b          	sext.w	a4,s3
+    8000501e:	01677a63          	bgeu	a4,s6,80005032 <consoleread+0xee>
+        cons.r--;
+    80005022:	0001c717          	auipc	a4,0x1c
+    80005026:	d6f72323          	sw	a5,-666(a4) # 80020d88 <cons+0x98>
+    8000502a:	6be2                	ld	s7,24(sp)
+    8000502c:	a031                	j	80005038 <consoleread+0xf4>
+    8000502e:	ec5e                	sd	s7,24(sp)
+    80005030:	bfbd                	j	80004fae <consoleread+0x6a>
+    80005032:	6be2                	ld	s7,24(sp)
+    80005034:	a011                	j	80005038 <consoleread+0xf4>
+    80005036:	6be2                	ld	s7,24(sp)
+  release(&cons.lock);
+    80005038:	0001c517          	auipc	a0,0x1c
+    8000503c:	cb850513          	addi	a0,a0,-840 # 80020cf0 <cons>
+    80005040:	129000ef          	jal	80005968 <release>
+  return target - n;
+    80005044:	413b053b          	subw	a0,s6,s3
+    80005048:	bf7d                	j	80005006 <consoleread+0xc2>
+    8000504a:	6be2                	ld	s7,24(sp)
+    8000504c:	b7f5                	j	80005038 <consoleread+0xf4>
+
+000000008000504e <consputc>:
+{
+    8000504e:	1141                	addi	sp,sp,-16
+    80005050:	e406                	sd	ra,8(sp)
+    80005052:	e022                	sd	s0,0(sp)
+    80005054:	0800                	addi	s0,sp,16
+  if(c == BACKSPACE){
+    80005056:	10000793          	li	a5,256
+    8000505a:	00f50863          	beq	a0,a5,8000506a <consputc+0x1c>
+    uartputc_sync(c);
+    8000505e:	604000ef          	jal	80005662 <uartputc_sync>
+}
+    80005062:	60a2                	ld	ra,8(sp)
+    80005064:	6402                	ld	s0,0(sp)
+    80005066:	0141                	addi	sp,sp,16
+    80005068:	8082                	ret
+    uartputc_sync('\b'); uartputc_sync(' '); uartputc_sync('\b');
+    8000506a:	4521                	li	a0,8
+    8000506c:	5f6000ef          	jal	80005662 <uartputc_sync>
+    80005070:	02000513          	li	a0,32
+    80005074:	5ee000ef          	jal	80005662 <uartputc_sync>
+    80005078:	4521                	li	a0,8
+    8000507a:	5e8000ef          	jal	80005662 <uartputc_sync>
+    8000507e:	b7d5                	j	80005062 <consputc+0x14>
+
+0000000080005080 <consoleintr>:
+// do erase/kill processing, append to cons.buf,
+// wake up consoleread() if a whole line has arrived.
+//
+void
+consoleintr(int c)
+{
+    80005080:	1101                	addi	sp,sp,-32
+    80005082:	ec06                	sd	ra,24(sp)
+    80005084:	e822                	sd	s0,16(sp)
+    80005086:	e426                	sd	s1,8(sp)
+    80005088:	1000                	addi	s0,sp,32
+    8000508a:	84aa                	mv	s1,a0
+  acquire(&cons.lock);
+    8000508c:	0001c517          	auipc	a0,0x1c
+    80005090:	c6450513          	addi	a0,a0,-924 # 80020cf0 <cons>
+    80005094:	03d000ef          	jal	800058d0 <acquire>
+
+  switch(c){
+    80005098:	47d5                	li	a5,21
+    8000509a:	08f48f63          	beq	s1,a5,80005138 <consoleintr+0xb8>
+    8000509e:	0297c563          	blt	a5,s1,800050c8 <consoleintr+0x48>
+    800050a2:	47a1                	li	a5,8
+    800050a4:	0ef48463          	beq	s1,a5,8000518c <consoleintr+0x10c>
+    800050a8:	47c1                	li	a5,16
+    800050aa:	10f49563          	bne	s1,a5,800051b4 <consoleintr+0x134>
+  case C('P'):  // Print process list.
+    procdump();
+    800050ae:	ec0fc0ef          	jal	8000176e <procdump>
+      }
+    }
+    break;
+  }
+  
+  release(&cons.lock);
+    800050b2:	0001c517          	auipc	a0,0x1c
+    800050b6:	c3e50513          	addi	a0,a0,-962 # 80020cf0 <cons>
+    800050ba:	0af000ef          	jal	80005968 <release>
+}
+    800050be:	60e2                	ld	ra,24(sp)
+    800050c0:	6442                	ld	s0,16(sp)
+    800050c2:	64a2                	ld	s1,8(sp)
+    800050c4:	6105                	addi	sp,sp,32
+    800050c6:	8082                	ret
+  switch(c){
+    800050c8:	07f00793          	li	a5,127
+    800050cc:	0cf48063          	beq	s1,a5,8000518c <consoleintr+0x10c>
+    if(c != 0 && cons.e-cons.r < INPUT_BUF_SIZE){
+    800050d0:	0001c717          	auipc	a4,0x1c
+    800050d4:	c2070713          	addi	a4,a4,-992 # 80020cf0 <cons>
+    800050d8:	0a072783          	lw	a5,160(a4)
+    800050dc:	09872703          	lw	a4,152(a4)
+    800050e0:	9f99                	subw	a5,a5,a4
+    800050e2:	07f00713          	li	a4,127
+    800050e6:	fcf766e3          	bltu	a4,a5,800050b2 <consoleintr+0x32>
+      c = (c == '\r') ? '\n' : c;
+    800050ea:	47b5                	li	a5,13
+    800050ec:	0cf48763          	beq	s1,a5,800051ba <consoleintr+0x13a>
+      consputc(c);
+    800050f0:	8526                	mv	a0,s1
+    800050f2:	f5dff0ef          	jal	8000504e <consputc>
+      cons.buf[cons.e++ % INPUT_BUF_SIZE] = c;
+    800050f6:	0001c797          	auipc	a5,0x1c
+    800050fa:	bfa78793          	addi	a5,a5,-1030 # 80020cf0 <cons>
+    800050fe:	0a07a683          	lw	a3,160(a5)
+    80005102:	0016871b          	addiw	a4,a3,1
+    80005106:	0007061b          	sext.w	a2,a4
+    8000510a:	0ae7a023          	sw	a4,160(a5)
+    8000510e:	07f6f693          	andi	a3,a3,127
+    80005112:	97b6                	add	a5,a5,a3
+    80005114:	00978c23          	sb	s1,24(a5)
+      if(c == '\n' || c == C('D') || cons.e-cons.r == INPUT_BUF_SIZE){
+    80005118:	47a9                	li	a5,10
+    8000511a:	0cf48563          	beq	s1,a5,800051e4 <consoleintr+0x164>
+    8000511e:	4791                	li	a5,4
+    80005120:	0cf48263          	beq	s1,a5,800051e4 <consoleintr+0x164>
+    80005124:	0001c797          	auipc	a5,0x1c
+    80005128:	c647a783          	lw	a5,-924(a5) # 80020d88 <cons+0x98>
+    8000512c:	9f1d                	subw	a4,a4,a5
+    8000512e:	08000793          	li	a5,128
+    80005132:	f8f710e3          	bne	a4,a5,800050b2 <consoleintr+0x32>
+    80005136:	a07d                	j	800051e4 <consoleintr+0x164>
+    80005138:	e04a                	sd	s2,0(sp)
+    while(cons.e != cons.w &&
+    8000513a:	0001c717          	auipc	a4,0x1c
+    8000513e:	bb670713          	addi	a4,a4,-1098 # 80020cf0 <cons>
+    80005142:	0a072783          	lw	a5,160(a4)
+    80005146:	09c72703          	lw	a4,156(a4)
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+    8000514a:	0001c497          	auipc	s1,0x1c
+    8000514e:	ba648493          	addi	s1,s1,-1114 # 80020cf0 <cons>
+    while(cons.e != cons.w &&
+    80005152:	4929                	li	s2,10
+    80005154:	02f70863          	beq	a4,a5,80005184 <consoleintr+0x104>
+          cons.buf[(cons.e-1) % INPUT_BUF_SIZE] != '\n'){
+    80005158:	37fd                	addiw	a5,a5,-1
+    8000515a:	07f7f713          	andi	a4,a5,127
+    8000515e:	9726                	add	a4,a4,s1
+    while(cons.e != cons.w &&
+    80005160:	01874703          	lbu	a4,24(a4)
+    80005164:	03270263          	beq	a4,s2,80005188 <consoleintr+0x108>
+      cons.e--;
+    80005168:	0af4a023          	sw	a5,160(s1)
+      consputc(BACKSPACE);
+    8000516c:	10000513          	li	a0,256
+    80005170:	edfff0ef          	jal	8000504e <consputc>
+    while(cons.e != cons.w &&
+    80005174:	0a04a783          	lw	a5,160(s1)
+    80005178:	09c4a703          	lw	a4,156(s1)
+    8000517c:	fcf71ee3          	bne	a4,a5,80005158 <consoleintr+0xd8>
+    80005180:	6902                	ld	s2,0(sp)
+    80005182:	bf05                	j	800050b2 <consoleintr+0x32>
+    80005184:	6902                	ld	s2,0(sp)
+    80005186:	b735                	j	800050b2 <consoleintr+0x32>
+    80005188:	6902                	ld	s2,0(sp)
+    8000518a:	b725                	j	800050b2 <consoleintr+0x32>
+    if(cons.e != cons.w){
+    8000518c:	0001c717          	auipc	a4,0x1c
+    80005190:	b6470713          	addi	a4,a4,-1180 # 80020cf0 <cons>
+    80005194:	0a072783          	lw	a5,160(a4)
+    80005198:	09c72703          	lw	a4,156(a4)
+    8000519c:	f0f70be3          	beq	a4,a5,800050b2 <consoleintr+0x32>
+      cons.e--;
+    800051a0:	37fd                	addiw	a5,a5,-1
+    800051a2:	0001c717          	auipc	a4,0x1c
+    800051a6:	bef72723          	sw	a5,-1042(a4) # 80020d90 <cons+0xa0>
+      consputc(BACKSPACE);
+    800051aa:	10000513          	li	a0,256
+    800051ae:	ea1ff0ef          	jal	8000504e <consputc>
+    800051b2:	b701                	j	800050b2 <consoleintr+0x32>
+    if(c != 0 && cons.e-cons.r < INPUT_BUF_SIZE){
+    800051b4:	ee048fe3          	beqz	s1,800050b2 <consoleintr+0x32>
+    800051b8:	bf21                	j	800050d0 <consoleintr+0x50>
+      consputc(c);
+    800051ba:	4529                	li	a0,10
+    800051bc:	e93ff0ef          	jal	8000504e <consputc>
+      cons.buf[cons.e++ % INPUT_BUF_SIZE] = c;
+    800051c0:	0001c797          	auipc	a5,0x1c
+    800051c4:	b3078793          	addi	a5,a5,-1232 # 80020cf0 <cons>
+    800051c8:	0a07a703          	lw	a4,160(a5)
+    800051cc:	0017069b          	addiw	a3,a4,1
+    800051d0:	0006861b          	sext.w	a2,a3
+    800051d4:	0ad7a023          	sw	a3,160(a5)
+    800051d8:	07f77713          	andi	a4,a4,127
+    800051dc:	97ba                	add	a5,a5,a4
+    800051de:	4729                	li	a4,10
+    800051e0:	00e78c23          	sb	a4,24(a5)
+        cons.w = cons.e;
+    800051e4:	0001c797          	auipc	a5,0x1c
+    800051e8:	bac7a423          	sw	a2,-1112(a5) # 80020d8c <cons+0x9c>
+        wakeup(&cons.r);
+    800051ec:	0001c517          	auipc	a0,0x1c
+    800051f0:	b9c50513          	addi	a0,a0,-1124 # 80020d88 <cons+0x98>
+    800051f4:	9d6fc0ef          	jal	800013ca <wakeup>
+    800051f8:	bd6d                	j	800050b2 <consoleintr+0x32>
+
+00000000800051fa <consoleinit>:
+
+void
+consoleinit(void)
+{
+    800051fa:	1141                	addi	sp,sp,-16
+    800051fc:	e406                	sd	ra,8(sp)
+    800051fe:	e022                	sd	s0,0(sp)
+    80005200:	0800                	addi	s0,sp,16
+  initlock(&cons.lock, "cons");
+    80005202:	00002597          	auipc	a1,0x2
+    80005206:	5e658593          	addi	a1,a1,1510 # 800077e8 <etext+0x7e8>
+    8000520a:	0001c517          	auipc	a0,0x1c
+    8000520e:	ae650513          	addi	a0,a0,-1306 # 80020cf0 <cons>
+    80005212:	63e000ef          	jal	80005850 <initlock>
+
+  uartinit();
+    80005216:	3f4000ef          	jal	8000560a <uartinit>
+
+  // connect read and write system calls
+  // to consoleread and consolewrite.
+  devsw[CONSOLE].read = consoleread;
+    8000521a:	00013797          	auipc	a5,0x13
+    8000521e:	93e78793          	addi	a5,a5,-1730 # 80017b58 <devsw>
+    80005222:	00000717          	auipc	a4,0x0
+    80005226:	d2270713          	addi	a4,a4,-734 # 80004f44 <consoleread>
+    8000522a:	eb98                	sd	a4,16(a5)
+  devsw[CONSOLE].write = consolewrite;
+    8000522c:	00000717          	auipc	a4,0x0
+    80005230:	cb270713          	addi	a4,a4,-846 # 80004ede <consolewrite>
+    80005234:	ef98                	sd	a4,24(a5)
+}
+    80005236:	60a2                	ld	ra,8(sp)
+    80005238:	6402                	ld	s0,0(sp)
+    8000523a:	0141                	addi	sp,sp,16
+    8000523c:	8082                	ret
+
+000000008000523e <printint>:
+
+static char digits[] = "0123456789abcdef";
+
+static void
+printint(long long xx, int base, int sign)
+{
+    8000523e:	7179                	addi	sp,sp,-48
+    80005240:	f406                	sd	ra,40(sp)
+    80005242:	f022                	sd	s0,32(sp)
+    80005244:	1800                	addi	s0,sp,48
+  char buf[16];
+  int i;
+  unsigned long long x;
+
+  if(sign && (sign = (xx < 0)))
+    80005246:	c219                	beqz	a2,8000524c <printint+0xe>
+    80005248:	08054063          	bltz	a0,800052c8 <printint+0x8a>
+    x = -xx;
+  else
+    x = xx;
+    8000524c:	4881                	li	a7,0
+    8000524e:	fd040693          	addi	a3,s0,-48
+
+  i = 0;
+    80005252:	4781                	li	a5,0
+  do {
+    buf[i++] = digits[x % base];
+    80005254:	00002617          	auipc	a2,0x2
+    80005258:	7cc60613          	addi	a2,a2,1996 # 80007a20 <digits>
+    8000525c:	883e                	mv	a6,a5
+    8000525e:	2785                	addiw	a5,a5,1
+    80005260:	02b57733          	remu	a4,a0,a1
+    80005264:	9732                	add	a4,a4,a2
+    80005266:	00074703          	lbu	a4,0(a4)
+    8000526a:	00e68023          	sb	a4,0(a3)
+  } while((x /= base) != 0);
+    8000526e:	872a                	mv	a4,a0
+    80005270:	02b55533          	divu	a0,a0,a1
+    80005274:	0685                	addi	a3,a3,1
+    80005276:	feb773e3          	bgeu	a4,a1,8000525c <printint+0x1e>
+
+  if(sign)
+    8000527a:	00088a63          	beqz	a7,8000528e <printint+0x50>
+    buf[i++] = '-';
+    8000527e:	1781                	addi	a5,a5,-32
+    80005280:	97a2                	add	a5,a5,s0
+    80005282:	02d00713          	li	a4,45
+    80005286:	fee78823          	sb	a4,-16(a5)
+    8000528a:	0028079b          	addiw	a5,a6,2
+
+  while(--i >= 0)
+    8000528e:	02f05963          	blez	a5,800052c0 <printint+0x82>
+    80005292:	ec26                	sd	s1,24(sp)
+    80005294:	e84a                	sd	s2,16(sp)
+    80005296:	fd040713          	addi	a4,s0,-48
+    8000529a:	00f704b3          	add	s1,a4,a5
+    8000529e:	fff70913          	addi	s2,a4,-1
+    800052a2:	993e                	add	s2,s2,a5
+    800052a4:	37fd                	addiw	a5,a5,-1
+    800052a6:	1782                	slli	a5,a5,0x20
+    800052a8:	9381                	srli	a5,a5,0x20
+    800052aa:	40f90933          	sub	s2,s2,a5
+    consputc(buf[i]);
+    800052ae:	fff4c503          	lbu	a0,-1(s1)
+    800052b2:	d9dff0ef          	jal	8000504e <consputc>
+  while(--i >= 0)
+    800052b6:	14fd                	addi	s1,s1,-1
+    800052b8:	ff249be3          	bne	s1,s2,800052ae <printint+0x70>
+    800052bc:	64e2                	ld	s1,24(sp)
+    800052be:	6942                	ld	s2,16(sp)
+}
+    800052c0:	70a2                	ld	ra,40(sp)
+    800052c2:	7402                	ld	s0,32(sp)
+    800052c4:	6145                	addi	sp,sp,48
+    800052c6:	8082                	ret
+    x = -xx;
+    800052c8:	40a00533          	neg	a0,a0
+  if(sign && (sign = (xx < 0)))
+    800052cc:	4885                	li	a7,1
+    x = -xx;
+    800052ce:	b741                	j	8000524e <printint+0x10>
+
+00000000800052d0 <printf>:
+}
+
+// Print to the console.
+int
+printf(char *fmt, ...)
+{
+    800052d0:	7155                	addi	sp,sp,-208
+    800052d2:	e506                	sd	ra,136(sp)
+    800052d4:	e122                	sd	s0,128(sp)
+    800052d6:	f0d2                	sd	s4,96(sp)
+    800052d8:	0900                	addi	s0,sp,144
+    800052da:	8a2a                	mv	s4,a0
+    800052dc:	e40c                	sd	a1,8(s0)
+    800052de:	e810                	sd	a2,16(s0)
+    800052e0:	ec14                	sd	a3,24(s0)
+    800052e2:	f018                	sd	a4,32(s0)
+    800052e4:	f41c                	sd	a5,40(s0)
+    800052e6:	03043823          	sd	a6,48(s0)
+    800052ea:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+  int i, cx, c0, c1, c2, locking;
+  char *s;
+
+  locking = pr.locking;
+    800052ee:	0001c797          	auipc	a5,0x1c
+    800052f2:	ac27a783          	lw	a5,-1342(a5) # 80020db0 <pr+0x18>
+    800052f6:	f6f43c23          	sd	a5,-136(s0)
+  if(locking)
+    800052fa:	e3a1                	bnez	a5,8000533a <printf+0x6a>
+    acquire(&pr.lock);
+
+  va_start(ap, fmt);
+    800052fc:	00840793          	addi	a5,s0,8
+    80005300:	f8f43423          	sd	a5,-120(s0)
+  for(i = 0; (cx = fmt[i] & 0xff) != 0; i++){
+    80005304:	00054503          	lbu	a0,0(a0)
+    80005308:	26050763          	beqz	a0,80005576 <printf+0x2a6>
+    8000530c:	fca6                	sd	s1,120(sp)
+    8000530e:	f8ca                	sd	s2,112(sp)
+    80005310:	f4ce                	sd	s3,104(sp)
+    80005312:	ecd6                	sd	s5,88(sp)
+    80005314:	e8da                	sd	s6,80(sp)
+    80005316:	e0e2                	sd	s8,64(sp)
+    80005318:	fc66                	sd	s9,56(sp)
+    8000531a:	f86a                	sd	s10,48(sp)
+    8000531c:	f46e                	sd	s11,40(sp)
+    8000531e:	4981                	li	s3,0
+    if(cx != '%'){
+    80005320:	02500a93          	li	s5,37
+    i++;
+    c0 = fmt[i+0] & 0xff;
+    c1 = c2 = 0;
+    if(c0) c1 = fmt[i+1] & 0xff;
+    if(c1) c2 = fmt[i+2] & 0xff;
+    if(c0 == 'd'){
+    80005324:	06400b13          	li	s6,100
+      printint(va_arg(ap, int), 10, 1);
+    } else if(c0 == 'l' && c1 == 'd'){
+    80005328:	06c00c13          	li	s8,108
+      printint(va_arg(ap, uint64), 10, 1);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+      printint(va_arg(ap, uint64), 10, 1);
+      i += 2;
+    } else if(c0 == 'u'){
+    8000532c:	07500c93          	li	s9,117
+      printint(va_arg(ap, uint64), 10, 0);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+      printint(va_arg(ap, uint64), 10, 0);
+      i += 2;
+    } else if(c0 == 'x'){
+    80005330:	07800d13          	li	s10,120
+      printint(va_arg(ap, uint64), 16, 0);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+      printint(va_arg(ap, uint64), 16, 0);
+      i += 2;
+    } else if(c0 == 'p'){
+    80005334:	07000d93          	li	s11,112
+    80005338:	a815                	j	8000536c <printf+0x9c>
+    acquire(&pr.lock);
+    8000533a:	0001c517          	auipc	a0,0x1c
+    8000533e:	a5e50513          	addi	a0,a0,-1442 # 80020d98 <pr>
+    80005342:	58e000ef          	jal	800058d0 <acquire>
+  va_start(ap, fmt);
+    80005346:	00840793          	addi	a5,s0,8
+    8000534a:	f8f43423          	sd	a5,-120(s0)
+  for(i = 0; (cx = fmt[i] & 0xff) != 0; i++){
+    8000534e:	000a4503          	lbu	a0,0(s4)
+    80005352:	fd4d                	bnez	a0,8000530c <printf+0x3c>
+    80005354:	a481                	j	80005594 <printf+0x2c4>
+      consputc(cx);
+    80005356:	cf9ff0ef          	jal	8000504e <consputc>
+      continue;
+    8000535a:	84ce                	mv	s1,s3
+  for(i = 0; (cx = fmt[i] & 0xff) != 0; i++){
+    8000535c:	0014899b          	addiw	s3,s1,1
+    80005360:	013a07b3          	add	a5,s4,s3
+    80005364:	0007c503          	lbu	a0,0(a5)
+    80005368:	1e050b63          	beqz	a0,8000555e <printf+0x28e>
+    if(cx != '%'){
+    8000536c:	ff5515e3          	bne	a0,s5,80005356 <printf+0x86>
+    i++;
+    80005370:	0019849b          	addiw	s1,s3,1
+    c0 = fmt[i+0] & 0xff;
+    80005374:	009a07b3          	add	a5,s4,s1
+    80005378:	0007c903          	lbu	s2,0(a5)
+    if(c0) c1 = fmt[i+1] & 0xff;
+    8000537c:	1e090163          	beqz	s2,8000555e <printf+0x28e>
+    80005380:	0017c783          	lbu	a5,1(a5)
+    c1 = c2 = 0;
+    80005384:	86be                	mv	a3,a5
+    if(c1) c2 = fmt[i+2] & 0xff;
+    80005386:	c789                	beqz	a5,80005390 <printf+0xc0>
+    80005388:	009a0733          	add	a4,s4,s1
+    8000538c:	00274683          	lbu	a3,2(a4)
+    if(c0 == 'd'){
+    80005390:	03690763          	beq	s2,s6,800053be <printf+0xee>
+    } else if(c0 == 'l' && c1 == 'd'){
+    80005394:	05890163          	beq	s2,s8,800053d6 <printf+0x106>
+    } else if(c0 == 'u'){
+    80005398:	0d990b63          	beq	s2,s9,8000546e <printf+0x19e>
+    } else if(c0 == 'x'){
+    8000539c:	13a90163          	beq	s2,s10,800054be <printf+0x1ee>
+    } else if(c0 == 'p'){
+    800053a0:	13b90b63          	beq	s2,s11,800054d6 <printf+0x206>
+      printptr(va_arg(ap, uint64));
+    } else if(c0 == 's'){
+    800053a4:	07300793          	li	a5,115
+    800053a8:	16f90a63          	beq	s2,a5,8000551c <printf+0x24c>
+      if((s = va_arg(ap, char*)) == 0)
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+    } else if(c0 == '%'){
+    800053ac:	1b590463          	beq	s2,s5,80005554 <printf+0x284>
+      consputc('%');
+    } else if(c0 == 0){
+      break;
+    } else {
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+    800053b0:	8556                	mv	a0,s5
+    800053b2:	c9dff0ef          	jal	8000504e <consputc>
+      consputc(c0);
+    800053b6:	854a                	mv	a0,s2
+    800053b8:	c97ff0ef          	jal	8000504e <consputc>
+    800053bc:	b745                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, int), 10, 1);
+    800053be:	f8843783          	ld	a5,-120(s0)
+    800053c2:	00878713          	addi	a4,a5,8
+    800053c6:	f8e43423          	sd	a4,-120(s0)
+    800053ca:	4605                	li	a2,1
+    800053cc:	45a9                	li	a1,10
+    800053ce:	4388                	lw	a0,0(a5)
+    800053d0:	e6fff0ef          	jal	8000523e <printint>
+    800053d4:	b761                	j	8000535c <printf+0x8c>
+    } else if(c0 == 'l' && c1 == 'd'){
+    800053d6:	03678663          	beq	a5,s6,80005402 <printf+0x132>
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+    800053da:	05878263          	beq	a5,s8,8000541e <printf+0x14e>
+    } else if(c0 == 'l' && c1 == 'u'){
+    800053de:	0b978463          	beq	a5,s9,80005486 <printf+0x1b6>
+    } else if(c0 == 'l' && c1 == 'x'){
+    800053e2:	fda797e3          	bne	a5,s10,800053b0 <printf+0xe0>
+      printint(va_arg(ap, uint64), 16, 0);
+    800053e6:	f8843783          	ld	a5,-120(s0)
+    800053ea:	00878713          	addi	a4,a5,8
+    800053ee:	f8e43423          	sd	a4,-120(s0)
+    800053f2:	4601                	li	a2,0
+    800053f4:	45c1                	li	a1,16
+    800053f6:	6388                	ld	a0,0(a5)
+    800053f8:	e47ff0ef          	jal	8000523e <printint>
+      i += 1;
+    800053fc:	0029849b          	addiw	s1,s3,2
+    80005400:	bfb1                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, uint64), 10, 1);
+    80005402:	f8843783          	ld	a5,-120(s0)
+    80005406:	00878713          	addi	a4,a5,8
+    8000540a:	f8e43423          	sd	a4,-120(s0)
+    8000540e:	4605                	li	a2,1
+    80005410:	45a9                	li	a1,10
+    80005412:	6388                	ld	a0,0(a5)
+    80005414:	e2bff0ef          	jal	8000523e <printint>
+      i += 1;
+    80005418:	0029849b          	addiw	s1,s3,2
+    8000541c:	b781                	j	8000535c <printf+0x8c>
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+    8000541e:	06400793          	li	a5,100
+    80005422:	02f68863          	beq	a3,a5,80005452 <printf+0x182>
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+    80005426:	07500793          	li	a5,117
+    8000542a:	06f68c63          	beq	a3,a5,800054a2 <printf+0x1d2>
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+    8000542e:	07800793          	li	a5,120
+    80005432:	f6f69fe3          	bne	a3,a5,800053b0 <printf+0xe0>
+      printint(va_arg(ap, uint64), 16, 0);
+    80005436:	f8843783          	ld	a5,-120(s0)
+    8000543a:	00878713          	addi	a4,a5,8
+    8000543e:	f8e43423          	sd	a4,-120(s0)
+    80005442:	4601                	li	a2,0
+    80005444:	45c1                	li	a1,16
+    80005446:	6388                	ld	a0,0(a5)
+    80005448:	df7ff0ef          	jal	8000523e <printint>
+      i += 2;
+    8000544c:	0039849b          	addiw	s1,s3,3
+    80005450:	b731                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, uint64), 10, 1);
+    80005452:	f8843783          	ld	a5,-120(s0)
+    80005456:	00878713          	addi	a4,a5,8
+    8000545a:	f8e43423          	sd	a4,-120(s0)
+    8000545e:	4605                	li	a2,1
+    80005460:	45a9                	li	a1,10
+    80005462:	6388                	ld	a0,0(a5)
+    80005464:	ddbff0ef          	jal	8000523e <printint>
+      i += 2;
+    80005468:	0039849b          	addiw	s1,s3,3
+    8000546c:	bdc5                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, int), 10, 0);
+    8000546e:	f8843783          	ld	a5,-120(s0)
+    80005472:	00878713          	addi	a4,a5,8
+    80005476:	f8e43423          	sd	a4,-120(s0)
+    8000547a:	4601                	li	a2,0
+    8000547c:	45a9                	li	a1,10
+    8000547e:	4388                	lw	a0,0(a5)
+    80005480:	dbfff0ef          	jal	8000523e <printint>
+    80005484:	bde1                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, uint64), 10, 0);
+    80005486:	f8843783          	ld	a5,-120(s0)
+    8000548a:	00878713          	addi	a4,a5,8
+    8000548e:	f8e43423          	sd	a4,-120(s0)
+    80005492:	4601                	li	a2,0
+    80005494:	45a9                	li	a1,10
+    80005496:	6388                	ld	a0,0(a5)
+    80005498:	da7ff0ef          	jal	8000523e <printint>
+      i += 1;
+    8000549c:	0029849b          	addiw	s1,s3,2
+    800054a0:	bd75                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, uint64), 10, 0);
+    800054a2:	f8843783          	ld	a5,-120(s0)
+    800054a6:	00878713          	addi	a4,a5,8
+    800054aa:	f8e43423          	sd	a4,-120(s0)
+    800054ae:	4601                	li	a2,0
+    800054b0:	45a9                	li	a1,10
+    800054b2:	6388                	ld	a0,0(a5)
+    800054b4:	d8bff0ef          	jal	8000523e <printint>
+      i += 2;
+    800054b8:	0039849b          	addiw	s1,s3,3
+    800054bc:	b545                	j	8000535c <printf+0x8c>
+      printint(va_arg(ap, int), 16, 0);
+    800054be:	f8843783          	ld	a5,-120(s0)
+    800054c2:	00878713          	addi	a4,a5,8
+    800054c6:	f8e43423          	sd	a4,-120(s0)
+    800054ca:	4601                	li	a2,0
+    800054cc:	45c1                	li	a1,16
+    800054ce:	4388                	lw	a0,0(a5)
+    800054d0:	d6fff0ef          	jal	8000523e <printint>
+    800054d4:	b561                	j	8000535c <printf+0x8c>
+    800054d6:	e4de                	sd	s7,72(sp)
+      printptr(va_arg(ap, uint64));
+    800054d8:	f8843783          	ld	a5,-120(s0)
+    800054dc:	00878713          	addi	a4,a5,8
+    800054e0:	f8e43423          	sd	a4,-120(s0)
+    800054e4:	0007b983          	ld	s3,0(a5)
+  consputc('0');
+    800054e8:	03000513          	li	a0,48
+    800054ec:	b63ff0ef          	jal	8000504e <consputc>
+  consputc('x');
+    800054f0:	07800513          	li	a0,120
+    800054f4:	b5bff0ef          	jal	8000504e <consputc>
+    800054f8:	4941                	li	s2,16
+    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
+    800054fa:	00002b97          	auipc	s7,0x2
+    800054fe:	526b8b93          	addi	s7,s7,1318 # 80007a20 <digits>
+    80005502:	03c9d793          	srli	a5,s3,0x3c
+    80005506:	97de                	add	a5,a5,s7
+    80005508:	0007c503          	lbu	a0,0(a5)
+    8000550c:	b43ff0ef          	jal	8000504e <consputc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    80005510:	0992                	slli	s3,s3,0x4
+    80005512:	397d                	addiw	s2,s2,-1
+    80005514:	fe0917e3          	bnez	s2,80005502 <printf+0x232>
+    80005518:	6ba6                	ld	s7,72(sp)
+    8000551a:	b589                	j	8000535c <printf+0x8c>
+      if((s = va_arg(ap, char*)) == 0)
+    8000551c:	f8843783          	ld	a5,-120(s0)
+    80005520:	00878713          	addi	a4,a5,8
+    80005524:	f8e43423          	sd	a4,-120(s0)
+    80005528:	0007b903          	ld	s2,0(a5)
+    8000552c:	00090d63          	beqz	s2,80005546 <printf+0x276>
+      for(; *s; s++)
+    80005530:	00094503          	lbu	a0,0(s2)
+    80005534:	e20504e3          	beqz	a0,8000535c <printf+0x8c>
+        consputc(*s);
+    80005538:	b17ff0ef          	jal	8000504e <consputc>
+      for(; *s; s++)
+    8000553c:	0905                	addi	s2,s2,1
+    8000553e:	00094503          	lbu	a0,0(s2)
+    80005542:	f97d                	bnez	a0,80005538 <printf+0x268>
+    80005544:	bd21                	j	8000535c <printf+0x8c>
+        s = "(null)";
+    80005546:	00002917          	auipc	s2,0x2
+    8000554a:	2aa90913          	addi	s2,s2,682 # 800077f0 <etext+0x7f0>
+      for(; *s; s++)
+    8000554e:	02800513          	li	a0,40
+    80005552:	b7dd                	j	80005538 <printf+0x268>
+      consputc('%');
+    80005554:	02500513          	li	a0,37
+    80005558:	af7ff0ef          	jal	8000504e <consputc>
+    8000555c:	b501                	j	8000535c <printf+0x8c>
+    }
+#endif
+  }
+  va_end(ap);
+
+  if(locking)
+    8000555e:	f7843783          	ld	a5,-136(s0)
+    80005562:	e385                	bnez	a5,80005582 <printf+0x2b2>
+    80005564:	74e6                	ld	s1,120(sp)
+    80005566:	7946                	ld	s2,112(sp)
+    80005568:	79a6                	ld	s3,104(sp)
+    8000556a:	6ae6                	ld	s5,88(sp)
+    8000556c:	6b46                	ld	s6,80(sp)
+    8000556e:	6c06                	ld	s8,64(sp)
+    80005570:	7ce2                	ld	s9,56(sp)
+    80005572:	7d42                	ld	s10,48(sp)
+    80005574:	7da2                	ld	s11,40(sp)
+    release(&pr.lock);
+
+  return 0;
+}
+    80005576:	4501                	li	a0,0
+    80005578:	60aa                	ld	ra,136(sp)
+    8000557a:	640a                	ld	s0,128(sp)
+    8000557c:	7a06                	ld	s4,96(sp)
+    8000557e:	6169                	addi	sp,sp,208
+    80005580:	8082                	ret
+    80005582:	74e6                	ld	s1,120(sp)
+    80005584:	7946                	ld	s2,112(sp)
+    80005586:	79a6                	ld	s3,104(sp)
+    80005588:	6ae6                	ld	s5,88(sp)
+    8000558a:	6b46                	ld	s6,80(sp)
+    8000558c:	6c06                	ld	s8,64(sp)
+    8000558e:	7ce2                	ld	s9,56(sp)
+    80005590:	7d42                	ld	s10,48(sp)
+    80005592:	7da2                	ld	s11,40(sp)
+    release(&pr.lock);
+    80005594:	0001c517          	auipc	a0,0x1c
+    80005598:	80450513          	addi	a0,a0,-2044 # 80020d98 <pr>
+    8000559c:	3cc000ef          	jal	80005968 <release>
+    800055a0:	bfd9                	j	80005576 <printf+0x2a6>
+
+00000000800055a2 <panic>:
+
+void
+panic(char *s)
+{
+    800055a2:	1101                	addi	sp,sp,-32
+    800055a4:	ec06                	sd	ra,24(sp)
+    800055a6:	e822                	sd	s0,16(sp)
+    800055a8:	e426                	sd	s1,8(sp)
+    800055aa:	1000                	addi	s0,sp,32
+    800055ac:	84aa                	mv	s1,a0
+  pr.locking = 0;
+    800055ae:	0001c797          	auipc	a5,0x1c
+    800055b2:	8007a123          	sw	zero,-2046(a5) # 80020db0 <pr+0x18>
+  printf("panic: ");
+    800055b6:	00002517          	auipc	a0,0x2
+    800055ba:	24250513          	addi	a0,a0,578 # 800077f8 <etext+0x7f8>
+    800055be:	d13ff0ef          	jal	800052d0 <printf>
+  printf("%s\n", s);
+    800055c2:	85a6                	mv	a1,s1
+    800055c4:	00002517          	auipc	a0,0x2
+    800055c8:	23c50513          	addi	a0,a0,572 # 80007800 <etext+0x800>
+    800055cc:	d05ff0ef          	jal	800052d0 <printf>
+  panicked = 1; // freeze uart output from other CPUs
+    800055d0:	4785                	li	a5,1
+    800055d2:	00002717          	auipc	a4,0x2
+    800055d6:	4cf72d23          	sw	a5,1242(a4) # 80007aac <panicked>
+  for(;;)
+    800055da:	a001                	j	800055da <panic+0x38>
+
+00000000800055dc <printfinit>:
+    ;
+}
+
+void
+printfinit(void)
+{
+    800055dc:	1101                	addi	sp,sp,-32
+    800055de:	ec06                	sd	ra,24(sp)
+    800055e0:	e822                	sd	s0,16(sp)
+    800055e2:	e426                	sd	s1,8(sp)
+    800055e4:	1000                	addi	s0,sp,32
+  initlock(&pr.lock, "pr");
+    800055e6:	0001b497          	auipc	s1,0x1b
+    800055ea:	7b248493          	addi	s1,s1,1970 # 80020d98 <pr>
+    800055ee:	00002597          	auipc	a1,0x2
+    800055f2:	21a58593          	addi	a1,a1,538 # 80007808 <etext+0x808>
+    800055f6:	8526                	mv	a0,s1
+    800055f8:	258000ef          	jal	80005850 <initlock>
+  pr.locking = 1;
+    800055fc:	4785                	li	a5,1
+    800055fe:	cc9c                	sw	a5,24(s1)
+}
+    80005600:	60e2                	ld	ra,24(sp)
+    80005602:	6442                	ld	s0,16(sp)
+    80005604:	64a2                	ld	s1,8(sp)
+    80005606:	6105                	addi	sp,sp,32
+    80005608:	8082                	ret
+
+000000008000560a <uartinit>:
+
+void uartstart();
+
+void
+uartinit(void)
+{
+    8000560a:	1141                	addi	sp,sp,-16
+    8000560c:	e406                	sd	ra,8(sp)
+    8000560e:	e022                	sd	s0,0(sp)
+    80005610:	0800                	addi	s0,sp,16
+  // disable interrupts.
+  WriteReg(IER, 0x00);
+    80005612:	100007b7          	lui	a5,0x10000
+    80005616:	000780a3          	sb	zero,1(a5) # 10000001 <_entry-0x6fffffff>
+
+  // special mode to set baud rate.
+  WriteReg(LCR, LCR_BAUD_LATCH);
+    8000561a:	10000737          	lui	a4,0x10000
+    8000561e:	f8000693          	li	a3,-128
+    80005622:	00d701a3          	sb	a3,3(a4) # 10000003 <_entry-0x6ffffffd>
+
+  // LSB for baud rate of 38.4K.
+  WriteReg(0, 0x03);
+    80005626:	468d                	li	a3,3
+    80005628:	10000637          	lui	a2,0x10000
+    8000562c:	00d60023          	sb	a3,0(a2) # 10000000 <_entry-0x70000000>
+
+  // MSB for baud rate of 38.4K.
+  WriteReg(1, 0x00);
+    80005630:	000780a3          	sb	zero,1(a5)
+
+  // leave set-baud mode,
+  // and set word length to 8 bits, no parity.
+  WriteReg(LCR, LCR_EIGHT_BITS);
+    80005634:	00d701a3          	sb	a3,3(a4)
+
+  // reset and enable FIFOs.
+  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
+    80005638:	10000737          	lui	a4,0x10000
+    8000563c:	461d                	li	a2,7
+    8000563e:	00c70123          	sb	a2,2(a4) # 10000002 <_entry-0x6ffffffe>
+
+  // enable transmit and receive interrupts.
+  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
+    80005642:	00d780a3          	sb	a3,1(a5)
+
+  initlock(&uart_tx_lock, "uart");
+    80005646:	00002597          	auipc	a1,0x2
+    8000564a:	1ca58593          	addi	a1,a1,458 # 80007810 <etext+0x810>
+    8000564e:	0001b517          	auipc	a0,0x1b
+    80005652:	76a50513          	addi	a0,a0,1898 # 80020db8 <uart_tx_lock>
+    80005656:	1fa000ef          	jal	80005850 <initlock>
+}
+    8000565a:	60a2                	ld	ra,8(sp)
+    8000565c:	6402                	ld	s0,0(sp)
+    8000565e:	0141                	addi	sp,sp,16
+    80005660:	8082                	ret
+
+0000000080005662 <uartputc_sync>:
+// use interrupts, for use by kernel printf() and
+// to echo characters. it spins waiting for the uart's
+// output register to be empty.
+void
+uartputc_sync(int c)
+{
+    80005662:	1101                	addi	sp,sp,-32
+    80005664:	ec06                	sd	ra,24(sp)
+    80005666:	e822                	sd	s0,16(sp)
+    80005668:	e426                	sd	s1,8(sp)
+    8000566a:	1000                	addi	s0,sp,32
+    8000566c:	84aa                	mv	s1,a0
+  push_off();
+    8000566e:	222000ef          	jal	80005890 <push_off>
+
+  if(panicked){
+    80005672:	00002797          	auipc	a5,0x2
+    80005676:	43a7a783          	lw	a5,1082(a5) # 80007aac <panicked>
+    8000567a:	e795                	bnez	a5,800056a6 <uartputc_sync+0x44>
+    for(;;)
+      ;
+  }
+
+  // wait for Transmit Holding Empty to be set in LSR.
+  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
+    8000567c:	10000737          	lui	a4,0x10000
+    80005680:	0715                	addi	a4,a4,5 # 10000005 <_entry-0x6ffffffb>
+    80005682:	00074783          	lbu	a5,0(a4)
+    80005686:	0207f793          	andi	a5,a5,32
+    8000568a:	dfe5                	beqz	a5,80005682 <uartputc_sync+0x20>
+    ;
+  WriteReg(THR, c);
+    8000568c:	0ff4f513          	zext.b	a0,s1
+    80005690:	100007b7          	lui	a5,0x10000
+    80005694:	00a78023          	sb	a0,0(a5) # 10000000 <_entry-0x70000000>
+
+  pop_off();
+    80005698:	27c000ef          	jal	80005914 <pop_off>
+}
+    8000569c:	60e2                	ld	ra,24(sp)
+    8000569e:	6442                	ld	s0,16(sp)
+    800056a0:	64a2                	ld	s1,8(sp)
+    800056a2:	6105                	addi	sp,sp,32
+    800056a4:	8082                	ret
+    for(;;)
+    800056a6:	a001                	j	800056a6 <uartputc_sync+0x44>
+
+00000000800056a8 <uartstart>:
+// called from both the top- and bottom-half.
+void
+uartstart()
+{
+  while(1){
+    if(uart_tx_w == uart_tx_r){
+    800056a8:	00002797          	auipc	a5,0x2
+    800056ac:	4087b783          	ld	a5,1032(a5) # 80007ab0 <uart_tx_r>
+    800056b0:	00002717          	auipc	a4,0x2
+    800056b4:	40873703          	ld	a4,1032(a4) # 80007ab8 <uart_tx_w>
+    800056b8:	08f70263          	beq	a4,a5,8000573c <uartstart+0x94>
+{
+    800056bc:	7139                	addi	sp,sp,-64
+    800056be:	fc06                	sd	ra,56(sp)
+    800056c0:	f822                	sd	s0,48(sp)
+    800056c2:	f426                	sd	s1,40(sp)
+    800056c4:	f04a                	sd	s2,32(sp)
+    800056c6:	ec4e                	sd	s3,24(sp)
+    800056c8:	e852                	sd	s4,16(sp)
+    800056ca:	e456                	sd	s5,8(sp)
+    800056cc:	e05a                	sd	s6,0(sp)
+    800056ce:	0080                	addi	s0,sp,64
+      // transmit buffer is empty.
+      ReadReg(ISR);
+      return;
+    }
+    
+    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
+    800056d0:	10000937          	lui	s2,0x10000
+    800056d4:	0915                	addi	s2,s2,5 # 10000005 <_entry-0x6ffffffb>
+      // so we cannot give it another byte.
+      // it will interrupt when it's ready for a new byte.
+      return;
+    }
+    
+    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
+    800056d6:	0001ba97          	auipc	s5,0x1b
+    800056da:	6e2a8a93          	addi	s5,s5,1762 # 80020db8 <uart_tx_lock>
+    uart_tx_r += 1;
+    800056de:	00002497          	auipc	s1,0x2
+    800056e2:	3d248493          	addi	s1,s1,978 # 80007ab0 <uart_tx_r>
+    
+    // maybe uartputc() is waiting for space in the buffer.
+    wakeup(&uart_tx_r);
+    
+    WriteReg(THR, c);
+    800056e6:	10000a37          	lui	s4,0x10000
+    if(uart_tx_w == uart_tx_r){
+    800056ea:	00002997          	auipc	s3,0x2
+    800056ee:	3ce98993          	addi	s3,s3,974 # 80007ab8 <uart_tx_w>
+    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
+    800056f2:	00094703          	lbu	a4,0(s2)
+    800056f6:	02077713          	andi	a4,a4,32
+    800056fa:	c71d                	beqz	a4,80005728 <uartstart+0x80>
+    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
+    800056fc:	01f7f713          	andi	a4,a5,31
+    80005700:	9756                	add	a4,a4,s5
+    80005702:	01874b03          	lbu	s6,24(a4)
+    uart_tx_r += 1;
+    80005706:	0785                	addi	a5,a5,1
+    80005708:	e09c                	sd	a5,0(s1)
+    wakeup(&uart_tx_r);
+    8000570a:	8526                	mv	a0,s1
+    8000570c:	cbffb0ef          	jal	800013ca <wakeup>
+    WriteReg(THR, c);
+    80005710:	016a0023          	sb	s6,0(s4) # 10000000 <_entry-0x70000000>
+    if(uart_tx_w == uart_tx_r){
+    80005714:	609c                	ld	a5,0(s1)
+    80005716:	0009b703          	ld	a4,0(s3)
+    8000571a:	fcf71ce3          	bne	a4,a5,800056f2 <uartstart+0x4a>
+      ReadReg(ISR);
+    8000571e:	100007b7          	lui	a5,0x10000
+    80005722:	0789                	addi	a5,a5,2 # 10000002 <_entry-0x6ffffffe>
+    80005724:	0007c783          	lbu	a5,0(a5)
+  }
+}
+    80005728:	70e2                	ld	ra,56(sp)
+    8000572a:	7442                	ld	s0,48(sp)
+    8000572c:	74a2                	ld	s1,40(sp)
+    8000572e:	7902                	ld	s2,32(sp)
+    80005730:	69e2                	ld	s3,24(sp)
+    80005732:	6a42                	ld	s4,16(sp)
+    80005734:	6aa2                	ld	s5,8(sp)
+    80005736:	6b02                	ld	s6,0(sp)
+    80005738:	6121                	addi	sp,sp,64
+    8000573a:	8082                	ret
+      ReadReg(ISR);
+    8000573c:	100007b7          	lui	a5,0x10000
+    80005740:	0789                	addi	a5,a5,2 # 10000002 <_entry-0x6ffffffe>
+    80005742:	0007c783          	lbu	a5,0(a5)
+      return;
+    80005746:	8082                	ret
+
+0000000080005748 <uartputc>:
+{
+    80005748:	7179                	addi	sp,sp,-48
+    8000574a:	f406                	sd	ra,40(sp)
+    8000574c:	f022                	sd	s0,32(sp)
+    8000574e:	ec26                	sd	s1,24(sp)
+    80005750:	e84a                	sd	s2,16(sp)
+    80005752:	e44e                	sd	s3,8(sp)
+    80005754:	e052                	sd	s4,0(sp)
+    80005756:	1800                	addi	s0,sp,48
+    80005758:	8a2a                	mv	s4,a0
+  acquire(&uart_tx_lock);
+    8000575a:	0001b517          	auipc	a0,0x1b
+    8000575e:	65e50513          	addi	a0,a0,1630 # 80020db8 <uart_tx_lock>
+    80005762:	16e000ef          	jal	800058d0 <acquire>
+  if(panicked){
+    80005766:	00002797          	auipc	a5,0x2
+    8000576a:	3467a783          	lw	a5,838(a5) # 80007aac <panicked>
+    8000576e:	efbd                	bnez	a5,800057ec <uartputc+0xa4>
+  while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    80005770:	00002717          	auipc	a4,0x2
+    80005774:	34873703          	ld	a4,840(a4) # 80007ab8 <uart_tx_w>
+    80005778:	00002797          	auipc	a5,0x2
+    8000577c:	3387b783          	ld	a5,824(a5) # 80007ab0 <uart_tx_r>
+    80005780:	02078793          	addi	a5,a5,32
+    sleep(&uart_tx_r, &uart_tx_lock);
+    80005784:	0001b997          	auipc	s3,0x1b
+    80005788:	63498993          	addi	s3,s3,1588 # 80020db8 <uart_tx_lock>
+    8000578c:	00002497          	auipc	s1,0x2
+    80005790:	32448493          	addi	s1,s1,804 # 80007ab0 <uart_tx_r>
+  while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    80005794:	00002917          	auipc	s2,0x2
+    80005798:	32490913          	addi	s2,s2,804 # 80007ab8 <uart_tx_w>
+    8000579c:	00e79d63          	bne	a5,a4,800057b6 <uartputc+0x6e>
+    sleep(&uart_tx_r, &uart_tx_lock);
+    800057a0:	85ce                	mv	a1,s3
+    800057a2:	8526                	mv	a0,s1
+    800057a4:	bdbfb0ef          	jal	8000137e <sleep>
+  while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    800057a8:	00093703          	ld	a4,0(s2)
+    800057ac:	609c                	ld	a5,0(s1)
+    800057ae:	02078793          	addi	a5,a5,32
+    800057b2:	fee787e3          	beq	a5,a4,800057a0 <uartputc+0x58>
+  uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
+    800057b6:	0001b497          	auipc	s1,0x1b
+    800057ba:	60248493          	addi	s1,s1,1538 # 80020db8 <uart_tx_lock>
+    800057be:	01f77793          	andi	a5,a4,31
+    800057c2:	97a6                	add	a5,a5,s1
+    800057c4:	01478c23          	sb	s4,24(a5)
+  uart_tx_w += 1;
+    800057c8:	0705                	addi	a4,a4,1
+    800057ca:	00002797          	auipc	a5,0x2
+    800057ce:	2ee7b723          	sd	a4,750(a5) # 80007ab8 <uart_tx_w>
+  uartstart();
+    800057d2:	ed7ff0ef          	jal	800056a8 <uartstart>
+  release(&uart_tx_lock);
+    800057d6:	8526                	mv	a0,s1
+    800057d8:	190000ef          	jal	80005968 <release>
+}
+    800057dc:	70a2                	ld	ra,40(sp)
+    800057de:	7402                	ld	s0,32(sp)
+    800057e0:	64e2                	ld	s1,24(sp)
+    800057e2:	6942                	ld	s2,16(sp)
+    800057e4:	69a2                	ld	s3,8(sp)
+    800057e6:	6a02                	ld	s4,0(sp)
+    800057e8:	6145                	addi	sp,sp,48
+    800057ea:	8082                	ret
+    for(;;)
+    800057ec:	a001                	j	800057ec <uartputc+0xa4>
+
+00000000800057ee <uartgetc>:
+
+// read one input character from the UART.
+// return -1 if none is waiting.
+int
+uartgetc(void)
+{
+    800057ee:	1141                	addi	sp,sp,-16
+    800057f0:	e422                	sd	s0,8(sp)
+    800057f2:	0800                	addi	s0,sp,16
+  if(ReadReg(LSR) & 0x01){
+    800057f4:	100007b7          	lui	a5,0x10000
+    800057f8:	0795                	addi	a5,a5,5 # 10000005 <_entry-0x6ffffffb>
+    800057fa:	0007c783          	lbu	a5,0(a5)
+    800057fe:	8b85                	andi	a5,a5,1
+    80005800:	cb81                	beqz	a5,80005810 <uartgetc+0x22>
+    // input data is ready.
+    return ReadReg(RHR);
+    80005802:	100007b7          	lui	a5,0x10000
+    80005806:	0007c503          	lbu	a0,0(a5) # 10000000 <_entry-0x70000000>
+  } else {
+    return -1;
+  }
+}
+    8000580a:	6422                	ld	s0,8(sp)
+    8000580c:	0141                	addi	sp,sp,16
+    8000580e:	8082                	ret
+    return -1;
+    80005810:	557d                	li	a0,-1
+    80005812:	bfe5                	j	8000580a <uartgetc+0x1c>
+
+0000000080005814 <uartintr>:
+// handle a uart interrupt, raised because input has
+// arrived, or the uart is ready for more output, or
+// both. called from devintr().
+void
+uartintr(void)
+{
+    80005814:	1101                	addi	sp,sp,-32
+    80005816:	ec06                	sd	ra,24(sp)
+    80005818:	e822                	sd	s0,16(sp)
+    8000581a:	e426                	sd	s1,8(sp)
+    8000581c:	1000                	addi	s0,sp,32
+  // read and process incoming characters.
+  while(1){
+    int c = uartgetc();
+    if(c == -1)
+    8000581e:	54fd                	li	s1,-1
+    80005820:	a019                	j	80005826 <uartintr+0x12>
+      break;
+    consoleintr(c);
+    80005822:	85fff0ef          	jal	80005080 <consoleintr>
+    int c = uartgetc();
+    80005826:	fc9ff0ef          	jal	800057ee <uartgetc>
+    if(c == -1)
+    8000582a:	fe951ce3          	bne	a0,s1,80005822 <uartintr+0xe>
+  }
+
+  // send buffered characters.
+  acquire(&uart_tx_lock);
+    8000582e:	0001b497          	auipc	s1,0x1b
+    80005832:	58a48493          	addi	s1,s1,1418 # 80020db8 <uart_tx_lock>
+    80005836:	8526                	mv	a0,s1
+    80005838:	098000ef          	jal	800058d0 <acquire>
+  uartstart();
+    8000583c:	e6dff0ef          	jal	800056a8 <uartstart>
+  release(&uart_tx_lock);
+    80005840:	8526                	mv	a0,s1
+    80005842:	126000ef          	jal	80005968 <release>
+}
+    80005846:	60e2                	ld	ra,24(sp)
+    80005848:	6442                	ld	s0,16(sp)
+    8000584a:	64a2                	ld	s1,8(sp)
+    8000584c:	6105                	addi	sp,sp,32
+    8000584e:	8082                	ret
+
+0000000080005850 <initlock>:
+#include "proc.h"
+#include "defs.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+    80005850:	1141                	addi	sp,sp,-16
+    80005852:	e422                	sd	s0,8(sp)
+    80005854:	0800                	addi	s0,sp,16
+  lk->name = name;
+    80005856:	e50c                	sd	a1,8(a0)
+  lk->locked = 0;
+    80005858:	00052023          	sw	zero,0(a0)
+  lk->cpu = 0;
+    8000585c:	00053823          	sd	zero,16(a0)
+}
+    80005860:	6422                	ld	s0,8(sp)
+    80005862:	0141                	addi	sp,sp,16
+    80005864:	8082                	ret
+
+0000000080005866 <holding>:
+// Interrupts must be off.
+int
+holding(struct spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->cpu == mycpu());
+    80005866:	411c                	lw	a5,0(a0)
+    80005868:	e399                	bnez	a5,8000586e <holding+0x8>
+    8000586a:	4501                	li	a0,0
+  return r;
+}
+    8000586c:	8082                	ret
+{
+    8000586e:	1101                	addi	sp,sp,-32
+    80005870:	ec06                	sd	ra,24(sp)
+    80005872:	e822                	sd	s0,16(sp)
+    80005874:	e426                	sd	s1,8(sp)
+    80005876:	1000                	addi	s0,sp,32
+  r = (lk->locked && lk->cpu == mycpu());
+    80005878:	6904                	ld	s1,16(a0)
+    8000587a:	d12fb0ef          	jal	80000d8c <mycpu>
+    8000587e:	40a48533          	sub	a0,s1,a0
+    80005882:	00153513          	seqz	a0,a0
+}
+    80005886:	60e2                	ld	ra,24(sp)
+    80005888:	6442                	ld	s0,16(sp)
+    8000588a:	64a2                	ld	s1,8(sp)
+    8000588c:	6105                	addi	sp,sp,32
+    8000588e:	8082                	ret
+
+0000000080005890 <push_off>:
+// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
+// are initially off, then push_off, pop_off leaves them off.
+
+void
+push_off(void)
+{
+    80005890:	1101                	addi	sp,sp,-32
+    80005892:	ec06                	sd	ra,24(sp)
+    80005894:	e822                	sd	s0,16(sp)
+    80005896:	e426                	sd	s1,8(sp)
+    80005898:	1000                	addi	s0,sp,32
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    8000589a:	100024f3          	csrr	s1,sstatus
+    8000589e:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
+    800058a2:	9bf5                	andi	a5,a5,-3
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    800058a4:	10079073          	csrw	sstatus,a5
+  int old = intr_get();
+
+  intr_off();
+  if(mycpu()->noff == 0)
+    800058a8:	ce4fb0ef          	jal	80000d8c <mycpu>
+    800058ac:	5d3c                	lw	a5,120(a0)
+    800058ae:	cb99                	beqz	a5,800058c4 <push_off+0x34>
+    mycpu()->intena = old;
+  mycpu()->noff += 1;
+    800058b0:	cdcfb0ef          	jal	80000d8c <mycpu>
+    800058b4:	5d3c                	lw	a5,120(a0)
+    800058b6:	2785                	addiw	a5,a5,1
+    800058b8:	dd3c                	sw	a5,120(a0)
+}
+    800058ba:	60e2                	ld	ra,24(sp)
+    800058bc:	6442                	ld	s0,16(sp)
+    800058be:	64a2                	ld	s1,8(sp)
+    800058c0:	6105                	addi	sp,sp,32
+    800058c2:	8082                	ret
+    mycpu()->intena = old;
+    800058c4:	cc8fb0ef          	jal	80000d8c <mycpu>
+  return (x & SSTATUS_SIE) != 0;
+    800058c8:	8085                	srli	s1,s1,0x1
+    800058ca:	8885                	andi	s1,s1,1
+    800058cc:	dd64                	sw	s1,124(a0)
+    800058ce:	b7cd                	j	800058b0 <push_off+0x20>
+
+00000000800058d0 <acquire>:
+{
+    800058d0:	1101                	addi	sp,sp,-32
+    800058d2:	ec06                	sd	ra,24(sp)
+    800058d4:	e822                	sd	s0,16(sp)
+    800058d6:	e426                	sd	s1,8(sp)
+    800058d8:	1000                	addi	s0,sp,32
+    800058da:	84aa                	mv	s1,a0
+  push_off(); // disable interrupts to avoid deadlock.
+    800058dc:	fb5ff0ef          	jal	80005890 <push_off>
+  if(holding(lk))
+    800058e0:	8526                	mv	a0,s1
+    800058e2:	f85ff0ef          	jal	80005866 <holding>
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    800058e6:	4705                	li	a4,1
+  if(holding(lk))
+    800058e8:	e105                	bnez	a0,80005908 <acquire+0x38>
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    800058ea:	87ba                	mv	a5,a4
+    800058ec:	0cf4a7af          	amoswap.w.aq	a5,a5,(s1)
+    800058f0:	2781                	sext.w	a5,a5
+    800058f2:	ffe5                	bnez	a5,800058ea <acquire+0x1a>
+  __sync_synchronize();
+    800058f4:	0ff0000f          	fence
+  lk->cpu = mycpu();
+    800058f8:	c94fb0ef          	jal	80000d8c <mycpu>
+    800058fc:	e888                	sd	a0,16(s1)
+}
+    800058fe:	60e2                	ld	ra,24(sp)
+    80005900:	6442                	ld	s0,16(sp)
+    80005902:	64a2                	ld	s1,8(sp)
+    80005904:	6105                	addi	sp,sp,32
+    80005906:	8082                	ret
+    panic("acquire");
+    80005908:	00002517          	auipc	a0,0x2
+    8000590c:	f1050513          	addi	a0,a0,-240 # 80007818 <etext+0x818>
+    80005910:	c93ff0ef          	jal	800055a2 <panic>
+
+0000000080005914 <pop_off>:
+
+void
+pop_off(void)
+{
+    80005914:	1141                	addi	sp,sp,-16
+    80005916:	e406                	sd	ra,8(sp)
+    80005918:	e022                	sd	s0,0(sp)
+    8000591a:	0800                	addi	s0,sp,16
+  struct cpu *c = mycpu();
+    8000591c:	c70fb0ef          	jal	80000d8c <mycpu>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    80005920:	100027f3          	csrr	a5,sstatus
+  return (x & SSTATUS_SIE) != 0;
+    80005924:	8b89                	andi	a5,a5,2
+  if(intr_get())
+    80005926:	e78d                	bnez	a5,80005950 <pop_off+0x3c>
+    panic("pop_off - interruptible");
+  if(c->noff < 1)
+    80005928:	5d3c                	lw	a5,120(a0)
+    8000592a:	02f05963          	blez	a5,8000595c <pop_off+0x48>
+    panic("pop_off");
+  c->noff -= 1;
+    8000592e:	37fd                	addiw	a5,a5,-1
+    80005930:	0007871b          	sext.w	a4,a5
+    80005934:	dd3c                	sw	a5,120(a0)
+  if(c->noff == 0 && c->intena)
+    80005936:	eb09                	bnez	a4,80005948 <pop_off+0x34>
+    80005938:	5d7c                	lw	a5,124(a0)
+    8000593a:	c799                	beqz	a5,80005948 <pop_off+0x34>
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+    8000593c:	100027f3          	csrr	a5,sstatus
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+    80005940:	0027e793          	ori	a5,a5,2
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+    80005944:	10079073          	csrw	sstatus,a5
+    intr_on();
+}
+    80005948:	60a2                	ld	ra,8(sp)
+    8000594a:	6402                	ld	s0,0(sp)
+    8000594c:	0141                	addi	sp,sp,16
+    8000594e:	8082                	ret
+    panic("pop_off - interruptible");
+    80005950:	00002517          	auipc	a0,0x2
+    80005954:	ed050513          	addi	a0,a0,-304 # 80007820 <etext+0x820>
+    80005958:	c4bff0ef          	jal	800055a2 <panic>
+    panic("pop_off");
+    8000595c:	00002517          	auipc	a0,0x2
+    80005960:	edc50513          	addi	a0,a0,-292 # 80007838 <etext+0x838>
+    80005964:	c3fff0ef          	jal	800055a2 <panic>
+
+0000000080005968 <release>:
+{
+    80005968:	1101                	addi	sp,sp,-32
+    8000596a:	ec06                	sd	ra,24(sp)
+    8000596c:	e822                	sd	s0,16(sp)
+    8000596e:	e426                	sd	s1,8(sp)
+    80005970:	1000                	addi	s0,sp,32
+    80005972:	84aa                	mv	s1,a0
+  if(!holding(lk))
+    80005974:	ef3ff0ef          	jal	80005866 <holding>
+    80005978:	c105                	beqz	a0,80005998 <release+0x30>
+  lk->cpu = 0;
+    8000597a:	0004b823          	sd	zero,16(s1)
+  __sync_synchronize();
+    8000597e:	0ff0000f          	fence
+  __sync_lock_release(&lk->locked);
+    80005982:	0f50000f          	fence	iorw,ow
+    80005986:	0804a02f          	amoswap.w	zero,zero,(s1)
+  pop_off();
+    8000598a:	f8bff0ef          	jal	80005914 <pop_off>
+}
+    8000598e:	60e2                	ld	ra,24(sp)
+    80005990:	6442                	ld	s0,16(sp)
+    80005992:	64a2                	ld	s1,8(sp)
+    80005994:	6105                	addi	sp,sp,32
+    80005996:	8082                	ret
+    panic("release");
+    80005998:	00002517          	auipc	a0,0x2
+    8000599c:	ea850513          	addi	a0,a0,-344 # 80007840 <etext+0x840>
+    800059a0:	c03ff0ef          	jal	800055a2 <panic>
+	...
+
+0000000080006000 <_trampoline>:
+    80006000:	14051073          	csrw	sscratch,a0
+    80006004:	02000537          	lui	a0,0x2000
+    80006008:	357d                	addiw	a0,a0,-1 # 1ffffff <_entry-0x7e000001>
+    8000600a:	0536                	slli	a0,a0,0xd
+    8000600c:	02153423          	sd	ra,40(a0)
+    80006010:	02253823          	sd	sp,48(a0)
+    80006014:	02353c23          	sd	gp,56(a0)
+    80006018:	04453023          	sd	tp,64(a0)
+    8000601c:	04553423          	sd	t0,72(a0)
+    80006020:	04653823          	sd	t1,80(a0)
+    80006024:	04753c23          	sd	t2,88(a0)
+    80006028:	f120                	sd	s0,96(a0)
+    8000602a:	f524                	sd	s1,104(a0)
+    8000602c:	fd2c                	sd	a1,120(a0)
+    8000602e:	e150                	sd	a2,128(a0)
+    80006030:	e554                	sd	a3,136(a0)
+    80006032:	e958                	sd	a4,144(a0)
+    80006034:	ed5c                	sd	a5,152(a0)
+    80006036:	0b053023          	sd	a6,160(a0)
+    8000603a:	0b153423          	sd	a7,168(a0)
+    8000603e:	0b253823          	sd	s2,176(a0)
+    80006042:	0b353c23          	sd	s3,184(a0)
+    80006046:	0d453023          	sd	s4,192(a0)
+    8000604a:	0d553423          	sd	s5,200(a0)
+    8000604e:	0d653823          	sd	s6,208(a0)
+    80006052:	0d753c23          	sd	s7,216(a0)
+    80006056:	0f853023          	sd	s8,224(a0)
+    8000605a:	0f953423          	sd	s9,232(a0)
+    8000605e:	0fa53823          	sd	s10,240(a0)
+    80006062:	0fb53c23          	sd	s11,248(a0)
+    80006066:	11c53023          	sd	t3,256(a0)
+    8000606a:	11d53423          	sd	t4,264(a0)
+    8000606e:	11e53823          	sd	t5,272(a0)
+    80006072:	11f53c23          	sd	t6,280(a0)
+    80006076:	140022f3          	csrr	t0,sscratch
+    8000607a:	06553823          	sd	t0,112(a0)
+    8000607e:	00853103          	ld	sp,8(a0)
+    80006082:	02053203          	ld	tp,32(a0)
+    80006086:	01053283          	ld	t0,16(a0)
+    8000608a:	00053303          	ld	t1,0(a0)
+    8000608e:	12000073          	sfence.vma
+    80006092:	18031073          	csrw	satp,t1
+    80006096:	12000073          	sfence.vma
+    8000609a:	8282                	jr	t0
+
+000000008000609c <userret>:
+    8000609c:	12000073          	sfence.vma
+    800060a0:	18051073          	csrw	satp,a0
+    800060a4:	12000073          	sfence.vma
+    800060a8:	02000537          	lui	a0,0x2000
+    800060ac:	357d                	addiw	a0,a0,-1 # 1ffffff <_entry-0x7e000001>
+    800060ae:	0536                	slli	a0,a0,0xd
+    800060b0:	02853083          	ld	ra,40(a0)
+    800060b4:	03053103          	ld	sp,48(a0)
+    800060b8:	03853183          	ld	gp,56(a0)
+    800060bc:	04053203          	ld	tp,64(a0)
+    800060c0:	04853283          	ld	t0,72(a0)
+    800060c4:	05053303          	ld	t1,80(a0)
+    800060c8:	05853383          	ld	t2,88(a0)
+    800060cc:	7120                	ld	s0,96(a0)
+    800060ce:	7524                	ld	s1,104(a0)
+    800060d0:	7d2c                	ld	a1,120(a0)
+    800060d2:	6150                	ld	a2,128(a0)
+    800060d4:	6554                	ld	a3,136(a0)
+    800060d6:	6958                	ld	a4,144(a0)
+    800060d8:	6d5c                	ld	a5,152(a0)
+    800060da:	0a053803          	ld	a6,160(a0)
+    800060de:	0a853883          	ld	a7,168(a0)
+    800060e2:	0b053903          	ld	s2,176(a0)
+    800060e6:	0b853983          	ld	s3,184(a0)
+    800060ea:	0c053a03          	ld	s4,192(a0)
+    800060ee:	0c853a83          	ld	s5,200(a0)
+    800060f2:	0d053b03          	ld	s6,208(a0)
+    800060f6:	0d853b83          	ld	s7,216(a0)
+    800060fa:	0e053c03          	ld	s8,224(a0)
+    800060fe:	0e853c83          	ld	s9,232(a0)
+    80006102:	0f053d03          	ld	s10,240(a0)
+    80006106:	0f853d83          	ld	s11,248(a0)
+    8000610a:	10053e03          	ld	t3,256(a0)
+    8000610e:	10853e83          	ld	t4,264(a0)
+    80006112:	11053f03          	ld	t5,272(a0)
+    80006116:	11853f83          	ld	t6,280(a0)
+    8000611a:	7928                	ld	a0,112(a0)
+    8000611c:	10200073          	sret
+	...
diff --git a/kernel/kernel.ld b/kernel/kernel.ld
new file mode 100644
index 0000000..ee04f22
--- /dev/null
+++ b/kernel/kernel.ld
@@ -0,0 +1,44 @@
+OUTPUT_ARCH( "riscv" )
+ENTRY( _entry )
+
+SECTIONS
+{
+  /*
+   * ensure that entry.S / _entry is at 0x80000000,
+   * where qemu's -kernel jumps.
+   */
+  . = 0x80000000;
+
+  .text : {
+    *(.text .text.*)
+    . = ALIGN(0x1000);
+    _trampoline = .;
+    *(trampsec)
+    . = ALIGN(0x1000);
+    ASSERT(. - _trampoline == 0x1000, "error: trampoline larger than one page");
+    PROVIDE(etext = .);
+  }
+
+  .rodata : {
+    . = ALIGN(16);
+    *(.srodata .srodata.*) /* do not need to distinguish this from .rodata */
+    . = ALIGN(16);
+    *(.rodata .rodata.*)
+  }
+
+  .data : {
+    . = ALIGN(16);
+    *(.sdata .sdata.*) /* do not need to distinguish this from .data */
+    . = ALIGN(16);
+    *(.data .data.*)
+  }
+
+  .bss : {
+    . = ALIGN(16);
+    *(.sbss .sbss.*) /* do not need to distinguish this from .bss */
+    . = ALIGN(16);
+    *(.bss .bss.*)
+  }
+
+  PROVIDE(end = .);
+}
diff --git a/kernel/kernel.sym b/kernel/kernel.sym
new file mode 100644
index 0000000..32af170
--- /dev/null
+++ b/kernel/kernel.sym
@@ -0,0 +1,269 @@
+0000000080000000 .text
+0000000080007000 .rodata
+0000000080007a38 .data
+0000000080007a90 .bss
+0000000000000000 .riscv.attributes
+0000000000000000 .comment
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 entry.o
+000000008000001a spin
+0000000000000000 kalloc.c
+0000000000000000 string.c
+0000000000000000 main.c
+0000000080007a90 started
+0000000000000000 vm.c
+0000000000000000 proc.c
+0000000080007a40 first.1
+0000000080000f1a freeproc
+0000000080000f6a allocproc
+0000000080007848 states.0
+0000000000000000 swtch.o
+0000000000000000 trap.c
+0000000000000000 syscall.c
+0000000080001bc8 argraw
+0000000080007890 syscalls
+0000000080007958 syscall_names
+0000000000000000 sysproc.c
+0000000000000000 bio.c
+0000000000000000 fs.c
+000000008000225a bfree
+00000000800022c6 balloc
+00000000800023e6 bmap
+00000000800024ba iget
+0000000080002caa namex
+0000000000000000 log.c
+0000000080002ea6 write_head
+0000000080002f04 install_trans
+0000000000000000 sleeplock.c
+0000000000000000 file.c
+0000000000000000 pipe.c
+0000000000000000 exec.c
+0000000000000000 sysfile.c
+0000000080003e0e argfd
+0000000080003e66 fdalloc
+0000000080003ea4 create
+0000000000000000 kernelvec.o
+0000000000000000 plic.c
+0000000000000000 virtio_disk.c
+0000000080004902 free_desc
+0000000080018bb0 disk
+0000000000000000 start.c
+0000000000000000 console.c
+0000000000000000 printf.c
+000000008000523e printint
+0000000080007a20 digits
+0000000080020d98 pr
+0000000000000000 uart.c
+0000000000000000 spinlock.c
+00000000800004dc mappages
+0000000080000b76 copyinstr
+0000000080004f44 consoleread
+00000000800002ce safestrcpy
+00000000800040ba sys_close
+0000000080001352 yield
+0000000080017ab0 log
+0000000080007ac0 kmem
+000000008000560a uartinit
+00000000800016da either_copyout
+0000000080004e2a timerinit
+0000000080007f10 proc
+000000008000356a fileread
+00000000800052d0 printf
+0000000080001e1e sys_sbrk
+0000000080006000 trampoline
+0000000080007aac panicked
+00000000800048bc plic_claim
+0000000080020dd0 uart_tx_buf
+000000008000486e plicinit
+00000000800048dc plic_complete
+0000000080001298 sched
+00000000800001ec memmove
+0000000080001d1a syscall
+0000000080000d7c cpuid
+0000000080002aea writei
+0000000080001de8 sys_fork
+000000008000d928 bcache
+000000008000450e sys_mkdir
+0000000080000682 uvmunmap
+0000000080002bf8 namecmp
+0000000080004888 plicinithart
+0000000080001434 reparent
+0000000080001cea argstr
+00000000800007c2 uvmdealloc
+0000000080003404 filedup
+0000000080002e74 namei
+0000000080001fdc binit
+00000000800009f0 uvmclear
+0000000080003754 count_openfiles
+000000008000402a sys_read
+0000000080002566 fsinit
+0000000080000248 memcpy
+000000008000058c kvmmap
+00000000800056a8 uartstart
+000000008000001c kfree
+0000000080000d8c mycpu
+000000008000291c iput
+00000000800005b4 kvmmake
+00000000800019ec devintr
+0000000080007a44 nextpid
+0000000080003382 fileinit
+000000008000609c userret
+0000000080005850 initlock
+0000000080000a1a copyout
+000000008000137e sleep
+0000000080004810 kernelvec
+0000000080000764 uvmfirst
+00000000800029c4 stati
+0000000080007af8 wait_lock
+0000000080001ef4 sys_kill
+0000000080003870 pipeclose
+00000000800040fc sys_fstat
+0000000080004ede consolewrite
+000000008000309a end_op
+0000000080000082 freerange
+00000000800003dc kvminithart
+0000000080000806 uvmalloc
+000000008000093e uvmcopy
+0000000080007aa0 initproc
+0000000080000ed4 proc_freepagetable
+0000000080002848 iunlock
+0000000080000e50 proc_pagetable
+0000000080018cf0 stack0
+0000000080001e54 sys_sleep
+0000000080004136 sys_link
+0000000080001f16 sys_hello
+00000000800033a6 filealloc
+00000000800013ca wakeup
+0000000080004978 virtio_disk_init
+0000000080000da8 myproc
+0000000080002764 idup
+0000000080007ab0 uart_tx_r
+0000000080000404 walk
+00000000800043ba sys_open
+0000000080007ab8 uart_tx_w
+00000000800029ee readi
+0000000080005080 consoleintr
+000000008000504e consputc
+000000008000152c kill
+0000000080000e12 allocpid
+000000008000262a ialloc
+0000000080005814 uartintr
+0000000080000af0 copyin
+00000000800018ca trapinit
+000000008000090c uvmfree
+0000000080020df0 end
+0000000080002888 itrunc
+0000000080003628 filewrite
+0000000080001cb2 argint
+0000000080001f34 sys_trace
+0000000080003a9c exec
+0000000080007000 etext
+0000000080004072 sys_write
+0000000080005968 release
+0000000080001c72 fetchstr
+00000000800015e0 wait
+0000000080001906 usertrapret
+00000000800011e4 scheduler
+0000000080006000 _trampoline
+0000000080002c0e dirlookup
+0000000080003030 begin_op
+000000008000344a fileclose
+0000000080001a60 usertrap
+000000008000025c strncmp
+000000008000d910 tickslock
+00000000800038c8 pipewrite
+0000000080000292 strncpy
+0000000080017bf8 ftable
+0000000080004d82 virtio_disk_intr
+0000000080003fde sys_dup
+00000000800055a2 panic
+0000000080000dd8 forkret
+00000000800000ca kinit
+00000000800001b2 memcmp
+0000000080001724 either_copyin
+00000000800010ce fork
+0000000080001998 clockintr
+0000000080007b10 cpus
+0000000080003300 releasesleep
+0000000080000000 _entry
+0000000080005866 holding
+0000000080015fe8 sb
+00000000800058d0 acquire
+0000000080002e8e nameiparent
+000000008000014e count_freemem
+0000000080007a50 initcode
+00000000800018ee trapinithart
+00000000800026e6 iupdate
+0000000080001812 count_nproc
+0000000080000190 memset
+000000008000032a main
+0000000080001592 setkilled
+00000000800031b4 log_write
+00000000800032ba acquiresleep
+0000000080004234 sys_unlink
+0000000080006000 uservec
+0000000080000666 kvminit
+0000000080002226 bunpin
+0000000080001cce argaddr
+0000000080001f5a sys_uptime
+00000000800057ee uartgetc
+00000000800055dc printfinit
+0000000080020db8 uart_tx_lock
+000000008000073e uvmcreate
+000000008000107e growproc
+0000000080003338 holdingsleep
+00000000800015b6 killed
+0000000080001010 userinit
+0000000080002062 bread
+00000000800039ac piperead
+0000000080007aa8 ticks
+00000000800051fa consoleinit
+000000008000049e walkaddr
+000000008000176e procdump
+0000000080005748 uartputc
+000000008000216a brelse
+0000000080001f94 sys_sysinfo
+000000008000279a ilock
+0000000080004636 sys_exec
+0000000080001860 swtch
+00000000800029a4 iunlockput
+0000000080005890 push_off
+0000000080003a82 flags2perm
+0000000080005914 pop_off
+0000000080002138 bwrite
+0000000080005662 uartputc_sync
+000000008000148a exit
+00000000800008ac freewalk
+0000000080001dfc sys_wait
+0000000080001dae sys_exit
+0000000080002dda dirlink
+0000000080003284 initsleeplock
+0000000080004e6e start
+0000000080007a98 kernel_pagetable
+0000000080004b70 virtio_disk_rw
+0000000080000300 strlen
+000000008000472a sys_pipe
+00000000800025d2 iinit
+0000000080002fac initlog
+0000000080020cf0 cons
+00000000800000fe kalloc
+0000000080001c28 fetchaddr
+0000000080017b58 devsw
+0000000080001dd2 sys_getpid
+00000000800037a8 pipealloc
+00000000800045b6 sys_chdir
+0000000080000c2e proc_mapstacks
+0000000080001b38 kerneltrap
+00000000800021f2 bpin
+0000000080000cc6 procinit
+0000000080016008 itable
+0000000080004556 sys_mknod
+000000008000350c filestat
+0000000080007ae0 pid_lock
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
new file mode 100644
index 0000000..199f255
--- /dev/null
+++ b/kernel/kernelvec.S
@@ -0,0 +1,64 @@
+        #
+        # interrupts and exceptions while in supervisor
+        # mode come here.
+        #
+        # the current stack is a kernel stack.
+        # push registers, call kerneltrap().
+        # when kerneltrap() returns, restore registers, return.
+        #
+.globl kerneltrap
+.globl kernelvec
+.align 4
+kernelvec:
+        # make room to save registers.
+        addi sp, sp, -256
+
+        # save caller-saved registers.
+        sd ra, 0(sp)
+        sd sp, 8(sp)
+        sd gp, 16(sp)
+        sd tp, 24(sp)
+        sd t0, 32(sp)
+        sd t1, 40(sp)
+        sd t2, 48(sp)
+        sd a0, 72(sp)
+        sd a1, 80(sp)
+        sd a2, 88(sp)
+        sd a3, 96(sp)
+        sd a4, 104(sp)
+        sd a5, 112(sp)
+        sd a6, 120(sp)
+        sd a7, 128(sp)
+        sd t3, 216(sp)
+        sd t4, 224(sp)
+        sd t5, 232(sp)
+        sd t6, 240(sp)
+
+        # call the C trap handler in trap.c
+        call kerneltrap
+
+        # restore registers.
+        ld ra, 0(sp)
+        ld sp, 8(sp)
+        ld gp, 16(sp)
+        # not tp (contains hartid), in case we moved CPUs
+        ld t0, 32(sp)
+        ld t1, 40(sp)
+        ld t2, 48(sp)
+        ld a0, 72(sp)
+        ld a1, 80(sp)
+        ld a2, 88(sp)
+        ld a3, 96(sp)
+        ld a4, 104(sp)
+        ld a5, 112(sp)
+        ld a6, 120(sp)
+        ld a7, 128(sp)
+        ld t3, 216(sp)
+        ld t4, 224(sp)
+        ld t5, 232(sp)
+        ld t6, 240(sp)
+
+        addi sp, sp, 256
+
+        # return to whatever we were doing in the kernel.
+        sret
diff --git a/kernel/kernelvec.o b/kernel/kernelvec.o
new file mode 100644
index 0000000..bac4d09
Binary files /dev/null and b/kernel/kernelvec.o differ
diff --git a/kernel/log.c b/kernel/log.c
new file mode 100644
index 0000000..5b58306
--- /dev/null
+++ b/kernel/log.c
@@ -0,0 +1,236 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+
+// Simple logging that allows concurrent FS system calls.
+//
+// A log transaction contains the updates of multiple FS system
+// calls. The logging system only commits when there are
+// no FS system calls active. Thus there is never
+// any reasoning required about whether a commit might
+// write an uncommitted system call's updates to disk.
+//
+// A system call should call begin_op()/end_op() to mark
+// its start and end. Usually begin_op() just increments
+// the count of in-progress FS system calls and returns.
+// But if it thinks the log is close to running out, it
+// sleeps until the last outstanding end_op() commits.
+//
+// The log is a physical re-do log containing disk blocks.
+// The on-disk log format:
+//   header block, containing block #s for block A, B, C, ...
+//   block A
+//   block B
+//   block C
+//   ...
+// Log appends are synchronous.
+
+// Contents of the header block, used for both the on-disk header block
+// and to keep track in memory of logged block# before commit.
+struct logheader {
+  int n;
+  int block[LOGSIZE];
+};
+
+struct log {
+  struct spinlock lock;
+  int start;
+  int size;
+  int outstanding; // how many FS sys calls are executing.
+  int committing;  // in commit(), please wait.
+  int dev;
+  struct logheader lh;
+};
+struct log log;
+
+static void recover_from_log(void);
+static void commit();
+
+void
+initlog(int dev, struct superblock *sb)
+{
+  if (sizeof(struct logheader) >= BSIZE)
+    panic("initlog: too big logheader");
+
+  initlock(&log.lock, "log");
+  log.start = sb->logstart;
+  log.size = sb->nlog;
+  log.dev = dev;
+  recover_from_log();
+}
+
+// Copy committed blocks from log to their home location
+static void
+install_trans(int recovering)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
+    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
+    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
+    bwrite(dbuf);  // write dst to disk
+    if(recovering == 0)
+      bunpin(dbuf);
+    brelse(lbuf);
+    brelse(dbuf);
+  }
+}
+
+// Read the log header from disk into the in-memory log header
+static void
+read_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *lh = (struct logheader *) (buf->data);
+  int i;
+  log.lh.n = lh->n;
+  for (i = 0; i < log.lh.n; i++) {
+    log.lh.block[i] = lh->block[i];
+  }
+  brelse(buf);
+}
+
+// Write in-memory log header to disk.
+// This is the true point at which the
+// current transaction commits.
+static void
+write_head(void)
+{
+  struct buf *buf = bread(log.dev, log.start);
+  struct logheader *hb = (struct logheader *) (buf->data);
+  int i;
+  hb->n = log.lh.n;
+  for (i = 0; i < log.lh.n; i++) {
+    hb->block[i] = log.lh.block[i];
+  }
+  bwrite(buf);
+  brelse(buf);
+}
+
+static void
+recover_from_log(void)
+{
+  read_head();
+  install_trans(1); // if committed, copy from log to disk
+  log.lh.n = 0;
+  write_head(); // clear the log
+}
+
+// called at the start of each FS system call.
+void
+begin_op(void)
+{
+  acquire(&log.lock);
+  while(1){
+    if(log.committing){
+      sleep(&log, &log.lock);
+    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
+      // this op might exhaust log space; wait for commit.
+      sleep(&log, &log.lock);
+    } else {
+      log.outstanding += 1;
+      release(&log.lock);
+      break;
+    }
+  }
+}
+
+// called at the end of each FS system call.
+// commits if this was the last outstanding operation.
+void
+end_op(void)
+{
+  int do_commit = 0;
+
+  acquire(&log.lock);
+  log.outstanding -= 1;
+  if(log.committing)
+    panic("log.committing");
+  if(log.outstanding == 0){
+    do_commit = 1;
+    log.committing = 1;
+  } else {
+    // begin_op() may be waiting for log space,
+    // and decrementing log.outstanding has decreased
+    // the amount of reserved space.
+    wakeup(&log);
+  }
+  release(&log.lock);
+
+  if(do_commit){
+    // call commit w/o holding locks, since not allowed
+    // to sleep with locks.
+    commit();
+    acquire(&log.lock);
+    log.committing = 0;
+    wakeup(&log);
+    release(&log.lock);
+  }
+}
+
+// Copy modified blocks from cache to log.
+static void
+write_log(void)
+{
+  int tail;
+
+  for (tail = 0; tail < log.lh.n; tail++) {
+    struct buf *to = bread(log.dev, log.start+tail+1); // log block
+    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
+    memmove(to->data, from->data, BSIZE);
+    bwrite(to);  // write the log
+    brelse(from);
+    brelse(to);
+  }
+}
+
+static void
+commit()
+{
+  if (log.lh.n > 0) {
+    write_log();     // Write modified blocks from cache to log
+    write_head();    // Write header to disk -- the real commit
+    install_trans(0); // Now install writes to home locations
+    log.lh.n = 0;
+    write_head();    // Erase the transaction from the log
+  }
+}
+
+// Caller has modified b->data and is done with the buffer.
+// Record the block number and pin in the cache by increasing refcnt.
+// commit()/write_log() will do the disk write.
+//
+// log_write() replaces bwrite(); a typical use is:
+//   bp = bread(...)
+//   modify bp->data[]
+//   log_write(bp)
+//   brelse(bp)
+void
+log_write(struct buf *b)
+{
+  int i;
+
+  acquire(&log.lock);
+  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
+    panic("too big a transaction");
+  if (log.outstanding < 1)
+    panic("log_write outside of trans");
+
+  for (i = 0; i < log.lh.n; i++) {
+    if (log.lh.block[i] == b->blockno)   // log absorption
+      break;
+  }
+  log.lh.block[i] = b->blockno;
+  if (i == log.lh.n) {  // Add new block to log?
+    bpin(b);
+    log.lh.n++;
+  }
+  release(&log.lock);
+}
+
diff --git a/kernel/log.d b/kernel/log.d
new file mode 100644
index 0000000..38eddde
--- /dev/null
+++ b/kernel/log.d
@@ -0,0 +1,3 @@
+kernel/log.o: kernel/log.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/spinlock.h kernel/sleeplock.h kernel/fs.h \
+ kernel/buf.h
diff --git a/kernel/log.o b/kernel/log.o
new file mode 100644
index 0000000..07c4bb2
Binary files /dev/null and b/kernel/log.o differ
diff --git a/kernel/main.c b/kernel/main.c
new file mode 100644
index 0000000..f0d3171
--- /dev/null
+++ b/kernel/main.c
@@ -0,0 +1,45 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "defs.h"
+
+volatile static int started = 0;
+
+// start() jumps here in supervisor mode on all CPUs.
+void
+main()
+{
+  if(cpuid() == 0){
+    consoleinit();
+    printfinit();
+    printf("\n");
+    printf("xv6 kernel is booting\n");
+    printf("\n");
+    kinit();         // physical page allocator
+    kvminit();       // create kernel page table
+    kvminithart();   // turn on paging
+    procinit();      // process table
+    trapinit();      // trap vectors
+    trapinithart();  // install kernel trap vector
+    plicinit();      // set up interrupt controller
+    plicinithart();  // ask PLIC for device interrupts
+    binit();         // buffer cache
+    iinit();         // inode table
+    fileinit();      // file table
+    virtio_disk_init(); // emulated hard disk
+    userinit();      // first user process
+    __sync_synchronize();
+    started = 1;
+  } else {
+    while(started == 0)
+      ;
+    __sync_synchronize();
+    printf("hart %d starting\n", cpuid());
+    kvminithart();    // turn on paging
+    trapinithart();   // install kernel trap vector
+    plicinithart();   // ask PLIC for device interrupts
+  }
+
+  scheduler();        
+}
diff --git a/kernel/main.d b/kernel/main.d
new file mode 100644
index 0000000..07e22ff
--- /dev/null
+++ b/kernel/main.d
@@ -0,0 +1,2 @@
+kernel/main.o: kernel/main.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
diff --git a/kernel/main.o b/kernel/main.o
new file mode 100644
index 0000000..c7bec19
Binary files /dev/null and b/kernel/main.o differ
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
new file mode 100644
index 0000000..3ab2ace
--- /dev/null
+++ b/kernel/memlayout.h
@@ -0,0 +1,59 @@
+// Physical memory layout
+
+// qemu -machine virt is set up like this,
+// based on qemu's hw/riscv/virt.c:
+//
+// 00001000 -- boot ROM, provided by qemu
+// 02000000 -- CLINT
+// 0C000000 -- PLIC
+// 10000000 -- uart0 
+// 10001000 -- virtio disk 
+// 80000000 -- boot ROM jumps here in machine mode
+//             -kernel loads the kernel here
+// unused RAM after 80000000.
+
+// the kernel uses physical memory thus:
+// 80000000 -- entry.S, then kernel text and data
+// end -- start of kernel page allocation area
+// PHYSTOP -- end RAM used by the kernel
+
+// qemu puts UART registers here in physical memory.
+#define UART0 0x10000000L
+#define UART0_IRQ 10
+
+// virtio mmio interface
+#define VIRTIO0 0x10001000
+#define VIRTIO0_IRQ 1
+
+// qemu puts platform-level interrupt controller (PLIC) here.
+#define PLIC 0x0c000000L
+#define PLIC_PRIORITY (PLIC + 0x0)
+#define PLIC_PENDING (PLIC + 0x1000)
+#define PLIC_SENABLE(hart) (PLIC + 0x2080 + (hart)*0x100)
+#define PLIC_SPRIORITY(hart) (PLIC + 0x201000 + (hart)*0x2000)
+#define PLIC_SCLAIM(hart) (PLIC + 0x201004 + (hart)*0x2000)
+
+// the kernel expects there to be RAM
+// for use by the kernel and user pages
+// from physical address 0x80000000 to PHYSTOP.
+#define KERNBASE 0x80000000L
+#define PHYSTOP (KERNBASE + 128*1024*1024)
+
+// map the trampoline page to the highest address,
+// in both user and kernel space.
+#define TRAMPOLINE (MAXVA - PGSIZE)
+
+// map kernel stacks beneath the trampoline,
+// each surrounded by invalid guard pages.
+#define KSTACK(p) (TRAMPOLINE - ((p)+1)* 2*PGSIZE)
+
+// User memory layout.
+// Address zero first:
+//   text
+//   original data and bss
+//   fixed-size stack
+//   expandable heap
+//   ...
+//   TRAPFRAME (p->trapframe, used by the trampoline)
+//   TRAMPOLINE (the same page as in the kernel)
+#define TRAPFRAME (TRAMPOLINE - PGSIZE)
diff --git a/kernel/param.h b/kernel/param.h
new file mode 100644
index 0000000..07e6f17
--- /dev/null
+++ b/kernel/param.h
@@ -0,0 +1,33 @@
+#ifdef LAB_FS
+#define NPROC        10  // maximum number of processes
+#else
+#define NPROC        64  // maximum number of processes (speedsup bigfile)
+#endif
+#define NCPU          8  // maximum number of CPUs
+#define NOFILE       16  // open files per process
+#define NFILE       100  // open files per system
+#define NINODE       50  // maximum number of active i-nodes
+#define NDEV         10  // maximum major device number
+#define ROOTDEV       1  // device number of file system root disk
+#define MAXARG       32  // max exec arguments
+#define MAXOPBLOCKS  10  // max # of blocks any FS op writes
+#define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
+#define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
+#ifdef LAB_FS
+#define FSSIZE       200000  // size of file system in blocks
+#else
+#ifdef LAB_LOCK
+#define FSSIZE       10000  // size of file system in blocks
+#else
+#define FSSIZE       2000   // size of file system in blocks
+#endif
+#endif
+#define MAXPATH      128   // maximum file path name
+
+#ifdef LAB_UTIL
+#define USERSTACK    2     // user stack pages
+#else
+#define USERSTACK    1     // user stack pages
+#endif
+
+
diff --git a/kernel/pipe.c b/kernel/pipe.c
new file mode 100644
index 0000000..f6b501a
--- /dev/null
+++ b/kernel/pipe.c
@@ -0,0 +1,130 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "fs.h"
+#include "sleeplock.h"
+#include "file.h"
+
+#define PIPESIZE 512
+
+struct pipe {
+  struct spinlock lock;
+  char data[PIPESIZE];
+  uint nread;     // number of bytes read
+  uint nwrite;    // number of bytes written
+  int readopen;   // read fd is still open
+  int writeopen;  // write fd is still open
+};
+
+int
+pipealloc(struct file **f0, struct file **f1)
+{
+  struct pipe *pi;
+
+  pi = 0;
+  *f0 = *f1 = 0;
+  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
+    goto bad;
+  if((pi = (struct pipe*)kalloc()) == 0)
+    goto bad;
+  pi->readopen = 1;
+  pi->writeopen = 1;
+  pi->nwrite = 0;
+  pi->nread = 0;
+  initlock(&pi->lock, "pipe");
+  (*f0)->type = FD_PIPE;
+  (*f0)->readable = 1;
+  (*f0)->writable = 0;
+  (*f0)->pipe = pi;
+  (*f1)->type = FD_PIPE;
+  (*f1)->readable = 0;
+  (*f1)->writable = 1;
+  (*f1)->pipe = pi;
+  return 0;
+
+ bad:
+  if(pi)
+    kfree((char*)pi);
+  if(*f0)
+    fileclose(*f0);
+  if(*f1)
+    fileclose(*f1);
+  return -1;
+}
+
+void
+pipeclose(struct pipe *pi, int writable)
+{
+  acquire(&pi->lock);
+  if(writable){
+    pi->writeopen = 0;
+    wakeup(&pi->nread);
+  } else {
+    pi->readopen = 0;
+    wakeup(&pi->nwrite);
+  }
+  if(pi->readopen == 0 && pi->writeopen == 0){
+    release(&pi->lock);
+    kfree((char*)pi);
+  } else
+    release(&pi->lock);
+}
+
+int
+pipewrite(struct pipe *pi, uint64 addr, int n)
+{
+  int i = 0;
+  struct proc *pr = myproc();
+
+  acquire(&pi->lock);
+  while(i < n){
+    if(pi->readopen == 0 || killed(pr)){
+      release(&pi->lock);
+      return -1;
+    }
+    if(pi->nwrite == pi->nread + PIPESIZE){ //DOC: pipewrite-full
+      wakeup(&pi->nread);
+      sleep(&pi->nwrite, &pi->lock);
+    } else {
+      char ch;
+      if(copyin(pr->pagetable, &ch, addr + i, 1) == -1)
+        break;
+      pi->data[pi->nwrite++ % PIPESIZE] = ch;
+      i++;
+    }
+  }
+  wakeup(&pi->nread);
+  release(&pi->lock);
+
+  return i;
+}
+
+int
+piperead(struct pipe *pi, uint64 addr, int n)
+{
+  int i;
+  struct proc *pr = myproc();
+  char ch;
+
+  acquire(&pi->lock);
+  while(pi->nread == pi->nwrite && pi->writeopen){  //DOC: pipe-empty
+    if(killed(pr)){
+      release(&pi->lock);
+      return -1;
+    }
+    sleep(&pi->nread, &pi->lock); //DOC: piperead-sleep
+  }
+  for(i = 0; i < n; i++){  //DOC: piperead-copy
+    if(pi->nread == pi->nwrite)
+      break;
+    ch = pi->data[pi->nread++ % PIPESIZE];
+    if(copyout(pr->pagetable, addr + i, &ch, 1) == -1)
+      break;
+  }
+  wakeup(&pi->nwrite);  //DOC: piperead-wakeup
+  release(&pi->lock);
+  return i;
+}
diff --git a/kernel/pipe.d b/kernel/pipe.d
new file mode 100644
index 0000000..80adcde
--- /dev/null
+++ b/kernel/pipe.d
@@ -0,0 +1,3 @@
+kernel/pipe.o: kernel/pipe.c kernel/types.h kernel/riscv.h kernel/defs.h \
+ kernel/param.h kernel/spinlock.h kernel/proc.h kernel/fs.h \
+ kernel/sleeplock.h kernel/file.h
diff --git a/kernel/pipe.o b/kernel/pipe.o
new file mode 100644
index 0000000..ca5e304
Binary files /dev/null and b/kernel/pipe.o differ
diff --git a/kernel/plic.c b/kernel/plic.c
new file mode 100644
index 0000000..4175db9
--- /dev/null
+++ b/kernel/plic.c
@@ -0,0 +1,47 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "defs.h"
+
+//
+// the riscv Platform Level Interrupt Controller (PLIC).
+//
+
+void
+plicinit(void)
+{
+  // set desired IRQ priorities non-zero (otherwise disabled).
+  *(uint32*)(PLIC + UART0_IRQ*4) = 1;
+  *(uint32*)(PLIC + VIRTIO0_IRQ*4) = 1;
+}
+
+void
+plicinithart(void)
+{
+  int hart = cpuid();
+  
+  // set enable bits for this hart's S-mode
+  // for the uart and virtio disk.
+  *(uint32*)PLIC_SENABLE(hart) = (1 << UART0_IRQ) | (1 << VIRTIO0_IRQ);
+
+  // set this hart's S-mode priority threshold to 0.
+  *(uint32*)PLIC_SPRIORITY(hart) = 0;
+}
+
+// ask the PLIC what interrupt we should serve.
+int
+plic_claim(void)
+{
+  int hart = cpuid();
+  int irq = *(uint32*)PLIC_SCLAIM(hart);
+  return irq;
+}
+
+// tell the PLIC we've served this IRQ.
+void
+plic_complete(int irq)
+{
+  int hart = cpuid();
+  *(uint32*)PLIC_SCLAIM(hart) = irq;
+}
diff --git a/kernel/plic.d b/kernel/plic.d
new file mode 100644
index 0000000..6063823
--- /dev/null
+++ b/kernel/plic.d
@@ -0,0 +1,2 @@
+kernel/plic.o: kernel/plic.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
diff --git a/kernel/plic.o b/kernel/plic.o
new file mode 100644
index 0000000..7d17d6b
Binary files /dev/null and b/kernel/plic.o differ
diff --git a/kernel/printf.c b/kernel/printf.c
new file mode 100644
index 0000000..d20534c
--- /dev/null
+++ b/kernel/printf.c
@@ -0,0 +1,178 @@
+//
+// formatted console output -- printf, panic.
+//
+
+#include <stdarg.h>
+
+#include "types.h"
+#include "param.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "defs.h"
+#include "proc.h"
+
+volatile int panicked = 0;
+
+// lock to avoid interleaving concurrent printf's.
+static struct {
+  struct spinlock lock;
+  int locking;
+} pr;
+
+static char digits[] = "0123456789abcdef";
+
+static void
+printint(long long xx, int base, int sign)
+{
+  char buf[16];
+  int i;
+  unsigned long long x;
+
+  if(sign && (sign = (xx < 0)))
+    x = -xx;
+  else
+    x = xx;
+
+  i = 0;
+  do {
+    buf[i++] = digits[x % base];
+  } while((x /= base) != 0);
+
+  if(sign)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    consputc(buf[i]);
+}
+
+static void
+printptr(uint64 x)
+{
+  int i;
+  consputc('0');
+  consputc('x');
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    consputc(digits[x >> (sizeof(uint64) * 8 - 4)]);
+}
+
+// Print to the console.
+int
+printf(char *fmt, ...)
+{
+  va_list ap;
+  int i, cx, c0, c1, c2, locking;
+  char *s;
+
+  locking = pr.locking;
+  if(locking)
+    acquire(&pr.lock);
+
+  va_start(ap, fmt);
+  for(i = 0; (cx = fmt[i] & 0xff) != 0; i++){
+    if(cx != '%'){
+      consputc(cx);
+      continue;
+    }
+    i++;
+    c0 = fmt[i+0] & 0xff;
+    c1 = c2 = 0;
+    if(c0) c1 = fmt[i+1] & 0xff;
+    if(c1) c2 = fmt[i+2] & 0xff;
+    if(c0 == 'd'){
+      printint(va_arg(ap, int), 10, 1);
+    } else if(c0 == 'l' && c1 == 'd'){
+      printint(va_arg(ap, uint64), 10, 1);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+      printint(va_arg(ap, uint64), 10, 1);
+      i += 2;
+    } else if(c0 == 'u'){
+      printint(va_arg(ap, int), 10, 0);
+    } else if(c0 == 'l' && c1 == 'u'){
+      printint(va_arg(ap, uint64), 10, 0);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+      printint(va_arg(ap, uint64), 10, 0);
+      i += 2;
+    } else if(c0 == 'x'){
+      printint(va_arg(ap, int), 16, 0);
+    } else if(c0 == 'l' && c1 == 'x'){
+      printint(va_arg(ap, uint64), 16, 0);
+      i += 1;
+    } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+      printint(va_arg(ap, uint64), 16, 0);
+      i += 2;
+    } else if(c0 == 'p'){
+      printptr(va_arg(ap, uint64));
+    } else if(c0 == 's'){
+      if((s = va_arg(ap, char*)) == 0)
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+    } else if(c0 == '%'){
+      consputc('%');
+    } else if(c0 == 0){
+      break;
+    } else {
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+      consputc(c0);
+    }
+
+#if 0
+    switch(c){
+    case 'd':
+      printint(va_arg(ap, int), 10, 1);
+      break;
+    case 'x':
+      printint(va_arg(ap, int), 16, 1);
+      break;
+    case 'p':
+      printptr(va_arg(ap, uint64));
+      break;
+    case 's':
+      if((s = va_arg(ap, char*)) == 0)
+        s = "(null)";
+      for(; *s; s++)
+        consputc(*s);
+      break;
+    case '%':
+      consputc('%');
+      break;
+    default:
+      // Print unknown % sequence to draw attention.
+      consputc('%');
+      consputc(c);
+      break;
+    }
+#endif
+  }
+  va_end(ap);
+
+  if(locking)
+    release(&pr.lock);
+
+  return 0;
+}
+
+void
+panic(char *s)
+{
+  pr.locking = 0;
+  printf("panic: ");
+  printf("%s\n", s);
+  panicked = 1; // freeze uart output from other CPUs
+  for(;;)
+    ;
+}
+
+void
+printfinit(void)
+{
+  initlock(&pr.lock, "pr");
+  pr.locking = 1;
+}
diff --git a/kernel/printf.d b/kernel/printf.d
new file mode 100644
index 0000000..4eb956a
--- /dev/null
+++ b/kernel/printf.d
@@ -0,0 +1,5 @@
+kernel/printf.o: kernel/printf.c \
+ /usr/lib/gcc/riscv64-unknown-elf/13.2.0/include/stdarg.h kernel/types.h \
+ kernel/param.h kernel/spinlock.h kernel/sleeplock.h kernel/fs.h \
+ kernel/file.h kernel/memlayout.h kernel/riscv.h kernel/defs.h \
+ kernel/proc.h
diff --git a/kernel/printf.o b/kernel/printf.o
new file mode 100644
index 0000000..da3d36c
Binary files /dev/null and b/kernel/printf.o differ
diff --git a/kernel/proc.c b/kernel/proc.c
new file mode 100644
index 0000000..fd10f7b
--- /dev/null
+++ b/kernel/proc.c
@@ -0,0 +1,712 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+struct cpu cpus[NCPU];
+
+struct proc proc[NPROC];
+
+struct proc *initproc;
+
+int nextpid = 1;
+struct spinlock pid_lock;
+
+extern void forkret(void);
+static void freeproc(struct proc *p);
+
+extern char trampoline[]; // trampoline.S
+
+// helps ensure that wakeups of wait()ing
+// parents are not lost. helps obey the
+// memory model when using p->parent.
+// must be acquired before any p->lock.
+struct spinlock wait_lock;
+
+// Allocate a page for each process's kernel stack.
+// Map it high in memory, followed by an invalid
+// guard page.
+void
+proc_mapstacks(pagetable_t kpgtbl)
+{
+  struct proc *p;
+  
+  for(p = proc; p < &proc[NPROC]; p++) {
+    char *pa = kalloc();
+    if(pa == 0)
+      panic("kalloc");
+    uint64 va = KSTACK((int) (p - proc));
+    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
+  }
+}
+
+// initialize the proc table.
+void
+procinit(void)
+{
+  struct proc *p;
+  
+  initlock(&pid_lock, "nextpid");
+  initlock(&wait_lock, "wait_lock");
+  for(p = proc; p < &proc[NPROC]; p++) {
+      initlock(&p->lock, "proc");
+      p->state = UNUSED;
+      p->kstack = KSTACK((int) (p - proc));
+  }
+}
+
+// Must be called with interrupts disabled,
+// to prevent race with process being moved
+// to a different CPU.
+int
+cpuid()
+{
+  int id = r_tp();
+  return id;
+}
+
+// Return this CPU's cpu struct.
+// Interrupts must be disabled.
+struct cpu*
+mycpu(void)
+{
+  int id = cpuid();
+  struct cpu *c = &cpus[id];
+  return c;
+}
+
+// Return the current struct proc *, or zero if none.
+struct proc*
+myproc(void)
+{
+  push_off();
+  struct cpu *c = mycpu();
+  struct proc *p = c->proc;
+  pop_off();
+  return p;
+}
+
+int
+allocpid()
+{
+  int pid;
+  
+  acquire(&pid_lock);
+  pid = nextpid;
+  nextpid = nextpid + 1;
+  release(&pid_lock);
+
+  return pid;
+}
+
+// Look in the process table for an UNUSED proc.
+// If found, initialize state required to run in the kernel,
+// and return with p->lock held.
+// If there are no free procs, or a memory allocation fails, return 0.
+static struct proc*
+allocproc(void)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state == UNUSED) {
+      goto found;
+    } else {
+      release(&p->lock);
+    }
+  }
+  return 0;
+
+found:
+  p->pid = allocpid();
+  p->state = USED;
+
+  // Allocate a trapframe page.
+  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  // An empty user page table.
+  p->pagetable = proc_pagetable(p);
+  if(p->pagetable == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
+  // Set up new context to start executing at forkret,
+  // which returns to user space.
+  memset(&p->context, 0, sizeof(p->context));
+  p->context.ra = (uint64)forkret;
+  p->context.sp = p->kstack + PGSIZE;
+
+  return p;
+}
+
+// free a proc structure and the data hanging from it,
+// including user pages.
+// p->lock must be held.
+static void
+freeproc(struct proc *p)
+{
+  if(p->trapframe)
+    kfree((void*)p->trapframe);
+  p->trapframe = 0;
+  if(p->pagetable)
+    proc_freepagetable(p->pagetable, p->sz);
+  p->pagetable = 0;
+  p->sz = 0;
+  p->pid = 0;
+  p->parent = 0;
+  p->name[0] = 0;
+  p->chan = 0;
+  p->killed = 0;
+  p->xstate = 0;
+  p->state = UNUSED;
+}
+
+// Create a user page table for a given process, with no user memory,
+// but with trampoline and trapframe pages.
+pagetable_t
+proc_pagetable(struct proc *p)
+{
+  pagetable_t pagetable;
+
+  // An empty page table.
+  pagetable = uvmcreate();
+  if(pagetable == 0)
+    return 0;
+
+  // map the trampoline code (for system call return)
+  // at the highest user virtual address.
+  // only the supervisor uses it, on the way
+  // to/from user space, so not PTE_U.
+  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
+              (uint64)trampoline, PTE_R | PTE_X) < 0){
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
+  // map the trapframe page just below the trampoline page, for
+  // trampoline.S.
+  if(mappages(pagetable, TRAPFRAME, PGSIZE,
+              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmfree(pagetable, 0);
+    return 0;
+  }
+
+  return pagetable;
+}
+
+// Free a process's page table, and free the
+// physical memory it refers to.
+void
+proc_freepagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmfree(pagetable, sz);
+}
+
+// a user program that calls exec("/init")
+// assembled from ../user/initcode.S
+// od -t xC ../user/initcode
+uchar initcode[] = {
+  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00
+};
+
+// Set up first user process.
+void
+userinit(void)
+{
+  struct proc *p;
+
+  p = allocproc();
+  initproc = p;
+  
+  // allocate one user page and copy initcode's instructions
+  // and data into it.
+  uvmfirst(p->pagetable, initcode, sizeof(initcode));
+  p->sz = PGSIZE;
+
+  // prepare for the very first "return" from kernel to user.
+  p->trapframe->epc = 0;      // user program counter
+  p->trapframe->sp = PGSIZE;  // user stack pointer
+
+  safestrcpy(p->name, "initcode", sizeof(p->name));
+  p->cwd = namei("/");
+
+  p->state = RUNNABLE;
+
+  release(&p->lock);
+}
+
+// Grow or shrink user memory by n bytes.
+// Return 0 on success, -1 on failure.
+int
+growproc(int n)
+{
+  uint64 sz;
+  struct proc *p = myproc();
+
+  sz = p->sz;
+  if(n > 0){
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+      return -1;
+    }
+  } else if(n < 0){
+    sz = uvmdealloc(p->pagetable, sz, sz + n);
+  }
+  p->sz = sz;
+  return 0;
+}
+
+// Create a new process, copying the parent.
+// Sets up child kernel stack to return as if from fork() system call.
+int
+fork(void)
+{
+  int i, pid;
+  struct proc *np;
+  struct proc *p = myproc();
+
+  // Allocate process.
+  if((np = allocproc()) == 0){
+    return -1;
+  }
+
+  // Copy user memory from parent to child.
+  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+    freeproc(np);
+    release(&np->lock);
+    return -1;
+  }
+  np->sz = p->sz;
+
+  // copy saved user registers.
+  *(np->trapframe) = *(p->trapframe);
+
+  // Cause fork to return 0 in the child.
+  np->trapframe->a0 = 0;
+
+   // Copy the trace mask from the parent to the child.
+    np->trace_mask = p->trace_mask;  // Inherit trace setting
+
+  // increment reference counts on open file descriptors.
+  for(i = 0; i < NOFILE; i++)
+    if(p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]);
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  release(&np->lock);
+
+  return pid;
+}
+
+// Pass p's abandoned children to init.
+// Caller must hold wait_lock.
+void
+reparent(struct proc *p)
+{
+  struct proc *pp;
+
+  for(pp = proc; pp < &proc[NPROC]; pp++){
+    if(pp->parent == p){
+      pp->parent = initproc;
+      wakeup(initproc);
+    }
+  }
+}
+
+// Exit the current process.  Does not return.
+// An exited process remains in the zombie state
+// until its parent calls wait().
+void
+exit(int status)
+{
+  struct proc *p = myproc();
+
+  if(p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for(int fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd]){
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+  
+  acquire(&p->lock);
+
+  p->xstate = status;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
+
+// Wait for a child process to exit and return its pid.
+// Return -1 if this process has no children.
+int
+wait(uint64 addr)
+{
+  struct proc *pp;
+  int havekids, pid;
+  struct proc *p = myproc();
+
+  acquire(&wait_lock);
+
+  for(;;){
+    // Scan through table looking for exited children.
+    havekids = 0;
+    for(pp = proc; pp < &proc[NPROC]; pp++){
+      if(pp->parent == p){
+        // make sure the child isn't still in exit() or swtch().
+        acquire(&pp->lock);
+
+        havekids = 1;
+        if(pp->state == ZOMBIE){
+          // Found one.
+          pid = pp->pid;
+          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                  sizeof(pp->xstate)) < 0) {
+            release(&pp->lock);
+            release(&wait_lock);
+            return -1;
+          }
+          freeproc(pp);
+          release(&pp->lock);
+          release(&wait_lock);
+          return pid;
+        }
+        release(&pp->lock);
+      }
+    }
+
+    // No point waiting if we don't have any children.
+    if(!havekids || killed(p)){
+      release(&wait_lock);
+      return -1;
+    }
+    
+    // Wait for a child to exit.
+    sleep(p, &wait_lock);  //DOC: wait-sleep
+  }
+}
+
+// Per-CPU process scheduler.
+// Each CPU calls scheduler() after setting itself up.
+// Scheduler never returns.  It loops, doing:
+//  - choose a process to run.
+//  - swtch to start running that process.
+//  - eventually that process transfers control
+//    via swtch back to the scheduler.
+void
+scheduler(void)
+{
+  struct proc *p;
+  struct cpu *c = mycpu();
+
+  c->proc = 0;
+  for(;;){
+    // The most recent process to run may have had interrupts
+    // turned off; enable them to avoid a deadlock if all
+    // processes are waiting.
+    intr_on();
+
+    int found = 0;
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE) {
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        p->state = RUNNING;
+        c->proc = p;
+        swtch(&c->context, &p->context);
+
+        // Process is done running for now.
+        // It should have changed its p->state before coming back.
+        c->proc = 0;
+        found = 1;
+      }
+      release(&p->lock);
+    }
+    if(found == 0) {
+      // nothing to run; stop running on this core until an interrupt.
+      intr_on();
+      asm volatile("wfi");
+    }
+  }
+}
+
+// Switch to scheduler.  Must hold only p->lock
+// and have changed proc->state. Saves and restores
+// intena because intena is a property of this
+// kernel thread, not this CPU. It should
+// be proc->intena and proc->noff, but that would
+// break in the few places where a lock is held but
+// there's no process.
+void
+sched(void)
+{
+  int intena;
+  struct proc *p = myproc();
+
+  if(!holding(&p->lock))
+    panic("sched p->lock");
+  if(mycpu()->noff != 1)
+    panic("sched locks");
+  if(p->state == RUNNING)
+    panic("sched running");
+  if(intr_get())
+    panic("sched interruptible");
+
+  intena = mycpu()->intena;
+  swtch(&p->context, &mycpu()->context);
+  mycpu()->intena = intena;
+}
+
+// Give up the CPU for one scheduling round.
+void
+yield(void)
+{
+  struct proc *p = myproc();
+  acquire(&p->lock);
+  p->state = RUNNABLE;
+  sched();
+  release(&p->lock);
+}
+
+// A fork child's very first scheduling by scheduler()
+// will swtch to forkret.
+void
+forkret(void)
+{
+  static int first = 1;
+
+  // Still holding p->lock from scheduler.
+  release(&myproc()->lock);
+
+  if (first) {
+    // File system initialization must be run in the context of a
+    // regular process (e.g., because it calls sleep), and thus cannot
+    // be run from main().
+    fsinit(ROOTDEV);
+
+    first = 0;
+    // ensure other cores see first=0.
+    __sync_synchronize();
+  }
+
+  usertrapret();
+}
+
+// Atomically release lock and sleep on chan.
+// Reacquires lock when awakened.
+void
+sleep(void *chan, struct spinlock *lk)
+{
+  struct proc *p = myproc();
+  
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock);  //DOC: sleeplock1
+  release(lk);
+
+  // Go to sleep.
+  p->chan = chan;
+  p->state = SLEEPING;
+
+  sched();
+
+  // Tidy up.
+  p->chan = 0;
+
+  // Reacquire original lock.
+  release(&p->lock);
+  acquire(lk);
+}
+
+// Wake up all processes sleeping on chan.
+// Must be called without any p->lock.
+void
+wakeup(void *chan)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++) {
+    if(p != myproc()){
+      acquire(&p->lock);
+      if(p->state == SLEEPING && p->chan == chan) {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  }
+}
+
+// Kill the process with the given pid.
+// The victim won't exit until it tries to return
+// to user space (see usertrap() in trap.c).
+int
+kill(int pid)
+{
+  struct proc *p;
+
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->pid == pid){
+      p->killed = 1;
+      if(p->state == SLEEPING){
+        // Wake process from sleep().
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+      return 0;
+    }
+    release(&p->lock);
+  }
+  return -1;
+}
+
+void
+setkilled(struct proc *p)
+{
+  acquire(&p->lock);
+  p->killed = 1;
+  release(&p->lock);
+}
+
+int
+killed(struct proc *p)
+{
+  int k;
+  
+  acquire(&p->lock);
+  k = p->killed;
+  release(&p->lock);
+  return k;
+}
+
+// Copy to either a user address, or kernel address,
+// depending on usr_dst.
+// Returns 0 on success, -1 on error.
+int
+either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+{
+  struct proc *p = myproc();
+  if(user_dst){
+    return copyout(p->pagetable, dst, src, len);
+  } else {
+    memmove((char *)dst, src, len);
+    return 0;
+  }
+}
+
+// Copy from either a user address, or kernel address,
+// depending on usr_src.
+// Returns 0 on success, -1 on error.
+int
+either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+{
+  struct proc *p = myproc();
+  if(user_src){
+    return copyin(p->pagetable, dst, src, len);
+  } else {
+    memmove(dst, (char*)src, len);
+    return 0;
+  }
+}
+
+// Print a process listing to console.  For debugging.
+// Runs when user types ^P on console.
+// No lock to avoid wedging a stuck machine further.
+void
+procdump(void)
+{
+  static char *states[] = {
+  [UNUSED]    "unused",
+  [USED]      "used",
+  [SLEEPING]  "sleep ",
+  [RUNNABLE]  "runble",
+  [RUNNING]   "run   ",
+  [ZOMBIE]    "zombie"
+  };
+  struct proc *p;
+  char *state;
+
+  printf("\n");
+  for(p = proc; p < &proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+      state = states[p->state];
+    else
+      state = "???";
+    printf("%d %s %s", p->pid, state, p->name);
+    printf("\n");
+  }
+}
+
+uint64 count_nproc(void) {
+    struct proc *p;
+    int count = 0;
+
+    for (p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+        if (p->state != UNUSED)  // Count non-UNUSED processes
+            count++;
+        release(&p->lock);
+    }
+
+    return count;
+}
diff --git a/kernel/proc.d b/kernel/proc.d
new file mode 100644
index 0000000..ee2200e
--- /dev/null
+++ b/kernel/proc.d
@@ -0,0 +1,3 @@
+kernel/proc.o: kernel/proc.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
diff --git a/kernel/proc.h b/kernel/proc.h
new file mode 100644
index 0000000..026af6f
--- /dev/null
+++ b/kernel/proc.h
@@ -0,0 +1,108 @@
+// Saved registers for kernel context switches.
+struct context {
+  uint64 ra;
+  uint64 sp;
+
+  // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
+
+// Per-CPU state.
+struct cpu {
+  struct proc *proc;          // The process running on this cpu, or null.
+  struct context context;     // swtch() here to enter scheduler().
+  int noff;                   // Depth of push_off() nesting.
+  int intena;                 // Were interrupts enabled before push_off()?
+};
+
+extern struct cpu cpus[NCPU];
+
+// per-process data for the trap handling code in trampoline.S.
+// sits in a page by itself just under the trampoline page in the
+// user page table. not specially mapped in the kernel page table.
+// uservec in trampoline.S saves user registers in the trapframe,
+// then initializes registers from the trapframe's
+// kernel_sp, kernel_hartid, kernel_satp, and jumps to kernel_trap.
+// usertrapret() and userret in trampoline.S set up
+// the trapframe's kernel_*, restore user registers from the
+// trapframe, switch to the user page table, and enter user space.
+// the trapframe includes callee-saved user registers like s0-s11 because the
+// return-to-user path via usertrapret() doesn't return through
+// the entire kernel call stack.
+struct trapframe {
+  /*   0 */ uint64 kernel_satp;   // kernel page table
+  /*   8 */ uint64 kernel_sp;     // top of process's kernel stack
+  /*  16 */ uint64 kernel_trap;   // usertrap()
+  /*  24 */ uint64 epc;           // saved user program counter
+  /*  32 */ uint64 kernel_hartid; // saved kernel tp
+  /*  40 */ uint64 ra;
+  /*  48 */ uint64 sp;
+  /*  56 */ uint64 gp;
+  /*  64 */ uint64 tp;
+  /*  72 */ uint64 t0;
+  /*  80 */ uint64 t1;
+  /*  88 */ uint64 t2;
+  /*  96 */ uint64 s0;
+  /* 104 */ uint64 s1;
+  /* 112 */ uint64 a0;
+  /* 120 */ uint64 a1;
+  /* 128 */ uint64 a2;
+  /* 136 */ uint64 a3;
+  /* 144 */ uint64 a4;
+  /* 152 */ uint64 a5;
+  /* 160 */ uint64 a6;
+  /* 168 */ uint64 a7;
+  /* 176 */ uint64 s2;
+  /* 184 */ uint64 s3;
+  /* 192 */ uint64 s4;
+  /* 200 */ uint64 s5;
+  /* 208 */ uint64 s6;
+  /* 216 */ uint64 s7;
+  /* 224 */ uint64 s8;
+  /* 232 */ uint64 s9;
+  /* 240 */ uint64 s10;
+  /* 248 */ uint64 s11;
+  /* 256 */ uint64 t3;
+  /* 264 */ uint64 t4;
+  /* 272 */ uint64 t5;
+  /* 280 */ uint64 t6;
+};
+
+enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+
+// Per-process state
+struct proc {
+  struct spinlock lock;
+
+  // p->lock must be held when using these:
+  enum procstate state;        // Process state
+  void *chan;                  // If non-zero, sleeping on chan
+  int killed;                  // If non-zero, have been killed
+  int xstate;                  // Exit status to be returned to parent's wait
+  int pid;                     // Process ID
+  int trace_mask;  // Bitmask to determine which syscalls to trace
+
+  // wait_lock must be held when using this:
+  struct proc *parent;         // Parent process
+
+  // these are private to the process, so p->lock need not be held.
+  uint64 kstack;               // Virtual address of kernel stack
+  uint64 sz;                   // Size of process memory (bytes)
+  pagetable_t pagetable;       // User page table
+  struct trapframe *trapframe; // data page for trampoline.S
+  struct context context;      // swtch() here to run process
+  struct file *ofile[NOFILE];  // Open files
+  struct inode *cwd;           // Current directory
+  char name[16];               // Process name (debugging)
+};
diff --git a/kernel/proc.o b/kernel/proc.o
new file mode 100644
index 0000000..89d1a8c
Binary files /dev/null and b/kernel/proc.o differ
diff --git a/kernel/riscv.h b/kernel/riscv.h
new file mode 100644
index 0000000..6cfff1e
--- /dev/null
+++ b/kernel/riscv.h
@@ -0,0 +1,401 @@
+#ifndef __ASSEMBLER__
+
+// which hart (core) is this?
+static inline uint64
+r_mhartid()
+{
+  uint64 x;
+  asm volatile("csrr %0, mhartid" : "=r" (x) );
+  return x;
+}
+
+// Machine Status Register, mstatus
+
+#define MSTATUS_MPP_MASK (3L << 11) // previous mode.
+#define MSTATUS_MPP_M (3L << 11)
+#define MSTATUS_MPP_S (1L << 11)
+#define MSTATUS_MPP_U (0L << 11)
+#define MSTATUS_MIE (1L << 3)    // machine-mode interrupt enable.
+
+static inline uint64
+r_mstatus()
+{
+  uint64 x;
+  asm volatile("csrr %0, mstatus" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_mstatus(uint64 x)
+{
+  asm volatile("csrw mstatus, %0" : : "r" (x));
+}
+
+// machine exception program counter, holds the
+// instruction address to which a return from
+// exception will go.
+static inline void 
+w_mepc(uint64 x)
+{
+  asm volatile("csrw mepc, %0" : : "r" (x));
+}
+
+// Supervisor Status Register, sstatus
+
+#define SSTATUS_SPP (1L << 8)  // Previous mode, 1=Supervisor, 0=User
+#define SSTATUS_SPIE (1L << 5) // Supervisor Previous Interrupt Enable
+#define SSTATUS_UPIE (1L << 4) // User Previous Interrupt Enable
+#define SSTATUS_SIE (1L << 1)  // Supervisor Interrupt Enable
+#define SSTATUS_UIE (1L << 0)  // User Interrupt Enable
+
+static inline uint64
+r_sstatus()
+{
+  uint64 x;
+  asm volatile("csrr %0, sstatus" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_sstatus(uint64 x)
+{
+  asm volatile("csrw sstatus, %0" : : "r" (x));
+}
+
+// Supervisor Interrupt Pending
+static inline uint64
+r_sip()
+{
+  uint64 x;
+  asm volatile("csrr %0, sip" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_sip(uint64 x)
+{
+  asm volatile("csrw sip, %0" : : "r" (x));
+}
+
+// Supervisor Interrupt Enable
+#define SIE_SEIE (1L << 9) // external
+#define SIE_STIE (1L << 5) // timer
+#define SIE_SSIE (1L << 1) // software
+static inline uint64
+r_sie()
+{
+  uint64 x;
+  asm volatile("csrr %0, sie" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_sie(uint64 x)
+{
+  asm volatile("csrw sie, %0" : : "r" (x));
+}
+
+// Machine-mode Interrupt Enable
+#define MIE_STIE (1L << 5)  // supervisor timer
+static inline uint64
+r_mie()
+{
+  uint64 x;
+  asm volatile("csrr %0, mie" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_mie(uint64 x)
+{
+  asm volatile("csrw mie, %0" : : "r" (x));
+}
+
+// supervisor exception program counter, holds the
+// instruction address to which a return from
+// exception will go.
+static inline void 
+w_sepc(uint64 x)
+{
+  asm volatile("csrw sepc, %0" : : "r" (x));
+}
+
+static inline uint64
+r_sepc()
+{
+  uint64 x;
+  asm volatile("csrr %0, sepc" : "=r" (x) );
+  return x;
+}
+
+// Machine Exception Delegation
+static inline uint64
+r_medeleg()
+{
+  uint64 x;
+  asm volatile("csrr %0, medeleg" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_medeleg(uint64 x)
+{
+  asm volatile("csrw medeleg, %0" : : "r" (x));
+}
+
+// Machine Interrupt Delegation
+static inline uint64
+r_mideleg()
+{
+  uint64 x;
+  asm volatile("csrr %0, mideleg" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_mideleg(uint64 x)
+{
+  asm volatile("csrw mideleg, %0" : : "r" (x));
+}
+
+// Supervisor Trap-Vector Base Address
+// low two bits are mode.
+static inline void 
+w_stvec(uint64 x)
+{
+  asm volatile("csrw stvec, %0" : : "r" (x));
+}
+
+static inline uint64
+r_stvec()
+{
+  uint64 x;
+  asm volatile("csrr %0, stvec" : "=r" (x) );
+  return x;
+}
+
+// Supervisor Timer Comparison Register
+static inline uint64
+r_stimecmp()
+{
+  uint64 x;
+  // asm volatile("csrr %0, stimecmp" : "=r" (x) );
+  asm volatile("csrr %0, 0x14d" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_stimecmp(uint64 x)
+{
+  // asm volatile("csrw stimecmp, %0" : : "r" (x));
+  asm volatile("csrw 0x14d, %0" : : "r" (x));
+}
+
+// Machine Environment Configuration Register
+static inline uint64
+r_menvcfg()
+{
+  uint64 x;
+  // asm volatile("csrr %0, menvcfg" : "=r" (x) );
+  asm volatile("csrr %0, 0x30a" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_menvcfg(uint64 x)
+{
+  //asm volatile("csrw menvcfg, %0" : : "r" (x));
+  asm volatile("csrw 0x30a, %0" : : "r" (x));
+}
+
+// Physical Memory Protection
+static inline void
+w_pmpcfg0(uint64 x)
+{
+  asm volatile("csrw pmpcfg0, %0" : : "r" (x));
+}
+
+static inline void
+w_pmpaddr0(uint64 x)
+{
+  asm volatile("csrw pmpaddr0, %0" : : "r" (x));
+}
+
+// use riscv's sv39 page table scheme.
+#define SATP_SV39 (8L << 60)
+
+#define MAKE_SATP(pagetable) (SATP_SV39 | (((uint64)pagetable) >> 12))
+
+// supervisor address translation and protection;
+// holds the address of the page table.
+static inline void 
+w_satp(uint64 x)
+{
+  asm volatile("csrw satp, %0" : : "r" (x));
+}
+
+static inline uint64
+r_satp()
+{
+  uint64 x;
+  asm volatile("csrr %0, satp" : "=r" (x) );
+  return x;
+}
+
+// Supervisor Trap Cause
+static inline uint64
+r_scause()
+{
+  uint64 x;
+  asm volatile("csrr %0, scause" : "=r" (x) );
+  return x;
+}
+
+// Supervisor Trap Value
+static inline uint64
+r_stval()
+{
+  uint64 x;
+  asm volatile("csrr %0, stval" : "=r" (x) );
+  return x;
+}
+
+// Machine-mode Counter-Enable
+static inline void 
+w_mcounteren(uint64 x)
+{
+  asm volatile("csrw mcounteren, %0" : : "r" (x));
+}
+
+static inline uint64
+r_mcounteren()
+{
+  uint64 x;
+  asm volatile("csrr %0, mcounteren" : "=r" (x) );
+  return x;
+}
+
+// machine-mode cycle counter
+static inline uint64
+r_time()
+{
+  uint64 x;
+  asm volatile("csrr %0, time" : "=r" (x) );
+  return x;
+}
+
+// enable device interrupts
+static inline void
+intr_on()
+{
+  w_sstatus(r_sstatus() | SSTATUS_SIE);
+}
+
+// disable device interrupts
+static inline void
+intr_off()
+{
+  w_sstatus(r_sstatus() & ~SSTATUS_SIE);
+}
+
+// are device interrupts enabled?
+static inline int
+intr_get()
+{
+  uint64 x = r_sstatus();
+  return (x & SSTATUS_SIE) != 0;
+}
+
+static inline uint64
+r_sp()
+{
+  uint64 x;
+  asm volatile("mv %0, sp" : "=r" (x) );
+  return x;
+}
+
+static inline uint64
+r_fp()
+{
+  uint64 x;
+  asm volatile("mv %0, s0" : "=r" (x) );
+  return x;
+}
+
+// read and write tp, the thread pointer, which xv6 uses to hold
+// this core's hartid (core number), the index into cpus[].
+static inline uint64
+r_tp()
+{
+  uint64 x;
+  asm volatile("mv %0, tp" : "=r" (x) );
+  return x;
+}
+
+static inline void 
+w_tp(uint64 x)
+{
+  asm volatile("mv tp, %0" : : "r" (x));
+}
+
+static inline uint64
+r_ra()
+{
+  uint64 x;
+  asm volatile("mv %0, ra" : "=r" (x) );
+  return x;
+}
+
+// flush the TLB.
+static inline void
+sfence_vma()
+{
+  // the zero, zero means flush all TLB entries.
+  asm volatile("sfence.vma zero, zero");
+}
+
+typedef uint64 pte_t;
+typedef uint64 *pagetable_t; // 512 PTEs
+
+#endif // __ASSEMBLER__
+
+#define PGSIZE 4096 // bytes per page
+#define PGSHIFT 12  // bits of offset within a page
+
+#ifdef LAB_PGTBL
+#define SUPERPGSIZE (2 * (1 << 20)) // bytes per page
+#define SUPERPGROUNDUP(sz)  (((sz)+SUPERPGSIZE-1) & ~(SUPERPGSIZE-1))
+#endif
+
+#define PGROUNDUP(sz)  (((sz)+PGSIZE-1) & ~(PGSIZE-1))
+#define PGROUNDDOWN(a) (((a)) & ~(PGSIZE-1))
+
+#define PTE_V (1L << 0) // valid
+#define PTE_R (1L << 1)
+#define PTE_W (1L << 2)
+#define PTE_X (1L << 3)
+#define PTE_U (1L << 4) // user can access
+
+
+
+#if defined(LAB_MMAP) || defined(LAB_PGTBL)
+#define PTE_LEAF(pte) (((pte) & PTE_R) | ((pte) & PTE_W) | ((pte) & PTE_X))
+#endif
+
+// shift a physical address to the right place for a PTE.
+#define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
+
+#define PTE2PA(pte) (((pte) >> 10) << 12)
+
+#define PTE_FLAGS(pte) ((pte) & 0x3FF)
+
+// extract the three 9-bit page table indices from a virtual address.
+#define PXMASK          0x1FF // 9 bits
+#define PXSHIFT(level)  (PGSHIFT+(9*(level)))
+#define PX(level, va) ((((uint64) (va)) >> PXSHIFT(level)) & PXMASK)
+
+// one beyond the highest possible virtual address.
+// MAXVA is actually one bit less than the max allowed by
+// Sv39, to avoid having to sign-extend virtual addresses
+// that have the high bit set.
+#define MAXVA (1L << (9 + 9 + 9 + 12 - 1))
diff --git a/kernel/sleeplock.c b/kernel/sleeplock.c
new file mode 100644
index 0000000..81de585
--- /dev/null
+++ b/kernel/sleeplock.c
@@ -0,0 +1,55 @@
+// Sleeping locks
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "sleeplock.h"
+
+void
+initsleeplock(struct sleeplock *lk, char *name)
+{
+  initlock(&lk->lk, "sleep lock");
+  lk->name = name;
+  lk->locked = 0;
+  lk->pid = 0;
+}
+
+void
+acquiresleep(struct sleeplock *lk)
+{
+  acquire(&lk->lk);
+  while (lk->locked) {
+    sleep(lk, &lk->lk);
+  }
+  lk->locked = 1;
+  lk->pid = myproc()->pid;
+  release(&lk->lk);
+}
+
+void
+releasesleep(struct sleeplock *lk)
+{
+  acquire(&lk->lk);
+  lk->locked = 0;
+  lk->pid = 0;
+  wakeup(lk);
+  release(&lk->lk);
+}
+
+int
+holdingsleep(struct sleeplock *lk)
+{
+  int r;
+  
+  acquire(&lk->lk);
+  r = lk->locked && (lk->pid == myproc()->pid);
+  release(&lk->lk);
+  return r;
+}
+
+
+
diff --git a/kernel/sleeplock.d b/kernel/sleeplock.d
new file mode 100644
index 0000000..437cb5d
--- /dev/null
+++ b/kernel/sleeplock.d
@@ -0,0 +1,3 @@
+kernel/sleeplock.o: kernel/sleeplock.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
+ kernel/proc.h kernel/sleeplock.h
diff --git a/kernel/sleeplock.h b/kernel/sleeplock.h
new file mode 100644
index 0000000..110e6f3
--- /dev/null
+++ b/kernel/sleeplock.h
@@ -0,0 +1,10 @@
+// Long-term locks for processes
+struct sleeplock {
+  uint locked;       // Is the lock held?
+  struct spinlock lk; // spinlock protecting this sleep lock
+  
+  // For debugging:
+  char *name;        // Name of lock.
+  int pid;           // Process holding lock
+};
+
diff --git a/kernel/sleeplock.o b/kernel/sleeplock.o
new file mode 100644
index 0000000..6682f1e
Binary files /dev/null and b/kernel/sleeplock.o differ
diff --git a/kernel/spinlock.c b/kernel/spinlock.c
new file mode 100644
index 0000000..9840302
--- /dev/null
+++ b/kernel/spinlock.c
@@ -0,0 +1,110 @@
+// Mutual exclusion spin locks.
+
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "riscv.h"
+#include "proc.h"
+#include "defs.h"
+
+void
+initlock(struct spinlock *lk, char *name)
+{
+  lk->name = name;
+  lk->locked = 0;
+  lk->cpu = 0;
+}
+
+// Acquire the lock.
+// Loops (spins) until the lock is acquired.
+void
+acquire(struct spinlock *lk)
+{
+  push_off(); // disable interrupts to avoid deadlock.
+  if(holding(lk))
+    panic("acquire");
+
+  // On RISC-V, sync_lock_test_and_set turns into an atomic swap:
+  //   a5 = 1
+  //   s1 = &lk->locked
+  //   amoswap.w.aq a5, a5, (s1)
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  // Tell the C compiler and the processor to not move loads or stores
+  // past this point, to ensure that the critical section's memory
+  // references happen strictly after the lock is acquired.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  lk->cpu = mycpu();
+}
+
+// Release the lock.
+void
+release(struct spinlock *lk)
+{
+  if(!holding(lk))
+    panic("release");
+
+  lk->cpu = 0;
+
+  // Tell the C compiler and the CPU to not move loads or stores
+  // past this point, to ensure that all the stores in the critical
+  // section are visible to other CPUs before the lock is released,
+  // and that loads in the critical section occur strictly before
+  // the lock is released.
+  // On RISC-V, this emits a fence instruction.
+  __sync_synchronize();
+
+  // Release the lock, equivalent to lk->locked = 0.
+  // This code doesn't use a C assignment, since the C standard
+  // implies that an assignment might be implemented with
+  // multiple store instructions.
+  // On RISC-V, sync_lock_release turns into an atomic swap:
+  //   s1 = &lk->locked
+  //   amoswap.w zero, zero, (s1)
+  __sync_lock_release(&lk->locked);
+
+  pop_off();
+}
+
+// Check whether this cpu is holding the lock.
+// Interrupts must be off.
+int
+holding(struct spinlock *lk)
+{
+  int r;
+  r = (lk->locked && lk->cpu == mycpu());
+  return r;
+}
+
+// push_off/pop_off are like intr_off()/intr_on() except that they are matched:
+// it takes two pop_off()s to undo two push_off()s.  Also, if interrupts
+// are initially off, then push_off, pop_off leaves them off.
+
+void
+push_off(void)
+{
+  int old = intr_get();
+
+  intr_off();
+  if(mycpu()->noff == 0)
+    mycpu()->intena = old;
+  mycpu()->noff += 1;
+}
+
+void
+pop_off(void)
+{
+  struct cpu *c = mycpu();
+  if(intr_get())
+    panic("pop_off - interruptible");
+  if(c->noff < 1)
+    panic("pop_off");
+  c->noff -= 1;
+  if(c->noff == 0 && c->intena)
+    intr_on();
+}
diff --git a/kernel/spinlock.d b/kernel/spinlock.d
new file mode 100644
index 0000000..65193d6
--- /dev/null
+++ b/kernel/spinlock.d
@@ -0,0 +1,3 @@
+kernel/spinlock.o: kernel/spinlock.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/spinlock.h kernel/riscv.h kernel/proc.h \
+ kernel/defs.h
diff --git a/kernel/spinlock.h b/kernel/spinlock.h
new file mode 100644
index 0000000..4392820
--- /dev/null
+++ b/kernel/spinlock.h
@@ -0,0 +1,9 @@
+// Mutual exclusion lock.
+struct spinlock {
+  uint locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.
+  struct cpu *cpu;   // The cpu holding the lock.
+};
+
diff --git a/kernel/spinlock.o b/kernel/spinlock.o
new file mode 100644
index 0000000..e2e4f1e
Binary files /dev/null and b/kernel/spinlock.o differ
diff --git a/kernel/start.c b/kernel/start.c
new file mode 100644
index 0000000..9ee35f1
--- /dev/null
+++ b/kernel/start.c
@@ -0,0 +1,66 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "defs.h"
+
+void main();
+void timerinit();
+
+// entry.S needs one stack per CPU.
+__attribute__ ((aligned (16))) char stack0[4096 * NCPU];
+
+// entry.S jumps here in machine mode on stack0.
+void
+start()
+{
+  // set M Previous Privilege mode to Supervisor, for mret.
+  unsigned long x = r_mstatus();
+  x &= ~MSTATUS_MPP_MASK;
+  x |= MSTATUS_MPP_S;
+  w_mstatus(x);
+
+  // set M Exception Program Counter to main, for mret.
+  // requires gcc -mcmodel=medany
+  w_mepc((uint64)main);
+
+  // disable paging for now.
+  w_satp(0);
+
+  // delegate all interrupts and exceptions to supervisor mode.
+  w_medeleg(0xffff);
+  w_mideleg(0xffff);
+  w_sie(r_sie() | SIE_SEIE | SIE_STIE | SIE_SSIE);
+
+  // configure Physical Memory Protection to give supervisor mode
+  // access to all of physical memory.
+  w_pmpaddr0(0x3fffffffffffffull);
+  w_pmpcfg0(0xf);
+
+  // ask for clock interrupts.
+  timerinit();
+
+  // keep each CPU's hartid in its tp register, for cpuid().
+  int id = r_mhartid();
+  w_tp(id);
+
+  // switch to supervisor mode and jump to main().
+  asm volatile("mret");
+}
+
+// ask each hart to generate timer interrupts.
+void
+timerinit()
+{
+  // enable supervisor-mode timer interrupts.
+  w_mie(r_mie() | MIE_STIE);
+  
+  // enable the sstc extension (i.e. stimecmp).
+  w_menvcfg(r_menvcfg() | (1L << 63)); 
+  
+  // allow supervisor to use stimecmp and time.
+  w_mcounteren(r_mcounteren() | 2);
+  
+  // ask for the very first timer interrupt.
+  w_stimecmp(r_time() + 1000000);
+}
diff --git a/kernel/start.d b/kernel/start.d
new file mode 100644
index 0000000..203c529
--- /dev/null
+++ b/kernel/start.d
@@ -0,0 +1,2 @@
+kernel/start.o: kernel/start.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/defs.h
diff --git a/kernel/start.o b/kernel/start.o
new file mode 100644
index 0000000..ae95a67
Binary files /dev/null and b/kernel/start.o differ
diff --git a/kernel/stat.h b/kernel/stat.h
new file mode 100644
index 0000000..19543af
--- /dev/null
+++ b/kernel/stat.h
@@ -0,0 +1,11 @@
+#define T_DIR     1   // Directory
+#define T_FILE    2   // File
+#define T_DEVICE  3   // Device
+
+struct stat {
+  int dev;     // File system's disk device
+  uint ino;    // Inode number
+  short type;  // Type of file
+  short nlink; // Number of links to file
+  uint64 size; // Size of file in bytes
+};
diff --git a/kernel/string.c b/kernel/string.c
new file mode 100644
index 0000000..153536f
--- /dev/null
+++ b/kernel/string.c
@@ -0,0 +1,107 @@
+#include "types.h"
+
+void*
+memset(void *dst, int c, uint n)
+{
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    cdst[i] = c;
+  }
+  return dst;
+}
+
+int
+memcmp(const void *v1, const void *v2, uint n)
+{
+  const uchar *s1, *s2;
+
+  s1 = v1;
+  s2 = v2;
+  while(n-- > 0){
+    if(*s1 != *s2)
+      return *s1 - *s2;
+    s1++, s2++;
+  }
+
+  return 0;
+}
+
+void*
+memmove(void *dst, const void *src, uint n)
+{
+  const char *s;
+  char *d;
+
+  if(n == 0)
+    return dst;
+  
+  s = src;
+  d = dst;
+  if(s < d && s + n > d){
+    s += n;
+    d += n;
+    while(n-- > 0)
+      *--d = *--s;
+  } else
+    while(n-- > 0)
+      *d++ = *s++;
+
+  return dst;
+}
+
+// memcpy exists to placate GCC.  Use memmove.
+void*
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+}
+
+int
+strncmp(const char *p, const char *q, uint n)
+{
+  while(n > 0 && *p && *p == *q)
+    n--, p++, q++;
+  if(n == 0)
+    return 0;
+  return (uchar)*p - (uchar)*q;
+}
+
+char*
+strncpy(char *s, const char *t, int n)
+{
+  char *os;
+
+  os = s;
+  while(n-- > 0 && (*s++ = *t++) != 0)
+    ;
+  while(n-- > 0)
+    *s++ = 0;
+  return os;
+}
+
+// Like strncpy but guaranteed to NUL-terminate.
+char*
+safestrcpy(char *s, const char *t, int n)
+{
+  char *os;
+
+  os = s;
+  if(n <= 0)
+    return os;
+  while(--n > 0 && (*s++ = *t++) != 0)
+    ;
+  *s = 0;
+  return os;
+}
+
+int
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+    ;
+  return n;
+}
+
diff --git a/kernel/string.d b/kernel/string.d
new file mode 100644
index 0000000..f119f61
--- /dev/null
+++ b/kernel/string.d
@@ -0,0 +1 @@
+kernel/string.o: kernel/string.c kernel/types.h
diff --git a/kernel/string.o b/kernel/string.o
new file mode 100644
index 0000000..5444be9
Binary files /dev/null and b/kernel/string.o differ
diff --git a/kernel/swtch.S b/kernel/swtch.S
new file mode 100644
index 0000000..17a8663
--- /dev/null
+++ b/kernel/swtch.S
@@ -0,0 +1,42 @@
+# Context switch
+#
+#   void swtch(struct context *old, struct context *new);
+# 
+# Save current registers in old. Load from new.	
+
+
+.globl swtch
+swtch:
+        sd ra, 0(a0)
+        sd sp, 8(a0)
+        sd s0, 16(a0)
+        sd s1, 24(a0)
+        sd s2, 32(a0)
+        sd s3, 40(a0)
+        sd s4, 48(a0)
+        sd s5, 56(a0)
+        sd s6, 64(a0)
+        sd s7, 72(a0)
+        sd s8, 80(a0)
+        sd s9, 88(a0)
+        sd s10, 96(a0)
+        sd s11, 104(a0)
+
+        ld ra, 0(a1)
+        ld sp, 8(a1)
+        ld s0, 16(a1)
+        ld s1, 24(a1)
+        ld s2, 32(a1)
+        ld s3, 40(a1)
+        ld s4, 48(a1)
+        ld s5, 56(a1)
+        ld s6, 64(a1)
+        ld s7, 72(a1)
+        ld s8, 80(a1)
+        ld s9, 88(a1)
+        ld s10, 96(a1)
+        ld s11, 104(a1)
+        
+        ret
+
+	
diff --git a/kernel/swtch.o b/kernel/swtch.o
new file mode 100644
index 0000000..a982359
Binary files /dev/null and b/kernel/swtch.o differ
diff --git a/kernel/syscall.c b/kernel/syscall.c
new file mode 100644
index 0000000..7d90985
--- /dev/null
+++ b/kernel/syscall.c
@@ -0,0 +1,184 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "syscall.h"
+#include "defs.h"
+
+// Fetch the uint64 at addr from the current process.
+int
+fetchaddr(uint64 addr, uint64 *ip)
+{
+  struct proc *p = myproc();
+  if(addr >= p->sz || addr+sizeof(uint64) > p->sz) // both tests needed, in case of overflow
+    return -1;
+  if(copyin(p->pagetable, (char *)ip, addr, sizeof(*ip)) != 0)
+    return -1;
+  return 0;
+}
+
+// Fetch the nul-terminated string at addr from the current process.
+// Returns length of string, not including nul, or -1 for error.
+int
+fetchstr(uint64 addr, char *buf, int max)
+{
+  struct proc *p = myproc();
+  if(copyinstr(p->pagetable, buf, addr, max) < 0)
+    return -1;
+  return strlen(buf);
+}
+
+static uint64
+argraw(int n)
+{
+  struct proc *p = myproc();
+  switch (n) {
+  case 0:
+    return p->trapframe->a0;
+  case 1:
+    return p->trapframe->a1;
+  case 2:
+    return p->trapframe->a2;
+  case 3:
+    return p->trapframe->a3;
+  case 4:
+    return p->trapframe->a4;
+  case 5:
+    return p->trapframe->a5;
+  }
+  panic("argraw");
+  return -1;
+}
+
+// Fetch the nth 32-bit system call argument.
+void
+argint(int n, int *ip)
+{
+  *ip = argraw(n);
+}
+
+// Retrieve an argument as a pointer.
+// Doesn't check for legality, since
+// copyin/copyout will do that.
+void
+argaddr(int n, uint64 *ip)
+{
+  *ip = argraw(n);
+}
+
+// Fetch the nth word-sized system call argument as a null-terminated string.
+// Copies into buf, at most max.
+// Returns string length if OK (including nul), -1 if error.
+int
+argstr(int n, char *buf, int max)
+{
+  uint64 addr;
+  argaddr(n, &addr);
+  return fetchstr(addr, buf, max);
+}
+
+static char *syscall_names[] = {
+    [SYS_fork]    = "fork",
+    [SYS_exit]    = "exit",
+    [SYS_wait]    = "wait",
+    [SYS_pipe]    = "pipe",
+    [SYS_read]    = "read",
+    [SYS_kill]    = "kill",
+    [SYS_exec]    = "exec",
+    [SYS_fstat]   = "fstat",
+    [SYS_chdir]   = "chdir",
+    [SYS_dup]     = "dup",
+    [SYS_getpid]  = "getpid",
+    [SYS_sbrk]    = "sbrk",
+    [SYS_sleep]   = "sleep",
+    [SYS_uptime]  = "uptime",
+    [SYS_open]    = "open",
+    [SYS_write]   = "write",
+    [SYS_mknod]   = "mknod",
+    [SYS_unlink]  = "unlink",
+    [SYS_link]    = "link",
+    [SYS_mkdir]   = "mkdir",
+    [SYS_close]   = "close",
+    [SYS_hello]   = "hellp",
+    [SYS_trace]   = "trace",  // Add the trace syscall name
+    [SYS_sysinfo] = "sysinfo"
+};
+
+// Prototypes for the functions that handle system calls.
+extern uint64 sys_fork(void);
+extern uint64 sys_exit(void);
+extern uint64 sys_wait(void);
+extern uint64 sys_pipe(void);
+extern uint64 sys_read(void);
+extern uint64 sys_kill(void);
+extern uint64 sys_exec(void);
+extern uint64 sys_fstat(void);
+extern uint64 sys_chdir(void);
+extern uint64 sys_dup(void);
+extern uint64 sys_getpid(void);
+extern uint64 sys_sbrk(void);
+extern uint64 sys_sleep(void);
+extern uint64 sys_uptime(void);
+extern uint64 sys_open(void);
+extern uint64 sys_write(void);
+extern uint64 sys_mknod(void);
+extern uint64 sys_unlink(void);
+extern uint64 sys_link(void);
+extern uint64 sys_mkdir(void);
+extern uint64 sys_close(void);
+extern uint64 sys_hello(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
+// An array mapping syscall numbers from syscall.h
+// to the function that handles the system call.
+static uint64 (*syscalls[])(void) = {
+[SYS_fork]    sys_fork,
+[SYS_exit]    sys_exit,
+[SYS_wait]    sys_wait,
+[SYS_pipe]    sys_pipe,
+[SYS_read]    sys_read,
+[SYS_kill]    sys_kill,
+[SYS_exec]    sys_exec,
+[SYS_fstat]   sys_fstat,
+[SYS_chdir]   sys_chdir,
+[SYS_dup]     sys_dup,
+[SYS_getpid]  sys_getpid,
+[SYS_sbrk]    sys_sbrk,
+[SYS_sleep]   sys_sleep,
+[SYS_uptime]  sys_uptime,
+[SYS_open]    sys_open,
+[SYS_write]   sys_write,
+[SYS_mknod]   sys_mknod,
+[SYS_unlink]  sys_unlink,
+[SYS_link]    sys_link,
+[SYS_mkdir]   sys_mkdir,
+[SYS_close]   sys_close,
+[SYS_hello]   sys_hello,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo
+};
+
+void
+syscall(void)
+{
+  int num;
+  struct proc *p = myproc();
+
+  num = p->trapframe->a7;
+  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+    // Use num to lookup the system call function for num, call it,
+    // and store its return value in p->trapframe->a0
+    p->trapframe->a0 = syscalls[num]();
+    // Check if tracing is enabled for this system call
+        if (p->trace_mask & (1 << num)) {
+            printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], p->trapframe->a0);
+        }
+  } else {
+    printf("%d %s: unknown sys call %d\n",
+            p->pid, p->name, num);
+    p->trapframe->a0 = -1;
+  }
+}
diff --git a/kernel/syscall.d b/kernel/syscall.d
new file mode 100644
index 0000000..9c76275
--- /dev/null
+++ b/kernel/syscall.d
@@ -0,0 +1,3 @@
+kernel/syscall.o: kernel/syscall.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/syscall.h kernel/defs.h
diff --git a/kernel/syscall.h b/kernel/syscall.h
new file mode 100644
index 0000000..3891929
--- /dev/null
+++ b/kernel/syscall.h
@@ -0,0 +1,25 @@
+// System call numbers
+#define SYS_fork    1
+#define SYS_exit    2
+#define SYS_wait    3
+#define SYS_pipe    4
+#define SYS_read    5
+#define SYS_kill    6
+#define SYS_exec    7
+#define SYS_fstat   8
+#define SYS_chdir   9
+#define SYS_dup    10
+#define SYS_getpid 11
+#define SYS_sbrk   12
+#define SYS_sleep  13
+#define SYS_uptime 14
+#define SYS_open   15
+#define SYS_write  16
+#define SYS_mknod  17
+#define SYS_unlink 18
+#define SYS_link   19
+#define SYS_mkdir  20
+#define SYS_close  21
+#define SYS_hello  22
+#define SYS_trace  23  // Assign an unused syscall number
+#define SYS_sysinfo 24  // Add an unused syscall number
diff --git a/kernel/syscall.o b/kernel/syscall.o
new file mode 100644
index 0000000..35f544a
Binary files /dev/null and b/kernel/syscall.o differ
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
new file mode 100644
index 0000000..16b668c
--- /dev/null
+++ b/kernel/sysfile.c
@@ -0,0 +1,505 @@
+//
+// File-system system calls.
+// Mostly argument checking, since we don't trust
+// user code, and calls into file.c and fs.c.
+//
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "stat.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "fs.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
+
+// Fetch the nth word-sized system call argument as a file descriptor
+// and return both the descriptor and the corresponding struct file.
+static int
+argfd(int n, int *pfd, struct file **pf)
+{
+  int fd;
+  struct file *f;
+
+  argint(n, &fd);
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  if(pfd)
+    *pfd = fd;
+  if(pf)
+    *pf = f;
+  return 0;
+}
+
+// Allocate a file descriptor for the given file.
+// Takes over file reference from caller on success.
+static int
+fdalloc(struct file *f)
+{
+  int fd;
+  struct proc *p = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(p->ofile[fd] == 0){
+      p->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+uint64
+sys_dup(void)
+{
+  struct file *f;
+  int fd;
+
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  if((fd=fdalloc(f)) < 0)
+    return -1;
+  filedup(f);
+  return fd;
+}
+
+uint64
+sys_read(void)
+{
+  struct file *f;
+  int n;
+  uint64 p;
+
+  argaddr(1, &p);
+  argint(2, &n);
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  return fileread(f, p, n);
+}
+
+uint64
+sys_write(void)
+{
+  struct file *f;
+  int n;
+  uint64 p;
+  
+  argaddr(1, &p);
+  argint(2, &n);
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+
+  return filewrite(f, p, n);
+}
+
+uint64
+sys_close(void)
+{
+  int fd;
+  struct file *f;
+
+  if(argfd(0, &fd, &f) < 0)
+    return -1;
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+  return 0;
+}
+
+uint64
+sys_fstat(void)
+{
+  struct file *f;
+  uint64 st; // user pointer to struct stat
+
+  argaddr(1, &st);
+  if(argfd(0, 0, &f) < 0)
+    return -1;
+  return filestat(f, st);
+}
+
+// Create the path new as a link to the same inode as old.
+uint64
+sys_link(void)
+{
+  char name[DIRSIZ], new[MAXPATH], old[MAXPATH];
+  struct inode *dp, *ip;
+
+  if(argstr(0, old, MAXPATH) < 0 || argstr(1, new, MAXPATH) < 0)
+    return -1;
+
+  begin_op();
+  if((ip = namei(old)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(ip);
+  if(ip->type == T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  ip->nlink++;
+  iupdate(ip);
+  iunlock(ip);
+
+  if((dp = nameiparent(new, name)) == 0)
+    goto bad;
+  ilock(dp);
+  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
+    iunlockput(dp);
+    goto bad;
+  }
+  iunlockput(dp);
+  iput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  ilock(ip);
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return -1;
+}
+
+// Is the directory dp empty except for "." and ".." ?
+static int
+isdirempty(struct inode *dp)
+{
+  int off;
+  struct dirent de;
+
+  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
+    if(readi(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+      panic("isdirempty: readi");
+    if(de.inum != 0)
+      return 0;
+  }
+  return 1;
+}
+
+uint64
+sys_unlink(void)
+{
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ], path[MAXPATH];
+  uint off;
+
+  if(argstr(0, path, MAXPATH) < 0)
+    return -1;
+
+  begin_op();
+  if((dp = nameiparent(path, name)) == 0){
+    end_op();
+    return -1;
+  }
+
+  ilock(dp);
+
+  // Cannot unlink "." or "..".
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+  if(ip->type == T_DIR && !isdirempty(ip)){
+    iunlockput(ip);
+    goto bad;
+  }
+
+  memset(&de, 0, sizeof(de));
+  if(writei(dp, 0, (uint64)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+
+  end_op();
+
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+static struct inode*
+create(char *path, short type, short major, short minor)
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && (ip->type == T_FILE || ip->type == T_DEVICE))
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0){
+    iunlockput(dp);
+    return 0;
+  }
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      goto fail;
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    goto fail;
+
+  if(type == T_DIR){
+    // now that success is guaranteed:
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+  }
+
+  iunlockput(dp);
+
+  return ip;
+
+ fail:
+  // something went wrong. de-allocate ip.
+  ip->nlink = 0;
+  iupdate(ip);
+  iunlockput(ip);
+  iunlockput(dp);
+  return 0;
+}
+
+uint64
+sys_open(void)
+{
+  char path[MAXPATH];
+  int fd, omode;
+  struct file *f;
+  struct inode *ip;
+  int n;
+
+  argint(1, &omode);
+  if((n = argstr(0, path, MAXPATH)) < 0)
+    return -1;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if(ip->type == T_DEVICE && (ip->major < 0 || ip->major >= NDEV)){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+
+  if(ip->type == T_DEVICE){
+    f->type = FD_DEVICE;
+    f->major = ip->major;
+  } else {
+    f->type = FD_INODE;
+    f->off = 0;
+  }
+  f->ip = ip;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+
+  if((omode & O_TRUNC) && ip->type == T_FILE){
+    itrunc(ip);
+  }
+
+  iunlock(ip);
+  end_op();
+
+  return fd;
+}
+
+uint64
+sys_mkdir(void)
+{
+  char path[MAXPATH];
+  struct inode *ip;
+
+  begin_op();
+  if(argstr(0, path, MAXPATH) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+uint64
+sys_mknod(void)
+{
+  struct inode *ip;
+  char path[MAXPATH];
+  int major, minor;
+
+  begin_op();
+  argint(1, &major);
+  argint(2, &minor);
+  if((argstr(0, path, MAXPATH)) < 0 ||
+     (ip = create(path, T_DEVICE, major, minor)) == 0){
+    end_op();
+    return -1;
+  }
+  iunlockput(ip);
+  end_op();
+  return 0;
+}
+
+uint64
+sys_chdir(void)
+{
+  char path[MAXPATH];
+  struct inode *ip;
+  struct proc *p = myproc();
+  
+  begin_op();
+  if(argstr(0, path, MAXPATH) < 0 || (ip = namei(path)) == 0){
+    end_op();
+    return -1;
+  }
+  ilock(ip);
+  if(ip->type != T_DIR){
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  iput(p->cwd);
+  end_op();
+  p->cwd = ip;
+  return 0;
+}
+
+uint64
+sys_exec(void)
+{
+  char path[MAXPATH], *argv[MAXARG];
+  int i;
+  uint64 uargv, uarg;
+
+  argaddr(1, &uargv);
+  if(argstr(0, path, MAXPATH) < 0) {
+    return -1;
+  }
+  memset(argv, 0, sizeof(argv));
+  for(i=0;; i++){
+    if(i >= NELEM(argv)){
+      goto bad;
+    }
+    if(fetchaddr(uargv+sizeof(uint64)*i, (uint64*)&uarg) < 0){
+      goto bad;
+    }
+    if(uarg == 0){
+      argv[i] = 0;
+      break;
+    }
+    argv[i] = kalloc();
+    if(argv[i] == 0)
+      goto bad;
+    if(fetchstr(uarg, argv[i], PGSIZE) < 0)
+      goto bad;
+  }
+
+  int ret = exec(path, argv);
+
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    kfree(argv[i]);
+
+  return ret;
+
+ bad:
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+    kfree(argv[i]);
+  return -1;
+}
+
+uint64
+sys_pipe(void)
+{
+  uint64 fdarray; // user pointer to array of two integers
+  struct file *rf, *wf;
+  int fd0, fd1;
+  struct proc *p = myproc();
+
+  argaddr(0, &fdarray);
+  if(pipealloc(&rf, &wf) < 0)
+    return -1;
+  fd0 = -1;
+  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
+    if(fd0 >= 0)
+      p->ofile[fd0] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  if(copyout(p->pagetable, fdarray, (char*)&fd0, sizeof(fd0)) < 0 ||
+     copyout(p->pagetable, fdarray+sizeof(fd0), (char *)&fd1, sizeof(fd1)) < 0){
+    p->ofile[fd0] = 0;
+    p->ofile[fd1] = 0;
+    fileclose(rf);
+    fileclose(wf);
+    return -1;
+  }
+  return 0;
+}
diff --git a/kernel/sysfile.d b/kernel/sysfile.d
new file mode 100644
index 0000000..382ec06
--- /dev/null
+++ b/kernel/sysfile.d
@@ -0,0 +1,4 @@
+kernel/sysfile.o: kernel/sysfile.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/stat.h kernel/spinlock.h \
+ kernel/proc.h kernel/fs.h kernel/sleeplock.h kernel/file.h \
+ kernel/fcntl.h
diff --git a/kernel/sysfile.o b/kernel/sysfile.o
new file mode 100644
index 0000000..db98c95
Binary files /dev/null and b/kernel/sysfile.o differ
diff --git a/kernel/sysinfo.h b/kernel/sysinfo.h
new file mode 100644
index 0000000..f35725e
--- /dev/null
+++ b/kernel/sysinfo.h
@@ -0,0 +1,10 @@
+#ifndef SYSINFO_H
+#define SYSINFO_H
+
+struct sysinfo {
+    uint64 freemem;     // Free memory in bytes
+    uint64 nproc;       // Number of processes not in UNUSED state
+    uint64 nopenfiles;  // Number of currently open files
+};
+
+#endif
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
new file mode 100644
index 0000000..9606b29
--- /dev/null
+++ b/kernel/sysproc.c
@@ -0,0 +1,133 @@
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "sysinfo.h"
+
+
+uint64
+sys_exit(void)
+{
+  int n;
+  argint(0, &n);
+  exit(n);
+  return 0;  // not reached
+}
+
+uint64
+sys_getpid(void)
+{
+  return myproc()->pid;
+}
+
+uint64
+sys_fork(void)
+{
+  return fork();
+}
+
+uint64
+sys_wait(void)
+{
+  uint64 p;
+  argaddr(0, &p);
+  return wait(p);
+}
+
+uint64
+sys_sbrk(void)
+{
+  uint64 addr;
+  int n;
+
+  argint(0, &n);
+  addr = myproc()->sz;
+  if(growproc(n) < 0)
+    return -1;
+  return addr;
+}
+
+uint64
+sys_sleep(void)
+{
+  int n;
+  uint ticks0;
+
+  argint(0, &n);
+  if(n < 0)
+    n = 0;
+  acquire(&tickslock);
+  ticks0 = ticks;
+  while(ticks - ticks0 < n){
+    if(killed(myproc())){
+      release(&tickslock);
+      return -1;
+    }
+    sleep(&ticks, &tickslock);
+  }
+  release(&tickslock);
+  return 0;
+}
+
+uint64
+sys_kill(void)
+{
+  int pid;
+
+  argint(0, &pid);
+  return kill(pid);
+}
+
+uint64 sys_hello(void)
+{
+  printf("Hello, world!\n");
+  return 0;
+}
+
+uint64 sys_trace(void) {
+    int mask;
+    argint(0, &mask);
+    myproc()->trace_mask = mask;  // Store trace mask in the process
+    return 0;
+}
+
+// return how many clock tick interrupts have occurred
+// since start.
+uint64
+sys_uptime(void)
+{
+  uint xticks;
+
+  acquire(&tickslock);
+  xticks = ticks;
+  release(&tickslock);
+  return xticks;
+}
+
+
+uint64 count_freemem(void);
+uint64 count_nproc(void);
+uint64 count_openfiles(void);
+
+uint64 sys_sysinfo(void) {
+    struct sysinfo info;
+    uint64 addr;
+    
+    // Just call argaddr() without checking return value
+    argaddr(0, &addr);
+
+    //Fill sysinfo struct
+    info.freemem = count_freemem();
+    info.nproc = count_nproc();
+    info.nopenfiles = count_openfiles();
+
+    // Copy struct to user space
+    if (copyout(myproc()->pagetable, addr, (char*)&info, sizeof(info)) < 0)
+        return -1;
+
+    return 0;
+}
+
diff --git a/kernel/sysproc.d b/kernel/sysproc.d
new file mode 100644
index 0000000..76169df
--- /dev/null
+++ b/kernel/sysproc.d
@@ -0,0 +1,3 @@
+kernel/sysproc.o: kernel/sysproc.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
+ kernel/proc.h kernel/sysinfo.h
diff --git a/kernel/sysproc.o b/kernel/sysproc.o
new file mode 100644
index 0000000..aa645a9
Binary files /dev/null and b/kernel/sysproc.o differ
diff --git a/kernel/trampoline.S b/kernel/trampoline.S
new file mode 100644
index 0000000..693f8a1
--- /dev/null
+++ b/kernel/trampoline.S
@@ -0,0 +1,151 @@
+        #
+        # low-level code to handle traps from user space into
+        # the kernel, and returns from kernel to user.
+        #
+        # the kernel maps the page holding this code
+        # at the same virtual address (TRAMPOLINE)
+        # in user and kernel space so that it continues
+        # to work when it switches page tables.
+        # kernel.ld causes this code to start at 
+        # a page boundary.
+        #
+
+#include "riscv.h"
+#include "memlayout.h"
+
+.section trampsec
+.globl trampoline
+.globl usertrap
+trampoline:
+.align 4
+.globl uservec
+uservec:    
+	#
+        # trap.c sets stvec to point here, so
+        # traps from user space start here,
+        # in supervisor mode, but with a
+        # user page table.
+        #
+
+        # save user a0 in sscratch so
+        # a0 can be used to get at TRAPFRAME.
+        csrw sscratch, a0
+
+        # each process has a separate p->trapframe memory area,
+        # but it's mapped to the same virtual address
+        # (TRAPFRAME) in every process's user page table.
+        li a0, TRAPFRAME
+        
+        # save the user registers in TRAPFRAME
+        sd ra, 40(a0)
+        sd sp, 48(a0)
+        sd gp, 56(a0)
+        sd tp, 64(a0)
+        sd t0, 72(a0)
+        sd t1, 80(a0)
+        sd t2, 88(a0)
+        sd s0, 96(a0)
+        sd s1, 104(a0)
+        sd a1, 120(a0)
+        sd a2, 128(a0)
+        sd a3, 136(a0)
+        sd a4, 144(a0)
+        sd a5, 152(a0)
+        sd a6, 160(a0)
+        sd a7, 168(a0)
+        sd s2, 176(a0)
+        sd s3, 184(a0)
+        sd s4, 192(a0)
+        sd s5, 200(a0)
+        sd s6, 208(a0)
+        sd s7, 216(a0)
+        sd s8, 224(a0)
+        sd s9, 232(a0)
+        sd s10, 240(a0)
+        sd s11, 248(a0)
+        sd t3, 256(a0)
+        sd t4, 264(a0)
+        sd t5, 272(a0)
+        sd t6, 280(a0)
+
+	# save the user a0 in p->trapframe->a0
+        csrr t0, sscratch
+        sd t0, 112(a0)
+
+        # initialize kernel stack pointer, from p->trapframe->kernel_sp
+        ld sp, 8(a0)
+
+        # make tp hold the current hartid, from p->trapframe->kernel_hartid
+        ld tp, 32(a0)
+
+        # load the address of usertrap(), from p->trapframe->kernel_trap
+        ld t0, 16(a0)
+
+        # fetch the kernel page table address, from p->trapframe->kernel_satp.
+        ld t1, 0(a0)
+
+        # wait for any previous memory operations to complete, so that
+        # they use the user page table.
+        sfence.vma zero, zero
+
+        # install the kernel page table.
+        csrw satp, t1
+
+        # flush now-stale user entries from the TLB.
+        sfence.vma zero, zero
+
+        # jump to usertrap(), which does not return
+        jr t0
+
+.globl userret
+userret:
+        # userret(pagetable)
+        # called by usertrapret() in trap.c to
+        # switch from kernel to user.
+        # a0: user page table, for satp.
+
+        # switch to the user page table.
+        sfence.vma zero, zero
+        csrw satp, a0
+        sfence.vma zero, zero
+
+        li a0, TRAPFRAME
+
+        # restore all but a0 from TRAPFRAME
+        ld ra, 40(a0)
+        ld sp, 48(a0)
+        ld gp, 56(a0)
+        ld tp, 64(a0)
+        ld t0, 72(a0)
+        ld t1, 80(a0)
+        ld t2, 88(a0)
+        ld s0, 96(a0)
+        ld s1, 104(a0)
+        ld a1, 120(a0)
+        ld a2, 128(a0)
+        ld a3, 136(a0)
+        ld a4, 144(a0)
+        ld a5, 152(a0)
+        ld a6, 160(a0)
+        ld a7, 168(a0)
+        ld s2, 176(a0)
+        ld s3, 184(a0)
+        ld s4, 192(a0)
+        ld s5, 200(a0)
+        ld s6, 208(a0)
+        ld s7, 216(a0)
+        ld s8, 224(a0)
+        ld s9, 232(a0)
+        ld s10, 240(a0)
+        ld s11, 248(a0)
+        ld t3, 256(a0)
+        ld t4, 264(a0)
+        ld t5, 272(a0)
+        ld t6, 280(a0)
+
+	# restore user a0
+        ld a0, 112(a0)
+        
+        # return to user mode and user pc.
+        # usertrapret() set up sstatus and sepc.
+        sret
diff --git a/kernel/trampoline.o b/kernel/trampoline.o
new file mode 100644
index 0000000..89ed5c3
Binary files /dev/null and b/kernel/trampoline.o differ
diff --git a/kernel/trap.c b/kernel/trap.c
new file mode 100644
index 0000000..d454a7d
--- /dev/null
+++ b/kernel/trap.c
@@ -0,0 +1,218 @@
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+struct spinlock tickslock;
+uint ticks;
+
+extern char trampoline[], uservec[], userret[];
+
+// in kernelvec.S, calls kerneltrap().
+void kernelvec();
+
+extern int devintr();
+
+void
+trapinit(void)
+{
+  initlock(&tickslock, "time");
+}
+
+// set up to take exceptions and traps while in the kernel.
+void
+trapinithart(void)
+{
+  w_stvec((uint64)kernelvec);
+}
+
+//
+// handle an interrupt, exception, or system call from user space.
+// called from trampoline.S
+//
+void
+usertrap(void)
+{
+  int which_dev = 0;
+
+  if((r_sstatus() & SSTATUS_SPP) != 0)
+    panic("usertrap: not from user mode");
+
+  // send interrupts and exceptions to kerneltrap(),
+  // since we're now in the kernel.
+  w_stvec((uint64)kernelvec);
+
+  struct proc *p = myproc();
+  
+  // save user program counter.
+  p->trapframe->epc = r_sepc();
+  
+  if(r_scause() == 8){
+    // system call
+
+    if(killed(p))
+      exit(-1);
+
+    // sepc points to the ecall instruction,
+    // but we want to return to the next instruction.
+    p->trapframe->epc += 4;
+
+    // an interrupt will change sepc, scause, and sstatus,
+    // so enable only now that we're done with those registers.
+    intr_on();
+
+    syscall();
+  } else if((which_dev = devintr()) != 0){
+    // ok
+  } else {
+    printf("usertrap(): unexpected scause 0x%lx pid=%d\n", r_scause(), p->pid);
+    printf("            sepc=0x%lx stval=0x%lx\n", r_sepc(), r_stval());
+    setkilled(p);
+  }
+
+  if(killed(p))
+    exit(-1);
+
+  // give up the CPU if this is a timer interrupt.
+  if(which_dev == 2)
+    yield();
+
+  usertrapret();
+}
+
+//
+// return to user space
+//
+void
+usertrapret(void)
+{
+  struct proc *p = myproc();
+
+  // we're about to switch the destination of traps from
+  // kerneltrap() to usertrap(), so turn off interrupts until
+  // we're back in user space, where usertrap() is correct.
+  intr_off();
+
+  // send syscalls, interrupts, and exceptions to uservec in trampoline.S
+  uint64 trampoline_uservec = TRAMPOLINE + (uservec - trampoline);
+  w_stvec(trampoline_uservec);
+
+  // set up trapframe values that uservec will need when
+  // the process next traps into the kernel.
+  p->trapframe->kernel_satp = r_satp();         // kernel page table
+  p->trapframe->kernel_sp = p->kstack + PGSIZE; // process's kernel stack
+  p->trapframe->kernel_trap = (uint64)usertrap;
+  p->trapframe->kernel_hartid = r_tp();         // hartid for cpuid()
+
+  // set up the registers that trampoline.S's sret will use
+  // to get to user space.
+  
+  // set S Previous Privilege mode to User.
+  unsigned long x = r_sstatus();
+  x &= ~SSTATUS_SPP; // clear SPP to 0 for user mode
+  x |= SSTATUS_SPIE; // enable interrupts in user mode
+  w_sstatus(x);
+
+  // set S Exception Program Counter to the saved user pc.
+  w_sepc(p->trapframe->epc);
+
+  // tell trampoline.S the user page table to switch to.
+  uint64 satp = MAKE_SATP(p->pagetable);
+
+  // jump to userret in trampoline.S at the top of memory, which 
+  // switches to the user page table, restores user registers,
+  // and switches to user mode with sret.
+  uint64 trampoline_userret = TRAMPOLINE + (userret - trampoline);
+  ((void (*)(uint64))trampoline_userret)(satp);
+}
+
+// interrupts and exceptions from kernel code go here via kernelvec,
+// on whatever the current kernel stack is.
+void 
+kerneltrap()
+{
+  int which_dev = 0;
+  uint64 sepc = r_sepc();
+  uint64 sstatus = r_sstatus();
+  uint64 scause = r_scause();
+  
+  if((sstatus & SSTATUS_SPP) == 0)
+    panic("kerneltrap: not from supervisor mode");
+  if(intr_get() != 0)
+    panic("kerneltrap: interrupts enabled");
+
+  if((which_dev = devintr()) == 0){
+    // interrupt or trap from an unknown source
+    printf("scause=0x%lx sepc=0x%lx stval=0x%lx\n", scause, r_sepc(), r_stval());
+    panic("kerneltrap");
+  }
+
+  // give up the CPU if this is a timer interrupt.
+  if(which_dev == 2 && myproc() != 0)
+    yield();
+
+  // the yield() may have caused some traps to occur,
+  // so restore trap registers for use by kernelvec.S's sepc instruction.
+  w_sepc(sepc);
+  w_sstatus(sstatus);
+}
+
+void
+clockintr()
+{
+  if(cpuid() == 0){
+    acquire(&tickslock);
+    ticks++;
+    wakeup(&ticks);
+    release(&tickslock);
+  }
+
+  // ask for the next timer interrupt. this also clears
+  // the interrupt request. 1000000 is about a tenth
+  // of a second.
+  w_stimecmp(r_time() + 1000000);
+}
+
+// check if it's an external interrupt or software interrupt,
+// and handle it.
+// returns 2 if timer interrupt,
+// 1 if other device,
+// 0 if not recognized.
+int
+devintr()
+{
+  uint64 scause = r_scause();
+
+  if(scause == 0x8000000000000009L){
+    // this is a supervisor external interrupt, via PLIC.
+
+    // irq indicates which device interrupted.
+    int irq = plic_claim();
+
+    if(irq == UART0_IRQ){
+      uartintr();
+    } else if(irq == VIRTIO0_IRQ){
+      virtio_disk_intr();
+    } else if(irq){
+      printf("unexpected interrupt irq=%d\n", irq);
+    }
+
+    // the PLIC allows each device to raise at most one
+    // interrupt at a time; tell the PLIC the device is
+    // now allowed to interrupt again.
+    if(irq)
+      plic_complete(irq);
+
+    return 1;
+  } else if(scause == 0x8000000000000005L){
+    // timer interrupt.
+    clockintr();
+    return 2;
+  } else {
+    return 0;
+  }
+}
+
diff --git a/kernel/trap.d b/kernel/trap.d
new file mode 100644
index 0000000..068f358
--- /dev/null
+++ b/kernel/trap.d
@@ -0,0 +1,3 @@
+kernel/trap.o: kernel/trap.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
diff --git a/kernel/trap.o b/kernel/trap.o
new file mode 100644
index 0000000..4eed692
Binary files /dev/null and b/kernel/trap.o differ
diff --git a/kernel/types.h b/kernel/types.h
new file mode 100644
index 0000000..ee73164
--- /dev/null
+++ b/kernel/types.h
@@ -0,0 +1,10 @@
+typedef unsigned int   uint;
+typedef unsigned short ushort;
+typedef unsigned char  uchar;
+
+typedef unsigned char uint8;
+typedef unsigned short uint16;
+typedef unsigned int  uint32;
+typedef unsigned long uint64;
+
+typedef uint64 pde_t;
diff --git a/kernel/uart.c b/kernel/uart.c
new file mode 100644
index 0000000..83846ad
--- /dev/null
+++ b/kernel/uart.c
@@ -0,0 +1,191 @@
+//
+// low-level driver routines for 16550a UART.
+//
+
+#include "types.h"
+#include "param.h"
+#include "memlayout.h"
+#include "riscv.h"
+#include "spinlock.h"
+#include "proc.h"
+#include "defs.h"
+
+// the UART control registers are memory-mapped
+// at address UART0. this macro returns the
+// address of one of the registers.
+#define Reg(reg) ((volatile unsigned char *)(UART0 + (reg)))
+
+// the UART control registers.
+// some have different meanings for
+// read vs write.
+// see http://byterunner.com/16550.html
+#define RHR 0                 // receive holding register (for input bytes)
+#define THR 0                 // transmit holding register (for output bytes)
+#define IER 1                 // interrupt enable register
+#define IER_RX_ENABLE (1<<0)
+#define IER_TX_ENABLE (1<<1)
+#define FCR 2                 // FIFO control register
+#define FCR_FIFO_ENABLE (1<<0)
+#define FCR_FIFO_CLEAR (3<<1) // clear the content of the two FIFOs
+#define ISR 2                 // interrupt status register
+#define LCR 3                 // line control register
+#define LCR_EIGHT_BITS (3<<0)
+#define LCR_BAUD_LATCH (1<<7) // special mode to set baud rate
+#define LSR 5                 // line status register
+#define LSR_RX_READY (1<<0)   // input is waiting to be read from RHR
+#define LSR_TX_IDLE (1<<5)    // THR can accept another character to send
+
+#define ReadReg(reg) (*(Reg(reg)))
+#define WriteReg(reg, v) (*(Reg(reg)) = (v))
+
+// the transmit output buffer.
+struct spinlock uart_tx_lock;
+#define UART_TX_BUF_SIZE 32
+char uart_tx_buf[UART_TX_BUF_SIZE];
+uint64 uart_tx_w; // write next to uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE]
+uint64 uart_tx_r; // read next from uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE]
+
+extern volatile int panicked; // from printf.c
+
+void uartstart();
+
+void
+uartinit(void)
+{
+  // disable interrupts.
+  WriteReg(IER, 0x00);
+
+  // special mode to set baud rate.
+  WriteReg(LCR, LCR_BAUD_LATCH);
+
+  // LSB for baud rate of 38.4K.
+  WriteReg(0, 0x03);
+
+  // MSB for baud rate of 38.4K.
+  WriteReg(1, 0x00);
+
+  // leave set-baud mode,
+  // and set word length to 8 bits, no parity.
+  WriteReg(LCR, LCR_EIGHT_BITS);
+
+  // reset and enable FIFOs.
+  WriteReg(FCR, FCR_FIFO_ENABLE | FCR_FIFO_CLEAR);
+
+  // enable transmit and receive interrupts.
+  WriteReg(IER, IER_TX_ENABLE | IER_RX_ENABLE);
+
+  initlock(&uart_tx_lock, "uart");
+}
+
+// add a character to the output buffer and tell the
+// UART to start sending if it isn't already.
+// blocks if the output buffer is full.
+// because it may block, it can't be called
+// from interrupts; it's only suitable for use
+// by write().
+void
+uartputc(int c)
+{
+  acquire(&uart_tx_lock);
+
+  if(panicked){
+    for(;;)
+      ;
+  }
+  while(uart_tx_w == uart_tx_r + UART_TX_BUF_SIZE){
+    // buffer is full.
+    // wait for uartstart() to open up space in the buffer.
+    sleep(&uart_tx_r, &uart_tx_lock);
+  }
+  uart_tx_buf[uart_tx_w % UART_TX_BUF_SIZE] = c;
+  uart_tx_w += 1;
+  uartstart();
+  release(&uart_tx_lock);
+}
+
+
+// alternate version of uartputc() that doesn't 
+// use interrupts, for use by kernel printf() and
+// to echo characters. it spins waiting for the uart's
+// output register to be empty.
+void
+uartputc_sync(int c)
+{
+  push_off();
+
+  if(panicked){
+    for(;;)
+      ;
+  }
+
+  // wait for Transmit Holding Empty to be set in LSR.
+  while((ReadReg(LSR) & LSR_TX_IDLE) == 0)
+    ;
+  WriteReg(THR, c);
+
+  pop_off();
+}
+
+// if the UART is idle, and a character is waiting
+// in the transmit buffer, send it.
+// caller must hold uart_tx_lock.
+// called from both the top- and bottom-half.
+void
+uartstart()
+{
+  while(1){
+    if(uart_tx_w == uart_tx_r){
+      // transmit buffer is empty.
+      ReadReg(ISR);
+      return;
+    }
+    
+    if((ReadReg(LSR) & LSR_TX_IDLE) == 0){
+      // the UART transmit holding register is full,
+      // so we cannot give it another byte.
+      // it will interrupt when it's ready for a new byte.
+      return;
+    }
+    
+    int c = uart_tx_buf[uart_tx_r % UART_TX_BUF_SIZE];
+    uart_tx_r += 1;
+    
+    // maybe uartputc() is waiting for space in the buffer.
+    wakeup(&uart_tx_r);
+    
+    WriteReg(THR, c);
+  }
+}
+
+// read one input character from the UART.
+// return -1 if none is waiting.
+int
+uartgetc(void)
+{
+  if(ReadReg(LSR) & 0x01){
+    // input data is ready.
+    return ReadReg(RHR);
+  } else {
+    return -1;
+  }
+}
+
+// handle a uart interrupt, raised because input has
+// arrived, or the uart is ready for more output, or
+// both. called from devintr().
+void
+uartintr(void)
+{
+  // read and process incoming characters.
+  while(1){
+    int c = uartgetc();
+    if(c == -1)
+      break;
+    consoleintr(c);
+  }
+
+  // send buffered characters.
+  acquire(&uart_tx_lock);
+  uartstart();
+  release(&uart_tx_lock);
+}
diff --git a/kernel/uart.d b/kernel/uart.d
new file mode 100644
index 0000000..da94ef2
--- /dev/null
+++ b/kernel/uart.d
@@ -0,0 +1,3 @@
+kernel/uart.o: kernel/uart.c kernel/types.h kernel/param.h \
+ kernel/memlayout.h kernel/riscv.h kernel/spinlock.h kernel/proc.h \
+ kernel/defs.h
diff --git a/kernel/uart.o b/kernel/uart.o
new file mode 100644
index 0000000..11b495a
Binary files /dev/null and b/kernel/uart.o differ
diff --git a/kernel/virtio.h b/kernel/virtio.h
new file mode 100644
index 0000000..96272b4
--- /dev/null
+++ b/kernel/virtio.h
@@ -0,0 +1,96 @@
+//
+// virtio device definitions.
+// for both the mmio interface, and virtio descriptors.
+// only tested with qemu.
+//
+// the virtio spec:
+// https://docs.oasis-open.org/virtio/virtio/v1.1/virtio-v1.1.pdf
+//
+
+// virtio mmio control registers, mapped starting at 0x10001000.
+// from qemu virtio_mmio.h
+#define VIRTIO_MMIO_MAGIC_VALUE		0x000 // 0x74726976
+#define VIRTIO_MMIO_VERSION		0x004 // version; should be 2
+#define VIRTIO_MMIO_DEVICE_ID		0x008 // device type; 1 is net, 2 is disk
+#define VIRTIO_MMIO_VENDOR_ID		0x00c // 0x554d4551
+#define VIRTIO_MMIO_DEVICE_FEATURES	0x010
+#define VIRTIO_MMIO_DRIVER_FEATURES	0x020
+#define VIRTIO_MMIO_QUEUE_SEL		0x030 // select queue, write-only
+#define VIRTIO_MMIO_QUEUE_NUM_MAX	0x034 // max size of current queue, read-only
+#define VIRTIO_MMIO_QUEUE_NUM		0x038 // size of current queue, write-only
+#define VIRTIO_MMIO_QUEUE_READY		0x044 // ready bit
+#define VIRTIO_MMIO_QUEUE_NOTIFY	0x050 // write-only
+#define VIRTIO_MMIO_INTERRUPT_STATUS	0x060 // read-only
+#define VIRTIO_MMIO_INTERRUPT_ACK	0x064 // write-only
+#define VIRTIO_MMIO_STATUS		0x070 // read/write
+#define VIRTIO_MMIO_QUEUE_DESC_LOW	0x080 // physical address for descriptor table, write-only
+#define VIRTIO_MMIO_QUEUE_DESC_HIGH	0x084
+#define VIRTIO_MMIO_DRIVER_DESC_LOW	0x090 // physical address for available ring, write-only
+#define VIRTIO_MMIO_DRIVER_DESC_HIGH	0x094
+#define VIRTIO_MMIO_DEVICE_DESC_LOW	0x0a0 // physical address for used ring, write-only
+#define VIRTIO_MMIO_DEVICE_DESC_HIGH	0x0a4
+
+// status register bits, from qemu virtio_config.h
+#define VIRTIO_CONFIG_S_ACKNOWLEDGE	1
+#define VIRTIO_CONFIG_S_DRIVER		2
+#define VIRTIO_CONFIG_S_DRIVER_OK	4
+#define VIRTIO_CONFIG_S_FEATURES_OK	8
+
+// device feature bits
+#define VIRTIO_BLK_F_RO              5	/* Disk is read-only */
+#define VIRTIO_BLK_F_SCSI            7	/* Supports scsi command passthru */
+#define VIRTIO_BLK_F_CONFIG_WCE     11	/* Writeback mode available in config */
+#define VIRTIO_BLK_F_MQ             12	/* support more than one vq */
+#define VIRTIO_F_ANY_LAYOUT         27
+#define VIRTIO_RING_F_INDIRECT_DESC 28
+#define VIRTIO_RING_F_EVENT_IDX     29
+
+// this many virtio descriptors.
+// must be a power of two.
+#define NUM 8
+
+// a single descriptor, from the spec.
+struct virtq_desc {
+  uint64 addr;
+  uint32 len;
+  uint16 flags;
+  uint16 next;
+};
+#define VRING_DESC_F_NEXT  1 // chained with another descriptor
+#define VRING_DESC_F_WRITE 2 // device writes (vs read)
+
+// the (entire) avail ring, from the spec.
+struct virtq_avail {
+  uint16 flags; // always zero
+  uint16 idx;   // driver will write ring[idx] next
+  uint16 ring[NUM]; // descriptor numbers of chain heads
+  uint16 unused;
+};
+
+// one entry in the "used" ring, with which the
+// device tells the driver about completed requests.
+struct virtq_used_elem {
+  uint32 id;   // index of start of completed descriptor chain
+  uint32 len;
+};
+
+struct virtq_used {
+  uint16 flags; // always zero
+  uint16 idx;   // device increments when it adds a ring[] entry
+  struct virtq_used_elem ring[NUM];
+};
+
+// these are specific to virtio block devices, e.g. disks,
+// described in Section 5.2 of the spec.
+
+#define VIRTIO_BLK_T_IN  0 // read the disk
+#define VIRTIO_BLK_T_OUT 1 // write the disk
+
+// the format of the first descriptor in a disk request.
+// to be followed by two more descriptors containing
+// the block, and a one-byte status.
+struct virtio_blk_req {
+  uint32 type; // VIRTIO_BLK_T_IN or ..._OUT
+  uint32 reserved;
+  uint64 sector;
+};
diff --git a/kernel/virtio_disk.c b/kernel/virtio_disk.c
new file mode 100644
index 0000000..ae6c164
--- /dev/null
+++ b/kernel/virtio_disk.c
@@ -0,0 +1,327 @@
+//
+// driver for qemu's virtio disk device.
+// uses qemu's mmio interface to virtio.
+//
+// qemu ... -drive file=fs.img,if=none,format=raw,id=x0 -device virtio-blk-device,drive=x0,bus=virtio-mmio-bus.0
+//
+
+#include "types.h"
+#include "riscv.h"
+#include "defs.h"
+#include "param.h"
+#include "memlayout.h"
+#include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "buf.h"
+#include "virtio.h"
+
+// the address of virtio mmio register r.
+#define R(r) ((volatile uint32 *)(VIRTIO0 + (r)))
+
+static struct disk {
+  // a set (not a ring) of DMA descriptors, with which the
+  // driver tells the device where to read and write individual
+  // disk operations. there are NUM descriptors.
+  // most commands consist of a "chain" (a linked list) of a couple of
+  // these descriptors.
+  struct virtq_desc *desc;
+
+  // a ring in which the driver writes descriptor numbers
+  // that the driver would like the device to process.  it only
+  // includes the head descriptor of each chain. the ring has
+  // NUM elements.
+  struct virtq_avail *avail;
+
+  // a ring in which the device writes descriptor numbers that
+  // the device has finished processing (just the head of each chain).
+  // there are NUM used ring entries.
+  struct virtq_used *used;
+
+  // our own book-keeping.
+  char free[NUM];  // is a descriptor free?
+  uint16 used_idx; // we've looked this far in used[2..NUM].
+
+  // track info about in-flight operations,
+  // for use when completion interrupt arrives.
+  // indexed by first descriptor index of chain.
+  struct {
+    struct buf *b;
+    char status;
+  } info[NUM];
+
+  // disk command headers.
+  // one-for-one with descriptors, for convenience.
+  struct virtio_blk_req ops[NUM];
+  
+  struct spinlock vdisk_lock;
+  
+} disk;
+
+void
+virtio_disk_init(void)
+{
+  uint32 status = 0;
+
+  initlock(&disk.vdisk_lock, "virtio_disk");
+
+  if(*R(VIRTIO_MMIO_MAGIC_VALUE) != 0x74726976 ||
+     *R(VIRTIO_MMIO_VERSION) != 2 ||
+     *R(VIRTIO_MMIO_DEVICE_ID) != 2 ||
+     *R(VIRTIO_MMIO_VENDOR_ID) != 0x554d4551){
+    panic("could not find virtio disk");
+  }
+  
+  // reset device
+  *R(VIRTIO_MMIO_STATUS) = status;
+
+  // set ACKNOWLEDGE status bit
+  status |= VIRTIO_CONFIG_S_ACKNOWLEDGE;
+  *R(VIRTIO_MMIO_STATUS) = status;
+
+  // set DRIVER status bit
+  status |= VIRTIO_CONFIG_S_DRIVER;
+  *R(VIRTIO_MMIO_STATUS) = status;
+
+  // negotiate features
+  uint64 features = *R(VIRTIO_MMIO_DEVICE_FEATURES);
+  features &= ~(1 << VIRTIO_BLK_F_RO);
+  features &= ~(1 << VIRTIO_BLK_F_SCSI);
+  features &= ~(1 << VIRTIO_BLK_F_CONFIG_WCE);
+  features &= ~(1 << VIRTIO_BLK_F_MQ);
+  features &= ~(1 << VIRTIO_F_ANY_LAYOUT);
+  features &= ~(1 << VIRTIO_RING_F_EVENT_IDX);
+  features &= ~(1 << VIRTIO_RING_F_INDIRECT_DESC);
+  *R(VIRTIO_MMIO_DRIVER_FEATURES) = features;
+
+  // tell device that feature negotiation is complete.
+  status |= VIRTIO_CONFIG_S_FEATURES_OK;
+  *R(VIRTIO_MMIO_STATUS) = status;
+
+  // re-read status to ensure FEATURES_OK is set.
+  status = *R(VIRTIO_MMIO_STATUS);
+  if(!(status & VIRTIO_CONFIG_S_FEATURES_OK))
+    panic("virtio disk FEATURES_OK unset");
+
+  // initialize queue 0.
+  *R(VIRTIO_MMIO_QUEUE_SEL) = 0;
+
+  // ensure queue 0 is not in use.
+  if(*R(VIRTIO_MMIO_QUEUE_READY))
+    panic("virtio disk should not be ready");
+
+  // check maximum queue size.
+  uint32 max = *R(VIRTIO_MMIO_QUEUE_NUM_MAX);
+  if(max == 0)
+    panic("virtio disk has no queue 0");
+  if(max < NUM)
+    panic("virtio disk max queue too short");
+
+  // allocate and zero queue memory.
+  disk.desc = kalloc();
+  disk.avail = kalloc();
+  disk.used = kalloc();
+  if(!disk.desc || !disk.avail || !disk.used)
+    panic("virtio disk kalloc");
+  memset(disk.desc, 0, PGSIZE);
+  memset(disk.avail, 0, PGSIZE);
+  memset(disk.used, 0, PGSIZE);
+
+  // set queue size.
+  *R(VIRTIO_MMIO_QUEUE_NUM) = NUM;
+
+  // write physical addresses.
+  *R(VIRTIO_MMIO_QUEUE_DESC_LOW) = (uint64)disk.desc;
+  *R(VIRTIO_MMIO_QUEUE_DESC_HIGH) = (uint64)disk.desc >> 32;
+  *R(VIRTIO_MMIO_DRIVER_DESC_LOW) = (uint64)disk.avail;
+  *R(VIRTIO_MMIO_DRIVER_DESC_HIGH) = (uint64)disk.avail >> 32;
+  *R(VIRTIO_MMIO_DEVICE_DESC_LOW) = (uint64)disk.used;
+  *R(VIRTIO_MMIO_DEVICE_DESC_HIGH) = (uint64)disk.used >> 32;
+
+  // queue is ready.
+  *R(VIRTIO_MMIO_QUEUE_READY) = 0x1;
+
+  // all NUM descriptors start out unused.
+  for(int i = 0; i < NUM; i++)
+    disk.free[i] = 1;
+
+  // tell device we're completely ready.
+  status |= VIRTIO_CONFIG_S_DRIVER_OK;
+  *R(VIRTIO_MMIO_STATUS) = status;
+
+  // plic.c and trap.c arrange for interrupts from VIRTIO0_IRQ.
+}
+
+// find a free descriptor, mark it non-free, return its index.
+static int
+alloc_desc()
+{
+  for(int i = 0; i < NUM; i++){
+    if(disk.free[i]){
+      disk.free[i] = 0;
+      return i;
+    }
+  }
+  return -1;
+}
+
+// mark a descriptor as free.
+static void
+free_desc(int i)
+{
+  if(i >= NUM)
+    panic("free_desc 1");
+  if(disk.free[i])
+    panic("free_desc 2");
+  disk.desc[i].addr = 0;
+  disk.desc[i].len = 0;
+  disk.desc[i].flags = 0;
+  disk.desc[i].next = 0;
+  disk.free[i] = 1;
+  wakeup(&disk.free[0]);
+}
+
+// free a chain of descriptors.
+static void
+free_chain(int i)
+{
+  while(1){
+    int flag = disk.desc[i].flags;
+    int nxt = disk.desc[i].next;
+    free_desc(i);
+    if(flag & VRING_DESC_F_NEXT)
+      i = nxt;
+    else
+      break;
+  }
+}
+
+// allocate three descriptors (they need not be contiguous).
+// disk transfers always use three descriptors.
+static int
+alloc3_desc(int *idx)
+{
+  for(int i = 0; i < 3; i++){
+    idx[i] = alloc_desc();
+    if(idx[i] < 0){
+      for(int j = 0; j < i; j++)
+        free_desc(idx[j]);
+      return -1;
+    }
+  }
+  return 0;
+}
+
+void
+virtio_disk_rw(struct buf *b, int write)
+{
+  uint64 sector = b->blockno * (BSIZE / 512);
+
+  acquire(&disk.vdisk_lock);
+
+  // the spec's Section 5.2 says that legacy block operations use
+  // three descriptors: one for type/reserved/sector, one for the
+  // data, one for a 1-byte status result.
+
+  // allocate the three descriptors.
+  int idx[3];
+  while(1){
+    if(alloc3_desc(idx) == 0) {
+      break;
+    }
+    sleep(&disk.free[0], &disk.vdisk_lock);
+  }
+
+  // format the three descriptors.
+  // qemu's virtio-blk.c reads them.
+
+  struct virtio_blk_req *buf0 = &disk.ops[idx[0]];
+
+  if(write)
+    buf0->type = VIRTIO_BLK_T_OUT; // write the disk
+  else
+    buf0->type = VIRTIO_BLK_T_IN; // read the disk
+  buf0->reserved = 0;
+  buf0->sector = sector;
+
+  disk.desc[idx[0]].addr = (uint64) buf0;
+  disk.desc[idx[0]].len = sizeof(struct virtio_blk_req);
+  disk.desc[idx[0]].flags = VRING_DESC_F_NEXT;
+  disk.desc[idx[0]].next = idx[1];
+
+  disk.desc[idx[1]].addr = (uint64) b->data;
+  disk.desc[idx[1]].len = BSIZE;
+  if(write)
+    disk.desc[idx[1]].flags = 0; // device reads b->data
+  else
+    disk.desc[idx[1]].flags = VRING_DESC_F_WRITE; // device writes b->data
+  disk.desc[idx[1]].flags |= VRING_DESC_F_NEXT;
+  disk.desc[idx[1]].next = idx[2];
+
+  disk.info[idx[0]].status = 0xff; // device writes 0 on success
+  disk.desc[idx[2]].addr = (uint64) &disk.info[idx[0]].status;
+  disk.desc[idx[2]].len = 1;
+  disk.desc[idx[2]].flags = VRING_DESC_F_WRITE; // device writes the status
+  disk.desc[idx[2]].next = 0;
+
+  // record struct buf for virtio_disk_intr().
+  b->disk = 1;
+  disk.info[idx[0]].b = b;
+
+  // tell the device the first index in our chain of descriptors.
+  disk.avail->ring[disk.avail->idx % NUM] = idx[0];
+
+  __sync_synchronize();
+
+  // tell the device another avail ring entry is available.
+  disk.avail->idx += 1; // not % NUM ...
+
+  __sync_synchronize();
+
+  *R(VIRTIO_MMIO_QUEUE_NOTIFY) = 0; // value is queue number
+
+  // Wait for virtio_disk_intr() to say request has finished.
+  while(b->disk == 1) {
+    sleep(b, &disk.vdisk_lock);
+  }
+
+  disk.info[idx[0]].b = 0;
+  free_chain(idx[0]);
+
+  release(&disk.vdisk_lock);
+}
+
+void
+virtio_disk_intr()
+{
+  acquire(&disk.vdisk_lock);
+
+  // the device won't raise another interrupt until we tell it
+  // we've seen this interrupt, which the following line does.
+  // this may race with the device writing new entries to
+  // the "used" ring, in which case we may process the new
+  // completion entries in this interrupt, and have nothing to do
+  // in the next interrupt, which is harmless.
+  *R(VIRTIO_MMIO_INTERRUPT_ACK) = *R(VIRTIO_MMIO_INTERRUPT_STATUS) & 0x3;
+
+  __sync_synchronize();
+
+  // the device increments disk.used->idx when it
+  // adds an entry to the used ring.
+
+  while(disk.used_idx != disk.used->idx){
+    __sync_synchronize();
+    int id = disk.used->ring[disk.used_idx % NUM].id;
+
+    if(disk.info[id].status != 0)
+      panic("virtio_disk_intr status");
+
+    struct buf *b = disk.info[id].b;
+    b->disk = 0;   // disk is done with buf
+    wakeup(b);
+
+    disk.used_idx += 1;
+  }
+
+  release(&disk.vdisk_lock);
+}
diff --git a/kernel/virtio_disk.d b/kernel/virtio_disk.d
new file mode 100644
index 0000000..1ed6176
--- /dev/null
+++ b/kernel/virtio_disk.d
@@ -0,0 +1,3 @@
+kernel/virtio_disk.o: kernel/virtio_disk.c kernel/types.h kernel/riscv.h \
+ kernel/defs.h kernel/param.h kernel/memlayout.h kernel/spinlock.h \
+ kernel/sleeplock.h kernel/fs.h kernel/buf.h kernel/virtio.h
diff --git a/kernel/virtio_disk.o b/kernel/virtio_disk.o
new file mode 100644
index 0000000..7e8bc35
Binary files /dev/null and b/kernel/virtio_disk.o differ
diff --git a/kernel/vm.c b/kernel/vm.c
new file mode 100644
index 0000000..62421a2
--- /dev/null
+++ b/kernel/vm.c
@@ -0,0 +1,451 @@
+#include "param.h"
+#include "types.h"
+#include "memlayout.h"
+#include "elf.h"
+#include "riscv.h"
+#include "defs.h"
+#include "fs.h"
+
+/*
+ * the kernel's page table.
+ */
+pagetable_t kernel_pagetable;
+
+extern char etext[];  // kernel.ld sets this to end of kernel code.
+
+extern char trampoline[]; // trampoline.S
+
+// Make a direct-map page table for the kernel.
+pagetable_t
+kvmmake(void)
+{
+  pagetable_t kpgtbl;
+
+  kpgtbl = (pagetable_t) kalloc();
+  memset(kpgtbl, 0, PGSIZE);
+
+  // uart registers
+  kvmmap(kpgtbl, UART0, UART0, PGSIZE, PTE_R | PTE_W);
+
+  // virtio mmio disk interface
+  kvmmap(kpgtbl, VIRTIO0, VIRTIO0, PGSIZE, PTE_R | PTE_W);
+
+  // PLIC
+  kvmmap(kpgtbl, PLIC, PLIC, 0x4000000, PTE_R | PTE_W);
+
+  // map kernel text executable and read-only.
+  kvmmap(kpgtbl, KERNBASE, KERNBASE, (uint64)etext-KERNBASE, PTE_R | PTE_X);
+
+  // map kernel data and the physical RAM we'll make use of.
+  kvmmap(kpgtbl, (uint64)etext, (uint64)etext, PHYSTOP-(uint64)etext, PTE_R | PTE_W);
+
+  // map the trampoline for trap entry/exit to
+  // the highest virtual address in the kernel.
+  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);
+
+  // allocate and map a kernel stack for each process.
+  proc_mapstacks(kpgtbl);
+  
+  return kpgtbl;
+}
+
+// Initialize the one kernel_pagetable
+void
+kvminit(void)
+{
+  kernel_pagetable = kvmmake();
+}
+
+// Switch h/w page table register to the kernel's page table,
+// and enable paging.
+void
+kvminithart()
+{
+  // wait for any previous writes to the page table memory to finish.
+  sfence_vma();
+
+  w_satp(MAKE_SATP(kernel_pagetable));
+
+  // flush stale entries from the TLB.
+  sfence_vma();
+}
+
+// Return the address of the PTE in page table pagetable
+// that corresponds to virtual address va.  If alloc!=0,
+// create any required page-table pages.
+//
+// The risc-v Sv39 scheme has three levels of page-table
+// pages. A page-table page contains 512 64-bit PTEs.
+// A 64-bit virtual address is split into five fields:
+//   39..63 -- must be zero.
+//   30..38 -- 9 bits of level-2 index.
+//   21..29 -- 9 bits of level-1 index.
+//   12..20 -- 9 bits of level-0 index.
+//    0..11 -- 12 bits of byte offset within the page.
+pte_t *
+walk(pagetable_t pagetable, uint64 va, int alloc)
+{
+  if(va >= MAXVA)
+    panic("walk");
+
+  for(int level = 2; level > 0; level--) {
+    pte_t *pte = &pagetable[PX(level, va)];
+    if(*pte & PTE_V) {
+      pagetable = (pagetable_t)PTE2PA(*pte);
+    } else {
+      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
+        return 0;
+      memset(pagetable, 0, PGSIZE);
+      *pte = PA2PTE(pagetable) | PTE_V;
+    }
+  }
+  return &pagetable[PX(0, va)];
+}
+
+// Look up a virtual address, return the physical address,
+// or 0 if not mapped.
+// Can only be used to look up user pages.
+uint64
+walkaddr(pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  uint64 pa;
+
+  if(va >= MAXVA)
+    return 0;
+
+  pte = walk(pagetable, va, 0);
+  if(pte == 0)
+    return 0;
+  if((*pte & PTE_V) == 0)
+    return 0;
+  if((*pte & PTE_U) == 0)
+    return 0;
+  pa = PTE2PA(*pte);
+  return pa;
+}
+
+// add a mapping to the kernel page table.
+// only used when booting.
+// does not flush TLB or enable paging.
+void
+kvmmap(pagetable_t kpgtbl, uint64 va, uint64 pa, uint64 sz, int perm)
+{
+  if(mappages(kpgtbl, va, sz, pa, perm) != 0)
+    panic("kvmmap");
+}
+
+// Create PTEs for virtual addresses starting at va that refer to
+// physical addresses starting at pa.
+// va and size MUST be page-aligned.
+// Returns 0 on success, -1 if walk() couldn't
+// allocate a needed page-table page.
+int
+mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
+{
+  uint64 a, last;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    panic("mappages: va not aligned");
+
+  if((size % PGSIZE) != 0)
+    panic("mappages: size not aligned");
+
+  if(size == 0)
+    panic("mappages: size");
+  
+  a = va;
+  last = va + size - PGSIZE;
+  for(;;){
+    if((pte = walk(pagetable, a, 1)) == 0)
+      return -1;
+    if(*pte & PTE_V)
+      panic("mappages: remap");
+    *pte = PA2PTE(pa) | perm | PTE_V;
+    if(a == last)
+      break;
+    a += PGSIZE;
+    pa += PGSIZE;
+  }
+  return 0;
+}
+
+// Remove npages of mappings starting from va. va must be
+// page-aligned. The mappings must exist.
+// Optionally free the physical memory.
+void
+uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
+{
+  uint64 a;
+  pte_t *pte;
+
+  if((va % PGSIZE) != 0)
+    panic("uvmunmap: not aligned");
+
+  for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
+    if((pte = walk(pagetable, a, 0)) == 0)
+      panic("uvmunmap: walk");
+    if((*pte & PTE_V) == 0)
+      panic("uvmunmap: not mapped");
+    if(PTE_FLAGS(*pte) == PTE_V)
+      panic("uvmunmap: not a leaf");
+    if(do_free){
+      uint64 pa = PTE2PA(*pte);
+      kfree((void*)pa);
+    }
+    *pte = 0;
+  }
+}
+
+// create an empty user page table.
+// returns 0 if out of memory.
+pagetable_t
+uvmcreate()
+{
+  pagetable_t pagetable;
+  pagetable = (pagetable_t) kalloc();
+  if(pagetable == 0)
+    return 0;
+  memset(pagetable, 0, PGSIZE);
+  return pagetable;
+}
+
+// Load the user initcode into address 0 of pagetable,
+// for the very first process.
+// sz must be less than a page.
+void
+uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
+{
+  char *mem;
+
+  if(sz >= PGSIZE)
+    panic("uvmfirst: more than a page");
+  mem = kalloc();
+  memset(mem, 0, PGSIZE);
+  mappages(pagetable, 0, PGSIZE, (uint64)mem, PTE_W|PTE_R|PTE_X|PTE_U);
+  memmove(mem, src, sz);
+}
+
+// Allocate PTEs and physical memory to grow process from oldsz to
+// newsz, which need not be page aligned.  Returns new size or 0 on error.
+uint64
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+{
+  char *mem;
+  uint64 a;
+
+  if(newsz < oldsz)
+    return oldsz;
+
+  oldsz = PGROUNDUP(oldsz);
+  for(a = oldsz; a < newsz; a += PGSIZE){
+    mem = kalloc();
+    if(mem == 0){
+      uvmdealloc(pagetable, a, oldsz);
+      return 0;
+    }
+    memset(mem, 0, PGSIZE);
+    if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
+      kfree(mem);
+      uvmdealloc(pagetable, a, oldsz);
+      return 0;
+    }
+  }
+  return newsz;
+}
+
+// Deallocate user pages to bring the process size from oldsz to
+// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
+// need to be less than oldsz.  oldsz can be larger than the actual
+// process size.  Returns the new process size.
+uint64
+uvmdealloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz)
+{
+  if(newsz >= oldsz)
+    return oldsz;
+
+  if(PGROUNDUP(newsz) < PGROUNDUP(oldsz)){
+    int npages = (PGROUNDUP(oldsz) - PGROUNDUP(newsz)) / PGSIZE;
+    uvmunmap(pagetable, PGROUNDUP(newsz), npages, 1);
+  }
+
+  return newsz;
+}
+
+// Recursively free page-table pages.
+// All leaf mappings must already have been removed.
+void
+freewalk(pagetable_t pagetable)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if((pte & PTE_V) && (pte & (PTE_R|PTE_W|PTE_X)) == 0){
+      // this PTE points to a lower-level page table.
+      uint64 child = PTE2PA(pte);
+      freewalk((pagetable_t)child);
+      pagetable[i] = 0;
+    } else if(pte & PTE_V){
+      panic("freewalk: leaf");
+    }
+  }
+  kfree((void*)pagetable);
+}
+
+// Free user memory pages,
+// then free page-table pages.
+void
+uvmfree(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 1);
+  freewalk(pagetable);
+}
+
+// Given a parent process's page table, copy
+// its memory into a child's page table.
+// Copies both the page table and the
+// physical memory.
+// returns 0 on success, -1 on failure.
+// frees any allocated pages on failure.
+int
+uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+{
+  pte_t *pte;
+  uint64 pa, i;
+  uint flags;
+  char *mem;
+
+  for(i = 0; i < sz; i += PGSIZE){
+    if((pte = walk(old, i, 0)) == 0)
+      panic("uvmcopy: pte should exist");
+    if((*pte & PTE_V) == 0)
+      panic("uvmcopy: page not present");
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto err;
+    memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+      kfree(mem);
+      goto err;
+    }
+  }
+  return 0;
+
+ err:
+  uvmunmap(new, 0, i / PGSIZE, 1);
+  return -1;
+}
+
+// mark a PTE invalid for user access.
+// used by exec for the user stack guard page.
+void
+uvmclear(pagetable_t pagetable, uint64 va)
+{
+  pte_t *pte;
+  
+  pte = walk(pagetable, va, 0);
+  if(pte == 0)
+    panic("uvmclear");
+  *pte &= ~PTE_U;
+}
+
+// Copy from kernel to user.
+// Copy len bytes from src to virtual address dstva in a given page table.
+// Return 0 on success, -1 on error.
+int
+copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+{
+  uint64 n, va0, pa0;
+  pte_t *pte;
+
+  while(len > 0){
+    va0 = PGROUNDDOWN(dstva);
+    if(va0 >= MAXVA)
+      return -1;
+    pte = walk(pagetable, va0, 0);
+    if(pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0 ||
+       (*pte & PTE_W) == 0)
+      return -1;
+    pa0 = PTE2PA(*pte);
+    n = PGSIZE - (dstva - va0);
+    if(n > len)
+      n = len;
+    memmove((void *)(pa0 + (dstva - va0)), src, n);
+
+    len -= n;
+    src += n;
+    dstva = va0 + PGSIZE;
+  }
+  return 0;
+}
+
+// Copy from user to kernel.
+// Copy len bytes to dst from virtual address srcva in a given page table.
+// Return 0 on success, -1 on error.
+int
+copyin(pagetable_t pagetable, char *dst, uint64 srcva, uint64 len)
+{
+  uint64 n, va0, pa0;
+
+  while(len > 0){
+    va0 = PGROUNDDOWN(srcva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    if(n > len)
+      n = len;
+    memmove(dst, (void *)(pa0 + (srcva - va0)), n);
+
+    len -= n;
+    dst += n;
+    srcva = va0 + PGSIZE;
+  }
+  return 0;
+}
+
+// Copy a null-terminated string from user to kernel.
+// Copy bytes to dst from virtual address srcva in a given page table,
+// until a '\0', or max.
+// Return 0 on success, -1 on error.
+int
+copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
+{
+  uint64 n, va0, pa0;
+  int got_null = 0;
+
+  while(got_null == 0 && max > 0){
+    va0 = PGROUNDDOWN(srcva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+    n = PGSIZE - (srcva - va0);
+    if(n > max)
+      n = max;
+
+    char *p = (char *) (pa0 + (srcva - va0));
+    while(n > 0){
+      if(*p == '\0'){
+        *dst = '\0';
+        got_null = 1;
+        break;
+      } else {
+        *dst = *p;
+      }
+      --n;
+      --max;
+      p++;
+      dst++;
+    }
+
+    srcva = va0 + PGSIZE;
+  }
+  if(got_null){
+    return 0;
+  } else {
+    return -1;
+  }
+}
diff --git a/kernel/vm.d b/kernel/vm.d
new file mode 100644
index 0000000..ca55ce8
--- /dev/null
+++ b/kernel/vm.d
@@ -0,0 +1,2 @@
+kernel/vm.o: kernel/vm.c kernel/param.h kernel/types.h kernel/memlayout.h \
+ kernel/elf.h kernel/riscv.h kernel/defs.h kernel/fs.h
diff --git a/kernel/vm.o b/kernel/vm.o
new file mode 100644
index 0000000..6a3431e
Binary files /dev/null and b/kernel/vm.o differ
diff --git a/mkfs/mkfs b/mkfs/mkfs
new file mode 100755
index 0000000..9404401
Binary files /dev/null and b/mkfs/mkfs differ
diff --git a/mkfs/mkfs.c b/mkfs/mkfs.c
new file mode 100644
index 0000000..f39983d
--- /dev/null
+++ b/mkfs/mkfs.c
@@ -0,0 +1,303 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <assert.h>
+
+#define stat xv6_stat  // avoid clash with host struct stat
+#include "kernel/types.h"
+#include "kernel/fs.h"
+#include "kernel/stat.h"
+#include "kernel/param.h"
+
+#ifndef static_assert
+#define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
+#endif
+
+#define NINODES 200
+
+// Disk layout:
+// [ boot block | sb block | log | inode blocks | free bit map | data blocks ]
+
+int nbitmap = FSSIZE/BPB + 1;
+int ninodeblocks = NINODES / IPB + 1;
+int nlog = LOGSIZE;
+int nmeta;    // Number of meta blocks (boot, sb, nlog, inode, bitmap)
+int nblocks;  // Number of data blocks
+
+int fsfd;
+struct superblock sb;
+char zeroes[BSIZE];
+uint freeinode = 1;
+uint freeblock;
+
+
+void balloc(int);
+void wsect(uint, void*);
+void winode(uint, struct dinode*);
+void rinode(uint inum, struct dinode *ip);
+void rsect(uint sec, void *buf);
+uint ialloc(ushort type);
+void iappend(uint inum, void *p, int n);
+void die(const char *);
+
+// convert to riscv byte order
+ushort
+xshort(ushort x)
+{
+  ushort y;
+  uchar *a = (uchar*)&y;
+  a[0] = x;
+  a[1] = x >> 8;
+  return y;
+}
+
+uint
+xint(uint x)
+{
+  uint y;
+  uchar *a = (uchar*)&y;
+  a[0] = x;
+  a[1] = x >> 8;
+  a[2] = x >> 16;
+  a[3] = x >> 24;
+  return y;
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i, cc, fd;
+  uint rootino, inum, off;
+  struct dirent de;
+  char buf[BSIZE];
+  struct dinode din;
+
+
+  static_assert(sizeof(int) == 4, "Integers must be 4 bytes!");
+
+  if(argc < 2){
+    fprintf(stderr, "Usage: mkfs fs.img files...\n");
+    exit(1);
+  }
+
+  assert((BSIZE % sizeof(struct dinode)) == 0);
+  assert((BSIZE % sizeof(struct dirent)) == 0);
+
+  fsfd = open(argv[1], O_RDWR|O_CREAT|O_TRUNC, 0666);
+  if(fsfd < 0)
+    die(argv[1]);
+
+  // 1 fs block = 1 disk sector
+  nmeta = 2 + nlog + ninodeblocks + nbitmap;
+  nblocks = FSSIZE - nmeta;
+
+  sb.magic = FSMAGIC;
+  sb.size = xint(FSSIZE);
+  sb.nblocks = xint(nblocks);
+  sb.ninodes = xint(NINODES);
+  sb.nlog = xint(nlog);
+  sb.logstart = xint(2);
+  sb.inodestart = xint(2+nlog);
+  sb.bmapstart = xint(2+nlog+ninodeblocks);
+
+  printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
+         nmeta, nlog, ninodeblocks, nbitmap, nblocks, FSSIZE);
+
+  freeblock = nmeta;     // the first free block that we can allocate
+
+  for(i = 0; i < FSSIZE; i++)
+    wsect(i, zeroes);
+
+  memset(buf, 0, sizeof(buf));
+  memmove(buf, &sb, sizeof(sb));
+  wsect(1, buf);
+
+  rootino = ialloc(T_DIR);
+  assert(rootino == ROOTINO);
+
+  bzero(&de, sizeof(de));
+  de.inum = xshort(rootino);
+  strcpy(de.name, ".");
+  iappend(rootino, &de, sizeof(de));
+
+  bzero(&de, sizeof(de));
+  de.inum = xshort(rootino);
+  strcpy(de.name, "..");
+  iappend(rootino, &de, sizeof(de));
+
+  for(i = 2; i < argc; i++){
+    // get rid of "user/"
+    char *shortname;
+    if(strncmp(argv[i], "user/", 5) == 0)
+      shortname = argv[i] + 5;
+    else
+      shortname = argv[i];
+    
+    assert(index(shortname, '/') == 0);
+
+    if((fd = open(argv[i], 0)) < 0)
+      die(argv[i]);
+
+    // Skip leading _ in name when writing to file system.
+    // The binaries are named _rm, _cat, etc. to keep the
+    // build operating system from trying to execute them
+    // in place of system binaries like rm and cat.
+    if(shortname[0] == '_')
+      shortname += 1;
+
+    assert(strlen(shortname) <= DIRSIZ);
+    
+    inum = ialloc(T_FILE);
+
+    bzero(&de, sizeof(de));
+    de.inum = xshort(inum);
+    strncpy(de.name, shortname, DIRSIZ);
+    iappend(rootino, &de, sizeof(de));
+
+    while((cc = read(fd, buf, sizeof(buf))) > 0)
+      iappend(inum, buf, cc);
+
+    close(fd);
+  }
+
+  // fix size of root inode dir
+  rinode(rootino, &din);
+  off = xint(din.size);
+  off = ((off/BSIZE) + 1) * BSIZE;
+  din.size = xint(off);
+  winode(rootino, &din);
+
+  balloc(freeblock);
+
+  exit(0);
+}
+
+void
+wsect(uint sec, void *buf)
+{
+  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE)
+    die("lseek");
+  if(write(fsfd, buf, BSIZE) != BSIZE)
+    die("write");
+}
+
+void
+winode(uint inum, struct dinode *ip)
+{
+  char buf[BSIZE];
+  uint bn;
+  struct dinode *dip;
+
+  bn = IBLOCK(inum, sb);
+  rsect(bn, buf);
+  dip = ((struct dinode*)buf) + (inum % IPB);
+  *dip = *ip;
+  wsect(bn, buf);
+}
+
+void
+rinode(uint inum, struct dinode *ip)
+{
+  char buf[BSIZE];
+  uint bn;
+  struct dinode *dip;
+
+  bn = IBLOCK(inum, sb);
+  rsect(bn, buf);
+  dip = ((struct dinode*)buf) + (inum % IPB);
+  *ip = *dip;
+}
+
+void
+rsect(uint sec, void *buf)
+{
+  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE)
+    die("lseek");
+  if(read(fsfd, buf, BSIZE) != BSIZE)
+    die("read");
+}
+
+uint
+ialloc(ushort type)
+{
+  uint inum = freeinode++;
+  struct dinode din;
+
+  bzero(&din, sizeof(din));
+  din.type = xshort(type);
+  din.nlink = xshort(1);
+  din.size = xint(0);
+  winode(inum, &din);
+  return inum;
+}
+
+void
+balloc(int used)
+{
+  uchar buf[BSIZE];
+  int i;
+
+  printf("balloc: first %d blocks have been allocated\n", used);
+  assert(used < BPB);
+  bzero(buf, BSIZE);
+  for(i = 0; i < used; i++){
+    buf[i/8] = buf[i/8] | (0x1 << (i%8));
+  }
+  printf("balloc: write bitmap block at sector %d\n", sb.bmapstart);
+  wsect(sb.bmapstart, buf);
+}
+
+#define min(a, b) ((a) < (b) ? (a) : (b))
+
+void
+iappend(uint inum, void *xp, int n)
+{
+  char *p = (char*)xp;
+  uint fbn, off, n1;
+  struct dinode din;
+  char buf[BSIZE];
+  uint indirect[NINDIRECT];
+  uint x;
+
+  rinode(inum, &din);
+  off = xint(din.size);
+  // printf("append inum %d at off %d sz %d\n", inum, off, n);
+  while(n > 0){
+    fbn = off / BSIZE;
+    assert(fbn < MAXFILE);
+    if(fbn < NDIRECT){
+      if(xint(din.addrs[fbn]) == 0){
+        din.addrs[fbn] = xint(freeblock++);
+      }
+      x = xint(din.addrs[fbn]);
+    } else {
+      if(xint(din.addrs[NDIRECT]) == 0){
+        din.addrs[NDIRECT] = xint(freeblock++);
+      }
+      rsect(xint(din.addrs[NDIRECT]), (char*)indirect);
+      if(indirect[fbn - NDIRECT] == 0){
+        indirect[fbn - NDIRECT] = xint(freeblock++);
+        wsect(xint(din.addrs[NDIRECT]), (char*)indirect);
+      }
+      x = xint(indirect[fbn-NDIRECT]);
+    }
+    n1 = min(n, (fbn + 1) * BSIZE - off);
+    rsect(x, buf);
+    bcopy(p, buf + off - (fbn * BSIZE), n1);
+    wsect(x, buf);
+    n -= n1;
+    off += n1;
+    p += n1;
+  }
+  din.size = xint(off);
+  winode(inum, &din);
+}
+
+void
+die(const char *s)
+{
+  perror(s);
+  exit(1);
+}
diff --git a/user/_cat b/user/_cat
new file mode 100755
index 0000000..2ebb6fb
Binary files /dev/null and b/user/_cat differ
diff --git a/user/_echo b/user/_echo
new file mode 100755
index 0000000..9c612e3
Binary files /dev/null and b/user/_echo differ
diff --git a/user/_forktest b/user/_forktest
new file mode 100755
index 0000000..8f4d92c
Binary files /dev/null and b/user/_forktest differ
diff --git a/user/_grep b/user/_grep
new file mode 100755
index 0000000..e3c7fb3
Binary files /dev/null and b/user/_grep differ
diff --git a/user/_grind b/user/_grind
new file mode 100755
index 0000000..4bf4964
Binary files /dev/null and b/user/_grind differ
diff --git a/user/_init b/user/_init
new file mode 100755
index 0000000..927ff21
Binary files /dev/null and b/user/_init differ
diff --git a/user/_kill b/user/_kill
new file mode 100755
index 0000000..42852d5
Binary files /dev/null and b/user/_kill differ
diff --git a/user/_ln b/user/_ln
new file mode 100755
index 0000000..cd72bf7
Binary files /dev/null and b/user/_ln differ
diff --git a/user/_ls b/user/_ls
new file mode 100755
index 0000000..c9309e5
Binary files /dev/null and b/user/_ls differ
diff --git a/user/_mkdir b/user/_mkdir
new file mode 100755
index 0000000..bba3464
Binary files /dev/null and b/user/_mkdir differ
diff --git a/user/_rm b/user/_rm
new file mode 100755
index 0000000..58496d9
Binary files /dev/null and b/user/_rm differ
diff --git a/user/_sh b/user/_sh
new file mode 100755
index 0000000..c7bd425
Binary files /dev/null and b/user/_sh differ
diff --git a/user/_stressfs b/user/_stressfs
new file mode 100755
index 0000000..004cb51
Binary files /dev/null and b/user/_stressfs differ
diff --git a/user/_usertests b/user/_usertests
new file mode 100755
index 0000000..535708a
Binary files /dev/null and b/user/_usertests differ
diff --git a/user/_wc b/user/_wc
new file mode 100755
index 0000000..1eb351a
Binary files /dev/null and b/user/_wc differ
diff --git a/user/_zombie b/user/_zombie
new file mode 100755
index 0000000..20c0d79
Binary files /dev/null and b/user/_zombie differ
diff --git a/user/cat.asm b/user/cat.asm
new file mode 100644
index 0000000..8d907c2
--- /dev/null
+++ b/user/cat.asm
@@ -0,0 +1,1568 @@
+
+user/_cat:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <cat>:
+
+char buf[512];
+
+void
+cat(int fd)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	1800                	addi	s0,sp,48
+   e:	89aa                	mv	s3,a0
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  10:	00001917          	auipc	s2,0x1
+  14:	00090913          	mv	s2,s2
+  18:	20000613          	li	a2,512
+  1c:	85ca                	mv	a1,s2
+  1e:	854e                	mv	a0,s3
+  20:	34c000ef          	jal	36c <read>
+  24:	84aa                	mv	s1,a0
+  26:	02a05363          	blez	a0,4c <cat+0x4c>
+    if (write(1, buf, n) != n) {
+  2a:	8626                	mv	a2,s1
+  2c:	85ca                	mv	a1,s2
+  2e:	4505                	li	a0,1
+  30:	344000ef          	jal	374 <write>
+  34:	fe9502e3          	beq	a0,s1,18 <cat+0x18>
+      fprintf(2, "cat: write error\n");
+  38:	00001597          	auipc	a1,0x1
+  3c:	8f858593          	addi	a1,a1,-1800 # 930 <malloc+0xf8>
+  40:	4509                	li	a0,2
+  42:	718000ef          	jal	75a <fprintf>
+      exit(1);
+  46:	4505                	li	a0,1
+  48:	30c000ef          	jal	354 <exit>
+    }
+  }
+  if(n < 0){
+  4c:	00054963          	bltz	a0,5e <cat+0x5e>
+    fprintf(2, "cat: read error\n");
+    exit(1);
+  }
+}
+  50:	70a2                	ld	ra,40(sp)
+  52:	7402                	ld	s0,32(sp)
+  54:	64e2                	ld	s1,24(sp)
+  56:	6942                	ld	s2,16(sp)
+  58:	69a2                	ld	s3,8(sp)
+  5a:	6145                	addi	sp,sp,48
+  5c:	8082                	ret
+    fprintf(2, "cat: read error\n");
+  5e:	00001597          	auipc	a1,0x1
+  62:	8ea58593          	addi	a1,a1,-1814 # 948 <malloc+0x110>
+  66:	4509                	li	a0,2
+  68:	6f2000ef          	jal	75a <fprintf>
+    exit(1);
+  6c:	4505                	li	a0,1
+  6e:	2e6000ef          	jal	354 <exit>
+
+0000000000000072 <main>:
+
+int
+main(int argc, char *argv[])
+{
+  72:	7179                	addi	sp,sp,-48
+  74:	f406                	sd	ra,40(sp)
+  76:	f022                	sd	s0,32(sp)
+  78:	1800                	addi	s0,sp,48
+  int fd, i;
+
+  if(argc <= 1){
+  7a:	4785                	li	a5,1
+  7c:	04a7d263          	bge	a5,a0,c0 <main+0x4e>
+  80:	ec26                	sd	s1,24(sp)
+  82:	e84a                	sd	s2,16(sp)
+  84:	e44e                	sd	s3,8(sp)
+  86:	00858913          	addi	s2,a1,8
+  8a:	ffe5099b          	addiw	s3,a0,-2
+  8e:	02099793          	slli	a5,s3,0x20
+  92:	01d7d993          	srli	s3,a5,0x1d
+  96:	05c1                	addi	a1,a1,16
+  98:	99ae                	add	s3,s3,a1
+    cat(0);
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+  9a:	4581                	li	a1,0
+  9c:	00093503          	ld	a0,0(s2) # 1010 <buf>
+  a0:	2f4000ef          	jal	394 <open>
+  a4:	84aa                	mv	s1,a0
+  a6:	02054663          	bltz	a0,d2 <main+0x60>
+      fprintf(2, "cat: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    cat(fd);
+  aa:	f57ff0ef          	jal	0 <cat>
+    close(fd);
+  ae:	8526                	mv	a0,s1
+  b0:	2cc000ef          	jal	37c <close>
+  for(i = 1; i < argc; i++){
+  b4:	0921                	addi	s2,s2,8
+  b6:	ff3912e3          	bne	s2,s3,9a <main+0x28>
+  }
+  exit(0);
+  ba:	4501                	li	a0,0
+  bc:	298000ef          	jal	354 <exit>
+  c0:	ec26                	sd	s1,24(sp)
+  c2:	e84a                	sd	s2,16(sp)
+  c4:	e44e                	sd	s3,8(sp)
+    cat(0);
+  c6:	4501                	li	a0,0
+  c8:	f39ff0ef          	jal	0 <cat>
+    exit(0);
+  cc:	4501                	li	a0,0
+  ce:	286000ef          	jal	354 <exit>
+      fprintf(2, "cat: cannot open %s\n", argv[i]);
+  d2:	00093603          	ld	a2,0(s2)
+  d6:	00001597          	auipc	a1,0x1
+  da:	88a58593          	addi	a1,a1,-1910 # 960 <malloc+0x128>
+  de:	4509                	li	a0,2
+  e0:	67a000ef          	jal	75a <fprintf>
+      exit(1);
+  e4:	4505                	li	a0,1
+  e6:	26e000ef          	jal	354 <exit>
+
+00000000000000ea <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e406                	sd	ra,8(sp)
+  ee:	e022                	sd	s0,0(sp)
+  f0:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  f2:	f81ff0ef          	jal	72 <main>
+  exit(0);
+  f6:	4501                	li	a0,0
+  f8:	25c000ef          	jal	354 <exit>
+
+00000000000000fc <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  fc:	1141                	addi	sp,sp,-16
+  fe:	e422                	sd	s0,8(sp)
+ 100:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 102:	87aa                	mv	a5,a0
+ 104:	0585                	addi	a1,a1,1
+ 106:	0785                	addi	a5,a5,1
+ 108:	fff5c703          	lbu	a4,-1(a1)
+ 10c:	fee78fa3          	sb	a4,-1(a5)
+ 110:	fb75                	bnez	a4,104 <strcpy+0x8>
+    ;
+  return os;
+}
+ 112:	6422                	ld	s0,8(sp)
+ 114:	0141                	addi	sp,sp,16
+ 116:	8082                	ret
+
+0000000000000118 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 118:	1141                	addi	sp,sp,-16
+ 11a:	e422                	sd	s0,8(sp)
+ 11c:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	cb91                	beqz	a5,136 <strcmp+0x1e>
+ 124:	0005c703          	lbu	a4,0(a1)
+ 128:	00f71763          	bne	a4,a5,136 <strcmp+0x1e>
+    p++, q++;
+ 12c:	0505                	addi	a0,a0,1
+ 12e:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 130:	00054783          	lbu	a5,0(a0)
+ 134:	fbe5                	bnez	a5,124 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 136:	0005c503          	lbu	a0,0(a1)
+}
+ 13a:	40a7853b          	subw	a0,a5,a0
+ 13e:	6422                	ld	s0,8(sp)
+ 140:	0141                	addi	sp,sp,16
+ 142:	8082                	ret
+
+0000000000000144 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 144:	1141                	addi	sp,sp,-16
+ 146:	e422                	sd	s0,8(sp)
+ 148:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 14a:	00054783          	lbu	a5,0(a0)
+ 14e:	cf91                	beqz	a5,16a <strlen+0x26>
+ 150:	0505                	addi	a0,a0,1
+ 152:	87aa                	mv	a5,a0
+ 154:	86be                	mv	a3,a5
+ 156:	0785                	addi	a5,a5,1
+ 158:	fff7c703          	lbu	a4,-1(a5)
+ 15c:	ff65                	bnez	a4,154 <strlen+0x10>
+ 15e:	40a6853b          	subw	a0,a3,a0
+ 162:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 164:	6422                	ld	s0,8(sp)
+ 166:	0141                	addi	sp,sp,16
+ 168:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 16a:	4501                	li	a0,0
+ 16c:	bfe5                	j	164 <strlen+0x20>
+
+000000000000016e <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 16e:	1141                	addi	sp,sp,-16
+ 170:	e422                	sd	s0,8(sp)
+ 172:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 174:	ca19                	beqz	a2,18a <memset+0x1c>
+ 176:	87aa                	mv	a5,a0
+ 178:	1602                	slli	a2,a2,0x20
+ 17a:	9201                	srli	a2,a2,0x20
+ 17c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 180:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 184:	0785                	addi	a5,a5,1
+ 186:	fee79de3          	bne	a5,a4,180 <memset+0x12>
+  }
+  return dst;
+}
+ 18a:	6422                	ld	s0,8(sp)
+ 18c:	0141                	addi	sp,sp,16
+ 18e:	8082                	ret
+
+0000000000000190 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 190:	1141                	addi	sp,sp,-16
+ 192:	e422                	sd	s0,8(sp)
+ 194:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 196:	00054783          	lbu	a5,0(a0)
+ 19a:	cb99                	beqz	a5,1b0 <strchr+0x20>
+    if(*s == c)
+ 19c:	00f58763          	beq	a1,a5,1aa <strchr+0x1a>
+  for(; *s; s++)
+ 1a0:	0505                	addi	a0,a0,1
+ 1a2:	00054783          	lbu	a5,0(a0)
+ 1a6:	fbfd                	bnez	a5,19c <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 1a8:	4501                	li	a0,0
+}
+ 1aa:	6422                	ld	s0,8(sp)
+ 1ac:	0141                	addi	sp,sp,16
+ 1ae:	8082                	ret
+  return 0;
+ 1b0:	4501                	li	a0,0
+ 1b2:	bfe5                	j	1aa <strchr+0x1a>
+
+00000000000001b4 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1b4:	711d                	addi	sp,sp,-96
+ 1b6:	ec86                	sd	ra,88(sp)
+ 1b8:	e8a2                	sd	s0,80(sp)
+ 1ba:	e4a6                	sd	s1,72(sp)
+ 1bc:	e0ca                	sd	s2,64(sp)
+ 1be:	fc4e                	sd	s3,56(sp)
+ 1c0:	f852                	sd	s4,48(sp)
+ 1c2:	f456                	sd	s5,40(sp)
+ 1c4:	f05a                	sd	s6,32(sp)
+ 1c6:	ec5e                	sd	s7,24(sp)
+ 1c8:	1080                	addi	s0,sp,96
+ 1ca:	8baa                	mv	s7,a0
+ 1cc:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ce:	892a                	mv	s2,a0
+ 1d0:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1d2:	4aa9                	li	s5,10
+ 1d4:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1d6:	89a6                	mv	s3,s1
+ 1d8:	2485                	addiw	s1,s1,1
+ 1da:	0344d663          	bge	s1,s4,206 <gets+0x52>
+    cc = read(0, &c, 1);
+ 1de:	4605                	li	a2,1
+ 1e0:	faf40593          	addi	a1,s0,-81
+ 1e4:	4501                	li	a0,0
+ 1e6:	186000ef          	jal	36c <read>
+    if(cc < 1)
+ 1ea:	00a05e63          	blez	a0,206 <gets+0x52>
+    buf[i++] = c;
+ 1ee:	faf44783          	lbu	a5,-81(s0)
+ 1f2:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1f6:	01578763          	beq	a5,s5,204 <gets+0x50>
+ 1fa:	0905                	addi	s2,s2,1
+ 1fc:	fd679de3          	bne	a5,s6,1d6 <gets+0x22>
+    buf[i++] = c;
+ 200:	89a6                	mv	s3,s1
+ 202:	a011                	j	206 <gets+0x52>
+ 204:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 206:	99de                	add	s3,s3,s7
+ 208:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 20c:	855e                	mv	a0,s7
+ 20e:	60e6                	ld	ra,88(sp)
+ 210:	6446                	ld	s0,80(sp)
+ 212:	64a6                	ld	s1,72(sp)
+ 214:	6906                	ld	s2,64(sp)
+ 216:	79e2                	ld	s3,56(sp)
+ 218:	7a42                	ld	s4,48(sp)
+ 21a:	7aa2                	ld	s5,40(sp)
+ 21c:	7b02                	ld	s6,32(sp)
+ 21e:	6be2                	ld	s7,24(sp)
+ 220:	6125                	addi	sp,sp,96
+ 222:	8082                	ret
+
+0000000000000224 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 224:	1101                	addi	sp,sp,-32
+ 226:	ec06                	sd	ra,24(sp)
+ 228:	e822                	sd	s0,16(sp)
+ 22a:	e04a                	sd	s2,0(sp)
+ 22c:	1000                	addi	s0,sp,32
+ 22e:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 230:	4581                	li	a1,0
+ 232:	162000ef          	jal	394 <open>
+  if(fd < 0)
+ 236:	02054263          	bltz	a0,25a <stat+0x36>
+ 23a:	e426                	sd	s1,8(sp)
+ 23c:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 23e:	85ca                	mv	a1,s2
+ 240:	16c000ef          	jal	3ac <fstat>
+ 244:	892a                	mv	s2,a0
+  close(fd);
+ 246:	8526                	mv	a0,s1
+ 248:	134000ef          	jal	37c <close>
+  return r;
+ 24c:	64a2                	ld	s1,8(sp)
+}
+ 24e:	854a                	mv	a0,s2
+ 250:	60e2                	ld	ra,24(sp)
+ 252:	6442                	ld	s0,16(sp)
+ 254:	6902                	ld	s2,0(sp)
+ 256:	6105                	addi	sp,sp,32
+ 258:	8082                	ret
+    return -1;
+ 25a:	597d                	li	s2,-1
+ 25c:	bfcd                	j	24e <stat+0x2a>
+
+000000000000025e <atoi>:
+
+int
+atoi(const char *s)
+{
+ 25e:	1141                	addi	sp,sp,-16
+ 260:	e422                	sd	s0,8(sp)
+ 262:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 264:	00054683          	lbu	a3,0(a0)
+ 268:	fd06879b          	addiw	a5,a3,-48
+ 26c:	0ff7f793          	zext.b	a5,a5
+ 270:	4625                	li	a2,9
+ 272:	02f66863          	bltu	a2,a5,2a2 <atoi+0x44>
+ 276:	872a                	mv	a4,a0
+  n = 0;
+ 278:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 27a:	0705                	addi	a4,a4,1
+ 27c:	0025179b          	slliw	a5,a0,0x2
+ 280:	9fa9                	addw	a5,a5,a0
+ 282:	0017979b          	slliw	a5,a5,0x1
+ 286:	9fb5                	addw	a5,a5,a3
+ 288:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 28c:	00074683          	lbu	a3,0(a4)
+ 290:	fd06879b          	addiw	a5,a3,-48
+ 294:	0ff7f793          	zext.b	a5,a5
+ 298:	fef671e3          	bgeu	a2,a5,27a <atoi+0x1c>
+  return n;
+}
+ 29c:	6422                	ld	s0,8(sp)
+ 29e:	0141                	addi	sp,sp,16
+ 2a0:	8082                	ret
+  n = 0;
+ 2a2:	4501                	li	a0,0
+ 2a4:	bfe5                	j	29c <atoi+0x3e>
+
+00000000000002a6 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a6:	1141                	addi	sp,sp,-16
+ 2a8:	e422                	sd	s0,8(sp)
+ 2aa:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 2ac:	02b57463          	bgeu	a0,a1,2d4 <memmove+0x2e>
+    while(n-- > 0)
+ 2b0:	00c05f63          	blez	a2,2ce <memmove+0x28>
+ 2b4:	1602                	slli	a2,a2,0x20
+ 2b6:	9201                	srli	a2,a2,0x20
+ 2b8:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2bc:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2be:	0585                	addi	a1,a1,1
+ 2c0:	0705                	addi	a4,a4,1
+ 2c2:	fff5c683          	lbu	a3,-1(a1)
+ 2c6:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2ca:	fef71ae3          	bne	a4,a5,2be <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2ce:	6422                	ld	s0,8(sp)
+ 2d0:	0141                	addi	sp,sp,16
+ 2d2:	8082                	ret
+    dst += n;
+ 2d4:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2d8:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2da:	fec05ae3          	blez	a2,2ce <memmove+0x28>
+ 2de:	fff6079b          	addiw	a5,a2,-1
+ 2e2:	1782                	slli	a5,a5,0x20
+ 2e4:	9381                	srli	a5,a5,0x20
+ 2e6:	fff7c793          	not	a5,a5
+ 2ea:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2ec:	15fd                	addi	a1,a1,-1
+ 2ee:	177d                	addi	a4,a4,-1
+ 2f0:	0005c683          	lbu	a3,0(a1)
+ 2f4:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2f8:	fee79ae3          	bne	a5,a4,2ec <memmove+0x46>
+ 2fc:	bfc9                	j	2ce <memmove+0x28>
+
+00000000000002fe <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2fe:	1141                	addi	sp,sp,-16
+ 300:	e422                	sd	s0,8(sp)
+ 302:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 304:	ca05                	beqz	a2,334 <memcmp+0x36>
+ 306:	fff6069b          	addiw	a3,a2,-1
+ 30a:	1682                	slli	a3,a3,0x20
+ 30c:	9281                	srli	a3,a3,0x20
+ 30e:	0685                	addi	a3,a3,1
+ 310:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 312:	00054783          	lbu	a5,0(a0)
+ 316:	0005c703          	lbu	a4,0(a1)
+ 31a:	00e79863          	bne	a5,a4,32a <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 31e:	0505                	addi	a0,a0,1
+    p2++;
+ 320:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 322:	fed518e3          	bne	a0,a3,312 <memcmp+0x14>
+  }
+  return 0;
+ 326:	4501                	li	a0,0
+ 328:	a019                	j	32e <memcmp+0x30>
+      return *p1 - *p2;
+ 32a:	40e7853b          	subw	a0,a5,a4
+}
+ 32e:	6422                	ld	s0,8(sp)
+ 330:	0141                	addi	sp,sp,16
+ 332:	8082                	ret
+  return 0;
+ 334:	4501                	li	a0,0
+ 336:	bfe5                	j	32e <memcmp+0x30>
+
+0000000000000338 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 338:	1141                	addi	sp,sp,-16
+ 33a:	e406                	sd	ra,8(sp)
+ 33c:	e022                	sd	s0,0(sp)
+ 33e:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 340:	f67ff0ef          	jal	2a6 <memmove>
+}
+ 344:	60a2                	ld	ra,8(sp)
+ 346:	6402                	ld	s0,0(sp)
+ 348:	0141                	addi	sp,sp,16
+ 34a:	8082                	ret
+
+000000000000034c <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 34c:	4885                	li	a7,1
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 354:	4889                	li	a7,2
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 35c:	488d                	li	a7,3
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 364:	4891                	li	a7,4
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <read>:
+.global read
+read:
+ li a7, SYS_read
+ 36c:	4895                	li	a7,5
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 374:	48c1                	li	a7,16
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 37c:	48d5                	li	a7,21
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 384:	4899                	li	a7,6
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 38c:	489d                	li	a7,7
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 394:	48bd                	li	a7,15
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 39c:	48c5                	li	a7,17
+ ecall
+ 39e:	00000073          	ecall
+ ret
+ 3a2:	8082                	ret
+
+00000000000003a4 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 3a4:	48c9                	li	a7,18
+ ecall
+ 3a6:	00000073          	ecall
+ ret
+ 3aa:	8082                	ret
+
+00000000000003ac <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 3ac:	48a1                	li	a7,8
+ ecall
+ 3ae:	00000073          	ecall
+ ret
+ 3b2:	8082                	ret
+
+00000000000003b4 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3b4:	48cd                	li	a7,19
+ ecall
+ 3b6:	00000073          	ecall
+ ret
+ 3ba:	8082                	ret
+
+00000000000003bc <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3bc:	48d1                	li	a7,20
+ ecall
+ 3be:	00000073          	ecall
+ ret
+ 3c2:	8082                	ret
+
+00000000000003c4 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3c4:	48a5                	li	a7,9
+ ecall
+ 3c6:	00000073          	ecall
+ ret
+ 3ca:	8082                	ret
+
+00000000000003cc <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 3cc:	48a9                	li	a7,10
+ ecall
+ 3ce:	00000073          	ecall
+ ret
+ 3d2:	8082                	ret
+
+00000000000003d4 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3d4:	48ad                	li	a7,11
+ ecall
+ 3d6:	00000073          	ecall
+ ret
+ 3da:	8082                	ret
+
+00000000000003dc <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3dc:	48b1                	li	a7,12
+ ecall
+ 3de:	00000073          	ecall
+ ret
+ 3e2:	8082                	ret
+
+00000000000003e4 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3e4:	48b5                	li	a7,13
+ ecall
+ 3e6:	00000073          	ecall
+ ret
+ 3ea:	8082                	ret
+
+00000000000003ec <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3ec:	48b9                	li	a7,14
+ ecall
+ 3ee:	00000073          	ecall
+ ret
+ 3f2:	8082                	ret
+
+00000000000003f4 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 3f4:	48d9                	li	a7,22
+ ecall
+ 3f6:	00000073          	ecall
+ ret
+ 3fa:	8082                	ret
+
+00000000000003fc <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 3fc:	48dd                	li	a7,23
+ ecall
+ 3fe:	00000073          	ecall
+ ret
+ 402:	8082                	ret
+
+0000000000000404 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 404:	48e1                	li	a7,24
+ ecall
+ 406:	00000073          	ecall
+ ret
+ 40a:	8082                	ret
+
+000000000000040c <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 40c:	1101                	addi	sp,sp,-32
+ 40e:	ec06                	sd	ra,24(sp)
+ 410:	e822                	sd	s0,16(sp)
+ 412:	1000                	addi	s0,sp,32
+ 414:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 418:	4605                	li	a2,1
+ 41a:	fef40593          	addi	a1,s0,-17
+ 41e:	f57ff0ef          	jal	374 <write>
+}
+ 422:	60e2                	ld	ra,24(sp)
+ 424:	6442                	ld	s0,16(sp)
+ 426:	6105                	addi	sp,sp,32
+ 428:	8082                	ret
+
+000000000000042a <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 42a:	7139                	addi	sp,sp,-64
+ 42c:	fc06                	sd	ra,56(sp)
+ 42e:	f822                	sd	s0,48(sp)
+ 430:	f426                	sd	s1,40(sp)
+ 432:	0080                	addi	s0,sp,64
+ 434:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 436:	c299                	beqz	a3,43c <printint+0x12>
+ 438:	0805c963          	bltz	a1,4ca <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 43c:	2581                	sext.w	a1,a1
+  neg = 0;
+ 43e:	4881                	li	a7,0
+ 440:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 444:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 446:	2601                	sext.w	a2,a2
+ 448:	00000517          	auipc	a0,0x0
+ 44c:	53850513          	addi	a0,a0,1336 # 980 <digits>
+ 450:	883a                	mv	a6,a4
+ 452:	2705                	addiw	a4,a4,1
+ 454:	02c5f7bb          	remuw	a5,a1,a2
+ 458:	1782                	slli	a5,a5,0x20
+ 45a:	9381                	srli	a5,a5,0x20
+ 45c:	97aa                	add	a5,a5,a0
+ 45e:	0007c783          	lbu	a5,0(a5)
+ 462:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 466:	0005879b          	sext.w	a5,a1
+ 46a:	02c5d5bb          	divuw	a1,a1,a2
+ 46e:	0685                	addi	a3,a3,1
+ 470:	fec7f0e3          	bgeu	a5,a2,450 <printint+0x26>
+  if(neg)
+ 474:	00088c63          	beqz	a7,48c <printint+0x62>
+    buf[i++] = '-';
+ 478:	fd070793          	addi	a5,a4,-48
+ 47c:	00878733          	add	a4,a5,s0
+ 480:	02d00793          	li	a5,45
+ 484:	fef70823          	sb	a5,-16(a4)
+ 488:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 48c:	02e05a63          	blez	a4,4c0 <printint+0x96>
+ 490:	f04a                	sd	s2,32(sp)
+ 492:	ec4e                	sd	s3,24(sp)
+ 494:	fc040793          	addi	a5,s0,-64
+ 498:	00e78933          	add	s2,a5,a4
+ 49c:	fff78993          	addi	s3,a5,-1
+ 4a0:	99ba                	add	s3,s3,a4
+ 4a2:	377d                	addiw	a4,a4,-1
+ 4a4:	1702                	slli	a4,a4,0x20
+ 4a6:	9301                	srli	a4,a4,0x20
+ 4a8:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 4ac:	fff94583          	lbu	a1,-1(s2)
+ 4b0:	8526                	mv	a0,s1
+ 4b2:	f5bff0ef          	jal	40c <putc>
+  while(--i >= 0)
+ 4b6:	197d                	addi	s2,s2,-1
+ 4b8:	ff391ae3          	bne	s2,s3,4ac <printint+0x82>
+ 4bc:	7902                	ld	s2,32(sp)
+ 4be:	69e2                	ld	s3,24(sp)
+}
+ 4c0:	70e2                	ld	ra,56(sp)
+ 4c2:	7442                	ld	s0,48(sp)
+ 4c4:	74a2                	ld	s1,40(sp)
+ 4c6:	6121                	addi	sp,sp,64
+ 4c8:	8082                	ret
+    x = -xx;
+ 4ca:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4ce:	4885                	li	a7,1
+    x = -xx;
+ 4d0:	bf85                	j	440 <printint+0x16>
+
+00000000000004d2 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 4d2:	711d                	addi	sp,sp,-96
+ 4d4:	ec86                	sd	ra,88(sp)
+ 4d6:	e8a2                	sd	s0,80(sp)
+ 4d8:	e0ca                	sd	s2,64(sp)
+ 4da:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4dc:	0005c903          	lbu	s2,0(a1)
+ 4e0:	26090863          	beqz	s2,750 <vprintf+0x27e>
+ 4e4:	e4a6                	sd	s1,72(sp)
+ 4e6:	fc4e                	sd	s3,56(sp)
+ 4e8:	f852                	sd	s4,48(sp)
+ 4ea:	f456                	sd	s5,40(sp)
+ 4ec:	f05a                	sd	s6,32(sp)
+ 4ee:	ec5e                	sd	s7,24(sp)
+ 4f0:	e862                	sd	s8,16(sp)
+ 4f2:	e466                	sd	s9,8(sp)
+ 4f4:	8b2a                	mv	s6,a0
+ 4f6:	8a2e                	mv	s4,a1
+ 4f8:	8bb2                	mv	s7,a2
+  state = 0;
+ 4fa:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 4fc:	4481                	li	s1,0
+ 4fe:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 500:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 504:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 508:	06c00c93          	li	s9,108
+ 50c:	a005                	j	52c <vprintf+0x5a>
+        putc(fd, c0);
+ 50e:	85ca                	mv	a1,s2
+ 510:	855a                	mv	a0,s6
+ 512:	efbff0ef          	jal	40c <putc>
+ 516:	a019                	j	51c <vprintf+0x4a>
+    } else if(state == '%'){
+ 518:	03598263          	beq	s3,s5,53c <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 51c:	2485                	addiw	s1,s1,1
+ 51e:	8726                	mv	a4,s1
+ 520:	009a07b3          	add	a5,s4,s1
+ 524:	0007c903          	lbu	s2,0(a5)
+ 528:	20090c63          	beqz	s2,740 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 52c:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 530:	fe0994e3          	bnez	s3,518 <vprintf+0x46>
+      if(c0 == '%'){
+ 534:	fd579de3          	bne	a5,s5,50e <vprintf+0x3c>
+        state = '%';
+ 538:	89be                	mv	s3,a5
+ 53a:	b7cd                	j	51c <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 53c:	00ea06b3          	add	a3,s4,a4
+ 540:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 544:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 546:	c681                	beqz	a3,54e <vprintf+0x7c>
+ 548:	9752                	add	a4,a4,s4
+ 54a:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 54e:	03878f63          	beq	a5,s8,58c <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 552:	05978963          	beq	a5,s9,5a4 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 556:	07500713          	li	a4,117
+ 55a:	0ee78363          	beq	a5,a4,640 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 55e:	07800713          	li	a4,120
+ 562:	12e78563          	beq	a5,a4,68c <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 566:	07000713          	li	a4,112
+ 56a:	14e78a63          	beq	a5,a4,6be <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 56e:	07300713          	li	a4,115
+ 572:	18e78a63          	beq	a5,a4,706 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 576:	02500713          	li	a4,37
+ 57a:	04e79563          	bne	a5,a4,5c4 <vprintf+0xf2>
+        putc(fd, '%');
+ 57e:	02500593          	li	a1,37
+ 582:	855a                	mv	a0,s6
+ 584:	e89ff0ef          	jal	40c <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 588:	4981                	li	s3,0
+ 58a:	bf49                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 58c:	008b8913          	addi	s2,s7,8
+ 590:	4685                	li	a3,1
+ 592:	4629                	li	a2,10
+ 594:	000ba583          	lw	a1,0(s7)
+ 598:	855a                	mv	a0,s6
+ 59a:	e91ff0ef          	jal	42a <printint>
+ 59e:	8bca                	mv	s7,s2
+      state = 0;
+ 5a0:	4981                	li	s3,0
+ 5a2:	bfad                	j	51c <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 5a4:	06400793          	li	a5,100
+ 5a8:	02f68963          	beq	a3,a5,5da <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 5ac:	06c00793          	li	a5,108
+ 5b0:	04f68263          	beq	a3,a5,5f4 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 5b4:	07500793          	li	a5,117
+ 5b8:	0af68063          	beq	a3,a5,658 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 5bc:	07800793          	li	a5,120
+ 5c0:	0ef68263          	beq	a3,a5,6a4 <vprintf+0x1d2>
+        putc(fd, '%');
+ 5c4:	02500593          	li	a1,37
+ 5c8:	855a                	mv	a0,s6
+ 5ca:	e43ff0ef          	jal	40c <putc>
+        putc(fd, c0);
+ 5ce:	85ca                	mv	a1,s2
+ 5d0:	855a                	mv	a0,s6
+ 5d2:	e3bff0ef          	jal	40c <putc>
+      state = 0;
+ 5d6:	4981                	li	s3,0
+ 5d8:	b791                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5da:	008b8913          	addi	s2,s7,8
+ 5de:	4685                	li	a3,1
+ 5e0:	4629                	li	a2,10
+ 5e2:	000ba583          	lw	a1,0(s7)
+ 5e6:	855a                	mv	a0,s6
+ 5e8:	e43ff0ef          	jal	42a <printint>
+        i += 1;
+ 5ec:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5ee:	8bca                	mv	s7,s2
+      state = 0;
+ 5f0:	4981                	li	s3,0
+        i += 1;
+ 5f2:	b72d                	j	51c <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 5f4:	06400793          	li	a5,100
+ 5f8:	02f60763          	beq	a2,a5,626 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 5fc:	07500793          	li	a5,117
+ 600:	06f60963          	beq	a2,a5,672 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 604:	07800793          	li	a5,120
+ 608:	faf61ee3          	bne	a2,a5,5c4 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 60c:	008b8913          	addi	s2,s7,8
+ 610:	4681                	li	a3,0
+ 612:	4641                	li	a2,16
+ 614:	000ba583          	lw	a1,0(s7)
+ 618:	855a                	mv	a0,s6
+ 61a:	e11ff0ef          	jal	42a <printint>
+        i += 2;
+ 61e:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 620:	8bca                	mv	s7,s2
+      state = 0;
+ 622:	4981                	li	s3,0
+        i += 2;
+ 624:	bde5                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 626:	008b8913          	addi	s2,s7,8
+ 62a:	4685                	li	a3,1
+ 62c:	4629                	li	a2,10
+ 62e:	000ba583          	lw	a1,0(s7)
+ 632:	855a                	mv	a0,s6
+ 634:	df7ff0ef          	jal	42a <printint>
+        i += 2;
+ 638:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 63a:	8bca                	mv	s7,s2
+      state = 0;
+ 63c:	4981                	li	s3,0
+        i += 2;
+ 63e:	bdf9                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 640:	008b8913          	addi	s2,s7,8
+ 644:	4681                	li	a3,0
+ 646:	4629                	li	a2,10
+ 648:	000ba583          	lw	a1,0(s7)
+ 64c:	855a                	mv	a0,s6
+ 64e:	dddff0ef          	jal	42a <printint>
+ 652:	8bca                	mv	s7,s2
+      state = 0;
+ 654:	4981                	li	s3,0
+ 656:	b5d9                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 658:	008b8913          	addi	s2,s7,8
+ 65c:	4681                	li	a3,0
+ 65e:	4629                	li	a2,10
+ 660:	000ba583          	lw	a1,0(s7)
+ 664:	855a                	mv	a0,s6
+ 666:	dc5ff0ef          	jal	42a <printint>
+        i += 1;
+ 66a:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 66c:	8bca                	mv	s7,s2
+      state = 0;
+ 66e:	4981                	li	s3,0
+        i += 1;
+ 670:	b575                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 672:	008b8913          	addi	s2,s7,8
+ 676:	4681                	li	a3,0
+ 678:	4629                	li	a2,10
+ 67a:	000ba583          	lw	a1,0(s7)
+ 67e:	855a                	mv	a0,s6
+ 680:	dabff0ef          	jal	42a <printint>
+        i += 2;
+ 684:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 686:	8bca                	mv	s7,s2
+      state = 0;
+ 688:	4981                	li	s3,0
+        i += 2;
+ 68a:	bd49                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 68c:	008b8913          	addi	s2,s7,8
+ 690:	4681                	li	a3,0
+ 692:	4641                	li	a2,16
+ 694:	000ba583          	lw	a1,0(s7)
+ 698:	855a                	mv	a0,s6
+ 69a:	d91ff0ef          	jal	42a <printint>
+ 69e:	8bca                	mv	s7,s2
+      state = 0;
+ 6a0:	4981                	li	s3,0
+ 6a2:	bdad                	j	51c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 6a4:	008b8913          	addi	s2,s7,8
+ 6a8:	4681                	li	a3,0
+ 6aa:	4641                	li	a2,16
+ 6ac:	000ba583          	lw	a1,0(s7)
+ 6b0:	855a                	mv	a0,s6
+ 6b2:	d79ff0ef          	jal	42a <printint>
+        i += 1;
+ 6b6:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 6b8:	8bca                	mv	s7,s2
+      state = 0;
+ 6ba:	4981                	li	s3,0
+        i += 1;
+ 6bc:	b585                	j	51c <vprintf+0x4a>
+ 6be:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 6c0:	008b8d13          	addi	s10,s7,8
+ 6c4:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 6c8:	03000593          	li	a1,48
+ 6cc:	855a                	mv	a0,s6
+ 6ce:	d3fff0ef          	jal	40c <putc>
+  putc(fd, 'x');
+ 6d2:	07800593          	li	a1,120
+ 6d6:	855a                	mv	a0,s6
+ 6d8:	d35ff0ef          	jal	40c <putc>
+ 6dc:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 6de:	00000b97          	auipc	s7,0x0
+ 6e2:	2a2b8b93          	addi	s7,s7,674 # 980 <digits>
+ 6e6:	03c9d793          	srli	a5,s3,0x3c
+ 6ea:	97de                	add	a5,a5,s7
+ 6ec:	0007c583          	lbu	a1,0(a5)
+ 6f0:	855a                	mv	a0,s6
+ 6f2:	d1bff0ef          	jal	40c <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 6f6:	0992                	slli	s3,s3,0x4
+ 6f8:	397d                	addiw	s2,s2,-1
+ 6fa:	fe0916e3          	bnez	s2,6e6 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 6fe:	8bea                	mv	s7,s10
+      state = 0;
+ 700:	4981                	li	s3,0
+ 702:	6d02                	ld	s10,0(sp)
+ 704:	bd21                	j	51c <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 706:	008b8993          	addi	s3,s7,8
+ 70a:	000bb903          	ld	s2,0(s7)
+ 70e:	00090f63          	beqz	s2,72c <vprintf+0x25a>
+        for(; *s; s++)
+ 712:	00094583          	lbu	a1,0(s2)
+ 716:	c195                	beqz	a1,73a <vprintf+0x268>
+          putc(fd, *s);
+ 718:	855a                	mv	a0,s6
+ 71a:	cf3ff0ef          	jal	40c <putc>
+        for(; *s; s++)
+ 71e:	0905                	addi	s2,s2,1
+ 720:	00094583          	lbu	a1,0(s2)
+ 724:	f9f5                	bnez	a1,718 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 726:	8bce                	mv	s7,s3
+      state = 0;
+ 728:	4981                	li	s3,0
+ 72a:	bbcd                	j	51c <vprintf+0x4a>
+          s = "(null)";
+ 72c:	00000917          	auipc	s2,0x0
+ 730:	24c90913          	addi	s2,s2,588 # 978 <malloc+0x140>
+        for(; *s; s++)
+ 734:	02800593          	li	a1,40
+ 738:	b7c5                	j	718 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 73a:	8bce                	mv	s7,s3
+      state = 0;
+ 73c:	4981                	li	s3,0
+ 73e:	bbf9                	j	51c <vprintf+0x4a>
+ 740:	64a6                	ld	s1,72(sp)
+ 742:	79e2                	ld	s3,56(sp)
+ 744:	7a42                	ld	s4,48(sp)
+ 746:	7aa2                	ld	s5,40(sp)
+ 748:	7b02                	ld	s6,32(sp)
+ 74a:	6be2                	ld	s7,24(sp)
+ 74c:	6c42                	ld	s8,16(sp)
+ 74e:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 750:	60e6                	ld	ra,88(sp)
+ 752:	6446                	ld	s0,80(sp)
+ 754:	6906                	ld	s2,64(sp)
+ 756:	6125                	addi	sp,sp,96
+ 758:	8082                	ret
+
+000000000000075a <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 75a:	715d                	addi	sp,sp,-80
+ 75c:	ec06                	sd	ra,24(sp)
+ 75e:	e822                	sd	s0,16(sp)
+ 760:	1000                	addi	s0,sp,32
+ 762:	e010                	sd	a2,0(s0)
+ 764:	e414                	sd	a3,8(s0)
+ 766:	e818                	sd	a4,16(s0)
+ 768:	ec1c                	sd	a5,24(s0)
+ 76a:	03043023          	sd	a6,32(s0)
+ 76e:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 772:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 776:	8622                	mv	a2,s0
+ 778:	d5bff0ef          	jal	4d2 <vprintf>
+}
+ 77c:	60e2                	ld	ra,24(sp)
+ 77e:	6442                	ld	s0,16(sp)
+ 780:	6161                	addi	sp,sp,80
+ 782:	8082                	ret
+
+0000000000000784 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 784:	711d                	addi	sp,sp,-96
+ 786:	ec06                	sd	ra,24(sp)
+ 788:	e822                	sd	s0,16(sp)
+ 78a:	1000                	addi	s0,sp,32
+ 78c:	e40c                	sd	a1,8(s0)
+ 78e:	e810                	sd	a2,16(s0)
+ 790:	ec14                	sd	a3,24(s0)
+ 792:	f018                	sd	a4,32(s0)
+ 794:	f41c                	sd	a5,40(s0)
+ 796:	03043823          	sd	a6,48(s0)
+ 79a:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 79e:	00840613          	addi	a2,s0,8
+ 7a2:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 7a6:	85aa                	mv	a1,a0
+ 7a8:	4505                	li	a0,1
+ 7aa:	d29ff0ef          	jal	4d2 <vprintf>
+}
+ 7ae:	60e2                	ld	ra,24(sp)
+ 7b0:	6442                	ld	s0,16(sp)
+ 7b2:	6125                	addi	sp,sp,96
+ 7b4:	8082                	ret
+
+00000000000007b6 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7b6:	1141                	addi	sp,sp,-16
+ 7b8:	e422                	sd	s0,8(sp)
+ 7ba:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 7bc:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7c0:	00001797          	auipc	a5,0x1
+ 7c4:	8407b783          	ld	a5,-1984(a5) # 1000 <freep>
+ 7c8:	a02d                	j	7f2 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 7ca:	4618                	lw	a4,8(a2)
+ 7cc:	9f2d                	addw	a4,a4,a1
+ 7ce:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7d2:	6398                	ld	a4,0(a5)
+ 7d4:	6310                	ld	a2,0(a4)
+ 7d6:	a83d                	j	814 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 7d8:	ff852703          	lw	a4,-8(a0)
+ 7dc:	9f31                	addw	a4,a4,a2
+ 7de:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 7e0:	ff053683          	ld	a3,-16(a0)
+ 7e4:	a091                	j	828 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7e6:	6398                	ld	a4,0(a5)
+ 7e8:	00e7e463          	bltu	a5,a4,7f0 <free+0x3a>
+ 7ec:	00e6ea63          	bltu	a3,a4,800 <free+0x4a>
+{
+ 7f0:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7f2:	fed7fae3          	bgeu	a5,a3,7e6 <free+0x30>
+ 7f6:	6398                	ld	a4,0(a5)
+ 7f8:	00e6e463          	bltu	a3,a4,800 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7fc:	fee7eae3          	bltu	a5,a4,7f0 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 800:	ff852583          	lw	a1,-8(a0)
+ 804:	6390                	ld	a2,0(a5)
+ 806:	02059813          	slli	a6,a1,0x20
+ 80a:	01c85713          	srli	a4,a6,0x1c
+ 80e:	9736                	add	a4,a4,a3
+ 810:	fae60de3          	beq	a2,a4,7ca <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 814:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 818:	4790                	lw	a2,8(a5)
+ 81a:	02061593          	slli	a1,a2,0x20
+ 81e:	01c5d713          	srli	a4,a1,0x1c
+ 822:	973e                	add	a4,a4,a5
+ 824:	fae68ae3          	beq	a3,a4,7d8 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 828:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 82a:	00000717          	auipc	a4,0x0
+ 82e:	7cf73b23          	sd	a5,2006(a4) # 1000 <freep>
+}
+ 832:	6422                	ld	s0,8(sp)
+ 834:	0141                	addi	sp,sp,16
+ 836:	8082                	ret
+
+0000000000000838 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 838:	7139                	addi	sp,sp,-64
+ 83a:	fc06                	sd	ra,56(sp)
+ 83c:	f822                	sd	s0,48(sp)
+ 83e:	f426                	sd	s1,40(sp)
+ 840:	ec4e                	sd	s3,24(sp)
+ 842:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 844:	02051493          	slli	s1,a0,0x20
+ 848:	9081                	srli	s1,s1,0x20
+ 84a:	04bd                	addi	s1,s1,15
+ 84c:	8091                	srli	s1,s1,0x4
+ 84e:	0014899b          	addiw	s3,s1,1
+ 852:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 854:	00000517          	auipc	a0,0x0
+ 858:	7ac53503          	ld	a0,1964(a0) # 1000 <freep>
+ 85c:	c915                	beqz	a0,890 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 85e:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 860:	4798                	lw	a4,8(a5)
+ 862:	08977a63          	bgeu	a4,s1,8f6 <malloc+0xbe>
+ 866:	f04a                	sd	s2,32(sp)
+ 868:	e852                	sd	s4,16(sp)
+ 86a:	e456                	sd	s5,8(sp)
+ 86c:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 86e:	8a4e                	mv	s4,s3
+ 870:	0009871b          	sext.w	a4,s3
+ 874:	6685                	lui	a3,0x1
+ 876:	00d77363          	bgeu	a4,a3,87c <malloc+0x44>
+ 87a:	6a05                	lui	s4,0x1
+ 87c:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 880:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 884:	00000917          	auipc	s2,0x0
+ 888:	77c90913          	addi	s2,s2,1916 # 1000 <freep>
+  if(p == (char*)-1)
+ 88c:	5afd                	li	s5,-1
+ 88e:	a081                	j	8ce <malloc+0x96>
+ 890:	f04a                	sd	s2,32(sp)
+ 892:	e852                	sd	s4,16(sp)
+ 894:	e456                	sd	s5,8(sp)
+ 896:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 898:	00001797          	auipc	a5,0x1
+ 89c:	97878793          	addi	a5,a5,-1672 # 1210 <base>
+ 8a0:	00000717          	auipc	a4,0x0
+ 8a4:	76f73023          	sd	a5,1888(a4) # 1000 <freep>
+ 8a8:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 8aa:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 8ae:	b7c1                	j	86e <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 8b0:	6398                	ld	a4,0(a5)
+ 8b2:	e118                	sd	a4,0(a0)
+ 8b4:	a8a9                	j	90e <malloc+0xd6>
+  hp->s.size = nu;
+ 8b6:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 8ba:	0541                	addi	a0,a0,16
+ 8bc:	efbff0ef          	jal	7b6 <free>
+  return freep;
+ 8c0:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 8c4:	c12d                	beqz	a0,926 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8c6:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 8c8:	4798                	lw	a4,8(a5)
+ 8ca:	02977263          	bgeu	a4,s1,8ee <malloc+0xb6>
+    if(p == freep)
+ 8ce:	00093703          	ld	a4,0(s2)
+ 8d2:	853e                	mv	a0,a5
+ 8d4:	fef719e3          	bne	a4,a5,8c6 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 8d8:	8552                	mv	a0,s4
+ 8da:	b03ff0ef          	jal	3dc <sbrk>
+  if(p == (char*)-1)
+ 8de:	fd551ce3          	bne	a0,s5,8b6 <malloc+0x7e>
+        return 0;
+ 8e2:	4501                	li	a0,0
+ 8e4:	7902                	ld	s2,32(sp)
+ 8e6:	6a42                	ld	s4,16(sp)
+ 8e8:	6aa2                	ld	s5,8(sp)
+ 8ea:	6b02                	ld	s6,0(sp)
+ 8ec:	a03d                	j	91a <malloc+0xe2>
+ 8ee:	7902                	ld	s2,32(sp)
+ 8f0:	6a42                	ld	s4,16(sp)
+ 8f2:	6aa2                	ld	s5,8(sp)
+ 8f4:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 8f6:	fae48de3          	beq	s1,a4,8b0 <malloc+0x78>
+        p->s.size -= nunits;
+ 8fa:	4137073b          	subw	a4,a4,s3
+ 8fe:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 900:	02071693          	slli	a3,a4,0x20
+ 904:	01c6d713          	srli	a4,a3,0x1c
+ 908:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 90a:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 90e:	00000717          	auipc	a4,0x0
+ 912:	6ea73923          	sd	a0,1778(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 916:	01078513          	addi	a0,a5,16
+  }
+}
+ 91a:	70e2                	ld	ra,56(sp)
+ 91c:	7442                	ld	s0,48(sp)
+ 91e:	74a2                	ld	s1,40(sp)
+ 920:	69e2                	ld	s3,24(sp)
+ 922:	6121                	addi	sp,sp,64
+ 924:	8082                	ret
+ 926:	7902                	ld	s2,32(sp)
+ 928:	6a42                	ld	s4,16(sp)
+ 92a:	6aa2                	ld	s5,8(sp)
+ 92c:	6b02                	ld	s6,0(sp)
+ 92e:	b7f5                	j	91a <malloc+0xe2>
diff --git a/user/cat.c b/user/cat.c
new file mode 100644
index 0000000..6d873a9
--- /dev/null
+++ b/user/cat.c
@@ -0,0 +1,43 @@
+#include "kernel/types.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char buf[512];
+
+void
+cat(int fd)
+{
+  int n;
+
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+    if (write(1, buf, n) != n) {
+      fprintf(2, "cat: write error\n");
+      exit(1);
+    }
+  }
+  if(n < 0){
+    fprintf(2, "cat: read error\n");
+    exit(1);
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    cat(0);
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+      fprintf(2, "cat: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    cat(fd);
+    close(fd);
+  }
+  exit(0);
+}
diff --git a/user/cat.d b/user/cat.d
new file mode 100644
index 0000000..ae5d22a
--- /dev/null
+++ b/user/cat.d
@@ -0,0 +1 @@
+user/cat.o: user/cat.c kernel/types.h kernel/fcntl.h user/user.h
diff --git a/user/cat.o b/user/cat.o
new file mode 100644
index 0000000..71b1664
Binary files /dev/null and b/user/cat.o differ
diff --git a/user/cat.sym b/user/cat.sym
new file mode 100644
index 0000000..abb51e2
--- /dev/null
+++ b/user/cat.sym
@@ -0,0 +1,68 @@
+0000000000000000 .text
+0000000000000930 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 cat.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000040c putc
+000000000000042a printint
+0000000000000980 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001210 base
+00000000000000fc strcpy
+0000000000000784 printf
+00000000000002a6 memmove
+000000000000039c mknod
+00000000000003fc trace
+00000000000001b4 gets
+00000000000003d4 getpid
+00000000000003f4 hello
+0000000000000338 memcpy
+0000000000000000 cat
+0000000000000838 malloc
+00000000000003e4 sleep
+0000000000000404 sysinfo
+0000000000000364 pipe
+0000000000000374 write
+00000000000003ac fstat
+000000000000075a fprintf
+0000000000000384 kill
+00000000000004d2 vprintf
+00000000000003c4 chdir
+000000000000038c exec
+000000000000035c wait
+000000000000036c read
+00000000000003a4 unlink
+00000000000002fe memcmp
+000000000000034c fork
+00000000000003dc sbrk
+00000000000003ec uptime
+000000000000016e memset
+0000000000000072 main
+0000000000000118 strcmp
+00000000000003cc dup
+0000000000001010 buf
+0000000000000224 stat
+00000000000003b4 link
+0000000000000354 exit
+00000000000000ea start
+000000000000025e atoi
+0000000000000144 strlen
+0000000000000394 open
+0000000000000190 strchr
+00000000000003bc mkdir
+000000000000037c close
+00000000000007b6 free
diff --git a/user/echo.asm b/user/echo.asm
new file mode 100644
index 0000000..1a7ba98
--- /dev/null
+++ b/user/echo.asm
@@ -0,0 +1,1500 @@
+
+user/_echo:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	7139                	addi	sp,sp,-64
+   2:	fc06                	sd	ra,56(sp)
+   4:	f822                	sd	s0,48(sp)
+   6:	f426                	sd	s1,40(sp)
+   8:	f04a                	sd	s2,32(sp)
+   a:	ec4e                	sd	s3,24(sp)
+   c:	e852                	sd	s4,16(sp)
+   e:	e456                	sd	s5,8(sp)
+  10:	0080                	addi	s0,sp,64
+  int i;
+
+  for(i = 1; i < argc; i++){
+  12:	4785                	li	a5,1
+  14:	06a7d063          	bge	a5,a0,74 <main+0x74>
+  18:	00858493          	addi	s1,a1,8
+  1c:	3579                	addiw	a0,a0,-2
+  1e:	02051793          	slli	a5,a0,0x20
+  22:	01d7d513          	srli	a0,a5,0x1d
+  26:	00a48a33          	add	s4,s1,a0
+  2a:	05c1                	addi	a1,a1,16
+  2c:	00a589b3          	add	s3,a1,a0
+    write(1, argv[i], strlen(argv[i]));
+    if(i + 1 < argc){
+      write(1, " ", 1);
+  30:	00001a97          	auipc	s5,0x1
+  34:	890a8a93          	addi	s5,s5,-1904 # 8c0 <malloc+0xf8>
+  38:	a809                	j	4a <main+0x4a>
+  3a:	4605                	li	a2,1
+  3c:	85d6                	mv	a1,s5
+  3e:	4505                	li	a0,1
+  40:	2c4000ef          	jal	304 <write>
+  for(i = 1; i < argc; i++){
+  44:	04a1                	addi	s1,s1,8
+  46:	03348763          	beq	s1,s3,74 <main+0x74>
+    write(1, argv[i], strlen(argv[i]));
+  4a:	0004b903          	ld	s2,0(s1)
+  4e:	854a                	mv	a0,s2
+  50:	084000ef          	jal	d4 <strlen>
+  54:	0005061b          	sext.w	a2,a0
+  58:	85ca                	mv	a1,s2
+  5a:	4505                	li	a0,1
+  5c:	2a8000ef          	jal	304 <write>
+    if(i + 1 < argc){
+  60:	fd449de3          	bne	s1,s4,3a <main+0x3a>
+    } else {
+      write(1, "\n", 1);
+  64:	4605                	li	a2,1
+  66:	00001597          	auipc	a1,0x1
+  6a:	86258593          	addi	a1,a1,-1950 # 8c8 <malloc+0x100>
+  6e:	4505                	li	a0,1
+  70:	294000ef          	jal	304 <write>
+    }
+  }
+  exit(0);
+  74:	4501                	li	a0,0
+  76:	26e000ef          	jal	2e4 <exit>
+
+000000000000007a <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  7a:	1141                	addi	sp,sp,-16
+  7c:	e406                	sd	ra,8(sp)
+  7e:	e022                	sd	s0,0(sp)
+  80:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  82:	f7fff0ef          	jal	0 <main>
+  exit(0);
+  86:	4501                	li	a0,0
+  88:	25c000ef          	jal	2e4 <exit>
+
+000000000000008c <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  8c:	1141                	addi	sp,sp,-16
+  8e:	e422                	sd	s0,8(sp)
+  90:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  92:	87aa                	mv	a5,a0
+  94:	0585                	addi	a1,a1,1
+  96:	0785                	addi	a5,a5,1
+  98:	fff5c703          	lbu	a4,-1(a1)
+  9c:	fee78fa3          	sb	a4,-1(a5)
+  a0:	fb75                	bnez	a4,94 <strcpy+0x8>
+    ;
+  return os;
+}
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cb91                	beqz	a5,c6 <strcmp+0x1e>
+  b4:	0005c703          	lbu	a4,0(a1)
+  b8:	00f71763          	bne	a4,a5,c6 <strcmp+0x1e>
+    p++, q++;
+  bc:	0505                	addi	a0,a0,1
+  be:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  c0:	00054783          	lbu	a5,0(a0)
+  c4:	fbe5                	bnez	a5,b4 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  c6:	0005c503          	lbu	a0,0(a1)
+}
+  ca:	40a7853b          	subw	a0,a5,a0
+  ce:	6422                	ld	s0,8(sp)
+  d0:	0141                	addi	sp,sp,16
+  d2:	8082                	ret
+
+00000000000000d4 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d4:	1141                	addi	sp,sp,-16
+  d6:	e422                	sd	s0,8(sp)
+  d8:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  da:	00054783          	lbu	a5,0(a0)
+  de:	cf91                	beqz	a5,fa <strlen+0x26>
+  e0:	0505                	addi	a0,a0,1
+  e2:	87aa                	mv	a5,a0
+  e4:	86be                	mv	a3,a5
+  e6:	0785                	addi	a5,a5,1
+  e8:	fff7c703          	lbu	a4,-1(a5)
+  ec:	ff65                	bnez	a4,e4 <strlen+0x10>
+  ee:	40a6853b          	subw	a0,a3,a0
+  f2:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  f4:	6422                	ld	s0,8(sp)
+  f6:	0141                	addi	sp,sp,16
+  f8:	8082                	ret
+  for(n = 0; s[n]; n++)
+  fa:	4501                	li	a0,0
+  fc:	bfe5                	j	f4 <strlen+0x20>
+
+00000000000000fe <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  fe:	1141                	addi	sp,sp,-16
+ 100:	e422                	sd	s0,8(sp)
+ 102:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 104:	ca19                	beqz	a2,11a <memset+0x1c>
+ 106:	87aa                	mv	a5,a0
+ 108:	1602                	slli	a2,a2,0x20
+ 10a:	9201                	srli	a2,a2,0x20
+ 10c:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 110:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 114:	0785                	addi	a5,a5,1
+ 116:	fee79de3          	bne	a5,a4,110 <memset+0x12>
+  }
+  return dst;
+}
+ 11a:	6422                	ld	s0,8(sp)
+ 11c:	0141                	addi	sp,sp,16
+ 11e:	8082                	ret
+
+0000000000000120 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 120:	1141                	addi	sp,sp,-16
+ 122:	e422                	sd	s0,8(sp)
+ 124:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 126:	00054783          	lbu	a5,0(a0)
+ 12a:	cb99                	beqz	a5,140 <strchr+0x20>
+    if(*s == c)
+ 12c:	00f58763          	beq	a1,a5,13a <strchr+0x1a>
+  for(; *s; s++)
+ 130:	0505                	addi	a0,a0,1
+ 132:	00054783          	lbu	a5,0(a0)
+ 136:	fbfd                	bnez	a5,12c <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 138:	4501                	li	a0,0
+}
+ 13a:	6422                	ld	s0,8(sp)
+ 13c:	0141                	addi	sp,sp,16
+ 13e:	8082                	ret
+  return 0;
+ 140:	4501                	li	a0,0
+ 142:	bfe5                	j	13a <strchr+0x1a>
+
+0000000000000144 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 144:	711d                	addi	sp,sp,-96
+ 146:	ec86                	sd	ra,88(sp)
+ 148:	e8a2                	sd	s0,80(sp)
+ 14a:	e4a6                	sd	s1,72(sp)
+ 14c:	e0ca                	sd	s2,64(sp)
+ 14e:	fc4e                	sd	s3,56(sp)
+ 150:	f852                	sd	s4,48(sp)
+ 152:	f456                	sd	s5,40(sp)
+ 154:	f05a                	sd	s6,32(sp)
+ 156:	ec5e                	sd	s7,24(sp)
+ 158:	1080                	addi	s0,sp,96
+ 15a:	8baa                	mv	s7,a0
+ 15c:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 15e:	892a                	mv	s2,a0
+ 160:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 162:	4aa9                	li	s5,10
+ 164:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 166:	89a6                	mv	s3,s1
+ 168:	2485                	addiw	s1,s1,1
+ 16a:	0344d663          	bge	s1,s4,196 <gets+0x52>
+    cc = read(0, &c, 1);
+ 16e:	4605                	li	a2,1
+ 170:	faf40593          	addi	a1,s0,-81
+ 174:	4501                	li	a0,0
+ 176:	186000ef          	jal	2fc <read>
+    if(cc < 1)
+ 17a:	00a05e63          	blez	a0,196 <gets+0x52>
+    buf[i++] = c;
+ 17e:	faf44783          	lbu	a5,-81(s0)
+ 182:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 186:	01578763          	beq	a5,s5,194 <gets+0x50>
+ 18a:	0905                	addi	s2,s2,1
+ 18c:	fd679de3          	bne	a5,s6,166 <gets+0x22>
+    buf[i++] = c;
+ 190:	89a6                	mv	s3,s1
+ 192:	a011                	j	196 <gets+0x52>
+ 194:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 196:	99de                	add	s3,s3,s7
+ 198:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 19c:	855e                	mv	a0,s7
+ 19e:	60e6                	ld	ra,88(sp)
+ 1a0:	6446                	ld	s0,80(sp)
+ 1a2:	64a6                	ld	s1,72(sp)
+ 1a4:	6906                	ld	s2,64(sp)
+ 1a6:	79e2                	ld	s3,56(sp)
+ 1a8:	7a42                	ld	s4,48(sp)
+ 1aa:	7aa2                	ld	s5,40(sp)
+ 1ac:	7b02                	ld	s6,32(sp)
+ 1ae:	6be2                	ld	s7,24(sp)
+ 1b0:	6125                	addi	sp,sp,96
+ 1b2:	8082                	ret
+
+00000000000001b4 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1b4:	1101                	addi	sp,sp,-32
+ 1b6:	ec06                	sd	ra,24(sp)
+ 1b8:	e822                	sd	s0,16(sp)
+ 1ba:	e04a                	sd	s2,0(sp)
+ 1bc:	1000                	addi	s0,sp,32
+ 1be:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c0:	4581                	li	a1,0
+ 1c2:	162000ef          	jal	324 <open>
+  if(fd < 0)
+ 1c6:	02054263          	bltz	a0,1ea <stat+0x36>
+ 1ca:	e426                	sd	s1,8(sp)
+ 1cc:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1ce:	85ca                	mv	a1,s2
+ 1d0:	16c000ef          	jal	33c <fstat>
+ 1d4:	892a                	mv	s2,a0
+  close(fd);
+ 1d6:	8526                	mv	a0,s1
+ 1d8:	134000ef          	jal	30c <close>
+  return r;
+ 1dc:	64a2                	ld	s1,8(sp)
+}
+ 1de:	854a                	mv	a0,s2
+ 1e0:	60e2                	ld	ra,24(sp)
+ 1e2:	6442                	ld	s0,16(sp)
+ 1e4:	6902                	ld	s2,0(sp)
+ 1e6:	6105                	addi	sp,sp,32
+ 1e8:	8082                	ret
+    return -1;
+ 1ea:	597d                	li	s2,-1
+ 1ec:	bfcd                	j	1de <stat+0x2a>
+
+00000000000001ee <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1ee:	1141                	addi	sp,sp,-16
+ 1f0:	e422                	sd	s0,8(sp)
+ 1f2:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1f4:	00054683          	lbu	a3,0(a0)
+ 1f8:	fd06879b          	addiw	a5,a3,-48
+ 1fc:	0ff7f793          	zext.b	a5,a5
+ 200:	4625                	li	a2,9
+ 202:	02f66863          	bltu	a2,a5,232 <atoi+0x44>
+ 206:	872a                	mv	a4,a0
+  n = 0;
+ 208:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 20a:	0705                	addi	a4,a4,1
+ 20c:	0025179b          	slliw	a5,a0,0x2
+ 210:	9fa9                	addw	a5,a5,a0
+ 212:	0017979b          	slliw	a5,a5,0x1
+ 216:	9fb5                	addw	a5,a5,a3
+ 218:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 21c:	00074683          	lbu	a3,0(a4)
+ 220:	fd06879b          	addiw	a5,a3,-48
+ 224:	0ff7f793          	zext.b	a5,a5
+ 228:	fef671e3          	bgeu	a2,a5,20a <atoi+0x1c>
+  return n;
+}
+ 22c:	6422                	ld	s0,8(sp)
+ 22e:	0141                	addi	sp,sp,16
+ 230:	8082                	ret
+  n = 0;
+ 232:	4501                	li	a0,0
+ 234:	bfe5                	j	22c <atoi+0x3e>
+
+0000000000000236 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 236:	1141                	addi	sp,sp,-16
+ 238:	e422                	sd	s0,8(sp)
+ 23a:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 23c:	02b57463          	bgeu	a0,a1,264 <memmove+0x2e>
+    while(n-- > 0)
+ 240:	00c05f63          	blez	a2,25e <memmove+0x28>
+ 244:	1602                	slli	a2,a2,0x20
+ 246:	9201                	srli	a2,a2,0x20
+ 248:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 24c:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 24e:	0585                	addi	a1,a1,1
+ 250:	0705                	addi	a4,a4,1
+ 252:	fff5c683          	lbu	a3,-1(a1)
+ 256:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 25a:	fef71ae3          	bne	a4,a5,24e <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 25e:	6422                	ld	s0,8(sp)
+ 260:	0141                	addi	sp,sp,16
+ 262:	8082                	ret
+    dst += n;
+ 264:	00c50733          	add	a4,a0,a2
+    src += n;
+ 268:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 26a:	fec05ae3          	blez	a2,25e <memmove+0x28>
+ 26e:	fff6079b          	addiw	a5,a2,-1
+ 272:	1782                	slli	a5,a5,0x20
+ 274:	9381                	srli	a5,a5,0x20
+ 276:	fff7c793          	not	a5,a5
+ 27a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 27c:	15fd                	addi	a1,a1,-1
+ 27e:	177d                	addi	a4,a4,-1
+ 280:	0005c683          	lbu	a3,0(a1)
+ 284:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 288:	fee79ae3          	bne	a5,a4,27c <memmove+0x46>
+ 28c:	bfc9                	j	25e <memmove+0x28>
+
+000000000000028e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 28e:	1141                	addi	sp,sp,-16
+ 290:	e422                	sd	s0,8(sp)
+ 292:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 294:	ca05                	beqz	a2,2c4 <memcmp+0x36>
+ 296:	fff6069b          	addiw	a3,a2,-1
+ 29a:	1682                	slli	a3,a3,0x20
+ 29c:	9281                	srli	a3,a3,0x20
+ 29e:	0685                	addi	a3,a3,1
+ 2a0:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2a2:	00054783          	lbu	a5,0(a0)
+ 2a6:	0005c703          	lbu	a4,0(a1)
+ 2aa:	00e79863          	bne	a5,a4,2ba <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2ae:	0505                	addi	a0,a0,1
+    p2++;
+ 2b0:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2b2:	fed518e3          	bne	a0,a3,2a2 <memcmp+0x14>
+  }
+  return 0;
+ 2b6:	4501                	li	a0,0
+ 2b8:	a019                	j	2be <memcmp+0x30>
+      return *p1 - *p2;
+ 2ba:	40e7853b          	subw	a0,a5,a4
+}
+ 2be:	6422                	ld	s0,8(sp)
+ 2c0:	0141                	addi	sp,sp,16
+ 2c2:	8082                	ret
+  return 0;
+ 2c4:	4501                	li	a0,0
+ 2c6:	bfe5                	j	2be <memcmp+0x30>
+
+00000000000002c8 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2c8:	1141                	addi	sp,sp,-16
+ 2ca:	e406                	sd	ra,8(sp)
+ 2cc:	e022                	sd	s0,0(sp)
+ 2ce:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2d0:	f67ff0ef          	jal	236 <memmove>
+}
+ 2d4:	60a2                	ld	ra,8(sp)
+ 2d6:	6402                	ld	s0,0(sp)
+ 2d8:	0141                	addi	sp,sp,16
+ 2da:	8082                	ret
+
+00000000000002dc <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2dc:	4885                	li	a7,1
+ ecall
+ 2de:	00000073          	ecall
+ ret
+ 2e2:	8082                	ret
+
+00000000000002e4 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2e4:	4889                	li	a7,2
+ ecall
+ 2e6:	00000073          	ecall
+ ret
+ 2ea:	8082                	ret
+
+00000000000002ec <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2ec:	488d                	li	a7,3
+ ecall
+ 2ee:	00000073          	ecall
+ ret
+ 2f2:	8082                	ret
+
+00000000000002f4 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2f4:	4891                	li	a7,4
+ ecall
+ 2f6:	00000073          	ecall
+ ret
+ 2fa:	8082                	ret
+
+00000000000002fc <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2fc:	4895                	li	a7,5
+ ecall
+ 2fe:	00000073          	ecall
+ ret
+ 302:	8082                	ret
+
+0000000000000304 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 304:	48c1                	li	a7,16
+ ecall
+ 306:	00000073          	ecall
+ ret
+ 30a:	8082                	ret
+
+000000000000030c <close>:
+.global close
+close:
+ li a7, SYS_close
+ 30c:	48d5                	li	a7,21
+ ecall
+ 30e:	00000073          	ecall
+ ret
+ 312:	8082                	ret
+
+0000000000000314 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 314:	4899                	li	a7,6
+ ecall
+ 316:	00000073          	ecall
+ ret
+ 31a:	8082                	ret
+
+000000000000031c <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 31c:	489d                	li	a7,7
+ ecall
+ 31e:	00000073          	ecall
+ ret
+ 322:	8082                	ret
+
+0000000000000324 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 324:	48bd                	li	a7,15
+ ecall
+ 326:	00000073          	ecall
+ ret
+ 32a:	8082                	ret
+
+000000000000032c <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 32c:	48c5                	li	a7,17
+ ecall
+ 32e:	00000073          	ecall
+ ret
+ 332:	8082                	ret
+
+0000000000000334 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 334:	48c9                	li	a7,18
+ ecall
+ 336:	00000073          	ecall
+ ret
+ 33a:	8082                	ret
+
+000000000000033c <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 33c:	48a1                	li	a7,8
+ ecall
+ 33e:	00000073          	ecall
+ ret
+ 342:	8082                	ret
+
+0000000000000344 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 344:	48cd                	li	a7,19
+ ecall
+ 346:	00000073          	ecall
+ ret
+ 34a:	8082                	ret
+
+000000000000034c <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 34c:	48d1                	li	a7,20
+ ecall
+ 34e:	00000073          	ecall
+ ret
+ 352:	8082                	ret
+
+0000000000000354 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 354:	48a5                	li	a7,9
+ ecall
+ 356:	00000073          	ecall
+ ret
+ 35a:	8082                	ret
+
+000000000000035c <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 35c:	48a9                	li	a7,10
+ ecall
+ 35e:	00000073          	ecall
+ ret
+ 362:	8082                	ret
+
+0000000000000364 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 364:	48ad                	li	a7,11
+ ecall
+ 366:	00000073          	ecall
+ ret
+ 36a:	8082                	ret
+
+000000000000036c <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 36c:	48b1                	li	a7,12
+ ecall
+ 36e:	00000073          	ecall
+ ret
+ 372:	8082                	ret
+
+0000000000000374 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 374:	48b5                	li	a7,13
+ ecall
+ 376:	00000073          	ecall
+ ret
+ 37a:	8082                	ret
+
+000000000000037c <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 37c:	48b9                	li	a7,14
+ ecall
+ 37e:	00000073          	ecall
+ ret
+ 382:	8082                	ret
+
+0000000000000384 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 384:	48d9                	li	a7,22
+ ecall
+ 386:	00000073          	ecall
+ ret
+ 38a:	8082                	ret
+
+000000000000038c <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 38c:	48dd                	li	a7,23
+ ecall
+ 38e:	00000073          	ecall
+ ret
+ 392:	8082                	ret
+
+0000000000000394 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 394:	48e1                	li	a7,24
+ ecall
+ 396:	00000073          	ecall
+ ret
+ 39a:	8082                	ret
+
+000000000000039c <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 39c:	1101                	addi	sp,sp,-32
+ 39e:	ec06                	sd	ra,24(sp)
+ 3a0:	e822                	sd	s0,16(sp)
+ 3a2:	1000                	addi	s0,sp,32
+ 3a4:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3a8:	4605                	li	a2,1
+ 3aa:	fef40593          	addi	a1,s0,-17
+ 3ae:	f57ff0ef          	jal	304 <write>
+}
+ 3b2:	60e2                	ld	ra,24(sp)
+ 3b4:	6442                	ld	s0,16(sp)
+ 3b6:	6105                	addi	sp,sp,32
+ 3b8:	8082                	ret
+
+00000000000003ba <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3ba:	7139                	addi	sp,sp,-64
+ 3bc:	fc06                	sd	ra,56(sp)
+ 3be:	f822                	sd	s0,48(sp)
+ 3c0:	f426                	sd	s1,40(sp)
+ 3c2:	0080                	addi	s0,sp,64
+ 3c4:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3c6:	c299                	beqz	a3,3cc <printint+0x12>
+ 3c8:	0805c963          	bltz	a1,45a <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3cc:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3ce:	4881                	li	a7,0
+ 3d0:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3d4:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3d6:	2601                	sext.w	a2,a2
+ 3d8:	00000517          	auipc	a0,0x0
+ 3dc:	50050513          	addi	a0,a0,1280 # 8d8 <digits>
+ 3e0:	883a                	mv	a6,a4
+ 3e2:	2705                	addiw	a4,a4,1
+ 3e4:	02c5f7bb          	remuw	a5,a1,a2
+ 3e8:	1782                	slli	a5,a5,0x20
+ 3ea:	9381                	srli	a5,a5,0x20
+ 3ec:	97aa                	add	a5,a5,a0
+ 3ee:	0007c783          	lbu	a5,0(a5)
+ 3f2:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3f6:	0005879b          	sext.w	a5,a1
+ 3fa:	02c5d5bb          	divuw	a1,a1,a2
+ 3fe:	0685                	addi	a3,a3,1
+ 400:	fec7f0e3          	bgeu	a5,a2,3e0 <printint+0x26>
+  if(neg)
+ 404:	00088c63          	beqz	a7,41c <printint+0x62>
+    buf[i++] = '-';
+ 408:	fd070793          	addi	a5,a4,-48
+ 40c:	00878733          	add	a4,a5,s0
+ 410:	02d00793          	li	a5,45
+ 414:	fef70823          	sb	a5,-16(a4)
+ 418:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 41c:	02e05a63          	blez	a4,450 <printint+0x96>
+ 420:	f04a                	sd	s2,32(sp)
+ 422:	ec4e                	sd	s3,24(sp)
+ 424:	fc040793          	addi	a5,s0,-64
+ 428:	00e78933          	add	s2,a5,a4
+ 42c:	fff78993          	addi	s3,a5,-1
+ 430:	99ba                	add	s3,s3,a4
+ 432:	377d                	addiw	a4,a4,-1
+ 434:	1702                	slli	a4,a4,0x20
+ 436:	9301                	srli	a4,a4,0x20
+ 438:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 43c:	fff94583          	lbu	a1,-1(s2)
+ 440:	8526                	mv	a0,s1
+ 442:	f5bff0ef          	jal	39c <putc>
+  while(--i >= 0)
+ 446:	197d                	addi	s2,s2,-1
+ 448:	ff391ae3          	bne	s2,s3,43c <printint+0x82>
+ 44c:	7902                	ld	s2,32(sp)
+ 44e:	69e2                	ld	s3,24(sp)
+}
+ 450:	70e2                	ld	ra,56(sp)
+ 452:	7442                	ld	s0,48(sp)
+ 454:	74a2                	ld	s1,40(sp)
+ 456:	6121                	addi	sp,sp,64
+ 458:	8082                	ret
+    x = -xx;
+ 45a:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 45e:	4885                	li	a7,1
+    x = -xx;
+ 460:	bf85                	j	3d0 <printint+0x16>
+
+0000000000000462 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 462:	711d                	addi	sp,sp,-96
+ 464:	ec86                	sd	ra,88(sp)
+ 466:	e8a2                	sd	s0,80(sp)
+ 468:	e0ca                	sd	s2,64(sp)
+ 46a:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 46c:	0005c903          	lbu	s2,0(a1)
+ 470:	26090863          	beqz	s2,6e0 <vprintf+0x27e>
+ 474:	e4a6                	sd	s1,72(sp)
+ 476:	fc4e                	sd	s3,56(sp)
+ 478:	f852                	sd	s4,48(sp)
+ 47a:	f456                	sd	s5,40(sp)
+ 47c:	f05a                	sd	s6,32(sp)
+ 47e:	ec5e                	sd	s7,24(sp)
+ 480:	e862                	sd	s8,16(sp)
+ 482:	e466                	sd	s9,8(sp)
+ 484:	8b2a                	mv	s6,a0
+ 486:	8a2e                	mv	s4,a1
+ 488:	8bb2                	mv	s7,a2
+  state = 0;
+ 48a:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 48c:	4481                	li	s1,0
+ 48e:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 490:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 494:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 498:	06c00c93          	li	s9,108
+ 49c:	a005                	j	4bc <vprintf+0x5a>
+        putc(fd, c0);
+ 49e:	85ca                	mv	a1,s2
+ 4a0:	855a                	mv	a0,s6
+ 4a2:	efbff0ef          	jal	39c <putc>
+ 4a6:	a019                	j	4ac <vprintf+0x4a>
+    } else if(state == '%'){
+ 4a8:	03598263          	beq	s3,s5,4cc <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 4ac:	2485                	addiw	s1,s1,1
+ 4ae:	8726                	mv	a4,s1
+ 4b0:	009a07b3          	add	a5,s4,s1
+ 4b4:	0007c903          	lbu	s2,0(a5)
+ 4b8:	20090c63          	beqz	s2,6d0 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 4bc:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 4c0:	fe0994e3          	bnez	s3,4a8 <vprintf+0x46>
+      if(c0 == '%'){
+ 4c4:	fd579de3          	bne	a5,s5,49e <vprintf+0x3c>
+        state = '%';
+ 4c8:	89be                	mv	s3,a5
+ 4ca:	b7cd                	j	4ac <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 4cc:	00ea06b3          	add	a3,s4,a4
+ 4d0:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 4d4:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 4d6:	c681                	beqz	a3,4de <vprintf+0x7c>
+ 4d8:	9752                	add	a4,a4,s4
+ 4da:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 4de:	03878f63          	beq	a5,s8,51c <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4e2:	05978963          	beq	a5,s9,534 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 4e6:	07500713          	li	a4,117
+ 4ea:	0ee78363          	beq	a5,a4,5d0 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 4ee:	07800713          	li	a4,120
+ 4f2:	12e78563          	beq	a5,a4,61c <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 4f6:	07000713          	li	a4,112
+ 4fa:	14e78a63          	beq	a5,a4,64e <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4fe:	07300713          	li	a4,115
+ 502:	18e78a63          	beq	a5,a4,696 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 506:	02500713          	li	a4,37
+ 50a:	04e79563          	bne	a5,a4,554 <vprintf+0xf2>
+        putc(fd, '%');
+ 50e:	02500593          	li	a1,37
+ 512:	855a                	mv	a0,s6
+ 514:	e89ff0ef          	jal	39c <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 518:	4981                	li	s3,0
+ 51a:	bf49                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 51c:	008b8913          	addi	s2,s7,8
+ 520:	4685                	li	a3,1
+ 522:	4629                	li	a2,10
+ 524:	000ba583          	lw	a1,0(s7)
+ 528:	855a                	mv	a0,s6
+ 52a:	e91ff0ef          	jal	3ba <printint>
+ 52e:	8bca                	mv	s7,s2
+      state = 0;
+ 530:	4981                	li	s3,0
+ 532:	bfad                	j	4ac <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 534:	06400793          	li	a5,100
+ 538:	02f68963          	beq	a3,a5,56a <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 53c:	06c00793          	li	a5,108
+ 540:	04f68263          	beq	a3,a5,584 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 544:	07500793          	li	a5,117
+ 548:	0af68063          	beq	a3,a5,5e8 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 54c:	07800793          	li	a5,120
+ 550:	0ef68263          	beq	a3,a5,634 <vprintf+0x1d2>
+        putc(fd, '%');
+ 554:	02500593          	li	a1,37
+ 558:	855a                	mv	a0,s6
+ 55a:	e43ff0ef          	jal	39c <putc>
+        putc(fd, c0);
+ 55e:	85ca                	mv	a1,s2
+ 560:	855a                	mv	a0,s6
+ 562:	e3bff0ef          	jal	39c <putc>
+      state = 0;
+ 566:	4981                	li	s3,0
+ 568:	b791                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 56a:	008b8913          	addi	s2,s7,8
+ 56e:	4685                	li	a3,1
+ 570:	4629                	li	a2,10
+ 572:	000ba583          	lw	a1,0(s7)
+ 576:	855a                	mv	a0,s6
+ 578:	e43ff0ef          	jal	3ba <printint>
+        i += 1;
+ 57c:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 57e:	8bca                	mv	s7,s2
+      state = 0;
+ 580:	4981                	li	s3,0
+        i += 1;
+ 582:	b72d                	j	4ac <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 584:	06400793          	li	a5,100
+ 588:	02f60763          	beq	a2,a5,5b6 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 58c:	07500793          	li	a5,117
+ 590:	06f60963          	beq	a2,a5,602 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 594:	07800793          	li	a5,120
+ 598:	faf61ee3          	bne	a2,a5,554 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 59c:	008b8913          	addi	s2,s7,8
+ 5a0:	4681                	li	a3,0
+ 5a2:	4641                	li	a2,16
+ 5a4:	000ba583          	lw	a1,0(s7)
+ 5a8:	855a                	mv	a0,s6
+ 5aa:	e11ff0ef          	jal	3ba <printint>
+        i += 2;
+ 5ae:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5b0:	8bca                	mv	s7,s2
+      state = 0;
+ 5b2:	4981                	li	s3,0
+        i += 2;
+ 5b4:	bde5                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5b6:	008b8913          	addi	s2,s7,8
+ 5ba:	4685                	li	a3,1
+ 5bc:	4629                	li	a2,10
+ 5be:	000ba583          	lw	a1,0(s7)
+ 5c2:	855a                	mv	a0,s6
+ 5c4:	df7ff0ef          	jal	3ba <printint>
+        i += 2;
+ 5c8:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5ca:	8bca                	mv	s7,s2
+      state = 0;
+ 5cc:	4981                	li	s3,0
+        i += 2;
+ 5ce:	bdf9                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 5d0:	008b8913          	addi	s2,s7,8
+ 5d4:	4681                	li	a3,0
+ 5d6:	4629                	li	a2,10
+ 5d8:	000ba583          	lw	a1,0(s7)
+ 5dc:	855a                	mv	a0,s6
+ 5de:	dddff0ef          	jal	3ba <printint>
+ 5e2:	8bca                	mv	s7,s2
+      state = 0;
+ 5e4:	4981                	li	s3,0
+ 5e6:	b5d9                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5e8:	008b8913          	addi	s2,s7,8
+ 5ec:	4681                	li	a3,0
+ 5ee:	4629                	li	a2,10
+ 5f0:	000ba583          	lw	a1,0(s7)
+ 5f4:	855a                	mv	a0,s6
+ 5f6:	dc5ff0ef          	jal	3ba <printint>
+        i += 1;
+ 5fa:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5fc:	8bca                	mv	s7,s2
+      state = 0;
+ 5fe:	4981                	li	s3,0
+        i += 1;
+ 600:	b575                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 602:	008b8913          	addi	s2,s7,8
+ 606:	4681                	li	a3,0
+ 608:	4629                	li	a2,10
+ 60a:	000ba583          	lw	a1,0(s7)
+ 60e:	855a                	mv	a0,s6
+ 610:	dabff0ef          	jal	3ba <printint>
+        i += 2;
+ 614:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 616:	8bca                	mv	s7,s2
+      state = 0;
+ 618:	4981                	li	s3,0
+        i += 2;
+ 61a:	bd49                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 61c:	008b8913          	addi	s2,s7,8
+ 620:	4681                	li	a3,0
+ 622:	4641                	li	a2,16
+ 624:	000ba583          	lw	a1,0(s7)
+ 628:	855a                	mv	a0,s6
+ 62a:	d91ff0ef          	jal	3ba <printint>
+ 62e:	8bca                	mv	s7,s2
+      state = 0;
+ 630:	4981                	li	s3,0
+ 632:	bdad                	j	4ac <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 634:	008b8913          	addi	s2,s7,8
+ 638:	4681                	li	a3,0
+ 63a:	4641                	li	a2,16
+ 63c:	000ba583          	lw	a1,0(s7)
+ 640:	855a                	mv	a0,s6
+ 642:	d79ff0ef          	jal	3ba <printint>
+        i += 1;
+ 646:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 648:	8bca                	mv	s7,s2
+      state = 0;
+ 64a:	4981                	li	s3,0
+        i += 1;
+ 64c:	b585                	j	4ac <vprintf+0x4a>
+ 64e:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 650:	008b8d13          	addi	s10,s7,8
+ 654:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 658:	03000593          	li	a1,48
+ 65c:	855a                	mv	a0,s6
+ 65e:	d3fff0ef          	jal	39c <putc>
+  putc(fd, 'x');
+ 662:	07800593          	li	a1,120
+ 666:	855a                	mv	a0,s6
+ 668:	d35ff0ef          	jal	39c <putc>
+ 66c:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 66e:	00000b97          	auipc	s7,0x0
+ 672:	26ab8b93          	addi	s7,s7,618 # 8d8 <digits>
+ 676:	03c9d793          	srli	a5,s3,0x3c
+ 67a:	97de                	add	a5,a5,s7
+ 67c:	0007c583          	lbu	a1,0(a5)
+ 680:	855a                	mv	a0,s6
+ 682:	d1bff0ef          	jal	39c <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 686:	0992                	slli	s3,s3,0x4
+ 688:	397d                	addiw	s2,s2,-1
+ 68a:	fe0916e3          	bnez	s2,676 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 68e:	8bea                	mv	s7,s10
+      state = 0;
+ 690:	4981                	li	s3,0
+ 692:	6d02                	ld	s10,0(sp)
+ 694:	bd21                	j	4ac <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 696:	008b8993          	addi	s3,s7,8
+ 69a:	000bb903          	ld	s2,0(s7)
+ 69e:	00090f63          	beqz	s2,6bc <vprintf+0x25a>
+        for(; *s; s++)
+ 6a2:	00094583          	lbu	a1,0(s2)
+ 6a6:	c195                	beqz	a1,6ca <vprintf+0x268>
+          putc(fd, *s);
+ 6a8:	855a                	mv	a0,s6
+ 6aa:	cf3ff0ef          	jal	39c <putc>
+        for(; *s; s++)
+ 6ae:	0905                	addi	s2,s2,1
+ 6b0:	00094583          	lbu	a1,0(s2)
+ 6b4:	f9f5                	bnez	a1,6a8 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6b6:	8bce                	mv	s7,s3
+      state = 0;
+ 6b8:	4981                	li	s3,0
+ 6ba:	bbcd                	j	4ac <vprintf+0x4a>
+          s = "(null)";
+ 6bc:	00000917          	auipc	s2,0x0
+ 6c0:	21490913          	addi	s2,s2,532 # 8d0 <malloc+0x108>
+        for(; *s; s++)
+ 6c4:	02800593          	li	a1,40
+ 6c8:	b7c5                	j	6a8 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6ca:	8bce                	mv	s7,s3
+      state = 0;
+ 6cc:	4981                	li	s3,0
+ 6ce:	bbf9                	j	4ac <vprintf+0x4a>
+ 6d0:	64a6                	ld	s1,72(sp)
+ 6d2:	79e2                	ld	s3,56(sp)
+ 6d4:	7a42                	ld	s4,48(sp)
+ 6d6:	7aa2                	ld	s5,40(sp)
+ 6d8:	7b02                	ld	s6,32(sp)
+ 6da:	6be2                	ld	s7,24(sp)
+ 6dc:	6c42                	ld	s8,16(sp)
+ 6de:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 6e0:	60e6                	ld	ra,88(sp)
+ 6e2:	6446                	ld	s0,80(sp)
+ 6e4:	6906                	ld	s2,64(sp)
+ 6e6:	6125                	addi	sp,sp,96
+ 6e8:	8082                	ret
+
+00000000000006ea <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6ea:	715d                	addi	sp,sp,-80
+ 6ec:	ec06                	sd	ra,24(sp)
+ 6ee:	e822                	sd	s0,16(sp)
+ 6f0:	1000                	addi	s0,sp,32
+ 6f2:	e010                	sd	a2,0(s0)
+ 6f4:	e414                	sd	a3,8(s0)
+ 6f6:	e818                	sd	a4,16(s0)
+ 6f8:	ec1c                	sd	a5,24(s0)
+ 6fa:	03043023          	sd	a6,32(s0)
+ 6fe:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 702:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 706:	8622                	mv	a2,s0
+ 708:	d5bff0ef          	jal	462 <vprintf>
+}
+ 70c:	60e2                	ld	ra,24(sp)
+ 70e:	6442                	ld	s0,16(sp)
+ 710:	6161                	addi	sp,sp,80
+ 712:	8082                	ret
+
+0000000000000714 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 714:	711d                	addi	sp,sp,-96
+ 716:	ec06                	sd	ra,24(sp)
+ 718:	e822                	sd	s0,16(sp)
+ 71a:	1000                	addi	s0,sp,32
+ 71c:	e40c                	sd	a1,8(s0)
+ 71e:	e810                	sd	a2,16(s0)
+ 720:	ec14                	sd	a3,24(s0)
+ 722:	f018                	sd	a4,32(s0)
+ 724:	f41c                	sd	a5,40(s0)
+ 726:	03043823          	sd	a6,48(s0)
+ 72a:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 72e:	00840613          	addi	a2,s0,8
+ 732:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 736:	85aa                	mv	a1,a0
+ 738:	4505                	li	a0,1
+ 73a:	d29ff0ef          	jal	462 <vprintf>
+}
+ 73e:	60e2                	ld	ra,24(sp)
+ 740:	6442                	ld	s0,16(sp)
+ 742:	6125                	addi	sp,sp,96
+ 744:	8082                	ret
+
+0000000000000746 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 746:	1141                	addi	sp,sp,-16
+ 748:	e422                	sd	s0,8(sp)
+ 74a:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 74c:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 750:	00001797          	auipc	a5,0x1
+ 754:	8b07b783          	ld	a5,-1872(a5) # 1000 <freep>
+ 758:	a02d                	j	782 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 75a:	4618                	lw	a4,8(a2)
+ 75c:	9f2d                	addw	a4,a4,a1
+ 75e:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 762:	6398                	ld	a4,0(a5)
+ 764:	6310                	ld	a2,0(a4)
+ 766:	a83d                	j	7a4 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 768:	ff852703          	lw	a4,-8(a0)
+ 76c:	9f31                	addw	a4,a4,a2
+ 76e:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 770:	ff053683          	ld	a3,-16(a0)
+ 774:	a091                	j	7b8 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 776:	6398                	ld	a4,0(a5)
+ 778:	00e7e463          	bltu	a5,a4,780 <free+0x3a>
+ 77c:	00e6ea63          	bltu	a3,a4,790 <free+0x4a>
+{
+ 780:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 782:	fed7fae3          	bgeu	a5,a3,776 <free+0x30>
+ 786:	6398                	ld	a4,0(a5)
+ 788:	00e6e463          	bltu	a3,a4,790 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 78c:	fee7eae3          	bltu	a5,a4,780 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 790:	ff852583          	lw	a1,-8(a0)
+ 794:	6390                	ld	a2,0(a5)
+ 796:	02059813          	slli	a6,a1,0x20
+ 79a:	01c85713          	srli	a4,a6,0x1c
+ 79e:	9736                	add	a4,a4,a3
+ 7a0:	fae60de3          	beq	a2,a4,75a <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a4:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 7a8:	4790                	lw	a2,8(a5)
+ 7aa:	02061593          	slli	a1,a2,0x20
+ 7ae:	01c5d713          	srli	a4,a1,0x1c
+ 7b2:	973e                	add	a4,a4,a5
+ 7b4:	fae68ae3          	beq	a3,a4,768 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7b8:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7ba:	00001717          	auipc	a4,0x1
+ 7be:	84f73323          	sd	a5,-1978(a4) # 1000 <freep>
+}
+ 7c2:	6422                	ld	s0,8(sp)
+ 7c4:	0141                	addi	sp,sp,16
+ 7c6:	8082                	ret
+
+00000000000007c8 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7c8:	7139                	addi	sp,sp,-64
+ 7ca:	fc06                	sd	ra,56(sp)
+ 7cc:	f822                	sd	s0,48(sp)
+ 7ce:	f426                	sd	s1,40(sp)
+ 7d0:	ec4e                	sd	s3,24(sp)
+ 7d2:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7d4:	02051493          	slli	s1,a0,0x20
+ 7d8:	9081                	srli	s1,s1,0x20
+ 7da:	04bd                	addi	s1,s1,15
+ 7dc:	8091                	srli	s1,s1,0x4
+ 7de:	0014899b          	addiw	s3,s1,1
+ 7e2:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7e4:	00001517          	auipc	a0,0x1
+ 7e8:	81c53503          	ld	a0,-2020(a0) # 1000 <freep>
+ 7ec:	c915                	beqz	a0,820 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7ee:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7f0:	4798                	lw	a4,8(a5)
+ 7f2:	08977a63          	bgeu	a4,s1,886 <malloc+0xbe>
+ 7f6:	f04a                	sd	s2,32(sp)
+ 7f8:	e852                	sd	s4,16(sp)
+ 7fa:	e456                	sd	s5,8(sp)
+ 7fc:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7fe:	8a4e                	mv	s4,s3
+ 800:	0009871b          	sext.w	a4,s3
+ 804:	6685                	lui	a3,0x1
+ 806:	00d77363          	bgeu	a4,a3,80c <malloc+0x44>
+ 80a:	6a05                	lui	s4,0x1
+ 80c:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 810:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 814:	00000917          	auipc	s2,0x0
+ 818:	7ec90913          	addi	s2,s2,2028 # 1000 <freep>
+  if(p == (char*)-1)
+ 81c:	5afd                	li	s5,-1
+ 81e:	a081                	j	85e <malloc+0x96>
+ 820:	f04a                	sd	s2,32(sp)
+ 822:	e852                	sd	s4,16(sp)
+ 824:	e456                	sd	s5,8(sp)
+ 826:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 828:	00000797          	auipc	a5,0x0
+ 82c:	7e878793          	addi	a5,a5,2024 # 1010 <base>
+ 830:	00000717          	auipc	a4,0x0
+ 834:	7cf73823          	sd	a5,2000(a4) # 1000 <freep>
+ 838:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 83a:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 83e:	b7c1                	j	7fe <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 840:	6398                	ld	a4,0(a5)
+ 842:	e118                	sd	a4,0(a0)
+ 844:	a8a9                	j	89e <malloc+0xd6>
+  hp->s.size = nu;
+ 846:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 84a:	0541                	addi	a0,a0,16
+ 84c:	efbff0ef          	jal	746 <free>
+  return freep;
+ 850:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 854:	c12d                	beqz	a0,8b6 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 856:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 858:	4798                	lw	a4,8(a5)
+ 85a:	02977263          	bgeu	a4,s1,87e <malloc+0xb6>
+    if(p == freep)
+ 85e:	00093703          	ld	a4,0(s2)
+ 862:	853e                	mv	a0,a5
+ 864:	fef719e3          	bne	a4,a5,856 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 868:	8552                	mv	a0,s4
+ 86a:	b03ff0ef          	jal	36c <sbrk>
+  if(p == (char*)-1)
+ 86e:	fd551ce3          	bne	a0,s5,846 <malloc+0x7e>
+        return 0;
+ 872:	4501                	li	a0,0
+ 874:	7902                	ld	s2,32(sp)
+ 876:	6a42                	ld	s4,16(sp)
+ 878:	6aa2                	ld	s5,8(sp)
+ 87a:	6b02                	ld	s6,0(sp)
+ 87c:	a03d                	j	8aa <malloc+0xe2>
+ 87e:	7902                	ld	s2,32(sp)
+ 880:	6a42                	ld	s4,16(sp)
+ 882:	6aa2                	ld	s5,8(sp)
+ 884:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 886:	fae48de3          	beq	s1,a4,840 <malloc+0x78>
+        p->s.size -= nunits;
+ 88a:	4137073b          	subw	a4,a4,s3
+ 88e:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 890:	02071693          	slli	a3,a4,0x20
+ 894:	01c6d713          	srli	a4,a3,0x1c
+ 898:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 89a:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 89e:	00000717          	auipc	a4,0x0
+ 8a2:	76a73123          	sd	a0,1890(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 8a6:	01078513          	addi	a0,a5,16
+  }
+}
+ 8aa:	70e2                	ld	ra,56(sp)
+ 8ac:	7442                	ld	s0,48(sp)
+ 8ae:	74a2                	ld	s1,40(sp)
+ 8b0:	69e2                	ld	s3,24(sp)
+ 8b2:	6121                	addi	sp,sp,64
+ 8b4:	8082                	ret
+ 8b6:	7902                	ld	s2,32(sp)
+ 8b8:	6a42                	ld	s4,16(sp)
+ 8ba:	6aa2                	ld	s5,8(sp)
+ 8bc:	6b02                	ld	s6,0(sp)
+ 8be:	b7f5                	j	8aa <malloc+0xe2>
diff --git a/user/echo.c b/user/echo.c
new file mode 100644
index 0000000..3f19cd7
--- /dev/null
+++ b/user/echo.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  for(i = 1; i < argc; i++){
+    write(1, argv[i], strlen(argv[i]));
+    if(i + 1 < argc){
+      write(1, " ", 1);
+    } else {
+      write(1, "\n", 1);
+    }
+  }
+  exit(0);
+}
diff --git a/user/echo.d b/user/echo.d
new file mode 100644
index 0000000..ccfe984
--- /dev/null
+++ b/user/echo.d
@@ -0,0 +1 @@
+user/echo.o: user/echo.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/echo.o b/user/echo.o
new file mode 100644
index 0000000..098bd86
Binary files /dev/null and b/user/echo.o differ
diff --git a/user/echo.sym b/user/echo.sym
new file mode 100644
index 0000000..0eadae2
--- /dev/null
+++ b/user/echo.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+00000000000008c0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 echo.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000039c putc
+00000000000003ba printint
+00000000000008d8 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+000000000000008c strcpy
+0000000000000714 printf
+0000000000000236 memmove
+000000000000032c mknod
+000000000000038c trace
+0000000000000144 gets
+0000000000000364 getpid
+0000000000000384 hello
+00000000000002c8 memcpy
+00000000000007c8 malloc
+0000000000000374 sleep
+0000000000000394 sysinfo
+00000000000002f4 pipe
+0000000000000304 write
+000000000000033c fstat
+00000000000006ea fprintf
+0000000000000314 kill
+0000000000000462 vprintf
+0000000000000354 chdir
+000000000000031c exec
+00000000000002ec wait
+00000000000002fc read
+0000000000000334 unlink
+000000000000028e memcmp
+00000000000002dc fork
+000000000000036c sbrk
+000000000000037c uptime
+00000000000000fe memset
+0000000000000000 main
+00000000000000a8 strcmp
+000000000000035c dup
+00000000000001b4 stat
+0000000000000344 link
+00000000000002e4 exit
+000000000000007a start
+00000000000001ee atoi
+00000000000000d4 strlen
+0000000000000324 open
+0000000000000120 strchr
+000000000000034c mkdir
+000000000000030c close
+0000000000000746 free
diff --git a/user/forktest.asm b/user/forktest.asm
new file mode 100644
index 0000000..89717c7
--- /dev/null
+++ b/user/forktest.asm
@@ -0,0 +1,813 @@
+
+user/_forktest:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <print>:
+
+#define N  1000
+
+void
+print(const char *s)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	1000                	addi	s0,sp,32
+   a:	84aa                	mv	s1,a0
+  write(1, s, strlen(s));
+   c:	124000ef          	jal	130 <strlen>
+  10:	0005061b          	sext.w	a2,a0
+  14:	85a6                	mv	a1,s1
+  16:	4505                	li	a0,1
+  18:	348000ef          	jal	360 <write>
+}
+  1c:	60e2                	ld	ra,24(sp)
+  1e:	6442                	ld	s0,16(sp)
+  20:	64a2                	ld	s1,8(sp)
+  22:	6105                	addi	sp,sp,32
+  24:	8082                	ret
+
+0000000000000026 <forktest>:
+
+void
+forktest(void)
+{
+  26:	1101                	addi	sp,sp,-32
+  28:	ec06                	sd	ra,24(sp)
+  2a:	e822                	sd	s0,16(sp)
+  2c:	e426                	sd	s1,8(sp)
+  2e:	e04a                	sd	s2,0(sp)
+  30:	1000                	addi	s0,sp,32
+  int n, pid;
+
+  print("fork test\n");
+  32:	00000517          	auipc	a0,0x0
+  36:	3c650513          	addi	a0,a0,966 # 3f8 <sysinfo+0x8>
+  3a:	fc7ff0ef          	jal	0 <print>
+
+  for(n=0; n<N; n++){
+  3e:	4481                	li	s1,0
+  40:	3e800913          	li	s2,1000
+    pid = fork();
+  44:	2f4000ef          	jal	338 <fork>
+    if(pid < 0)
+  48:	04054363          	bltz	a0,8e <forktest+0x68>
+      break;
+    if(pid == 0)
+  4c:	cd09                	beqz	a0,66 <forktest+0x40>
+  for(n=0; n<N; n++){
+  4e:	2485                	addiw	s1,s1,1
+  50:	ff249ae3          	bne	s1,s2,44 <forktest+0x1e>
+      exit(0);
+  }
+
+  if(n == N){
+    print("fork claimed to work N times!\n");
+  54:	00000517          	auipc	a0,0x0
+  58:	3f450513          	addi	a0,a0,1012 # 448 <sysinfo+0x58>
+  5c:	fa5ff0ef          	jal	0 <print>
+    exit(1);
+  60:	4505                	li	a0,1
+  62:	2de000ef          	jal	340 <exit>
+      exit(0);
+  66:	2da000ef          	jal	340 <exit>
+  }
+
+  for(; n > 0; n--){
+    if(wait(0) < 0){
+      print("wait stopped early\n");
+  6a:	00000517          	auipc	a0,0x0
+  6e:	39e50513          	addi	a0,a0,926 # 408 <sysinfo+0x18>
+  72:	f8fff0ef          	jal	0 <print>
+      exit(1);
+  76:	4505                	li	a0,1
+  78:	2c8000ef          	jal	340 <exit>
+    }
+  }
+
+  if(wait(0) != -1){
+    print("wait got too many\n");
+  7c:	00000517          	auipc	a0,0x0
+  80:	3a450513          	addi	a0,a0,932 # 420 <sysinfo+0x30>
+  84:	f7dff0ef          	jal	0 <print>
+    exit(1);
+  88:	4505                	li	a0,1
+  8a:	2b6000ef          	jal	340 <exit>
+  for(; n > 0; n--){
+  8e:	00905963          	blez	s1,a0 <forktest+0x7a>
+    if(wait(0) < 0){
+  92:	4501                	li	a0,0
+  94:	2b4000ef          	jal	348 <wait>
+  98:	fc0549e3          	bltz	a0,6a <forktest+0x44>
+  for(; n > 0; n--){
+  9c:	34fd                	addiw	s1,s1,-1
+  9e:	f8f5                	bnez	s1,92 <forktest+0x6c>
+  if(wait(0) != -1){
+  a0:	4501                	li	a0,0
+  a2:	2a6000ef          	jal	348 <wait>
+  a6:	57fd                	li	a5,-1
+  a8:	fcf51ae3          	bne	a0,a5,7c <forktest+0x56>
+  }
+
+  print("fork test OK\n");
+  ac:	00000517          	auipc	a0,0x0
+  b0:	38c50513          	addi	a0,a0,908 # 438 <sysinfo+0x48>
+  b4:	f4dff0ef          	jal	0 <print>
+}
+  b8:	60e2                	ld	ra,24(sp)
+  ba:	6442                	ld	s0,16(sp)
+  bc:	64a2                	ld	s1,8(sp)
+  be:	6902                	ld	s2,0(sp)
+  c0:	6105                	addi	sp,sp,32
+  c2:	8082                	ret
+
+00000000000000c4 <main>:
+
+int
+main(void)
+{
+  c4:	1141                	addi	sp,sp,-16
+  c6:	e406                	sd	ra,8(sp)
+  c8:	e022                	sd	s0,0(sp)
+  ca:	0800                	addi	s0,sp,16
+  forktest();
+  cc:	f5bff0ef          	jal	26 <forktest>
+  exit(0);
+  d0:	4501                	li	a0,0
+  d2:	26e000ef          	jal	340 <exit>
+
+00000000000000d6 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  d6:	1141                	addi	sp,sp,-16
+  d8:	e406                	sd	ra,8(sp)
+  da:	e022                	sd	s0,0(sp)
+  dc:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  de:	fe7ff0ef          	jal	c4 <main>
+  exit(0);
+  e2:	4501                	li	a0,0
+  e4:	25c000ef          	jal	340 <exit>
+
+00000000000000e8 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  e8:	1141                	addi	sp,sp,-16
+  ea:	e422                	sd	s0,8(sp)
+  ec:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  ee:	87aa                	mv	a5,a0
+  f0:	0585                	addi	a1,a1,1
+  f2:	0785                	addi	a5,a5,1
+  f4:	fff5c703          	lbu	a4,-1(a1)
+  f8:	fee78fa3          	sb	a4,-1(a5)
+  fc:	fb75                	bnez	a4,f0 <strcpy+0x8>
+    ;
+  return os;
+}
+  fe:	6422                	ld	s0,8(sp)
+ 100:	0141                	addi	sp,sp,16
+ 102:	8082                	ret
+
+0000000000000104 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 104:	1141                	addi	sp,sp,-16
+ 106:	e422                	sd	s0,8(sp)
+ 108:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 10a:	00054783          	lbu	a5,0(a0)
+ 10e:	cb91                	beqz	a5,122 <strcmp+0x1e>
+ 110:	0005c703          	lbu	a4,0(a1)
+ 114:	00f71763          	bne	a4,a5,122 <strcmp+0x1e>
+    p++, q++;
+ 118:	0505                	addi	a0,a0,1
+ 11a:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 11c:	00054783          	lbu	a5,0(a0)
+ 120:	fbe5                	bnez	a5,110 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 122:	0005c503          	lbu	a0,0(a1)
+}
+ 126:	40a7853b          	subw	a0,a5,a0
+ 12a:	6422                	ld	s0,8(sp)
+ 12c:	0141                	addi	sp,sp,16
+ 12e:	8082                	ret
+
+0000000000000130 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 130:	1141                	addi	sp,sp,-16
+ 132:	e422                	sd	s0,8(sp)
+ 134:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 136:	00054783          	lbu	a5,0(a0)
+ 13a:	cf91                	beqz	a5,156 <strlen+0x26>
+ 13c:	0505                	addi	a0,a0,1
+ 13e:	87aa                	mv	a5,a0
+ 140:	86be                	mv	a3,a5
+ 142:	0785                	addi	a5,a5,1
+ 144:	fff7c703          	lbu	a4,-1(a5)
+ 148:	ff65                	bnez	a4,140 <strlen+0x10>
+ 14a:	40a6853b          	subw	a0,a3,a0
+ 14e:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 150:	6422                	ld	s0,8(sp)
+ 152:	0141                	addi	sp,sp,16
+ 154:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 156:	4501                	li	a0,0
+ 158:	bfe5                	j	150 <strlen+0x20>
+
+000000000000015a <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 15a:	1141                	addi	sp,sp,-16
+ 15c:	e422                	sd	s0,8(sp)
+ 15e:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 160:	ca19                	beqz	a2,176 <memset+0x1c>
+ 162:	87aa                	mv	a5,a0
+ 164:	1602                	slli	a2,a2,0x20
+ 166:	9201                	srli	a2,a2,0x20
+ 168:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 16c:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 170:	0785                	addi	a5,a5,1
+ 172:	fee79de3          	bne	a5,a4,16c <memset+0x12>
+  }
+  return dst;
+}
+ 176:	6422                	ld	s0,8(sp)
+ 178:	0141                	addi	sp,sp,16
+ 17a:	8082                	ret
+
+000000000000017c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 17c:	1141                	addi	sp,sp,-16
+ 17e:	e422                	sd	s0,8(sp)
+ 180:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 182:	00054783          	lbu	a5,0(a0)
+ 186:	cb99                	beqz	a5,19c <strchr+0x20>
+    if(*s == c)
+ 188:	00f58763          	beq	a1,a5,196 <strchr+0x1a>
+  for(; *s; s++)
+ 18c:	0505                	addi	a0,a0,1
+ 18e:	00054783          	lbu	a5,0(a0)
+ 192:	fbfd                	bnez	a5,188 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 194:	4501                	li	a0,0
+}
+ 196:	6422                	ld	s0,8(sp)
+ 198:	0141                	addi	sp,sp,16
+ 19a:	8082                	ret
+  return 0;
+ 19c:	4501                	li	a0,0
+ 19e:	bfe5                	j	196 <strchr+0x1a>
+
+00000000000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	711d                	addi	sp,sp,-96
+ 1a2:	ec86                	sd	ra,88(sp)
+ 1a4:	e8a2                	sd	s0,80(sp)
+ 1a6:	e4a6                	sd	s1,72(sp)
+ 1a8:	e0ca                	sd	s2,64(sp)
+ 1aa:	fc4e                	sd	s3,56(sp)
+ 1ac:	f852                	sd	s4,48(sp)
+ 1ae:	f456                	sd	s5,40(sp)
+ 1b0:	f05a                	sd	s6,32(sp)
+ 1b2:	ec5e                	sd	s7,24(sp)
+ 1b4:	1080                	addi	s0,sp,96
+ 1b6:	8baa                	mv	s7,a0
+ 1b8:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1ba:	892a                	mv	s2,a0
+ 1bc:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1be:	4aa9                	li	s5,10
+ 1c0:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1c2:	89a6                	mv	s3,s1
+ 1c4:	2485                	addiw	s1,s1,1
+ 1c6:	0344d663          	bge	s1,s4,1f2 <gets+0x52>
+    cc = read(0, &c, 1);
+ 1ca:	4605                	li	a2,1
+ 1cc:	faf40593          	addi	a1,s0,-81
+ 1d0:	4501                	li	a0,0
+ 1d2:	186000ef          	jal	358 <read>
+    if(cc < 1)
+ 1d6:	00a05e63          	blez	a0,1f2 <gets+0x52>
+    buf[i++] = c;
+ 1da:	faf44783          	lbu	a5,-81(s0)
+ 1de:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1e2:	01578763          	beq	a5,s5,1f0 <gets+0x50>
+ 1e6:	0905                	addi	s2,s2,1
+ 1e8:	fd679de3          	bne	a5,s6,1c2 <gets+0x22>
+    buf[i++] = c;
+ 1ec:	89a6                	mv	s3,s1
+ 1ee:	a011                	j	1f2 <gets+0x52>
+ 1f0:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 1f2:	99de                	add	s3,s3,s7
+ 1f4:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 1f8:	855e                	mv	a0,s7
+ 1fa:	60e6                	ld	ra,88(sp)
+ 1fc:	6446                	ld	s0,80(sp)
+ 1fe:	64a6                	ld	s1,72(sp)
+ 200:	6906                	ld	s2,64(sp)
+ 202:	79e2                	ld	s3,56(sp)
+ 204:	7a42                	ld	s4,48(sp)
+ 206:	7aa2                	ld	s5,40(sp)
+ 208:	7b02                	ld	s6,32(sp)
+ 20a:	6be2                	ld	s7,24(sp)
+ 20c:	6125                	addi	sp,sp,96
+ 20e:	8082                	ret
+
+0000000000000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	1101                	addi	sp,sp,-32
+ 212:	ec06                	sd	ra,24(sp)
+ 214:	e822                	sd	s0,16(sp)
+ 216:	e04a                	sd	s2,0(sp)
+ 218:	1000                	addi	s0,sp,32
+ 21a:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 21c:	4581                	li	a1,0
+ 21e:	162000ef          	jal	380 <open>
+  if(fd < 0)
+ 222:	02054263          	bltz	a0,246 <stat+0x36>
+ 226:	e426                	sd	s1,8(sp)
+ 228:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 22a:	85ca                	mv	a1,s2
+ 22c:	16c000ef          	jal	398 <fstat>
+ 230:	892a                	mv	s2,a0
+  close(fd);
+ 232:	8526                	mv	a0,s1
+ 234:	134000ef          	jal	368 <close>
+  return r;
+ 238:	64a2                	ld	s1,8(sp)
+}
+ 23a:	854a                	mv	a0,s2
+ 23c:	60e2                	ld	ra,24(sp)
+ 23e:	6442                	ld	s0,16(sp)
+ 240:	6902                	ld	s2,0(sp)
+ 242:	6105                	addi	sp,sp,32
+ 244:	8082                	ret
+    return -1;
+ 246:	597d                	li	s2,-1
+ 248:	bfcd                	j	23a <stat+0x2a>
+
+000000000000024a <atoi>:
+
+int
+atoi(const char *s)
+{
+ 24a:	1141                	addi	sp,sp,-16
+ 24c:	e422                	sd	s0,8(sp)
+ 24e:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 250:	00054683          	lbu	a3,0(a0)
+ 254:	fd06879b          	addiw	a5,a3,-48
+ 258:	0ff7f793          	zext.b	a5,a5
+ 25c:	4625                	li	a2,9
+ 25e:	02f66863          	bltu	a2,a5,28e <atoi+0x44>
+ 262:	872a                	mv	a4,a0
+  n = 0;
+ 264:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 266:	0705                	addi	a4,a4,1
+ 268:	0025179b          	slliw	a5,a0,0x2
+ 26c:	9fa9                	addw	a5,a5,a0
+ 26e:	0017979b          	slliw	a5,a5,0x1
+ 272:	9fb5                	addw	a5,a5,a3
+ 274:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 278:	00074683          	lbu	a3,0(a4)
+ 27c:	fd06879b          	addiw	a5,a3,-48
+ 280:	0ff7f793          	zext.b	a5,a5
+ 284:	fef671e3          	bgeu	a2,a5,266 <atoi+0x1c>
+  return n;
+}
+ 288:	6422                	ld	s0,8(sp)
+ 28a:	0141                	addi	sp,sp,16
+ 28c:	8082                	ret
+  n = 0;
+ 28e:	4501                	li	a0,0
+ 290:	bfe5                	j	288 <atoi+0x3e>
+
+0000000000000292 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 292:	1141                	addi	sp,sp,-16
+ 294:	e422                	sd	s0,8(sp)
+ 296:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 298:	02b57463          	bgeu	a0,a1,2c0 <memmove+0x2e>
+    while(n-- > 0)
+ 29c:	00c05f63          	blez	a2,2ba <memmove+0x28>
+ 2a0:	1602                	slli	a2,a2,0x20
+ 2a2:	9201                	srli	a2,a2,0x20
+ 2a4:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2a8:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2aa:	0585                	addi	a1,a1,1
+ 2ac:	0705                	addi	a4,a4,1
+ 2ae:	fff5c683          	lbu	a3,-1(a1)
+ 2b2:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2b6:	fef71ae3          	bne	a4,a5,2aa <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2ba:	6422                	ld	s0,8(sp)
+ 2bc:	0141                	addi	sp,sp,16
+ 2be:	8082                	ret
+    dst += n;
+ 2c0:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2c4:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2c6:	fec05ae3          	blez	a2,2ba <memmove+0x28>
+ 2ca:	fff6079b          	addiw	a5,a2,-1
+ 2ce:	1782                	slli	a5,a5,0x20
+ 2d0:	9381                	srli	a5,a5,0x20
+ 2d2:	fff7c793          	not	a5,a5
+ 2d6:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2d8:	15fd                	addi	a1,a1,-1
+ 2da:	177d                	addi	a4,a4,-1
+ 2dc:	0005c683          	lbu	a3,0(a1)
+ 2e0:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2e4:	fee79ae3          	bne	a5,a4,2d8 <memmove+0x46>
+ 2e8:	bfc9                	j	2ba <memmove+0x28>
+
+00000000000002ea <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2ea:	1141                	addi	sp,sp,-16
+ 2ec:	e422                	sd	s0,8(sp)
+ 2ee:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 2f0:	ca05                	beqz	a2,320 <memcmp+0x36>
+ 2f2:	fff6069b          	addiw	a3,a2,-1
+ 2f6:	1682                	slli	a3,a3,0x20
+ 2f8:	9281                	srli	a3,a3,0x20
+ 2fa:	0685                	addi	a3,a3,1
+ 2fc:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2fe:	00054783          	lbu	a5,0(a0)
+ 302:	0005c703          	lbu	a4,0(a1)
+ 306:	00e79863          	bne	a5,a4,316 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 30a:	0505                	addi	a0,a0,1
+    p2++;
+ 30c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 30e:	fed518e3          	bne	a0,a3,2fe <memcmp+0x14>
+  }
+  return 0;
+ 312:	4501                	li	a0,0
+ 314:	a019                	j	31a <memcmp+0x30>
+      return *p1 - *p2;
+ 316:	40e7853b          	subw	a0,a5,a4
+}
+ 31a:	6422                	ld	s0,8(sp)
+ 31c:	0141                	addi	sp,sp,16
+ 31e:	8082                	ret
+  return 0;
+ 320:	4501                	li	a0,0
+ 322:	bfe5                	j	31a <memcmp+0x30>
+
+0000000000000324 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 324:	1141                	addi	sp,sp,-16
+ 326:	e406                	sd	ra,8(sp)
+ 328:	e022                	sd	s0,0(sp)
+ 32a:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 32c:	f67ff0ef          	jal	292 <memmove>
+}
+ 330:	60a2                	ld	ra,8(sp)
+ 332:	6402                	ld	s0,0(sp)
+ 334:	0141                	addi	sp,sp,16
+ 336:	8082                	ret
+
+0000000000000338 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 338:	4885                	li	a7,1
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 340:	4889                	li	a7,2
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 348:	488d                	li	a7,3
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 350:	4891                	li	a7,4
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 358:	4895                	li	a7,5
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 360:	48c1                	li	a7,16
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 368:	48d5                	li	a7,21
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 370:	4899                	li	a7,6
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 378:	489d                	li	a7,7
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 380:	48bd                	li	a7,15
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 388:	48c5                	li	a7,17
+ ecall
+ 38a:	00000073          	ecall
+ ret
+ 38e:	8082                	ret
+
+0000000000000390 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 390:	48c9                	li	a7,18
+ ecall
+ 392:	00000073          	ecall
+ ret
+ 396:	8082                	ret
+
+0000000000000398 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 398:	48a1                	li	a7,8
+ ecall
+ 39a:	00000073          	ecall
+ ret
+ 39e:	8082                	ret
+
+00000000000003a0 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3a0:	48cd                	li	a7,19
+ ecall
+ 3a2:	00000073          	ecall
+ ret
+ 3a6:	8082                	ret
+
+00000000000003a8 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3a8:	48d1                	li	a7,20
+ ecall
+ 3aa:	00000073          	ecall
+ ret
+ 3ae:	8082                	ret
+
+00000000000003b0 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3b0:	48a5                	li	a7,9
+ ecall
+ 3b2:	00000073          	ecall
+ ret
+ 3b6:	8082                	ret
+
+00000000000003b8 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 3b8:	48a9                	li	a7,10
+ ecall
+ 3ba:	00000073          	ecall
+ ret
+ 3be:	8082                	ret
+
+00000000000003c0 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3c0:	48ad                	li	a7,11
+ ecall
+ 3c2:	00000073          	ecall
+ ret
+ 3c6:	8082                	ret
+
+00000000000003c8 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3c8:	48b1                	li	a7,12
+ ecall
+ 3ca:	00000073          	ecall
+ ret
+ 3ce:	8082                	ret
+
+00000000000003d0 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3d0:	48b5                	li	a7,13
+ ecall
+ 3d2:	00000073          	ecall
+ ret
+ 3d6:	8082                	ret
+
+00000000000003d8 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3d8:	48b9                	li	a7,14
+ ecall
+ 3da:	00000073          	ecall
+ ret
+ 3de:	8082                	ret
+
+00000000000003e0 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 3e0:	48d9                	li	a7,22
+ ecall
+ 3e2:	00000073          	ecall
+ ret
+ 3e6:	8082                	ret
+
+00000000000003e8 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 3e8:	48dd                	li	a7,23
+ ecall
+ 3ea:	00000073          	ecall
+ ret
+ 3ee:	8082                	ret
+
+00000000000003f0 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 3f0:	48e1                	li	a7,24
+ ecall
+ 3f2:	00000073          	ecall
+ ret
+ 3f6:	8082                	ret
diff --git a/user/forktest.c b/user/forktest.c
new file mode 100644
index 0000000..384e75f
--- /dev/null
+++ b/user/forktest.c
@@ -0,0 +1,56 @@
+// Test that fork fails gracefully.
+// Tiny executable so that the limit can be filling the proc table.
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define N  1000
+
+void
+print(const char *s)
+{
+  write(1, s, strlen(s));
+}
+
+void
+forktest(void)
+{
+  int n, pid;
+
+  print("fork test\n");
+
+  for(n=0; n<N; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit(0);
+  }
+
+  if(n == N){
+    print("fork claimed to work N times!\n");
+    exit(1);
+  }
+
+  for(; n > 0; n--){
+    if(wait(0) < 0){
+      print("wait stopped early\n");
+      exit(1);
+    }
+  }
+
+  if(wait(0) != -1){
+    print("wait got too many\n");
+    exit(1);
+  }
+
+  print("fork test OK\n");
+}
+
+int
+main(void)
+{
+  forktest();
+  exit(0);
+}
diff --git a/user/forktest.d b/user/forktest.d
new file mode 100644
index 0000000..7430994
--- /dev/null
+++ b/user/forktest.d
@@ -0,0 +1 @@
+user/forktest.o: user/forktest.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/forktest.o b/user/forktest.o
new file mode 100644
index 0000000..5d9ea33
Binary files /dev/null and b/user/forktest.o differ
diff --git a/user/grep.asm b/user/grep.asm
new file mode 100644
index 0000000..72a7f28
--- /dev/null
+++ b/user/grep.asm
@@ -0,0 +1,1742 @@
+
+user/_grep:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <matchstar>:
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	e84a                	sd	s2,16(sp)
+   a:	e44e                	sd	s3,8(sp)
+   c:	e052                	sd	s4,0(sp)
+   e:	1800                	addi	s0,sp,48
+  10:	892a                	mv	s2,a0
+  12:	89ae                	mv	s3,a1
+  14:	84b2                	mv	s1,a2
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  16:	02e00a13          	li	s4,46
+    if(matchhere(re, text))
+  1a:	85a6                	mv	a1,s1
+  1c:	854e                	mv	a0,s3
+  1e:	02c000ef          	jal	4a <matchhere>
+  22:	e919                	bnez	a0,38 <matchstar+0x38>
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  24:	0004c783          	lbu	a5,0(s1)
+  28:	cb89                	beqz	a5,3a <matchstar+0x3a>
+  2a:	0485                	addi	s1,s1,1
+  2c:	2781                	sext.w	a5,a5
+  2e:	ff2786e3          	beq	a5,s2,1a <matchstar+0x1a>
+  32:	ff4904e3          	beq	s2,s4,1a <matchstar+0x1a>
+  36:	a011                	j	3a <matchstar+0x3a>
+      return 1;
+  38:	4505                	li	a0,1
+  return 0;
+}
+  3a:	70a2                	ld	ra,40(sp)
+  3c:	7402                	ld	s0,32(sp)
+  3e:	64e2                	ld	s1,24(sp)
+  40:	6942                	ld	s2,16(sp)
+  42:	69a2                	ld	s3,8(sp)
+  44:	6a02                	ld	s4,0(sp)
+  46:	6145                	addi	sp,sp,48
+  48:	8082                	ret
+
+000000000000004a <matchhere>:
+  if(re[0] == '\0')
+  4a:	00054703          	lbu	a4,0(a0)
+  4e:	c73d                	beqz	a4,bc <matchhere+0x72>
+{
+  50:	1141                	addi	sp,sp,-16
+  52:	e406                	sd	ra,8(sp)
+  54:	e022                	sd	s0,0(sp)
+  56:	0800                	addi	s0,sp,16
+  58:	87aa                	mv	a5,a0
+  if(re[1] == '*')
+  5a:	00154683          	lbu	a3,1(a0)
+  5e:	02a00613          	li	a2,42
+  62:	02c68563          	beq	a3,a2,8c <matchhere+0x42>
+  if(re[0] == '$' && re[1] == '\0')
+  66:	02400613          	li	a2,36
+  6a:	02c70863          	beq	a4,a2,9a <matchhere+0x50>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  6e:	0005c683          	lbu	a3,0(a1)
+  return 0;
+  72:	4501                	li	a0,0
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  74:	ca81                	beqz	a3,84 <matchhere+0x3a>
+  76:	02e00613          	li	a2,46
+  7a:	02c70b63          	beq	a4,a2,b0 <matchhere+0x66>
+  return 0;
+  7e:	4501                	li	a0,0
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  80:	02d70863          	beq	a4,a3,b0 <matchhere+0x66>
+}
+  84:	60a2                	ld	ra,8(sp)
+  86:	6402                	ld	s0,0(sp)
+  88:	0141                	addi	sp,sp,16
+  8a:	8082                	ret
+    return matchstar(re[0], re+2, text);
+  8c:	862e                	mv	a2,a1
+  8e:	00250593          	addi	a1,a0,2
+  92:	853a                	mv	a0,a4
+  94:	f6dff0ef          	jal	0 <matchstar>
+  98:	b7f5                	j	84 <matchhere+0x3a>
+  if(re[0] == '$' && re[1] == '\0')
+  9a:	c691                	beqz	a3,a6 <matchhere+0x5c>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  9c:	0005c683          	lbu	a3,0(a1)
+  a0:	fef9                	bnez	a3,7e <matchhere+0x34>
+  return 0;
+  a2:	4501                	li	a0,0
+  a4:	b7c5                	j	84 <matchhere+0x3a>
+    return *text == '\0';
+  a6:	0005c503          	lbu	a0,0(a1)
+  aa:	00153513          	seqz	a0,a0
+  ae:	bfd9                	j	84 <matchhere+0x3a>
+    return matchhere(re+1, text+1);
+  b0:	0585                	addi	a1,a1,1
+  b2:	00178513          	addi	a0,a5,1
+  b6:	f95ff0ef          	jal	4a <matchhere>
+  ba:	b7e9                	j	84 <matchhere+0x3a>
+    return 1;
+  bc:	4505                	li	a0,1
+}
+  be:	8082                	ret
+
+00000000000000c0 <match>:
+{
+  c0:	1101                	addi	sp,sp,-32
+  c2:	ec06                	sd	ra,24(sp)
+  c4:	e822                	sd	s0,16(sp)
+  c6:	e426                	sd	s1,8(sp)
+  c8:	e04a                	sd	s2,0(sp)
+  ca:	1000                	addi	s0,sp,32
+  cc:	892a                	mv	s2,a0
+  ce:	84ae                	mv	s1,a1
+  if(re[0] == '^')
+  d0:	00054703          	lbu	a4,0(a0)
+  d4:	05e00793          	li	a5,94
+  d8:	00f70c63          	beq	a4,a5,f0 <match+0x30>
+    if(matchhere(re, text))
+  dc:	85a6                	mv	a1,s1
+  de:	854a                	mv	a0,s2
+  e0:	f6bff0ef          	jal	4a <matchhere>
+  e4:	e911                	bnez	a0,f8 <match+0x38>
+  }while(*text++ != '\0');
+  e6:	0485                	addi	s1,s1,1
+  e8:	fff4c783          	lbu	a5,-1(s1)
+  ec:	fbe5                	bnez	a5,dc <match+0x1c>
+  ee:	a031                	j	fa <match+0x3a>
+    return matchhere(re+1, text);
+  f0:	0505                	addi	a0,a0,1
+  f2:	f59ff0ef          	jal	4a <matchhere>
+  f6:	a011                	j	fa <match+0x3a>
+      return 1;
+  f8:	4505                	li	a0,1
+}
+  fa:	60e2                	ld	ra,24(sp)
+  fc:	6442                	ld	s0,16(sp)
+  fe:	64a2                	ld	s1,8(sp)
+ 100:	6902                	ld	s2,0(sp)
+ 102:	6105                	addi	sp,sp,32
+ 104:	8082                	ret
+
+0000000000000106 <grep>:
+{
+ 106:	715d                	addi	sp,sp,-80
+ 108:	e486                	sd	ra,72(sp)
+ 10a:	e0a2                	sd	s0,64(sp)
+ 10c:	fc26                	sd	s1,56(sp)
+ 10e:	f84a                	sd	s2,48(sp)
+ 110:	f44e                	sd	s3,40(sp)
+ 112:	f052                	sd	s4,32(sp)
+ 114:	ec56                	sd	s5,24(sp)
+ 116:	e85a                	sd	s6,16(sp)
+ 118:	e45e                	sd	s7,8(sp)
+ 11a:	e062                	sd	s8,0(sp)
+ 11c:	0880                	addi	s0,sp,80
+ 11e:	89aa                	mv	s3,a0
+ 120:	8b2e                	mv	s6,a1
+  m = 0;
+ 122:	4a01                	li	s4,0
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 124:	3ff00b93          	li	s7,1023
+ 128:	00001a97          	auipc	s5,0x1
+ 12c:	ee8a8a93          	addi	s5,s5,-280 # 1010 <buf>
+ 130:	a835                	j	16c <grep+0x66>
+      p = q+1;
+ 132:	00148913          	addi	s2,s1,1
+    while((q = strchr(p, '\n')) != 0){
+ 136:	45a9                	li	a1,10
+ 138:	854a                	mv	a0,s2
+ 13a:	1c6000ef          	jal	300 <strchr>
+ 13e:	84aa                	mv	s1,a0
+ 140:	c505                	beqz	a0,168 <grep+0x62>
+      *q = 0;
+ 142:	00048023          	sb	zero,0(s1)
+      if(match(pattern, p)){
+ 146:	85ca                	mv	a1,s2
+ 148:	854e                	mv	a0,s3
+ 14a:	f77ff0ef          	jal	c0 <match>
+ 14e:	d175                	beqz	a0,132 <grep+0x2c>
+        *q = '\n';
+ 150:	47a9                	li	a5,10
+ 152:	00f48023          	sb	a5,0(s1)
+        write(1, p, q+1 - p);
+ 156:	00148613          	addi	a2,s1,1
+ 15a:	4126063b          	subw	a2,a2,s2
+ 15e:	85ca                	mv	a1,s2
+ 160:	4505                	li	a0,1
+ 162:	382000ef          	jal	4e4 <write>
+ 166:	b7f1                	j	132 <grep+0x2c>
+    if(m > 0){
+ 168:	03404563          	bgtz	s4,192 <grep+0x8c>
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 16c:	414b863b          	subw	a2,s7,s4
+ 170:	014a85b3          	add	a1,s5,s4
+ 174:	855a                	mv	a0,s6
+ 176:	366000ef          	jal	4dc <read>
+ 17a:	02a05963          	blez	a0,1ac <grep+0xa6>
+    m += n;
+ 17e:	00aa0c3b          	addw	s8,s4,a0
+ 182:	000c0a1b          	sext.w	s4,s8
+    buf[m] = '\0';
+ 186:	014a87b3          	add	a5,s5,s4
+ 18a:	00078023          	sb	zero,0(a5)
+    p = buf;
+ 18e:	8956                	mv	s2,s5
+    while((q = strchr(p, '\n')) != 0){
+ 190:	b75d                	j	136 <grep+0x30>
+      m -= p - buf;
+ 192:	00001517          	auipc	a0,0x1
+ 196:	e7e50513          	addi	a0,a0,-386 # 1010 <buf>
+ 19a:	40a90a33          	sub	s4,s2,a0
+ 19e:	414c0a3b          	subw	s4,s8,s4
+      memmove(buf, p, m);
+ 1a2:	8652                	mv	a2,s4
+ 1a4:	85ca                	mv	a1,s2
+ 1a6:	270000ef          	jal	416 <memmove>
+ 1aa:	b7c9                	j	16c <grep+0x66>
+}
+ 1ac:	60a6                	ld	ra,72(sp)
+ 1ae:	6406                	ld	s0,64(sp)
+ 1b0:	74e2                	ld	s1,56(sp)
+ 1b2:	7942                	ld	s2,48(sp)
+ 1b4:	79a2                	ld	s3,40(sp)
+ 1b6:	7a02                	ld	s4,32(sp)
+ 1b8:	6ae2                	ld	s5,24(sp)
+ 1ba:	6b42                	ld	s6,16(sp)
+ 1bc:	6ba2                	ld	s7,8(sp)
+ 1be:	6c02                	ld	s8,0(sp)
+ 1c0:	6161                	addi	sp,sp,80
+ 1c2:	8082                	ret
+
+00000000000001c4 <main>:
+{
+ 1c4:	7179                	addi	sp,sp,-48
+ 1c6:	f406                	sd	ra,40(sp)
+ 1c8:	f022                	sd	s0,32(sp)
+ 1ca:	ec26                	sd	s1,24(sp)
+ 1cc:	e84a                	sd	s2,16(sp)
+ 1ce:	e44e                	sd	s3,8(sp)
+ 1d0:	e052                	sd	s4,0(sp)
+ 1d2:	1800                	addi	s0,sp,48
+  if(argc <= 1){
+ 1d4:	4785                	li	a5,1
+ 1d6:	04a7d663          	bge	a5,a0,222 <main+0x5e>
+  pattern = argv[1];
+ 1da:	0085ba03          	ld	s4,8(a1)
+  if(argc <= 2){
+ 1de:	4789                	li	a5,2
+ 1e0:	04a7db63          	bge	a5,a0,236 <main+0x72>
+ 1e4:	01058913          	addi	s2,a1,16
+ 1e8:	ffd5099b          	addiw	s3,a0,-3
+ 1ec:	02099793          	slli	a5,s3,0x20
+ 1f0:	01d7d993          	srli	s3,a5,0x1d
+ 1f4:	05e1                	addi	a1,a1,24
+ 1f6:	99ae                	add	s3,s3,a1
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+ 1f8:	4581                	li	a1,0
+ 1fa:	00093503          	ld	a0,0(s2)
+ 1fe:	306000ef          	jal	504 <open>
+ 202:	84aa                	mv	s1,a0
+ 204:	04054063          	bltz	a0,244 <main+0x80>
+    grep(pattern, fd);
+ 208:	85aa                	mv	a1,a0
+ 20a:	8552                	mv	a0,s4
+ 20c:	efbff0ef          	jal	106 <grep>
+    close(fd);
+ 210:	8526                	mv	a0,s1
+ 212:	2da000ef          	jal	4ec <close>
+  for(i = 2; i < argc; i++){
+ 216:	0921                	addi	s2,s2,8
+ 218:	ff3910e3          	bne	s2,s3,1f8 <main+0x34>
+  exit(0);
+ 21c:	4501                	li	a0,0
+ 21e:	2a6000ef          	jal	4c4 <exit>
+    fprintf(2, "usage: grep pattern [file ...]\n");
+ 222:	00001597          	auipc	a1,0x1
+ 226:	87e58593          	addi	a1,a1,-1922 # aa0 <malloc+0xf8>
+ 22a:	4509                	li	a0,2
+ 22c:	69e000ef          	jal	8ca <fprintf>
+    exit(1);
+ 230:	4505                	li	a0,1
+ 232:	292000ef          	jal	4c4 <exit>
+    grep(pattern, 0);
+ 236:	4581                	li	a1,0
+ 238:	8552                	mv	a0,s4
+ 23a:	ecdff0ef          	jal	106 <grep>
+    exit(0);
+ 23e:	4501                	li	a0,0
+ 240:	284000ef          	jal	4c4 <exit>
+      printf("grep: cannot open %s\n", argv[i]);
+ 244:	00093583          	ld	a1,0(s2)
+ 248:	00001517          	auipc	a0,0x1
+ 24c:	87850513          	addi	a0,a0,-1928 # ac0 <malloc+0x118>
+ 250:	6a4000ef          	jal	8f4 <printf>
+      exit(1);
+ 254:	4505                	li	a0,1
+ 256:	26e000ef          	jal	4c4 <exit>
+
+000000000000025a <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+ 25a:	1141                	addi	sp,sp,-16
+ 25c:	e406                	sd	ra,8(sp)
+ 25e:	e022                	sd	s0,0(sp)
+ 260:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+ 262:	f63ff0ef          	jal	1c4 <main>
+  exit(0);
+ 266:	4501                	li	a0,0
+ 268:	25c000ef          	jal	4c4 <exit>
+
+000000000000026c <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+ 26c:	1141                	addi	sp,sp,-16
+ 26e:	e422                	sd	s0,8(sp)
+ 270:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 272:	87aa                	mv	a5,a0
+ 274:	0585                	addi	a1,a1,1
+ 276:	0785                	addi	a5,a5,1
+ 278:	fff5c703          	lbu	a4,-1(a1)
+ 27c:	fee78fa3          	sb	a4,-1(a5)
+ 280:	fb75                	bnez	a4,274 <strcpy+0x8>
+    ;
+  return os;
+}
+ 282:	6422                	ld	s0,8(sp)
+ 284:	0141                	addi	sp,sp,16
+ 286:	8082                	ret
+
+0000000000000288 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 288:	1141                	addi	sp,sp,-16
+ 28a:	e422                	sd	s0,8(sp)
+ 28c:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 28e:	00054783          	lbu	a5,0(a0)
+ 292:	cb91                	beqz	a5,2a6 <strcmp+0x1e>
+ 294:	0005c703          	lbu	a4,0(a1)
+ 298:	00f71763          	bne	a4,a5,2a6 <strcmp+0x1e>
+    p++, q++;
+ 29c:	0505                	addi	a0,a0,1
+ 29e:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 2a0:	00054783          	lbu	a5,0(a0)
+ 2a4:	fbe5                	bnez	a5,294 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 2a6:	0005c503          	lbu	a0,0(a1)
+}
+ 2aa:	40a7853b          	subw	a0,a5,a0
+ 2ae:	6422                	ld	s0,8(sp)
+ 2b0:	0141                	addi	sp,sp,16
+ 2b2:	8082                	ret
+
+00000000000002b4 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 2b4:	1141                	addi	sp,sp,-16
+ 2b6:	e422                	sd	s0,8(sp)
+ 2b8:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 2ba:	00054783          	lbu	a5,0(a0)
+ 2be:	cf91                	beqz	a5,2da <strlen+0x26>
+ 2c0:	0505                	addi	a0,a0,1
+ 2c2:	87aa                	mv	a5,a0
+ 2c4:	86be                	mv	a3,a5
+ 2c6:	0785                	addi	a5,a5,1
+ 2c8:	fff7c703          	lbu	a4,-1(a5)
+ 2cc:	ff65                	bnez	a4,2c4 <strlen+0x10>
+ 2ce:	40a6853b          	subw	a0,a3,a0
+ 2d2:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 2d4:	6422                	ld	s0,8(sp)
+ 2d6:	0141                	addi	sp,sp,16
+ 2d8:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 2da:	4501                	li	a0,0
+ 2dc:	bfe5                	j	2d4 <strlen+0x20>
+
+00000000000002de <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 2de:	1141                	addi	sp,sp,-16
+ 2e0:	e422                	sd	s0,8(sp)
+ 2e2:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 2e4:	ca19                	beqz	a2,2fa <memset+0x1c>
+ 2e6:	87aa                	mv	a5,a0
+ 2e8:	1602                	slli	a2,a2,0x20
+ 2ea:	9201                	srli	a2,a2,0x20
+ 2ec:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 2f0:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 2f4:	0785                	addi	a5,a5,1
+ 2f6:	fee79de3          	bne	a5,a4,2f0 <memset+0x12>
+  }
+  return dst;
+}
+ 2fa:	6422                	ld	s0,8(sp)
+ 2fc:	0141                	addi	sp,sp,16
+ 2fe:	8082                	ret
+
+0000000000000300 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 300:	1141                	addi	sp,sp,-16
+ 302:	e422                	sd	s0,8(sp)
+ 304:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 306:	00054783          	lbu	a5,0(a0)
+ 30a:	cb99                	beqz	a5,320 <strchr+0x20>
+    if(*s == c)
+ 30c:	00f58763          	beq	a1,a5,31a <strchr+0x1a>
+  for(; *s; s++)
+ 310:	0505                	addi	a0,a0,1
+ 312:	00054783          	lbu	a5,0(a0)
+ 316:	fbfd                	bnez	a5,30c <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 318:	4501                	li	a0,0
+}
+ 31a:	6422                	ld	s0,8(sp)
+ 31c:	0141                	addi	sp,sp,16
+ 31e:	8082                	ret
+  return 0;
+ 320:	4501                	li	a0,0
+ 322:	bfe5                	j	31a <strchr+0x1a>
+
+0000000000000324 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 324:	711d                	addi	sp,sp,-96
+ 326:	ec86                	sd	ra,88(sp)
+ 328:	e8a2                	sd	s0,80(sp)
+ 32a:	e4a6                	sd	s1,72(sp)
+ 32c:	e0ca                	sd	s2,64(sp)
+ 32e:	fc4e                	sd	s3,56(sp)
+ 330:	f852                	sd	s4,48(sp)
+ 332:	f456                	sd	s5,40(sp)
+ 334:	f05a                	sd	s6,32(sp)
+ 336:	ec5e                	sd	s7,24(sp)
+ 338:	1080                	addi	s0,sp,96
+ 33a:	8baa                	mv	s7,a0
+ 33c:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 33e:	892a                	mv	s2,a0
+ 340:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 342:	4aa9                	li	s5,10
+ 344:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 346:	89a6                	mv	s3,s1
+ 348:	2485                	addiw	s1,s1,1
+ 34a:	0344d663          	bge	s1,s4,376 <gets+0x52>
+    cc = read(0, &c, 1);
+ 34e:	4605                	li	a2,1
+ 350:	faf40593          	addi	a1,s0,-81
+ 354:	4501                	li	a0,0
+ 356:	186000ef          	jal	4dc <read>
+    if(cc < 1)
+ 35a:	00a05e63          	blez	a0,376 <gets+0x52>
+    buf[i++] = c;
+ 35e:	faf44783          	lbu	a5,-81(s0)
+ 362:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 366:	01578763          	beq	a5,s5,374 <gets+0x50>
+ 36a:	0905                	addi	s2,s2,1
+ 36c:	fd679de3          	bne	a5,s6,346 <gets+0x22>
+    buf[i++] = c;
+ 370:	89a6                	mv	s3,s1
+ 372:	a011                	j	376 <gets+0x52>
+ 374:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 376:	99de                	add	s3,s3,s7
+ 378:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 37c:	855e                	mv	a0,s7
+ 37e:	60e6                	ld	ra,88(sp)
+ 380:	6446                	ld	s0,80(sp)
+ 382:	64a6                	ld	s1,72(sp)
+ 384:	6906                	ld	s2,64(sp)
+ 386:	79e2                	ld	s3,56(sp)
+ 388:	7a42                	ld	s4,48(sp)
+ 38a:	7aa2                	ld	s5,40(sp)
+ 38c:	7b02                	ld	s6,32(sp)
+ 38e:	6be2                	ld	s7,24(sp)
+ 390:	6125                	addi	sp,sp,96
+ 392:	8082                	ret
+
+0000000000000394 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 394:	1101                	addi	sp,sp,-32
+ 396:	ec06                	sd	ra,24(sp)
+ 398:	e822                	sd	s0,16(sp)
+ 39a:	e04a                	sd	s2,0(sp)
+ 39c:	1000                	addi	s0,sp,32
+ 39e:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3a0:	4581                	li	a1,0
+ 3a2:	162000ef          	jal	504 <open>
+  if(fd < 0)
+ 3a6:	02054263          	bltz	a0,3ca <stat+0x36>
+ 3aa:	e426                	sd	s1,8(sp)
+ 3ac:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 3ae:	85ca                	mv	a1,s2
+ 3b0:	16c000ef          	jal	51c <fstat>
+ 3b4:	892a                	mv	s2,a0
+  close(fd);
+ 3b6:	8526                	mv	a0,s1
+ 3b8:	134000ef          	jal	4ec <close>
+  return r;
+ 3bc:	64a2                	ld	s1,8(sp)
+}
+ 3be:	854a                	mv	a0,s2
+ 3c0:	60e2                	ld	ra,24(sp)
+ 3c2:	6442                	ld	s0,16(sp)
+ 3c4:	6902                	ld	s2,0(sp)
+ 3c6:	6105                	addi	sp,sp,32
+ 3c8:	8082                	ret
+    return -1;
+ 3ca:	597d                	li	s2,-1
+ 3cc:	bfcd                	j	3be <stat+0x2a>
+
+00000000000003ce <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3ce:	1141                	addi	sp,sp,-16
+ 3d0:	e422                	sd	s0,8(sp)
+ 3d2:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3d4:	00054683          	lbu	a3,0(a0)
+ 3d8:	fd06879b          	addiw	a5,a3,-48
+ 3dc:	0ff7f793          	zext.b	a5,a5
+ 3e0:	4625                	li	a2,9
+ 3e2:	02f66863          	bltu	a2,a5,412 <atoi+0x44>
+ 3e6:	872a                	mv	a4,a0
+  n = 0;
+ 3e8:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 3ea:	0705                	addi	a4,a4,1
+ 3ec:	0025179b          	slliw	a5,a0,0x2
+ 3f0:	9fa9                	addw	a5,a5,a0
+ 3f2:	0017979b          	slliw	a5,a5,0x1
+ 3f6:	9fb5                	addw	a5,a5,a3
+ 3f8:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 3fc:	00074683          	lbu	a3,0(a4)
+ 400:	fd06879b          	addiw	a5,a3,-48
+ 404:	0ff7f793          	zext.b	a5,a5
+ 408:	fef671e3          	bgeu	a2,a5,3ea <atoi+0x1c>
+  return n;
+}
+ 40c:	6422                	ld	s0,8(sp)
+ 40e:	0141                	addi	sp,sp,16
+ 410:	8082                	ret
+  n = 0;
+ 412:	4501                	li	a0,0
+ 414:	bfe5                	j	40c <atoi+0x3e>
+
+0000000000000416 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 416:	1141                	addi	sp,sp,-16
+ 418:	e422                	sd	s0,8(sp)
+ 41a:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 41c:	02b57463          	bgeu	a0,a1,444 <memmove+0x2e>
+    while(n-- > 0)
+ 420:	00c05f63          	blez	a2,43e <memmove+0x28>
+ 424:	1602                	slli	a2,a2,0x20
+ 426:	9201                	srli	a2,a2,0x20
+ 428:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 42c:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 42e:	0585                	addi	a1,a1,1
+ 430:	0705                	addi	a4,a4,1
+ 432:	fff5c683          	lbu	a3,-1(a1)
+ 436:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 43a:	fef71ae3          	bne	a4,a5,42e <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 43e:	6422                	ld	s0,8(sp)
+ 440:	0141                	addi	sp,sp,16
+ 442:	8082                	ret
+    dst += n;
+ 444:	00c50733          	add	a4,a0,a2
+    src += n;
+ 448:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 44a:	fec05ae3          	blez	a2,43e <memmove+0x28>
+ 44e:	fff6079b          	addiw	a5,a2,-1
+ 452:	1782                	slli	a5,a5,0x20
+ 454:	9381                	srli	a5,a5,0x20
+ 456:	fff7c793          	not	a5,a5
+ 45a:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 45c:	15fd                	addi	a1,a1,-1
+ 45e:	177d                	addi	a4,a4,-1
+ 460:	0005c683          	lbu	a3,0(a1)
+ 464:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 468:	fee79ae3          	bne	a5,a4,45c <memmove+0x46>
+ 46c:	bfc9                	j	43e <memmove+0x28>
+
+000000000000046e <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 46e:	1141                	addi	sp,sp,-16
+ 470:	e422                	sd	s0,8(sp)
+ 472:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 474:	ca05                	beqz	a2,4a4 <memcmp+0x36>
+ 476:	fff6069b          	addiw	a3,a2,-1
+ 47a:	1682                	slli	a3,a3,0x20
+ 47c:	9281                	srli	a3,a3,0x20
+ 47e:	0685                	addi	a3,a3,1
+ 480:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 482:	00054783          	lbu	a5,0(a0)
+ 486:	0005c703          	lbu	a4,0(a1)
+ 48a:	00e79863          	bne	a5,a4,49a <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 48e:	0505                	addi	a0,a0,1
+    p2++;
+ 490:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 492:	fed518e3          	bne	a0,a3,482 <memcmp+0x14>
+  }
+  return 0;
+ 496:	4501                	li	a0,0
+ 498:	a019                	j	49e <memcmp+0x30>
+      return *p1 - *p2;
+ 49a:	40e7853b          	subw	a0,a5,a4
+}
+ 49e:	6422                	ld	s0,8(sp)
+ 4a0:	0141                	addi	sp,sp,16
+ 4a2:	8082                	ret
+  return 0;
+ 4a4:	4501                	li	a0,0
+ 4a6:	bfe5                	j	49e <memcmp+0x30>
+
+00000000000004a8 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 4a8:	1141                	addi	sp,sp,-16
+ 4aa:	e406                	sd	ra,8(sp)
+ 4ac:	e022                	sd	s0,0(sp)
+ 4ae:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 4b0:	f67ff0ef          	jal	416 <memmove>
+}
+ 4b4:	60a2                	ld	ra,8(sp)
+ 4b6:	6402                	ld	s0,0(sp)
+ 4b8:	0141                	addi	sp,sp,16
+ 4ba:	8082                	ret
+
+00000000000004bc <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 4bc:	4885                	li	a7,1
+ ecall
+ 4be:	00000073          	ecall
+ ret
+ 4c2:	8082                	ret
+
+00000000000004c4 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 4c4:	4889                	li	a7,2
+ ecall
+ 4c6:	00000073          	ecall
+ ret
+ 4ca:	8082                	ret
+
+00000000000004cc <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 4cc:	488d                	li	a7,3
+ ecall
+ 4ce:	00000073          	ecall
+ ret
+ 4d2:	8082                	ret
+
+00000000000004d4 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 4d4:	4891                	li	a7,4
+ ecall
+ 4d6:	00000073          	ecall
+ ret
+ 4da:	8082                	ret
+
+00000000000004dc <read>:
+.global read
+read:
+ li a7, SYS_read
+ 4dc:	4895                	li	a7,5
+ ecall
+ 4de:	00000073          	ecall
+ ret
+ 4e2:	8082                	ret
+
+00000000000004e4 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 4e4:	48c1                	li	a7,16
+ ecall
+ 4e6:	00000073          	ecall
+ ret
+ 4ea:	8082                	ret
+
+00000000000004ec <close>:
+.global close
+close:
+ li a7, SYS_close
+ 4ec:	48d5                	li	a7,21
+ ecall
+ 4ee:	00000073          	ecall
+ ret
+ 4f2:	8082                	ret
+
+00000000000004f4 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 4f4:	4899                	li	a7,6
+ ecall
+ 4f6:	00000073          	ecall
+ ret
+ 4fa:	8082                	ret
+
+00000000000004fc <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 4fc:	489d                	li	a7,7
+ ecall
+ 4fe:	00000073          	ecall
+ ret
+ 502:	8082                	ret
+
+0000000000000504 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 504:	48bd                	li	a7,15
+ ecall
+ 506:	00000073          	ecall
+ ret
+ 50a:	8082                	ret
+
+000000000000050c <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 50c:	48c5                	li	a7,17
+ ecall
+ 50e:	00000073          	ecall
+ ret
+ 512:	8082                	ret
+
+0000000000000514 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 514:	48c9                	li	a7,18
+ ecall
+ 516:	00000073          	ecall
+ ret
+ 51a:	8082                	ret
+
+000000000000051c <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 51c:	48a1                	li	a7,8
+ ecall
+ 51e:	00000073          	ecall
+ ret
+ 522:	8082                	ret
+
+0000000000000524 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 524:	48cd                	li	a7,19
+ ecall
+ 526:	00000073          	ecall
+ ret
+ 52a:	8082                	ret
+
+000000000000052c <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 52c:	48d1                	li	a7,20
+ ecall
+ 52e:	00000073          	ecall
+ ret
+ 532:	8082                	ret
+
+0000000000000534 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 534:	48a5                	li	a7,9
+ ecall
+ 536:	00000073          	ecall
+ ret
+ 53a:	8082                	ret
+
+000000000000053c <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 53c:	48a9                	li	a7,10
+ ecall
+ 53e:	00000073          	ecall
+ ret
+ 542:	8082                	ret
+
+0000000000000544 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 544:	48ad                	li	a7,11
+ ecall
+ 546:	00000073          	ecall
+ ret
+ 54a:	8082                	ret
+
+000000000000054c <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 54c:	48b1                	li	a7,12
+ ecall
+ 54e:	00000073          	ecall
+ ret
+ 552:	8082                	ret
+
+0000000000000554 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 554:	48b5                	li	a7,13
+ ecall
+ 556:	00000073          	ecall
+ ret
+ 55a:	8082                	ret
+
+000000000000055c <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 55c:	48b9                	li	a7,14
+ ecall
+ 55e:	00000073          	ecall
+ ret
+ 562:	8082                	ret
+
+0000000000000564 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 564:	48d9                	li	a7,22
+ ecall
+ 566:	00000073          	ecall
+ ret
+ 56a:	8082                	ret
+
+000000000000056c <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 56c:	48dd                	li	a7,23
+ ecall
+ 56e:	00000073          	ecall
+ ret
+ 572:	8082                	ret
+
+0000000000000574 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 574:	48e1                	li	a7,24
+ ecall
+ 576:	00000073          	ecall
+ ret
+ 57a:	8082                	ret
+
+000000000000057c <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 57c:	1101                	addi	sp,sp,-32
+ 57e:	ec06                	sd	ra,24(sp)
+ 580:	e822                	sd	s0,16(sp)
+ 582:	1000                	addi	s0,sp,32
+ 584:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 588:	4605                	li	a2,1
+ 58a:	fef40593          	addi	a1,s0,-17
+ 58e:	f57ff0ef          	jal	4e4 <write>
+}
+ 592:	60e2                	ld	ra,24(sp)
+ 594:	6442                	ld	s0,16(sp)
+ 596:	6105                	addi	sp,sp,32
+ 598:	8082                	ret
+
+000000000000059a <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 59a:	7139                	addi	sp,sp,-64
+ 59c:	fc06                	sd	ra,56(sp)
+ 59e:	f822                	sd	s0,48(sp)
+ 5a0:	f426                	sd	s1,40(sp)
+ 5a2:	0080                	addi	s0,sp,64
+ 5a4:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 5a6:	c299                	beqz	a3,5ac <printint+0x12>
+ 5a8:	0805c963          	bltz	a1,63a <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 5ac:	2581                	sext.w	a1,a1
+  neg = 0;
+ 5ae:	4881                	li	a7,0
+ 5b0:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 5b4:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 5b6:	2601                	sext.w	a2,a2
+ 5b8:	00000517          	auipc	a0,0x0
+ 5bc:	52850513          	addi	a0,a0,1320 # ae0 <digits>
+ 5c0:	883a                	mv	a6,a4
+ 5c2:	2705                	addiw	a4,a4,1
+ 5c4:	02c5f7bb          	remuw	a5,a1,a2
+ 5c8:	1782                	slli	a5,a5,0x20
+ 5ca:	9381                	srli	a5,a5,0x20
+ 5cc:	97aa                	add	a5,a5,a0
+ 5ce:	0007c783          	lbu	a5,0(a5)
+ 5d2:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 5d6:	0005879b          	sext.w	a5,a1
+ 5da:	02c5d5bb          	divuw	a1,a1,a2
+ 5de:	0685                	addi	a3,a3,1
+ 5e0:	fec7f0e3          	bgeu	a5,a2,5c0 <printint+0x26>
+  if(neg)
+ 5e4:	00088c63          	beqz	a7,5fc <printint+0x62>
+    buf[i++] = '-';
+ 5e8:	fd070793          	addi	a5,a4,-48
+ 5ec:	00878733          	add	a4,a5,s0
+ 5f0:	02d00793          	li	a5,45
+ 5f4:	fef70823          	sb	a5,-16(a4)
+ 5f8:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 5fc:	02e05a63          	blez	a4,630 <printint+0x96>
+ 600:	f04a                	sd	s2,32(sp)
+ 602:	ec4e                	sd	s3,24(sp)
+ 604:	fc040793          	addi	a5,s0,-64
+ 608:	00e78933          	add	s2,a5,a4
+ 60c:	fff78993          	addi	s3,a5,-1
+ 610:	99ba                	add	s3,s3,a4
+ 612:	377d                	addiw	a4,a4,-1
+ 614:	1702                	slli	a4,a4,0x20
+ 616:	9301                	srli	a4,a4,0x20
+ 618:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 61c:	fff94583          	lbu	a1,-1(s2)
+ 620:	8526                	mv	a0,s1
+ 622:	f5bff0ef          	jal	57c <putc>
+  while(--i >= 0)
+ 626:	197d                	addi	s2,s2,-1
+ 628:	ff391ae3          	bne	s2,s3,61c <printint+0x82>
+ 62c:	7902                	ld	s2,32(sp)
+ 62e:	69e2                	ld	s3,24(sp)
+}
+ 630:	70e2                	ld	ra,56(sp)
+ 632:	7442                	ld	s0,48(sp)
+ 634:	74a2                	ld	s1,40(sp)
+ 636:	6121                	addi	sp,sp,64
+ 638:	8082                	ret
+    x = -xx;
+ 63a:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 63e:	4885                	li	a7,1
+    x = -xx;
+ 640:	bf85                	j	5b0 <printint+0x16>
+
+0000000000000642 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 642:	711d                	addi	sp,sp,-96
+ 644:	ec86                	sd	ra,88(sp)
+ 646:	e8a2                	sd	s0,80(sp)
+ 648:	e0ca                	sd	s2,64(sp)
+ 64a:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 64c:	0005c903          	lbu	s2,0(a1)
+ 650:	26090863          	beqz	s2,8c0 <vprintf+0x27e>
+ 654:	e4a6                	sd	s1,72(sp)
+ 656:	fc4e                	sd	s3,56(sp)
+ 658:	f852                	sd	s4,48(sp)
+ 65a:	f456                	sd	s5,40(sp)
+ 65c:	f05a                	sd	s6,32(sp)
+ 65e:	ec5e                	sd	s7,24(sp)
+ 660:	e862                	sd	s8,16(sp)
+ 662:	e466                	sd	s9,8(sp)
+ 664:	8b2a                	mv	s6,a0
+ 666:	8a2e                	mv	s4,a1
+ 668:	8bb2                	mv	s7,a2
+  state = 0;
+ 66a:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 66c:	4481                	li	s1,0
+ 66e:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 670:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 674:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 678:	06c00c93          	li	s9,108
+ 67c:	a005                	j	69c <vprintf+0x5a>
+        putc(fd, c0);
+ 67e:	85ca                	mv	a1,s2
+ 680:	855a                	mv	a0,s6
+ 682:	efbff0ef          	jal	57c <putc>
+ 686:	a019                	j	68c <vprintf+0x4a>
+    } else if(state == '%'){
+ 688:	03598263          	beq	s3,s5,6ac <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 68c:	2485                	addiw	s1,s1,1
+ 68e:	8726                	mv	a4,s1
+ 690:	009a07b3          	add	a5,s4,s1
+ 694:	0007c903          	lbu	s2,0(a5)
+ 698:	20090c63          	beqz	s2,8b0 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 69c:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 6a0:	fe0994e3          	bnez	s3,688 <vprintf+0x46>
+      if(c0 == '%'){
+ 6a4:	fd579de3          	bne	a5,s5,67e <vprintf+0x3c>
+        state = '%';
+ 6a8:	89be                	mv	s3,a5
+ 6aa:	b7cd                	j	68c <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 6ac:	00ea06b3          	add	a3,s4,a4
+ 6b0:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 6b4:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 6b6:	c681                	beqz	a3,6be <vprintf+0x7c>
+ 6b8:	9752                	add	a4,a4,s4
+ 6ba:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 6be:	03878f63          	beq	a5,s8,6fc <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 6c2:	05978963          	beq	a5,s9,714 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 6c6:	07500713          	li	a4,117
+ 6ca:	0ee78363          	beq	a5,a4,7b0 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 6ce:	07800713          	li	a4,120
+ 6d2:	12e78563          	beq	a5,a4,7fc <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 6d6:	07000713          	li	a4,112
+ 6da:	14e78a63          	beq	a5,a4,82e <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 6de:	07300713          	li	a4,115
+ 6e2:	18e78a63          	beq	a5,a4,876 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 6e6:	02500713          	li	a4,37
+ 6ea:	04e79563          	bne	a5,a4,734 <vprintf+0xf2>
+        putc(fd, '%');
+ 6ee:	02500593          	li	a1,37
+ 6f2:	855a                	mv	a0,s6
+ 6f4:	e89ff0ef          	jal	57c <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 6f8:	4981                	li	s3,0
+ 6fa:	bf49                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 6fc:	008b8913          	addi	s2,s7,8
+ 700:	4685                	li	a3,1
+ 702:	4629                	li	a2,10
+ 704:	000ba583          	lw	a1,0(s7)
+ 708:	855a                	mv	a0,s6
+ 70a:	e91ff0ef          	jal	59a <printint>
+ 70e:	8bca                	mv	s7,s2
+      state = 0;
+ 710:	4981                	li	s3,0
+ 712:	bfad                	j	68c <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 714:	06400793          	li	a5,100
+ 718:	02f68963          	beq	a3,a5,74a <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 71c:	06c00793          	li	a5,108
+ 720:	04f68263          	beq	a3,a5,764 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 724:	07500793          	li	a5,117
+ 728:	0af68063          	beq	a3,a5,7c8 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 72c:	07800793          	li	a5,120
+ 730:	0ef68263          	beq	a3,a5,814 <vprintf+0x1d2>
+        putc(fd, '%');
+ 734:	02500593          	li	a1,37
+ 738:	855a                	mv	a0,s6
+ 73a:	e43ff0ef          	jal	57c <putc>
+        putc(fd, c0);
+ 73e:	85ca                	mv	a1,s2
+ 740:	855a                	mv	a0,s6
+ 742:	e3bff0ef          	jal	57c <putc>
+      state = 0;
+ 746:	4981                	li	s3,0
+ 748:	b791                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 74a:	008b8913          	addi	s2,s7,8
+ 74e:	4685                	li	a3,1
+ 750:	4629                	li	a2,10
+ 752:	000ba583          	lw	a1,0(s7)
+ 756:	855a                	mv	a0,s6
+ 758:	e43ff0ef          	jal	59a <printint>
+        i += 1;
+ 75c:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 75e:	8bca                	mv	s7,s2
+      state = 0;
+ 760:	4981                	li	s3,0
+        i += 1;
+ 762:	b72d                	j	68c <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 764:	06400793          	li	a5,100
+ 768:	02f60763          	beq	a2,a5,796 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 76c:	07500793          	li	a5,117
+ 770:	06f60963          	beq	a2,a5,7e2 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 774:	07800793          	li	a5,120
+ 778:	faf61ee3          	bne	a2,a5,734 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 77c:	008b8913          	addi	s2,s7,8
+ 780:	4681                	li	a3,0
+ 782:	4641                	li	a2,16
+ 784:	000ba583          	lw	a1,0(s7)
+ 788:	855a                	mv	a0,s6
+ 78a:	e11ff0ef          	jal	59a <printint>
+        i += 2;
+ 78e:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 790:	8bca                	mv	s7,s2
+      state = 0;
+ 792:	4981                	li	s3,0
+        i += 2;
+ 794:	bde5                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 796:	008b8913          	addi	s2,s7,8
+ 79a:	4685                	li	a3,1
+ 79c:	4629                	li	a2,10
+ 79e:	000ba583          	lw	a1,0(s7)
+ 7a2:	855a                	mv	a0,s6
+ 7a4:	df7ff0ef          	jal	59a <printint>
+        i += 2;
+ 7a8:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 7aa:	8bca                	mv	s7,s2
+      state = 0;
+ 7ac:	4981                	li	s3,0
+        i += 2;
+ 7ae:	bdf9                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 7b0:	008b8913          	addi	s2,s7,8
+ 7b4:	4681                	li	a3,0
+ 7b6:	4629                	li	a2,10
+ 7b8:	000ba583          	lw	a1,0(s7)
+ 7bc:	855a                	mv	a0,s6
+ 7be:	dddff0ef          	jal	59a <printint>
+ 7c2:	8bca                	mv	s7,s2
+      state = 0;
+ 7c4:	4981                	li	s3,0
+ 7c6:	b5d9                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7c8:	008b8913          	addi	s2,s7,8
+ 7cc:	4681                	li	a3,0
+ 7ce:	4629                	li	a2,10
+ 7d0:	000ba583          	lw	a1,0(s7)
+ 7d4:	855a                	mv	a0,s6
+ 7d6:	dc5ff0ef          	jal	59a <printint>
+        i += 1;
+ 7da:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7dc:	8bca                	mv	s7,s2
+      state = 0;
+ 7de:	4981                	li	s3,0
+        i += 1;
+ 7e0:	b575                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7e2:	008b8913          	addi	s2,s7,8
+ 7e6:	4681                	li	a3,0
+ 7e8:	4629                	li	a2,10
+ 7ea:	000ba583          	lw	a1,0(s7)
+ 7ee:	855a                	mv	a0,s6
+ 7f0:	dabff0ef          	jal	59a <printint>
+        i += 2;
+ 7f4:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7f6:	8bca                	mv	s7,s2
+      state = 0;
+ 7f8:	4981                	li	s3,0
+        i += 2;
+ 7fa:	bd49                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 7fc:	008b8913          	addi	s2,s7,8
+ 800:	4681                	li	a3,0
+ 802:	4641                	li	a2,16
+ 804:	000ba583          	lw	a1,0(s7)
+ 808:	855a                	mv	a0,s6
+ 80a:	d91ff0ef          	jal	59a <printint>
+ 80e:	8bca                	mv	s7,s2
+      state = 0;
+ 810:	4981                	li	s3,0
+ 812:	bdad                	j	68c <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 814:	008b8913          	addi	s2,s7,8
+ 818:	4681                	li	a3,0
+ 81a:	4641                	li	a2,16
+ 81c:	000ba583          	lw	a1,0(s7)
+ 820:	855a                	mv	a0,s6
+ 822:	d79ff0ef          	jal	59a <printint>
+        i += 1;
+ 826:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 828:	8bca                	mv	s7,s2
+      state = 0;
+ 82a:	4981                	li	s3,0
+        i += 1;
+ 82c:	b585                	j	68c <vprintf+0x4a>
+ 82e:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 830:	008b8d13          	addi	s10,s7,8
+ 834:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 838:	03000593          	li	a1,48
+ 83c:	855a                	mv	a0,s6
+ 83e:	d3fff0ef          	jal	57c <putc>
+  putc(fd, 'x');
+ 842:	07800593          	li	a1,120
+ 846:	855a                	mv	a0,s6
+ 848:	d35ff0ef          	jal	57c <putc>
+ 84c:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 84e:	00000b97          	auipc	s7,0x0
+ 852:	292b8b93          	addi	s7,s7,658 # ae0 <digits>
+ 856:	03c9d793          	srli	a5,s3,0x3c
+ 85a:	97de                	add	a5,a5,s7
+ 85c:	0007c583          	lbu	a1,0(a5)
+ 860:	855a                	mv	a0,s6
+ 862:	d1bff0ef          	jal	57c <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 866:	0992                	slli	s3,s3,0x4
+ 868:	397d                	addiw	s2,s2,-1
+ 86a:	fe0916e3          	bnez	s2,856 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 86e:	8bea                	mv	s7,s10
+      state = 0;
+ 870:	4981                	li	s3,0
+ 872:	6d02                	ld	s10,0(sp)
+ 874:	bd21                	j	68c <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 876:	008b8993          	addi	s3,s7,8
+ 87a:	000bb903          	ld	s2,0(s7)
+ 87e:	00090f63          	beqz	s2,89c <vprintf+0x25a>
+        for(; *s; s++)
+ 882:	00094583          	lbu	a1,0(s2)
+ 886:	c195                	beqz	a1,8aa <vprintf+0x268>
+          putc(fd, *s);
+ 888:	855a                	mv	a0,s6
+ 88a:	cf3ff0ef          	jal	57c <putc>
+        for(; *s; s++)
+ 88e:	0905                	addi	s2,s2,1
+ 890:	00094583          	lbu	a1,0(s2)
+ 894:	f9f5                	bnez	a1,888 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 896:	8bce                	mv	s7,s3
+      state = 0;
+ 898:	4981                	li	s3,0
+ 89a:	bbcd                	j	68c <vprintf+0x4a>
+          s = "(null)";
+ 89c:	00000917          	auipc	s2,0x0
+ 8a0:	23c90913          	addi	s2,s2,572 # ad8 <malloc+0x130>
+        for(; *s; s++)
+ 8a4:	02800593          	li	a1,40
+ 8a8:	b7c5                	j	888 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 8aa:	8bce                	mv	s7,s3
+      state = 0;
+ 8ac:	4981                	li	s3,0
+ 8ae:	bbf9                	j	68c <vprintf+0x4a>
+ 8b0:	64a6                	ld	s1,72(sp)
+ 8b2:	79e2                	ld	s3,56(sp)
+ 8b4:	7a42                	ld	s4,48(sp)
+ 8b6:	7aa2                	ld	s5,40(sp)
+ 8b8:	7b02                	ld	s6,32(sp)
+ 8ba:	6be2                	ld	s7,24(sp)
+ 8bc:	6c42                	ld	s8,16(sp)
+ 8be:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 8c0:	60e6                	ld	ra,88(sp)
+ 8c2:	6446                	ld	s0,80(sp)
+ 8c4:	6906                	ld	s2,64(sp)
+ 8c6:	6125                	addi	sp,sp,96
+ 8c8:	8082                	ret
+
+00000000000008ca <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 8ca:	715d                	addi	sp,sp,-80
+ 8cc:	ec06                	sd	ra,24(sp)
+ 8ce:	e822                	sd	s0,16(sp)
+ 8d0:	1000                	addi	s0,sp,32
+ 8d2:	e010                	sd	a2,0(s0)
+ 8d4:	e414                	sd	a3,8(s0)
+ 8d6:	e818                	sd	a4,16(s0)
+ 8d8:	ec1c                	sd	a5,24(s0)
+ 8da:	03043023          	sd	a6,32(s0)
+ 8de:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 8e2:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 8e6:	8622                	mv	a2,s0
+ 8e8:	d5bff0ef          	jal	642 <vprintf>
+}
+ 8ec:	60e2                	ld	ra,24(sp)
+ 8ee:	6442                	ld	s0,16(sp)
+ 8f0:	6161                	addi	sp,sp,80
+ 8f2:	8082                	ret
+
+00000000000008f4 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 8f4:	711d                	addi	sp,sp,-96
+ 8f6:	ec06                	sd	ra,24(sp)
+ 8f8:	e822                	sd	s0,16(sp)
+ 8fa:	1000                	addi	s0,sp,32
+ 8fc:	e40c                	sd	a1,8(s0)
+ 8fe:	e810                	sd	a2,16(s0)
+ 900:	ec14                	sd	a3,24(s0)
+ 902:	f018                	sd	a4,32(s0)
+ 904:	f41c                	sd	a5,40(s0)
+ 906:	03043823          	sd	a6,48(s0)
+ 90a:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 90e:	00840613          	addi	a2,s0,8
+ 912:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 916:	85aa                	mv	a1,a0
+ 918:	4505                	li	a0,1
+ 91a:	d29ff0ef          	jal	642 <vprintf>
+}
+ 91e:	60e2                	ld	ra,24(sp)
+ 920:	6442                	ld	s0,16(sp)
+ 922:	6125                	addi	sp,sp,96
+ 924:	8082                	ret
+
+0000000000000926 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 926:	1141                	addi	sp,sp,-16
+ 928:	e422                	sd	s0,8(sp)
+ 92a:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 92c:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 930:	00000797          	auipc	a5,0x0
+ 934:	6d07b783          	ld	a5,1744(a5) # 1000 <freep>
+ 938:	a02d                	j	962 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 93a:	4618                	lw	a4,8(a2)
+ 93c:	9f2d                	addw	a4,a4,a1
+ 93e:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 942:	6398                	ld	a4,0(a5)
+ 944:	6310                	ld	a2,0(a4)
+ 946:	a83d                	j	984 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 948:	ff852703          	lw	a4,-8(a0)
+ 94c:	9f31                	addw	a4,a4,a2
+ 94e:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 950:	ff053683          	ld	a3,-16(a0)
+ 954:	a091                	j	998 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 956:	6398                	ld	a4,0(a5)
+ 958:	00e7e463          	bltu	a5,a4,960 <free+0x3a>
+ 95c:	00e6ea63          	bltu	a3,a4,970 <free+0x4a>
+{
+ 960:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 962:	fed7fae3          	bgeu	a5,a3,956 <free+0x30>
+ 966:	6398                	ld	a4,0(a5)
+ 968:	00e6e463          	bltu	a3,a4,970 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 96c:	fee7eae3          	bltu	a5,a4,960 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 970:	ff852583          	lw	a1,-8(a0)
+ 974:	6390                	ld	a2,0(a5)
+ 976:	02059813          	slli	a6,a1,0x20
+ 97a:	01c85713          	srli	a4,a6,0x1c
+ 97e:	9736                	add	a4,a4,a3
+ 980:	fae60de3          	beq	a2,a4,93a <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 984:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 988:	4790                	lw	a2,8(a5)
+ 98a:	02061593          	slli	a1,a2,0x20
+ 98e:	01c5d713          	srli	a4,a1,0x1c
+ 992:	973e                	add	a4,a4,a5
+ 994:	fae68ae3          	beq	a3,a4,948 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 998:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 99a:	00000717          	auipc	a4,0x0
+ 99e:	66f73323          	sd	a5,1638(a4) # 1000 <freep>
+}
+ 9a2:	6422                	ld	s0,8(sp)
+ 9a4:	0141                	addi	sp,sp,16
+ 9a6:	8082                	ret
+
+00000000000009a8 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9a8:	7139                	addi	sp,sp,-64
+ 9aa:	fc06                	sd	ra,56(sp)
+ 9ac:	f822                	sd	s0,48(sp)
+ 9ae:	f426                	sd	s1,40(sp)
+ 9b0:	ec4e                	sd	s3,24(sp)
+ 9b2:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9b4:	02051493          	slli	s1,a0,0x20
+ 9b8:	9081                	srli	s1,s1,0x20
+ 9ba:	04bd                	addi	s1,s1,15
+ 9bc:	8091                	srli	s1,s1,0x4
+ 9be:	0014899b          	addiw	s3,s1,1
+ 9c2:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 9c4:	00000517          	auipc	a0,0x0
+ 9c8:	63c53503          	ld	a0,1596(a0) # 1000 <freep>
+ 9cc:	c915                	beqz	a0,a00 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9ce:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 9d0:	4798                	lw	a4,8(a5)
+ 9d2:	08977a63          	bgeu	a4,s1,a66 <malloc+0xbe>
+ 9d6:	f04a                	sd	s2,32(sp)
+ 9d8:	e852                	sd	s4,16(sp)
+ 9da:	e456                	sd	s5,8(sp)
+ 9dc:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 9de:	8a4e                	mv	s4,s3
+ 9e0:	0009871b          	sext.w	a4,s3
+ 9e4:	6685                	lui	a3,0x1
+ 9e6:	00d77363          	bgeu	a4,a3,9ec <malloc+0x44>
+ 9ea:	6a05                	lui	s4,0x1
+ 9ec:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 9f0:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9f4:	00000917          	auipc	s2,0x0
+ 9f8:	60c90913          	addi	s2,s2,1548 # 1000 <freep>
+  if(p == (char*)-1)
+ 9fc:	5afd                	li	s5,-1
+ 9fe:	a081                	j	a3e <malloc+0x96>
+ a00:	f04a                	sd	s2,32(sp)
+ a02:	e852                	sd	s4,16(sp)
+ a04:	e456                	sd	s5,8(sp)
+ a06:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ a08:	00001797          	auipc	a5,0x1
+ a0c:	a0878793          	addi	a5,a5,-1528 # 1410 <base>
+ a10:	00000717          	auipc	a4,0x0
+ a14:	5ef73823          	sd	a5,1520(a4) # 1000 <freep>
+ a18:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ a1a:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ a1e:	b7c1                	j	9de <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ a20:	6398                	ld	a4,0(a5)
+ a22:	e118                	sd	a4,0(a0)
+ a24:	a8a9                	j	a7e <malloc+0xd6>
+  hp->s.size = nu;
+ a26:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ a2a:	0541                	addi	a0,a0,16
+ a2c:	efbff0ef          	jal	926 <free>
+  return freep;
+ a30:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ a34:	c12d                	beqz	a0,a96 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a36:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a38:	4798                	lw	a4,8(a5)
+ a3a:	02977263          	bgeu	a4,s1,a5e <malloc+0xb6>
+    if(p == freep)
+ a3e:	00093703          	ld	a4,0(s2)
+ a42:	853e                	mv	a0,a5
+ a44:	fef719e3          	bne	a4,a5,a36 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ a48:	8552                	mv	a0,s4
+ a4a:	b03ff0ef          	jal	54c <sbrk>
+  if(p == (char*)-1)
+ a4e:	fd551ce3          	bne	a0,s5,a26 <malloc+0x7e>
+        return 0;
+ a52:	4501                	li	a0,0
+ a54:	7902                	ld	s2,32(sp)
+ a56:	6a42                	ld	s4,16(sp)
+ a58:	6aa2                	ld	s5,8(sp)
+ a5a:	6b02                	ld	s6,0(sp)
+ a5c:	a03d                	j	a8a <malloc+0xe2>
+ a5e:	7902                	ld	s2,32(sp)
+ a60:	6a42                	ld	s4,16(sp)
+ a62:	6aa2                	ld	s5,8(sp)
+ a64:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ a66:	fae48de3          	beq	s1,a4,a20 <malloc+0x78>
+        p->s.size -= nunits;
+ a6a:	4137073b          	subw	a4,a4,s3
+ a6e:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ a70:	02071693          	slli	a3,a4,0x20
+ a74:	01c6d713          	srli	a4,a3,0x1c
+ a78:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ a7a:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ a7e:	00000717          	auipc	a4,0x0
+ a82:	58a73123          	sd	a0,1410(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ a86:	01078513          	addi	a0,a5,16
+  }
+}
+ a8a:	70e2                	ld	ra,56(sp)
+ a8c:	7442                	ld	s0,48(sp)
+ a8e:	74a2                	ld	s1,40(sp)
+ a90:	69e2                	ld	s3,24(sp)
+ a92:	6121                	addi	sp,sp,64
+ a94:	8082                	ret
+ a96:	7902                	ld	s2,32(sp)
+ a98:	6a42                	ld	s4,16(sp)
+ a9a:	6aa2                	ld	s5,8(sp)
+ a9c:	6b02                	ld	s6,0(sp)
+ a9e:	b7f5                	j	a8a <malloc+0xe2>
diff --git a/user/grep.c b/user/grep.c
new file mode 100644
index 0000000..6c33766
--- /dev/null
+++ b/user/grep.c
@@ -0,0 +1,107 @@
+// Simple grep.  Only supports ^ . * $ operators.
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char buf[1024];
+int match(char*, char*);
+
+void
+grep(char *pattern, int fd)
+{
+  int n, m;
+  char *p, *q;
+
+  m = 0;
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+    m += n;
+    buf[m] = '\0';
+    p = buf;
+    while((q = strchr(p, '\n')) != 0){
+      *q = 0;
+      if(match(pattern, p)){
+        *q = '\n';
+        write(1, p, q+1 - p);
+      }
+      p = q+1;
+    }
+    if(m > 0){
+      m -= p - buf;
+      memmove(buf, p, m);
+    }
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+    fprintf(2, "usage: grep pattern [file ...]\n");
+    exit(1);
+  }
+  pattern = argv[1];
+
+  if(argc <= 2){
+    grep(pattern, 0);
+    exit(0);
+  }
+
+  for(i = 2; i < argc; i++){
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+      printf("grep: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    grep(pattern, fd);
+    close(fd);
+  }
+  exit(0);
+}
+
+// Regexp matcher from Kernighan & Pike,
+// The Practice of Programming, Chapter 9, or
+// https://www.cs.princeton.edu/courses/archive/spr09/cos333/beautiful.html
+
+int matchhere(char*, char*);
+int matchstar(int, char*, char*);
+
+int
+match(char *re, char *text)
+{
+  if(re[0] == '^')
+    return matchhere(re+1, text);
+  do{  // must look at empty string
+    if(matchhere(re, text))
+      return 1;
+  }while(*text++ != '\0');
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  if(re[0] == '\0')
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+    return matchhere(re+1, text+1);
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+  return 0;
+}
+
diff --git a/user/grep.d b/user/grep.d
new file mode 100644
index 0000000..18243b4
--- /dev/null
+++ b/user/grep.d
@@ -0,0 +1,2 @@
+user/grep.o: user/grep.c kernel/types.h kernel/stat.h kernel/fcntl.h \
+ user/user.h
diff --git a/user/grep.o b/user/grep.o
new file mode 100644
index 0000000..5b5e5e2
Binary files /dev/null and b/user/grep.o differ
diff --git a/user/grep.sym b/user/grep.sym
new file mode 100644
index 0000000..e91db17
--- /dev/null
+++ b/user/grep.sym
@@ -0,0 +1,71 @@
+0000000000000000 .text
+0000000000000aa0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 grep.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000057c putc
+000000000000059a printint
+0000000000000ae0 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001410 base
+000000000000026c strcpy
+00000000000008f4 printf
+0000000000000416 memmove
+000000000000004a matchhere
+000000000000050c mknod
+000000000000056c trace
+0000000000000324 gets
+0000000000000544 getpid
+0000000000000564 hello
+00000000000004a8 memcpy
+0000000000000106 grep
+00000000000009a8 malloc
+0000000000000554 sleep
+0000000000000574 sysinfo
+00000000000004d4 pipe
+00000000000004e4 write
+000000000000051c fstat
+00000000000008ca fprintf
+00000000000004f4 kill
+0000000000000642 vprintf
+0000000000000534 chdir
+00000000000004fc exec
+00000000000004cc wait
+00000000000004dc read
+0000000000000514 unlink
+000000000000046e memcmp
+00000000000004bc fork
+000000000000054c sbrk
+000000000000055c uptime
+00000000000002de memset
+00000000000001c4 main
+0000000000000000 matchstar
+0000000000000288 strcmp
+000000000000053c dup
+0000000000001010 buf
+0000000000000394 stat
+00000000000000c0 match
+0000000000000524 link
+00000000000004c4 exit
+000000000000025a start
+00000000000003ce atoi
+00000000000002b4 strlen
+0000000000000504 open
+0000000000000300 strchr
+000000000000052c mkdir
+00000000000004ec close
+0000000000000926 free
diff --git a/user/grind.asm b/user/grind.asm
new file mode 100644
index 0000000..e23e5ab
--- /dev/null
+++ b/user/grind.asm
@@ -0,0 +1,2526 @@
+
+user/_grind:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <do_rand>:
+#include "kernel/riscv.h"
+
+// from FreeBSD.
+int
+do_rand(unsigned long *ctx)
+{
+       0:	1141                	addi	sp,sp,-16
+       2:	e422                	sd	s0,8(sp)
+       4:	0800                	addi	s0,sp,16
+ * October 1988, p. 1195.
+ */
+    long hi, lo, x;
+
+    /* Transform to [1, 0x7ffffffe] range. */
+    x = (*ctx % 0x7ffffffe) + 1;
+       6:	611c                	ld	a5,0(a0)
+       8:	80000737          	lui	a4,0x80000
+       c:	ffe74713          	xori	a4,a4,-2
+      10:	02e7f7b3          	remu	a5,a5,a4
+      14:	0785                	addi	a5,a5,1
+    hi = x / 127773;
+    lo = x % 127773;
+      16:	66fd                	lui	a3,0x1f
+      18:	31d68693          	addi	a3,a3,797 # 1f31d <base+0x1cf15>
+      1c:	02d7e733          	rem	a4,a5,a3
+    x = 16807 * lo - 2836 * hi;
+      20:	6611                	lui	a2,0x4
+      22:	1a760613          	addi	a2,a2,423 # 41a7 <base+0x1d9f>
+      26:	02c70733          	mul	a4,a4,a2
+    hi = x / 127773;
+      2a:	02d7c7b3          	div	a5,a5,a3
+    x = 16807 * lo - 2836 * hi;
+      2e:	76fd                	lui	a3,0xfffff
+      30:	4ec68693          	addi	a3,a3,1260 # fffffffffffff4ec <base+0xffffffffffffd0e4>
+      34:	02d787b3          	mul	a5,a5,a3
+      38:	97ba                	add	a5,a5,a4
+    if (x < 0)
+      3a:	0007c963          	bltz	a5,4c <do_rand+0x4c>
+        x += 0x7fffffff;
+    /* Transform to [0, 0x7ffffffd] range. */
+    x--;
+      3e:	17fd                	addi	a5,a5,-1
+    *ctx = x;
+      40:	e11c                	sd	a5,0(a0)
+    return (x);
+}
+      42:	0007851b          	sext.w	a0,a5
+      46:	6422                	ld	s0,8(sp)
+      48:	0141                	addi	sp,sp,16
+      4a:	8082                	ret
+        x += 0x7fffffff;
+      4c:	80000737          	lui	a4,0x80000
+      50:	fff74713          	not	a4,a4
+      54:	97ba                	add	a5,a5,a4
+      56:	b7e5                	j	3e <do_rand+0x3e>
+
+0000000000000058 <rand>:
+
+unsigned long rand_next = 1;
+
+int
+rand(void)
+{
+      58:	1141                	addi	sp,sp,-16
+      5a:	e406                	sd	ra,8(sp)
+      5c:	e022                	sd	s0,0(sp)
+      5e:	0800                	addi	s0,sp,16
+    return (do_rand(&rand_next));
+      60:	00002517          	auipc	a0,0x2
+      64:	fa050513          	addi	a0,a0,-96 # 2000 <rand_next>
+      68:	f99ff0ef          	jal	0 <do_rand>
+}
+      6c:	60a2                	ld	ra,8(sp)
+      6e:	6402                	ld	s0,0(sp)
+      70:	0141                	addi	sp,sp,16
+      72:	8082                	ret
+
+0000000000000074 <go>:
+
+void
+go(int which_child)
+{
+      74:	7119                	addi	sp,sp,-128
+      76:	fc86                	sd	ra,120(sp)
+      78:	f8a2                	sd	s0,112(sp)
+      7a:	f4a6                	sd	s1,104(sp)
+      7c:	e4d6                	sd	s5,72(sp)
+      7e:	0100                	addi	s0,sp,128
+      80:	84aa                	mv	s1,a0
+  int fd = -1;
+  static char buf[999];
+  char *break0 = sbrk(0);
+      82:	4501                	li	a0,0
+      84:	353000ef          	jal	bd6 <sbrk>
+      88:	8aaa                	mv	s5,a0
+  uint64 iters = 0;
+
+  mkdir("grindir");
+      8a:	00001517          	auipc	a0,0x1
+      8e:	0a650513          	addi	a0,a0,166 # 1130 <malloc+0xfe>
+      92:	325000ef          	jal	bb6 <mkdir>
+  if(chdir("grindir") != 0){
+      96:	00001517          	auipc	a0,0x1
+      9a:	09a50513          	addi	a0,a0,154 # 1130 <malloc+0xfe>
+      9e:	321000ef          	jal	bbe <chdir>
+      a2:	cd19                	beqz	a0,c0 <go+0x4c>
+      a4:	f0ca                	sd	s2,96(sp)
+      a6:	ecce                	sd	s3,88(sp)
+      a8:	e8d2                	sd	s4,80(sp)
+      aa:	e0da                	sd	s6,64(sp)
+      ac:	fc5e                	sd	s7,56(sp)
+    printf("grind: chdir grindir failed\n");
+      ae:	00001517          	auipc	a0,0x1
+      b2:	08a50513          	addi	a0,a0,138 # 1138 <malloc+0x106>
+      b6:	6c9000ef          	jal	f7e <printf>
+    exit(1);
+      ba:	4505                	li	a0,1
+      bc:	293000ef          	jal	b4e <exit>
+      c0:	f0ca                	sd	s2,96(sp)
+      c2:	ecce                	sd	s3,88(sp)
+      c4:	e8d2                	sd	s4,80(sp)
+      c6:	e0da                	sd	s6,64(sp)
+      c8:	fc5e                	sd	s7,56(sp)
+  }
+  chdir("/");
+      ca:	00001517          	auipc	a0,0x1
+      ce:	09650513          	addi	a0,a0,150 # 1160 <malloc+0x12e>
+      d2:	2ed000ef          	jal	bbe <chdir>
+      d6:	00001997          	auipc	s3,0x1
+      da:	09a98993          	addi	s3,s3,154 # 1170 <malloc+0x13e>
+      de:	c489                	beqz	s1,e8 <go+0x74>
+      e0:	00001997          	auipc	s3,0x1
+      e4:	08898993          	addi	s3,s3,136 # 1168 <malloc+0x136>
+  uint64 iters = 0;
+      e8:	4481                	li	s1,0
+  int fd = -1;
+      ea:	5a7d                	li	s4,-1
+      ec:	00001917          	auipc	s2,0x1
+      f0:	35490913          	addi	s2,s2,852 # 1440 <malloc+0x40e>
+      f4:	a819                	j	10a <go+0x96>
+    iters++;
+    if((iters % 500) == 0)
+      write(1, which_child?"B":"A", 1);
+    int what = rand() % 23;
+    if(what == 1){
+      close(open("grindir/../a", O_CREATE|O_RDWR));
+      f6:	20200593          	li	a1,514
+      fa:	00001517          	auipc	a0,0x1
+      fe:	07e50513          	addi	a0,a0,126 # 1178 <malloc+0x146>
+     102:	28d000ef          	jal	b8e <open>
+     106:	271000ef          	jal	b76 <close>
+    iters++;
+     10a:	0485                	addi	s1,s1,1
+    if((iters % 500) == 0)
+     10c:	1f400793          	li	a5,500
+     110:	02f4f7b3          	remu	a5,s1,a5
+     114:	e791                	bnez	a5,120 <go+0xac>
+      write(1, which_child?"B":"A", 1);
+     116:	4605                	li	a2,1
+     118:	85ce                	mv	a1,s3
+     11a:	4505                	li	a0,1
+     11c:	253000ef          	jal	b6e <write>
+    int what = rand() % 23;
+     120:	f39ff0ef          	jal	58 <rand>
+     124:	47dd                	li	a5,23
+     126:	02f5653b          	remw	a0,a0,a5
+     12a:	0005071b          	sext.w	a4,a0
+     12e:	47d9                	li	a5,22
+     130:	fce7ede3          	bltu	a5,a4,10a <go+0x96>
+     134:	02051793          	slli	a5,a0,0x20
+     138:	01e7d513          	srli	a0,a5,0x1e
+     13c:	954a                	add	a0,a0,s2
+     13e:	411c                	lw	a5,0(a0)
+     140:	97ca                	add	a5,a5,s2
+     142:	8782                	jr	a5
+    } else if(what == 2){
+      close(open("grindir/../grindir/../b", O_CREATE|O_RDWR));
+     144:	20200593          	li	a1,514
+     148:	00001517          	auipc	a0,0x1
+     14c:	04050513          	addi	a0,a0,64 # 1188 <malloc+0x156>
+     150:	23f000ef          	jal	b8e <open>
+     154:	223000ef          	jal	b76 <close>
+     158:	bf4d                	j	10a <go+0x96>
+    } else if(what == 3){
+      unlink("grindir/../a");
+     15a:	00001517          	auipc	a0,0x1
+     15e:	01e50513          	addi	a0,a0,30 # 1178 <malloc+0x146>
+     162:	23d000ef          	jal	b9e <unlink>
+     166:	b755                	j	10a <go+0x96>
+    } else if(what == 4){
+      if(chdir("grindir") != 0){
+     168:	00001517          	auipc	a0,0x1
+     16c:	fc850513          	addi	a0,a0,-56 # 1130 <malloc+0xfe>
+     170:	24f000ef          	jal	bbe <chdir>
+     174:	ed11                	bnez	a0,190 <go+0x11c>
+        printf("grind: chdir grindir failed\n");
+        exit(1);
+      }
+      unlink("../b");
+     176:	00001517          	auipc	a0,0x1
+     17a:	02a50513          	addi	a0,a0,42 # 11a0 <malloc+0x16e>
+     17e:	221000ef          	jal	b9e <unlink>
+      chdir("/");
+     182:	00001517          	auipc	a0,0x1
+     186:	fde50513          	addi	a0,a0,-34 # 1160 <malloc+0x12e>
+     18a:	235000ef          	jal	bbe <chdir>
+     18e:	bfb5                	j	10a <go+0x96>
+        printf("grind: chdir grindir failed\n");
+     190:	00001517          	auipc	a0,0x1
+     194:	fa850513          	addi	a0,a0,-88 # 1138 <malloc+0x106>
+     198:	5e7000ef          	jal	f7e <printf>
+        exit(1);
+     19c:	4505                	li	a0,1
+     19e:	1b1000ef          	jal	b4e <exit>
+    } else if(what == 5){
+      close(fd);
+     1a2:	8552                	mv	a0,s4
+     1a4:	1d3000ef          	jal	b76 <close>
+      fd = open("/grindir/../a", O_CREATE|O_RDWR);
+     1a8:	20200593          	li	a1,514
+     1ac:	00001517          	auipc	a0,0x1
+     1b0:	ffc50513          	addi	a0,a0,-4 # 11a8 <malloc+0x176>
+     1b4:	1db000ef          	jal	b8e <open>
+     1b8:	8a2a                	mv	s4,a0
+     1ba:	bf81                	j	10a <go+0x96>
+    } else if(what == 6){
+      close(fd);
+     1bc:	8552                	mv	a0,s4
+     1be:	1b9000ef          	jal	b76 <close>
+      fd = open("/./grindir/./../b", O_CREATE|O_RDWR);
+     1c2:	20200593          	li	a1,514
+     1c6:	00001517          	auipc	a0,0x1
+     1ca:	ff250513          	addi	a0,a0,-14 # 11b8 <malloc+0x186>
+     1ce:	1c1000ef          	jal	b8e <open>
+     1d2:	8a2a                	mv	s4,a0
+     1d4:	bf1d                	j	10a <go+0x96>
+    } else if(what == 7){
+      write(fd, buf, sizeof(buf));
+     1d6:	3e700613          	li	a2,999
+     1da:	00002597          	auipc	a1,0x2
+     1de:	e4658593          	addi	a1,a1,-442 # 2020 <buf.0>
+     1e2:	8552                	mv	a0,s4
+     1e4:	18b000ef          	jal	b6e <write>
+     1e8:	b70d                	j	10a <go+0x96>
+    } else if(what == 8){
+      read(fd, buf, sizeof(buf));
+     1ea:	3e700613          	li	a2,999
+     1ee:	00002597          	auipc	a1,0x2
+     1f2:	e3258593          	addi	a1,a1,-462 # 2020 <buf.0>
+     1f6:	8552                	mv	a0,s4
+     1f8:	16f000ef          	jal	b66 <read>
+     1fc:	b739                	j	10a <go+0x96>
+    } else if(what == 9){
+      mkdir("grindir/../a");
+     1fe:	00001517          	auipc	a0,0x1
+     202:	f7a50513          	addi	a0,a0,-134 # 1178 <malloc+0x146>
+     206:	1b1000ef          	jal	bb6 <mkdir>
+      close(open("a/../a/./a", O_CREATE|O_RDWR));
+     20a:	20200593          	li	a1,514
+     20e:	00001517          	auipc	a0,0x1
+     212:	fc250513          	addi	a0,a0,-62 # 11d0 <malloc+0x19e>
+     216:	179000ef          	jal	b8e <open>
+     21a:	15d000ef          	jal	b76 <close>
+      unlink("a/a");
+     21e:	00001517          	auipc	a0,0x1
+     222:	fc250513          	addi	a0,a0,-62 # 11e0 <malloc+0x1ae>
+     226:	179000ef          	jal	b9e <unlink>
+     22a:	b5c5                	j	10a <go+0x96>
+    } else if(what == 10){
+      mkdir("/../b");
+     22c:	00001517          	auipc	a0,0x1
+     230:	fbc50513          	addi	a0,a0,-68 # 11e8 <malloc+0x1b6>
+     234:	183000ef          	jal	bb6 <mkdir>
+      close(open("grindir/../b/b", O_CREATE|O_RDWR));
+     238:	20200593          	li	a1,514
+     23c:	00001517          	auipc	a0,0x1
+     240:	fb450513          	addi	a0,a0,-76 # 11f0 <malloc+0x1be>
+     244:	14b000ef          	jal	b8e <open>
+     248:	12f000ef          	jal	b76 <close>
+      unlink("b/b");
+     24c:	00001517          	auipc	a0,0x1
+     250:	fb450513          	addi	a0,a0,-76 # 1200 <malloc+0x1ce>
+     254:	14b000ef          	jal	b9e <unlink>
+     258:	bd4d                	j	10a <go+0x96>
+    } else if(what == 11){
+      unlink("b");
+     25a:	00001517          	auipc	a0,0x1
+     25e:	fae50513          	addi	a0,a0,-82 # 1208 <malloc+0x1d6>
+     262:	13d000ef          	jal	b9e <unlink>
+      link("../grindir/./../a", "../b");
+     266:	00001597          	auipc	a1,0x1
+     26a:	f3a58593          	addi	a1,a1,-198 # 11a0 <malloc+0x16e>
+     26e:	00001517          	auipc	a0,0x1
+     272:	fa250513          	addi	a0,a0,-94 # 1210 <malloc+0x1de>
+     276:	139000ef          	jal	bae <link>
+     27a:	bd41                	j	10a <go+0x96>
+    } else if(what == 12){
+      unlink("../grindir/../a");
+     27c:	00001517          	auipc	a0,0x1
+     280:	fac50513          	addi	a0,a0,-84 # 1228 <malloc+0x1f6>
+     284:	11b000ef          	jal	b9e <unlink>
+      link(".././b", "/grindir/../a");
+     288:	00001597          	auipc	a1,0x1
+     28c:	f2058593          	addi	a1,a1,-224 # 11a8 <malloc+0x176>
+     290:	00001517          	auipc	a0,0x1
+     294:	fa850513          	addi	a0,a0,-88 # 1238 <malloc+0x206>
+     298:	117000ef          	jal	bae <link>
+     29c:	b5bd                	j	10a <go+0x96>
+    } else if(what == 13){
+      int pid = fork();
+     29e:	0a9000ef          	jal	b46 <fork>
+      if(pid == 0){
+     2a2:	c519                	beqz	a0,2b0 <go+0x23c>
+        exit(0);
+      } else if(pid < 0){
+     2a4:	00054863          	bltz	a0,2b4 <go+0x240>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     2a8:	4501                	li	a0,0
+     2aa:	0ad000ef          	jal	b56 <wait>
+     2ae:	bdb1                	j	10a <go+0x96>
+        exit(0);
+     2b0:	09f000ef          	jal	b4e <exit>
+        printf("grind: fork failed\n");
+     2b4:	00001517          	auipc	a0,0x1
+     2b8:	f8c50513          	addi	a0,a0,-116 # 1240 <malloc+0x20e>
+     2bc:	4c3000ef          	jal	f7e <printf>
+        exit(1);
+     2c0:	4505                	li	a0,1
+     2c2:	08d000ef          	jal	b4e <exit>
+    } else if(what == 14){
+      int pid = fork();
+     2c6:	081000ef          	jal	b46 <fork>
+      if(pid == 0){
+     2ca:	c519                	beqz	a0,2d8 <go+0x264>
+        fork();
+        fork();
+        exit(0);
+      } else if(pid < 0){
+     2cc:	00054d63          	bltz	a0,2e6 <go+0x272>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     2d0:	4501                	li	a0,0
+     2d2:	085000ef          	jal	b56 <wait>
+     2d6:	bd15                	j	10a <go+0x96>
+        fork();
+     2d8:	06f000ef          	jal	b46 <fork>
+        fork();
+     2dc:	06b000ef          	jal	b46 <fork>
+        exit(0);
+     2e0:	4501                	li	a0,0
+     2e2:	06d000ef          	jal	b4e <exit>
+        printf("grind: fork failed\n");
+     2e6:	00001517          	auipc	a0,0x1
+     2ea:	f5a50513          	addi	a0,a0,-166 # 1240 <malloc+0x20e>
+     2ee:	491000ef          	jal	f7e <printf>
+        exit(1);
+     2f2:	4505                	li	a0,1
+     2f4:	05b000ef          	jal	b4e <exit>
+    } else if(what == 15){
+      sbrk(6011);
+     2f8:	6505                	lui	a0,0x1
+     2fa:	77b50513          	addi	a0,a0,1915 # 177b <digits+0x2db>
+     2fe:	0d9000ef          	jal	bd6 <sbrk>
+     302:	b521                	j	10a <go+0x96>
+    } else if(what == 16){
+      if(sbrk(0) > break0)
+     304:	4501                	li	a0,0
+     306:	0d1000ef          	jal	bd6 <sbrk>
+     30a:	e0aaf0e3          	bgeu	s5,a0,10a <go+0x96>
+        sbrk(-(sbrk(0) - break0));
+     30e:	4501                	li	a0,0
+     310:	0c7000ef          	jal	bd6 <sbrk>
+     314:	40aa853b          	subw	a0,s5,a0
+     318:	0bf000ef          	jal	bd6 <sbrk>
+     31c:	b3fd                	j	10a <go+0x96>
+    } else if(what == 17){
+      int pid = fork();
+     31e:	029000ef          	jal	b46 <fork>
+     322:	8b2a                	mv	s6,a0
+      if(pid == 0){
+     324:	c10d                	beqz	a0,346 <go+0x2d2>
+        close(open("a", O_CREATE|O_RDWR));
+        exit(0);
+      } else if(pid < 0){
+     326:	02054d63          	bltz	a0,360 <go+0x2ec>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      if(chdir("../grindir/..") != 0){
+     32a:	00001517          	auipc	a0,0x1
+     32e:	f3650513          	addi	a0,a0,-202 # 1260 <malloc+0x22e>
+     332:	08d000ef          	jal	bbe <chdir>
+     336:	ed15                	bnez	a0,372 <go+0x2fe>
+        printf("grind: chdir failed\n");
+        exit(1);
+      }
+      kill(pid);
+     338:	855a                	mv	a0,s6
+     33a:	045000ef          	jal	b7e <kill>
+      wait(0);
+     33e:	4501                	li	a0,0
+     340:	017000ef          	jal	b56 <wait>
+     344:	b3d9                	j	10a <go+0x96>
+        close(open("a", O_CREATE|O_RDWR));
+     346:	20200593          	li	a1,514
+     34a:	00001517          	auipc	a0,0x1
+     34e:	f0e50513          	addi	a0,a0,-242 # 1258 <malloc+0x226>
+     352:	03d000ef          	jal	b8e <open>
+     356:	021000ef          	jal	b76 <close>
+        exit(0);
+     35a:	4501                	li	a0,0
+     35c:	7f2000ef          	jal	b4e <exit>
+        printf("grind: fork failed\n");
+     360:	00001517          	auipc	a0,0x1
+     364:	ee050513          	addi	a0,a0,-288 # 1240 <malloc+0x20e>
+     368:	417000ef          	jal	f7e <printf>
+        exit(1);
+     36c:	4505                	li	a0,1
+     36e:	7e0000ef          	jal	b4e <exit>
+        printf("grind: chdir failed\n");
+     372:	00001517          	auipc	a0,0x1
+     376:	efe50513          	addi	a0,a0,-258 # 1270 <malloc+0x23e>
+     37a:	405000ef          	jal	f7e <printf>
+        exit(1);
+     37e:	4505                	li	a0,1
+     380:	7ce000ef          	jal	b4e <exit>
+    } else if(what == 18){
+      int pid = fork();
+     384:	7c2000ef          	jal	b46 <fork>
+      if(pid == 0){
+     388:	c519                	beqz	a0,396 <go+0x322>
+        kill(getpid());
+        exit(0);
+      } else if(pid < 0){
+     38a:	00054d63          	bltz	a0,3a4 <go+0x330>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     38e:	4501                	li	a0,0
+     390:	7c6000ef          	jal	b56 <wait>
+     394:	bb9d                	j	10a <go+0x96>
+        kill(getpid());
+     396:	039000ef          	jal	bce <getpid>
+     39a:	7e4000ef          	jal	b7e <kill>
+        exit(0);
+     39e:	4501                	li	a0,0
+     3a0:	7ae000ef          	jal	b4e <exit>
+        printf("grind: fork failed\n");
+     3a4:	00001517          	auipc	a0,0x1
+     3a8:	e9c50513          	addi	a0,a0,-356 # 1240 <malloc+0x20e>
+     3ac:	3d3000ef          	jal	f7e <printf>
+        exit(1);
+     3b0:	4505                	li	a0,1
+     3b2:	79c000ef          	jal	b4e <exit>
+    } else if(what == 19){
+      int fds[2];
+      if(pipe(fds) < 0){
+     3b6:	f9840513          	addi	a0,s0,-104
+     3ba:	7a4000ef          	jal	b5e <pipe>
+     3be:	02054363          	bltz	a0,3e4 <go+0x370>
+        printf("grind: pipe failed\n");
+        exit(1);
+      }
+      int pid = fork();
+     3c2:	784000ef          	jal	b46 <fork>
+      if(pid == 0){
+     3c6:	c905                	beqz	a0,3f6 <go+0x382>
+          printf("grind: pipe write failed\n");
+        char c;
+        if(read(fds[0], &c, 1) != 1)
+          printf("grind: pipe read failed\n");
+        exit(0);
+      } else if(pid < 0){
+     3c8:	08054263          	bltz	a0,44c <go+0x3d8>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      close(fds[0]);
+     3cc:	f9842503          	lw	a0,-104(s0)
+     3d0:	7a6000ef          	jal	b76 <close>
+      close(fds[1]);
+     3d4:	f9c42503          	lw	a0,-100(s0)
+     3d8:	79e000ef          	jal	b76 <close>
+      wait(0);
+     3dc:	4501                	li	a0,0
+     3de:	778000ef          	jal	b56 <wait>
+     3e2:	b325                	j	10a <go+0x96>
+        printf("grind: pipe failed\n");
+     3e4:	00001517          	auipc	a0,0x1
+     3e8:	ea450513          	addi	a0,a0,-348 # 1288 <malloc+0x256>
+     3ec:	393000ef          	jal	f7e <printf>
+        exit(1);
+     3f0:	4505                	li	a0,1
+     3f2:	75c000ef          	jal	b4e <exit>
+        fork();
+     3f6:	750000ef          	jal	b46 <fork>
+        fork();
+     3fa:	74c000ef          	jal	b46 <fork>
+        if(write(fds[1], "x", 1) != 1)
+     3fe:	4605                	li	a2,1
+     400:	00001597          	auipc	a1,0x1
+     404:	ea058593          	addi	a1,a1,-352 # 12a0 <malloc+0x26e>
+     408:	f9c42503          	lw	a0,-100(s0)
+     40c:	762000ef          	jal	b6e <write>
+     410:	4785                	li	a5,1
+     412:	00f51f63          	bne	a0,a5,430 <go+0x3bc>
+        if(read(fds[0], &c, 1) != 1)
+     416:	4605                	li	a2,1
+     418:	f9040593          	addi	a1,s0,-112
+     41c:	f9842503          	lw	a0,-104(s0)
+     420:	746000ef          	jal	b66 <read>
+     424:	4785                	li	a5,1
+     426:	00f51c63          	bne	a0,a5,43e <go+0x3ca>
+        exit(0);
+     42a:	4501                	li	a0,0
+     42c:	722000ef          	jal	b4e <exit>
+          printf("grind: pipe write failed\n");
+     430:	00001517          	auipc	a0,0x1
+     434:	e7850513          	addi	a0,a0,-392 # 12a8 <malloc+0x276>
+     438:	347000ef          	jal	f7e <printf>
+     43c:	bfe9                	j	416 <go+0x3a2>
+          printf("grind: pipe read failed\n");
+     43e:	00001517          	auipc	a0,0x1
+     442:	e8a50513          	addi	a0,a0,-374 # 12c8 <malloc+0x296>
+     446:	339000ef          	jal	f7e <printf>
+     44a:	b7c5                	j	42a <go+0x3b6>
+        printf("grind: fork failed\n");
+     44c:	00001517          	auipc	a0,0x1
+     450:	df450513          	addi	a0,a0,-524 # 1240 <malloc+0x20e>
+     454:	32b000ef          	jal	f7e <printf>
+        exit(1);
+     458:	4505                	li	a0,1
+     45a:	6f4000ef          	jal	b4e <exit>
+    } else if(what == 20){
+      int pid = fork();
+     45e:	6e8000ef          	jal	b46 <fork>
+      if(pid == 0){
+     462:	c519                	beqz	a0,470 <go+0x3fc>
+        chdir("a");
+        unlink("../a");
+        fd = open("x", O_CREATE|O_RDWR);
+        unlink("x");
+        exit(0);
+      } else if(pid < 0){
+     464:	04054f63          	bltz	a0,4c2 <go+0x44e>
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+     468:	4501                	li	a0,0
+     46a:	6ec000ef          	jal	b56 <wait>
+     46e:	b971                	j	10a <go+0x96>
+        unlink("a");
+     470:	00001517          	auipc	a0,0x1
+     474:	de850513          	addi	a0,a0,-536 # 1258 <malloc+0x226>
+     478:	726000ef          	jal	b9e <unlink>
+        mkdir("a");
+     47c:	00001517          	auipc	a0,0x1
+     480:	ddc50513          	addi	a0,a0,-548 # 1258 <malloc+0x226>
+     484:	732000ef          	jal	bb6 <mkdir>
+        chdir("a");
+     488:	00001517          	auipc	a0,0x1
+     48c:	dd050513          	addi	a0,a0,-560 # 1258 <malloc+0x226>
+     490:	72e000ef          	jal	bbe <chdir>
+        unlink("../a");
+     494:	00001517          	auipc	a0,0x1
+     498:	e5450513          	addi	a0,a0,-428 # 12e8 <malloc+0x2b6>
+     49c:	702000ef          	jal	b9e <unlink>
+        fd = open("x", O_CREATE|O_RDWR);
+     4a0:	20200593          	li	a1,514
+     4a4:	00001517          	auipc	a0,0x1
+     4a8:	dfc50513          	addi	a0,a0,-516 # 12a0 <malloc+0x26e>
+     4ac:	6e2000ef          	jal	b8e <open>
+        unlink("x");
+     4b0:	00001517          	auipc	a0,0x1
+     4b4:	df050513          	addi	a0,a0,-528 # 12a0 <malloc+0x26e>
+     4b8:	6e6000ef          	jal	b9e <unlink>
+        exit(0);
+     4bc:	4501                	li	a0,0
+     4be:	690000ef          	jal	b4e <exit>
+        printf("grind: fork failed\n");
+     4c2:	00001517          	auipc	a0,0x1
+     4c6:	d7e50513          	addi	a0,a0,-642 # 1240 <malloc+0x20e>
+     4ca:	2b5000ef          	jal	f7e <printf>
+        exit(1);
+     4ce:	4505                	li	a0,1
+     4d0:	67e000ef          	jal	b4e <exit>
+    } else if(what == 21){
+      unlink("c");
+     4d4:	00001517          	auipc	a0,0x1
+     4d8:	e1c50513          	addi	a0,a0,-484 # 12f0 <malloc+0x2be>
+     4dc:	6c2000ef          	jal	b9e <unlink>
+      // should always succeed. check that there are free i-nodes,
+      // file descriptors, blocks.
+      int fd1 = open("c", O_CREATE|O_RDWR);
+     4e0:	20200593          	li	a1,514
+     4e4:	00001517          	auipc	a0,0x1
+     4e8:	e0c50513          	addi	a0,a0,-500 # 12f0 <malloc+0x2be>
+     4ec:	6a2000ef          	jal	b8e <open>
+     4f0:	8b2a                	mv	s6,a0
+      if(fd1 < 0){
+     4f2:	04054763          	bltz	a0,540 <go+0x4cc>
+        printf("grind: create c failed\n");
+        exit(1);
+      }
+      if(write(fd1, "x", 1) != 1){
+     4f6:	4605                	li	a2,1
+     4f8:	00001597          	auipc	a1,0x1
+     4fc:	da858593          	addi	a1,a1,-600 # 12a0 <malloc+0x26e>
+     500:	66e000ef          	jal	b6e <write>
+     504:	4785                	li	a5,1
+     506:	04f51663          	bne	a0,a5,552 <go+0x4de>
+        printf("grind: write c failed\n");
+        exit(1);
+      }
+      struct stat st;
+      if(fstat(fd1, &st) != 0){
+     50a:	f9840593          	addi	a1,s0,-104
+     50e:	855a                	mv	a0,s6
+     510:	696000ef          	jal	ba6 <fstat>
+     514:	e921                	bnez	a0,564 <go+0x4f0>
+        printf("grind: fstat failed\n");
+        exit(1);
+      }
+      if(st.size != 1){
+     516:	fa843583          	ld	a1,-88(s0)
+     51a:	4785                	li	a5,1
+     51c:	04f59d63          	bne	a1,a5,576 <go+0x502>
+        printf("grind: fstat reports wrong size %d\n", (int)st.size);
+        exit(1);
+      }
+      if(st.ino > 200){
+     520:	f9c42583          	lw	a1,-100(s0)
+     524:	0c800793          	li	a5,200
+     528:	06b7e163          	bltu	a5,a1,58a <go+0x516>
+        printf("grind: fstat reports crazy i-number %d\n", st.ino);
+        exit(1);
+      }
+      close(fd1);
+     52c:	855a                	mv	a0,s6
+     52e:	648000ef          	jal	b76 <close>
+      unlink("c");
+     532:	00001517          	auipc	a0,0x1
+     536:	dbe50513          	addi	a0,a0,-578 # 12f0 <malloc+0x2be>
+     53a:	664000ef          	jal	b9e <unlink>
+     53e:	b6f1                	j	10a <go+0x96>
+        printf("grind: create c failed\n");
+     540:	00001517          	auipc	a0,0x1
+     544:	db850513          	addi	a0,a0,-584 # 12f8 <malloc+0x2c6>
+     548:	237000ef          	jal	f7e <printf>
+        exit(1);
+     54c:	4505                	li	a0,1
+     54e:	600000ef          	jal	b4e <exit>
+        printf("grind: write c failed\n");
+     552:	00001517          	auipc	a0,0x1
+     556:	dbe50513          	addi	a0,a0,-578 # 1310 <malloc+0x2de>
+     55a:	225000ef          	jal	f7e <printf>
+        exit(1);
+     55e:	4505                	li	a0,1
+     560:	5ee000ef          	jal	b4e <exit>
+        printf("grind: fstat failed\n");
+     564:	00001517          	auipc	a0,0x1
+     568:	dc450513          	addi	a0,a0,-572 # 1328 <malloc+0x2f6>
+     56c:	213000ef          	jal	f7e <printf>
+        exit(1);
+     570:	4505                	li	a0,1
+     572:	5dc000ef          	jal	b4e <exit>
+        printf("grind: fstat reports wrong size %d\n", (int)st.size);
+     576:	2581                	sext.w	a1,a1
+     578:	00001517          	auipc	a0,0x1
+     57c:	dc850513          	addi	a0,a0,-568 # 1340 <malloc+0x30e>
+     580:	1ff000ef          	jal	f7e <printf>
+        exit(1);
+     584:	4505                	li	a0,1
+     586:	5c8000ef          	jal	b4e <exit>
+        printf("grind: fstat reports crazy i-number %d\n", st.ino);
+     58a:	00001517          	auipc	a0,0x1
+     58e:	dde50513          	addi	a0,a0,-546 # 1368 <malloc+0x336>
+     592:	1ed000ef          	jal	f7e <printf>
+        exit(1);
+     596:	4505                	li	a0,1
+     598:	5b6000ef          	jal	b4e <exit>
+    } else if(what == 22){
+      // echo hi | cat
+      int aa[2], bb[2];
+      if(pipe(aa) < 0){
+     59c:	f8840513          	addi	a0,s0,-120
+     5a0:	5be000ef          	jal	b5e <pipe>
+     5a4:	0a054563          	bltz	a0,64e <go+0x5da>
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      if(pipe(bb) < 0){
+     5a8:	f9040513          	addi	a0,s0,-112
+     5ac:	5b2000ef          	jal	b5e <pipe>
+     5b0:	0a054963          	bltz	a0,662 <go+0x5ee>
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      int pid1 = fork();
+     5b4:	592000ef          	jal	b46 <fork>
+      if(pid1 == 0){
+     5b8:	cd5d                	beqz	a0,676 <go+0x602>
+        close(aa[1]);
+        char *args[3] = { "echo", "hi", 0 };
+        exec("grindir/../echo", args);
+        fprintf(2, "grind: echo: not found\n");
+        exit(2);
+      } else if(pid1 < 0){
+     5ba:	14054263          	bltz	a0,6fe <go+0x68a>
+        fprintf(2, "grind: fork failed\n");
+        exit(3);
+      }
+      int pid2 = fork();
+     5be:	588000ef          	jal	b46 <fork>
+      if(pid2 == 0){
+     5c2:	14050863          	beqz	a0,712 <go+0x69e>
+        close(bb[1]);
+        char *args[2] = { "cat", 0 };
+        exec("/cat", args);
+        fprintf(2, "grind: cat: not found\n");
+        exit(6);
+      } else if(pid2 < 0){
+     5c6:	1e054663          	bltz	a0,7b2 <go+0x73e>
+        fprintf(2, "grind: fork failed\n");
+        exit(7);
+      }
+      close(aa[0]);
+     5ca:	f8842503          	lw	a0,-120(s0)
+     5ce:	5a8000ef          	jal	b76 <close>
+      close(aa[1]);
+     5d2:	f8c42503          	lw	a0,-116(s0)
+     5d6:	5a0000ef          	jal	b76 <close>
+      close(bb[1]);
+     5da:	f9442503          	lw	a0,-108(s0)
+     5de:	598000ef          	jal	b76 <close>
+      char buf[4] = { 0, 0, 0, 0 };
+     5e2:	f8042023          	sw	zero,-128(s0)
+      read(bb[0], buf+0, 1);
+     5e6:	4605                	li	a2,1
+     5e8:	f8040593          	addi	a1,s0,-128
+     5ec:	f9042503          	lw	a0,-112(s0)
+     5f0:	576000ef          	jal	b66 <read>
+      read(bb[0], buf+1, 1);
+     5f4:	4605                	li	a2,1
+     5f6:	f8140593          	addi	a1,s0,-127
+     5fa:	f9042503          	lw	a0,-112(s0)
+     5fe:	568000ef          	jal	b66 <read>
+      read(bb[0], buf+2, 1);
+     602:	4605                	li	a2,1
+     604:	f8240593          	addi	a1,s0,-126
+     608:	f9042503          	lw	a0,-112(s0)
+     60c:	55a000ef          	jal	b66 <read>
+      close(bb[0]);
+     610:	f9042503          	lw	a0,-112(s0)
+     614:	562000ef          	jal	b76 <close>
+      int st1, st2;
+      wait(&st1);
+     618:	f8440513          	addi	a0,s0,-124
+     61c:	53a000ef          	jal	b56 <wait>
+      wait(&st2);
+     620:	f9840513          	addi	a0,s0,-104
+     624:	532000ef          	jal	b56 <wait>
+      if(st1 != 0 || st2 != 0 || strcmp(buf, "hi\n") != 0){
+     628:	f8442783          	lw	a5,-124(s0)
+     62c:	f9842b83          	lw	s7,-104(s0)
+     630:	0177eb33          	or	s6,a5,s7
+     634:	180b1963          	bnez	s6,7c6 <go+0x752>
+     638:	00001597          	auipc	a1,0x1
+     63c:	dd058593          	addi	a1,a1,-560 # 1408 <malloc+0x3d6>
+     640:	f8040513          	addi	a0,s0,-128
+     644:	2ce000ef          	jal	912 <strcmp>
+     648:	ac0501e3          	beqz	a0,10a <go+0x96>
+     64c:	aab5                	j	7c8 <go+0x754>
+        fprintf(2, "grind: pipe failed\n");
+     64e:	00001597          	auipc	a1,0x1
+     652:	c3a58593          	addi	a1,a1,-966 # 1288 <malloc+0x256>
+     656:	4509                	li	a0,2
+     658:	0fd000ef          	jal	f54 <fprintf>
+        exit(1);
+     65c:	4505                	li	a0,1
+     65e:	4f0000ef          	jal	b4e <exit>
+        fprintf(2, "grind: pipe failed\n");
+     662:	00001597          	auipc	a1,0x1
+     666:	c2658593          	addi	a1,a1,-986 # 1288 <malloc+0x256>
+     66a:	4509                	li	a0,2
+     66c:	0e9000ef          	jal	f54 <fprintf>
+        exit(1);
+     670:	4505                	li	a0,1
+     672:	4dc000ef          	jal	b4e <exit>
+        close(bb[0]);
+     676:	f9042503          	lw	a0,-112(s0)
+     67a:	4fc000ef          	jal	b76 <close>
+        close(bb[1]);
+     67e:	f9442503          	lw	a0,-108(s0)
+     682:	4f4000ef          	jal	b76 <close>
+        close(aa[0]);
+     686:	f8842503          	lw	a0,-120(s0)
+     68a:	4ec000ef          	jal	b76 <close>
+        close(1);
+     68e:	4505                	li	a0,1
+     690:	4e6000ef          	jal	b76 <close>
+        if(dup(aa[1]) != 1){
+     694:	f8c42503          	lw	a0,-116(s0)
+     698:	52e000ef          	jal	bc6 <dup>
+     69c:	4785                	li	a5,1
+     69e:	00f50c63          	beq	a0,a5,6b6 <go+0x642>
+          fprintf(2, "grind: dup failed\n");
+     6a2:	00001597          	auipc	a1,0x1
+     6a6:	cee58593          	addi	a1,a1,-786 # 1390 <malloc+0x35e>
+     6aa:	4509                	li	a0,2
+     6ac:	0a9000ef          	jal	f54 <fprintf>
+          exit(1);
+     6b0:	4505                	li	a0,1
+     6b2:	49c000ef          	jal	b4e <exit>
+        close(aa[1]);
+     6b6:	f8c42503          	lw	a0,-116(s0)
+     6ba:	4bc000ef          	jal	b76 <close>
+        char *args[3] = { "echo", "hi", 0 };
+     6be:	00001797          	auipc	a5,0x1
+     6c2:	cea78793          	addi	a5,a5,-790 # 13a8 <malloc+0x376>
+     6c6:	f8f43c23          	sd	a5,-104(s0)
+     6ca:	00001797          	auipc	a5,0x1
+     6ce:	ce678793          	addi	a5,a5,-794 # 13b0 <malloc+0x37e>
+     6d2:	faf43023          	sd	a5,-96(s0)
+     6d6:	fa043423          	sd	zero,-88(s0)
+        exec("grindir/../echo", args);
+     6da:	f9840593          	addi	a1,s0,-104
+     6de:	00001517          	auipc	a0,0x1
+     6e2:	cda50513          	addi	a0,a0,-806 # 13b8 <malloc+0x386>
+     6e6:	4a0000ef          	jal	b86 <exec>
+        fprintf(2, "grind: echo: not found\n");
+     6ea:	00001597          	auipc	a1,0x1
+     6ee:	cde58593          	addi	a1,a1,-802 # 13c8 <malloc+0x396>
+     6f2:	4509                	li	a0,2
+     6f4:	061000ef          	jal	f54 <fprintf>
+        exit(2);
+     6f8:	4509                	li	a0,2
+     6fa:	454000ef          	jal	b4e <exit>
+        fprintf(2, "grind: fork failed\n");
+     6fe:	00001597          	auipc	a1,0x1
+     702:	b4258593          	addi	a1,a1,-1214 # 1240 <malloc+0x20e>
+     706:	4509                	li	a0,2
+     708:	04d000ef          	jal	f54 <fprintf>
+        exit(3);
+     70c:	450d                	li	a0,3
+     70e:	440000ef          	jal	b4e <exit>
+        close(aa[1]);
+     712:	f8c42503          	lw	a0,-116(s0)
+     716:	460000ef          	jal	b76 <close>
+        close(bb[0]);
+     71a:	f9042503          	lw	a0,-112(s0)
+     71e:	458000ef          	jal	b76 <close>
+        close(0);
+     722:	4501                	li	a0,0
+     724:	452000ef          	jal	b76 <close>
+        if(dup(aa[0]) != 0){
+     728:	f8842503          	lw	a0,-120(s0)
+     72c:	49a000ef          	jal	bc6 <dup>
+     730:	c919                	beqz	a0,746 <go+0x6d2>
+          fprintf(2, "grind: dup failed\n");
+     732:	00001597          	auipc	a1,0x1
+     736:	c5e58593          	addi	a1,a1,-930 # 1390 <malloc+0x35e>
+     73a:	4509                	li	a0,2
+     73c:	019000ef          	jal	f54 <fprintf>
+          exit(4);
+     740:	4511                	li	a0,4
+     742:	40c000ef          	jal	b4e <exit>
+        close(aa[0]);
+     746:	f8842503          	lw	a0,-120(s0)
+     74a:	42c000ef          	jal	b76 <close>
+        close(1);
+     74e:	4505                	li	a0,1
+     750:	426000ef          	jal	b76 <close>
+        if(dup(bb[1]) != 1){
+     754:	f9442503          	lw	a0,-108(s0)
+     758:	46e000ef          	jal	bc6 <dup>
+     75c:	4785                	li	a5,1
+     75e:	00f50c63          	beq	a0,a5,776 <go+0x702>
+          fprintf(2, "grind: dup failed\n");
+     762:	00001597          	auipc	a1,0x1
+     766:	c2e58593          	addi	a1,a1,-978 # 1390 <malloc+0x35e>
+     76a:	4509                	li	a0,2
+     76c:	7e8000ef          	jal	f54 <fprintf>
+          exit(5);
+     770:	4515                	li	a0,5
+     772:	3dc000ef          	jal	b4e <exit>
+        close(bb[1]);
+     776:	f9442503          	lw	a0,-108(s0)
+     77a:	3fc000ef          	jal	b76 <close>
+        char *args[2] = { "cat", 0 };
+     77e:	00001797          	auipc	a5,0x1
+     782:	c6278793          	addi	a5,a5,-926 # 13e0 <malloc+0x3ae>
+     786:	f8f43c23          	sd	a5,-104(s0)
+     78a:	fa043023          	sd	zero,-96(s0)
+        exec("/cat", args);
+     78e:	f9840593          	addi	a1,s0,-104
+     792:	00001517          	auipc	a0,0x1
+     796:	c5650513          	addi	a0,a0,-938 # 13e8 <malloc+0x3b6>
+     79a:	3ec000ef          	jal	b86 <exec>
+        fprintf(2, "grind: cat: not found\n");
+     79e:	00001597          	auipc	a1,0x1
+     7a2:	c5258593          	addi	a1,a1,-942 # 13f0 <malloc+0x3be>
+     7a6:	4509                	li	a0,2
+     7a8:	7ac000ef          	jal	f54 <fprintf>
+        exit(6);
+     7ac:	4519                	li	a0,6
+     7ae:	3a0000ef          	jal	b4e <exit>
+        fprintf(2, "grind: fork failed\n");
+     7b2:	00001597          	auipc	a1,0x1
+     7b6:	a8e58593          	addi	a1,a1,-1394 # 1240 <malloc+0x20e>
+     7ba:	4509                	li	a0,2
+     7bc:	798000ef          	jal	f54 <fprintf>
+        exit(7);
+     7c0:	451d                	li	a0,7
+     7c2:	38c000ef          	jal	b4e <exit>
+     7c6:	8b3e                	mv	s6,a5
+        printf("grind: exec pipeline failed %d %d \"%s\"\n", st1, st2, buf);
+     7c8:	f8040693          	addi	a3,s0,-128
+     7cc:	865e                	mv	a2,s7
+     7ce:	85da                	mv	a1,s6
+     7d0:	00001517          	auipc	a0,0x1
+     7d4:	c4050513          	addi	a0,a0,-960 # 1410 <malloc+0x3de>
+     7d8:	7a6000ef          	jal	f7e <printf>
+        exit(1);
+     7dc:	4505                	li	a0,1
+     7de:	370000ef          	jal	b4e <exit>
+
+00000000000007e2 <iter>:
+  }
+}
+
+void
+iter()
+{
+     7e2:	7179                	addi	sp,sp,-48
+     7e4:	f406                	sd	ra,40(sp)
+     7e6:	f022                	sd	s0,32(sp)
+     7e8:	1800                	addi	s0,sp,48
+  unlink("a");
+     7ea:	00001517          	auipc	a0,0x1
+     7ee:	a6e50513          	addi	a0,a0,-1426 # 1258 <malloc+0x226>
+     7f2:	3ac000ef          	jal	b9e <unlink>
+  unlink("b");
+     7f6:	00001517          	auipc	a0,0x1
+     7fa:	a1250513          	addi	a0,a0,-1518 # 1208 <malloc+0x1d6>
+     7fe:	3a0000ef          	jal	b9e <unlink>
+  
+  int pid1 = fork();
+     802:	344000ef          	jal	b46 <fork>
+  if(pid1 < 0){
+     806:	02054163          	bltz	a0,828 <iter+0x46>
+     80a:	ec26                	sd	s1,24(sp)
+     80c:	84aa                	mv	s1,a0
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid1 == 0){
+     80e:	e905                	bnez	a0,83e <iter+0x5c>
+     810:	e84a                	sd	s2,16(sp)
+    rand_next ^= 31;
+     812:	00001717          	auipc	a4,0x1
+     816:	7ee70713          	addi	a4,a4,2030 # 2000 <rand_next>
+     81a:	631c                	ld	a5,0(a4)
+     81c:	01f7c793          	xori	a5,a5,31
+     820:	e31c                	sd	a5,0(a4)
+    go(0);
+     822:	4501                	li	a0,0
+     824:	851ff0ef          	jal	74 <go>
+     828:	ec26                	sd	s1,24(sp)
+     82a:	e84a                	sd	s2,16(sp)
+    printf("grind: fork failed\n");
+     82c:	00001517          	auipc	a0,0x1
+     830:	a1450513          	addi	a0,a0,-1516 # 1240 <malloc+0x20e>
+     834:	74a000ef          	jal	f7e <printf>
+    exit(1);
+     838:	4505                	li	a0,1
+     83a:	314000ef          	jal	b4e <exit>
+     83e:	e84a                	sd	s2,16(sp)
+    exit(0);
+  }
+
+  int pid2 = fork();
+     840:	306000ef          	jal	b46 <fork>
+     844:	892a                	mv	s2,a0
+  if(pid2 < 0){
+     846:	02054063          	bltz	a0,866 <iter+0x84>
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid2 == 0){
+     84a:	e51d                	bnez	a0,878 <iter+0x96>
+    rand_next ^= 7177;
+     84c:	00001697          	auipc	a3,0x1
+     850:	7b468693          	addi	a3,a3,1972 # 2000 <rand_next>
+     854:	629c                	ld	a5,0(a3)
+     856:	6709                	lui	a4,0x2
+     858:	c0970713          	addi	a4,a4,-1015 # 1c09 <digits+0x769>
+     85c:	8fb9                	xor	a5,a5,a4
+     85e:	e29c                	sd	a5,0(a3)
+    go(1);
+     860:	4505                	li	a0,1
+     862:	813ff0ef          	jal	74 <go>
+    printf("grind: fork failed\n");
+     866:	00001517          	auipc	a0,0x1
+     86a:	9da50513          	addi	a0,a0,-1574 # 1240 <malloc+0x20e>
+     86e:	710000ef          	jal	f7e <printf>
+    exit(1);
+     872:	4505                	li	a0,1
+     874:	2da000ef          	jal	b4e <exit>
+    exit(0);
+  }
+
+  int st1 = -1;
+     878:	57fd                	li	a5,-1
+     87a:	fcf42e23          	sw	a5,-36(s0)
+  wait(&st1);
+     87e:	fdc40513          	addi	a0,s0,-36
+     882:	2d4000ef          	jal	b56 <wait>
+  if(st1 != 0){
+     886:	fdc42783          	lw	a5,-36(s0)
+     88a:	eb99                	bnez	a5,8a0 <iter+0xbe>
+    kill(pid1);
+    kill(pid2);
+  }
+  int st2 = -1;
+     88c:	57fd                	li	a5,-1
+     88e:	fcf42c23          	sw	a5,-40(s0)
+  wait(&st2);
+     892:	fd840513          	addi	a0,s0,-40
+     896:	2c0000ef          	jal	b56 <wait>
+
+  exit(0);
+     89a:	4501                	li	a0,0
+     89c:	2b2000ef          	jal	b4e <exit>
+    kill(pid1);
+     8a0:	8526                	mv	a0,s1
+     8a2:	2dc000ef          	jal	b7e <kill>
+    kill(pid2);
+     8a6:	854a                	mv	a0,s2
+     8a8:	2d6000ef          	jal	b7e <kill>
+     8ac:	b7c5                	j	88c <iter+0xaa>
+
+00000000000008ae <main>:
+}
+
+int
+main()
+{
+     8ae:	1101                	addi	sp,sp,-32
+     8b0:	ec06                	sd	ra,24(sp)
+     8b2:	e822                	sd	s0,16(sp)
+     8b4:	e426                	sd	s1,8(sp)
+     8b6:	1000                	addi	s0,sp,32
+    }
+    if(pid > 0){
+      wait(0);
+    }
+    sleep(20);
+    rand_next += 1;
+     8b8:	00001497          	auipc	s1,0x1
+     8bc:	74848493          	addi	s1,s1,1864 # 2000 <rand_next>
+     8c0:	a809                	j	8d2 <main+0x24>
+      iter();
+     8c2:	f21ff0ef          	jal	7e2 <iter>
+    sleep(20);
+     8c6:	4551                	li	a0,20
+     8c8:	316000ef          	jal	bde <sleep>
+    rand_next += 1;
+     8cc:	609c                	ld	a5,0(s1)
+     8ce:	0785                	addi	a5,a5,1
+     8d0:	e09c                	sd	a5,0(s1)
+    int pid = fork();
+     8d2:	274000ef          	jal	b46 <fork>
+    if(pid == 0){
+     8d6:	d575                	beqz	a0,8c2 <main+0x14>
+    if(pid > 0){
+     8d8:	fea057e3          	blez	a0,8c6 <main+0x18>
+      wait(0);
+     8dc:	4501                	li	a0,0
+     8de:	278000ef          	jal	b56 <wait>
+     8e2:	b7d5                	j	8c6 <main+0x18>
+
+00000000000008e4 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+     8e4:	1141                	addi	sp,sp,-16
+     8e6:	e406                	sd	ra,8(sp)
+     8e8:	e022                	sd	s0,0(sp)
+     8ea:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+     8ec:	fc3ff0ef          	jal	8ae <main>
+  exit(0);
+     8f0:	4501                	li	a0,0
+     8f2:	25c000ef          	jal	b4e <exit>
+
+00000000000008f6 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+     8f6:	1141                	addi	sp,sp,-16
+     8f8:	e422                	sd	s0,8(sp)
+     8fa:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     8fc:	87aa                	mv	a5,a0
+     8fe:	0585                	addi	a1,a1,1
+     900:	0785                	addi	a5,a5,1
+     902:	fff5c703          	lbu	a4,-1(a1)
+     906:	fee78fa3          	sb	a4,-1(a5)
+     90a:	fb75                	bnez	a4,8fe <strcpy+0x8>
+    ;
+  return os;
+}
+     90c:	6422                	ld	s0,8(sp)
+     90e:	0141                	addi	sp,sp,16
+     910:	8082                	ret
+
+0000000000000912 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     912:	1141                	addi	sp,sp,-16
+     914:	e422                	sd	s0,8(sp)
+     916:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+     918:	00054783          	lbu	a5,0(a0)
+     91c:	cb91                	beqz	a5,930 <strcmp+0x1e>
+     91e:	0005c703          	lbu	a4,0(a1)
+     922:	00f71763          	bne	a4,a5,930 <strcmp+0x1e>
+    p++, q++;
+     926:	0505                	addi	a0,a0,1
+     928:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+     92a:	00054783          	lbu	a5,0(a0)
+     92e:	fbe5                	bnez	a5,91e <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+     930:	0005c503          	lbu	a0,0(a1)
+}
+     934:	40a7853b          	subw	a0,a5,a0
+     938:	6422                	ld	s0,8(sp)
+     93a:	0141                	addi	sp,sp,16
+     93c:	8082                	ret
+
+000000000000093e <strlen>:
+
+uint
+strlen(const char *s)
+{
+     93e:	1141                	addi	sp,sp,-16
+     940:	e422                	sd	s0,8(sp)
+     942:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+     944:	00054783          	lbu	a5,0(a0)
+     948:	cf91                	beqz	a5,964 <strlen+0x26>
+     94a:	0505                	addi	a0,a0,1
+     94c:	87aa                	mv	a5,a0
+     94e:	86be                	mv	a3,a5
+     950:	0785                	addi	a5,a5,1
+     952:	fff7c703          	lbu	a4,-1(a5)
+     956:	ff65                	bnez	a4,94e <strlen+0x10>
+     958:	40a6853b          	subw	a0,a3,a0
+     95c:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+     95e:	6422                	ld	s0,8(sp)
+     960:	0141                	addi	sp,sp,16
+     962:	8082                	ret
+  for(n = 0; s[n]; n++)
+     964:	4501                	li	a0,0
+     966:	bfe5                	j	95e <strlen+0x20>
+
+0000000000000968 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     968:	1141                	addi	sp,sp,-16
+     96a:	e422                	sd	s0,8(sp)
+     96c:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+     96e:	ca19                	beqz	a2,984 <memset+0x1c>
+     970:	87aa                	mv	a5,a0
+     972:	1602                	slli	a2,a2,0x20
+     974:	9201                	srli	a2,a2,0x20
+     976:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+     97a:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+     97e:	0785                	addi	a5,a5,1
+     980:	fee79de3          	bne	a5,a4,97a <memset+0x12>
+  }
+  return dst;
+}
+     984:	6422                	ld	s0,8(sp)
+     986:	0141                	addi	sp,sp,16
+     988:	8082                	ret
+
+000000000000098a <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     98a:	1141                	addi	sp,sp,-16
+     98c:	e422                	sd	s0,8(sp)
+     98e:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+     990:	00054783          	lbu	a5,0(a0)
+     994:	cb99                	beqz	a5,9aa <strchr+0x20>
+    if(*s == c)
+     996:	00f58763          	beq	a1,a5,9a4 <strchr+0x1a>
+  for(; *s; s++)
+     99a:	0505                	addi	a0,a0,1
+     99c:	00054783          	lbu	a5,0(a0)
+     9a0:	fbfd                	bnez	a5,996 <strchr+0xc>
+      return (char*)s;
+  return 0;
+     9a2:	4501                	li	a0,0
+}
+     9a4:	6422                	ld	s0,8(sp)
+     9a6:	0141                	addi	sp,sp,16
+     9a8:	8082                	ret
+  return 0;
+     9aa:	4501                	li	a0,0
+     9ac:	bfe5                	j	9a4 <strchr+0x1a>
+
+00000000000009ae <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     9ae:	711d                	addi	sp,sp,-96
+     9b0:	ec86                	sd	ra,88(sp)
+     9b2:	e8a2                	sd	s0,80(sp)
+     9b4:	e4a6                	sd	s1,72(sp)
+     9b6:	e0ca                	sd	s2,64(sp)
+     9b8:	fc4e                	sd	s3,56(sp)
+     9ba:	f852                	sd	s4,48(sp)
+     9bc:	f456                	sd	s5,40(sp)
+     9be:	f05a                	sd	s6,32(sp)
+     9c0:	ec5e                	sd	s7,24(sp)
+     9c2:	1080                	addi	s0,sp,96
+     9c4:	8baa                	mv	s7,a0
+     9c6:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     9c8:	892a                	mv	s2,a0
+     9ca:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+     9cc:	4aa9                	li	s5,10
+     9ce:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+     9d0:	89a6                	mv	s3,s1
+     9d2:	2485                	addiw	s1,s1,1
+     9d4:	0344d663          	bge	s1,s4,a00 <gets+0x52>
+    cc = read(0, &c, 1);
+     9d8:	4605                	li	a2,1
+     9da:	faf40593          	addi	a1,s0,-81
+     9de:	4501                	li	a0,0
+     9e0:	186000ef          	jal	b66 <read>
+    if(cc < 1)
+     9e4:	00a05e63          	blez	a0,a00 <gets+0x52>
+    buf[i++] = c;
+     9e8:	faf44783          	lbu	a5,-81(s0)
+     9ec:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+     9f0:	01578763          	beq	a5,s5,9fe <gets+0x50>
+     9f4:	0905                	addi	s2,s2,1
+     9f6:	fd679de3          	bne	a5,s6,9d0 <gets+0x22>
+    buf[i++] = c;
+     9fa:	89a6                	mv	s3,s1
+     9fc:	a011                	j	a00 <gets+0x52>
+     9fe:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+     a00:	99de                	add	s3,s3,s7
+     a02:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+     a06:	855e                	mv	a0,s7
+     a08:	60e6                	ld	ra,88(sp)
+     a0a:	6446                	ld	s0,80(sp)
+     a0c:	64a6                	ld	s1,72(sp)
+     a0e:	6906                	ld	s2,64(sp)
+     a10:	79e2                	ld	s3,56(sp)
+     a12:	7a42                	ld	s4,48(sp)
+     a14:	7aa2                	ld	s5,40(sp)
+     a16:	7b02                	ld	s6,32(sp)
+     a18:	6be2                	ld	s7,24(sp)
+     a1a:	6125                	addi	sp,sp,96
+     a1c:	8082                	ret
+
+0000000000000a1e <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     a1e:	1101                	addi	sp,sp,-32
+     a20:	ec06                	sd	ra,24(sp)
+     a22:	e822                	sd	s0,16(sp)
+     a24:	e04a                	sd	s2,0(sp)
+     a26:	1000                	addi	s0,sp,32
+     a28:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     a2a:	4581                	li	a1,0
+     a2c:	162000ef          	jal	b8e <open>
+  if(fd < 0)
+     a30:	02054263          	bltz	a0,a54 <stat+0x36>
+     a34:	e426                	sd	s1,8(sp)
+     a36:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+     a38:	85ca                	mv	a1,s2
+     a3a:	16c000ef          	jal	ba6 <fstat>
+     a3e:	892a                	mv	s2,a0
+  close(fd);
+     a40:	8526                	mv	a0,s1
+     a42:	134000ef          	jal	b76 <close>
+  return r;
+     a46:	64a2                	ld	s1,8(sp)
+}
+     a48:	854a                	mv	a0,s2
+     a4a:	60e2                	ld	ra,24(sp)
+     a4c:	6442                	ld	s0,16(sp)
+     a4e:	6902                	ld	s2,0(sp)
+     a50:	6105                	addi	sp,sp,32
+     a52:	8082                	ret
+    return -1;
+     a54:	597d                	li	s2,-1
+     a56:	bfcd                	j	a48 <stat+0x2a>
+
+0000000000000a58 <atoi>:
+
+int
+atoi(const char *s)
+{
+     a58:	1141                	addi	sp,sp,-16
+     a5a:	e422                	sd	s0,8(sp)
+     a5c:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     a5e:	00054683          	lbu	a3,0(a0)
+     a62:	fd06879b          	addiw	a5,a3,-48
+     a66:	0ff7f793          	zext.b	a5,a5
+     a6a:	4625                	li	a2,9
+     a6c:	02f66863          	bltu	a2,a5,a9c <atoi+0x44>
+     a70:	872a                	mv	a4,a0
+  n = 0;
+     a72:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+     a74:	0705                	addi	a4,a4,1
+     a76:	0025179b          	slliw	a5,a0,0x2
+     a7a:	9fa9                	addw	a5,a5,a0
+     a7c:	0017979b          	slliw	a5,a5,0x1
+     a80:	9fb5                	addw	a5,a5,a3
+     a82:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+     a86:	00074683          	lbu	a3,0(a4)
+     a8a:	fd06879b          	addiw	a5,a3,-48
+     a8e:	0ff7f793          	zext.b	a5,a5
+     a92:	fef671e3          	bgeu	a2,a5,a74 <atoi+0x1c>
+  return n;
+}
+     a96:	6422                	ld	s0,8(sp)
+     a98:	0141                	addi	sp,sp,16
+     a9a:	8082                	ret
+  n = 0;
+     a9c:	4501                	li	a0,0
+     a9e:	bfe5                	j	a96 <atoi+0x3e>
+
+0000000000000aa0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     aa0:	1141                	addi	sp,sp,-16
+     aa2:	e422                	sd	s0,8(sp)
+     aa4:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+     aa6:	02b57463          	bgeu	a0,a1,ace <memmove+0x2e>
+    while(n-- > 0)
+     aaa:	00c05f63          	blez	a2,ac8 <memmove+0x28>
+     aae:	1602                	slli	a2,a2,0x20
+     ab0:	9201                	srli	a2,a2,0x20
+     ab2:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+     ab6:	872a                	mv	a4,a0
+      *dst++ = *src++;
+     ab8:	0585                	addi	a1,a1,1
+     aba:	0705                	addi	a4,a4,1
+     abc:	fff5c683          	lbu	a3,-1(a1)
+     ac0:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+     ac4:	fef71ae3          	bne	a4,a5,ab8 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+     ac8:	6422                	ld	s0,8(sp)
+     aca:	0141                	addi	sp,sp,16
+     acc:	8082                	ret
+    dst += n;
+     ace:	00c50733          	add	a4,a0,a2
+    src += n;
+     ad2:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+     ad4:	fec05ae3          	blez	a2,ac8 <memmove+0x28>
+     ad8:	fff6079b          	addiw	a5,a2,-1
+     adc:	1782                	slli	a5,a5,0x20
+     ade:	9381                	srli	a5,a5,0x20
+     ae0:	fff7c793          	not	a5,a5
+     ae4:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+     ae6:	15fd                	addi	a1,a1,-1
+     ae8:	177d                	addi	a4,a4,-1
+     aea:	0005c683          	lbu	a3,0(a1)
+     aee:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+     af2:	fee79ae3          	bne	a5,a4,ae6 <memmove+0x46>
+     af6:	bfc9                	j	ac8 <memmove+0x28>
+
+0000000000000af8 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+     af8:	1141                	addi	sp,sp,-16
+     afa:	e422                	sd	s0,8(sp)
+     afc:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+     afe:	ca05                	beqz	a2,b2e <memcmp+0x36>
+     b00:	fff6069b          	addiw	a3,a2,-1
+     b04:	1682                	slli	a3,a3,0x20
+     b06:	9281                	srli	a3,a3,0x20
+     b08:	0685                	addi	a3,a3,1
+     b0a:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+     b0c:	00054783          	lbu	a5,0(a0)
+     b10:	0005c703          	lbu	a4,0(a1)
+     b14:	00e79863          	bne	a5,a4,b24 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+     b18:	0505                	addi	a0,a0,1
+    p2++;
+     b1a:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+     b1c:	fed518e3          	bne	a0,a3,b0c <memcmp+0x14>
+  }
+  return 0;
+     b20:	4501                	li	a0,0
+     b22:	a019                	j	b28 <memcmp+0x30>
+      return *p1 - *p2;
+     b24:	40e7853b          	subw	a0,a5,a4
+}
+     b28:	6422                	ld	s0,8(sp)
+     b2a:	0141                	addi	sp,sp,16
+     b2c:	8082                	ret
+  return 0;
+     b2e:	4501                	li	a0,0
+     b30:	bfe5                	j	b28 <memcmp+0x30>
+
+0000000000000b32 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+     b32:	1141                	addi	sp,sp,-16
+     b34:	e406                	sd	ra,8(sp)
+     b36:	e022                	sd	s0,0(sp)
+     b38:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+     b3a:	f67ff0ef          	jal	aa0 <memmove>
+}
+     b3e:	60a2                	ld	ra,8(sp)
+     b40:	6402                	ld	s0,0(sp)
+     b42:	0141                	addi	sp,sp,16
+     b44:	8082                	ret
+
+0000000000000b46 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+     b46:	4885                	li	a7,1
+ ecall
+     b48:	00000073          	ecall
+ ret
+     b4c:	8082                	ret
+
+0000000000000b4e <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+     b4e:	4889                	li	a7,2
+ ecall
+     b50:	00000073          	ecall
+ ret
+     b54:	8082                	ret
+
+0000000000000b56 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+     b56:	488d                	li	a7,3
+ ecall
+     b58:	00000073          	ecall
+ ret
+     b5c:	8082                	ret
+
+0000000000000b5e <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+     b5e:	4891                	li	a7,4
+ ecall
+     b60:	00000073          	ecall
+ ret
+     b64:	8082                	ret
+
+0000000000000b66 <read>:
+.global read
+read:
+ li a7, SYS_read
+     b66:	4895                	li	a7,5
+ ecall
+     b68:	00000073          	ecall
+ ret
+     b6c:	8082                	ret
+
+0000000000000b6e <write>:
+.global write
+write:
+ li a7, SYS_write
+     b6e:	48c1                	li	a7,16
+ ecall
+     b70:	00000073          	ecall
+ ret
+     b74:	8082                	ret
+
+0000000000000b76 <close>:
+.global close
+close:
+ li a7, SYS_close
+     b76:	48d5                	li	a7,21
+ ecall
+     b78:	00000073          	ecall
+ ret
+     b7c:	8082                	ret
+
+0000000000000b7e <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+     b7e:	4899                	li	a7,6
+ ecall
+     b80:	00000073          	ecall
+ ret
+     b84:	8082                	ret
+
+0000000000000b86 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+     b86:	489d                	li	a7,7
+ ecall
+     b88:	00000073          	ecall
+ ret
+     b8c:	8082                	ret
+
+0000000000000b8e <open>:
+.global open
+open:
+ li a7, SYS_open
+     b8e:	48bd                	li	a7,15
+ ecall
+     b90:	00000073          	ecall
+ ret
+     b94:	8082                	ret
+
+0000000000000b96 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+     b96:	48c5                	li	a7,17
+ ecall
+     b98:	00000073          	ecall
+ ret
+     b9c:	8082                	ret
+
+0000000000000b9e <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+     b9e:	48c9                	li	a7,18
+ ecall
+     ba0:	00000073          	ecall
+ ret
+     ba4:	8082                	ret
+
+0000000000000ba6 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+     ba6:	48a1                	li	a7,8
+ ecall
+     ba8:	00000073          	ecall
+ ret
+     bac:	8082                	ret
+
+0000000000000bae <link>:
+.global link
+link:
+ li a7, SYS_link
+     bae:	48cd                	li	a7,19
+ ecall
+     bb0:	00000073          	ecall
+ ret
+     bb4:	8082                	ret
+
+0000000000000bb6 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+     bb6:	48d1                	li	a7,20
+ ecall
+     bb8:	00000073          	ecall
+ ret
+     bbc:	8082                	ret
+
+0000000000000bbe <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+     bbe:	48a5                	li	a7,9
+ ecall
+     bc0:	00000073          	ecall
+ ret
+     bc4:	8082                	ret
+
+0000000000000bc6 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+     bc6:	48a9                	li	a7,10
+ ecall
+     bc8:	00000073          	ecall
+ ret
+     bcc:	8082                	ret
+
+0000000000000bce <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+     bce:	48ad                	li	a7,11
+ ecall
+     bd0:	00000073          	ecall
+ ret
+     bd4:	8082                	ret
+
+0000000000000bd6 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+     bd6:	48b1                	li	a7,12
+ ecall
+     bd8:	00000073          	ecall
+ ret
+     bdc:	8082                	ret
+
+0000000000000bde <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+     bde:	48b5                	li	a7,13
+ ecall
+     be0:	00000073          	ecall
+ ret
+     be4:	8082                	ret
+
+0000000000000be6 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+     be6:	48b9                	li	a7,14
+ ecall
+     be8:	00000073          	ecall
+ ret
+     bec:	8082                	ret
+
+0000000000000bee <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+     bee:	48d9                	li	a7,22
+ ecall
+     bf0:	00000073          	ecall
+ ret
+     bf4:	8082                	ret
+
+0000000000000bf6 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+     bf6:	48dd                	li	a7,23
+ ecall
+     bf8:	00000073          	ecall
+ ret
+     bfc:	8082                	ret
+
+0000000000000bfe <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+     bfe:	48e1                	li	a7,24
+ ecall
+     c00:	00000073          	ecall
+ ret
+     c04:	8082                	ret
+
+0000000000000c06 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+     c06:	1101                	addi	sp,sp,-32
+     c08:	ec06                	sd	ra,24(sp)
+     c0a:	e822                	sd	s0,16(sp)
+     c0c:	1000                	addi	s0,sp,32
+     c0e:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+     c12:	4605                	li	a2,1
+     c14:	fef40593          	addi	a1,s0,-17
+     c18:	f57ff0ef          	jal	b6e <write>
+}
+     c1c:	60e2                	ld	ra,24(sp)
+     c1e:	6442                	ld	s0,16(sp)
+     c20:	6105                	addi	sp,sp,32
+     c22:	8082                	ret
+
+0000000000000c24 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     c24:	7139                	addi	sp,sp,-64
+     c26:	fc06                	sd	ra,56(sp)
+     c28:	f822                	sd	s0,48(sp)
+     c2a:	f426                	sd	s1,40(sp)
+     c2c:	0080                	addi	s0,sp,64
+     c2e:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     c30:	c299                	beqz	a3,c36 <printint+0x12>
+     c32:	0805c963          	bltz	a1,cc4 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+     c36:	2581                	sext.w	a1,a1
+  neg = 0;
+     c38:	4881                	li	a7,0
+     c3a:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+     c3e:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+     c40:	2601                	sext.w	a2,a2
+     c42:	00001517          	auipc	a0,0x1
+     c46:	85e50513          	addi	a0,a0,-1954 # 14a0 <digits>
+     c4a:	883a                	mv	a6,a4
+     c4c:	2705                	addiw	a4,a4,1
+     c4e:	02c5f7bb          	remuw	a5,a1,a2
+     c52:	1782                	slli	a5,a5,0x20
+     c54:	9381                	srli	a5,a5,0x20
+     c56:	97aa                	add	a5,a5,a0
+     c58:	0007c783          	lbu	a5,0(a5)
+     c5c:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+     c60:	0005879b          	sext.w	a5,a1
+     c64:	02c5d5bb          	divuw	a1,a1,a2
+     c68:	0685                	addi	a3,a3,1
+     c6a:	fec7f0e3          	bgeu	a5,a2,c4a <printint+0x26>
+  if(neg)
+     c6e:	00088c63          	beqz	a7,c86 <printint+0x62>
+    buf[i++] = '-';
+     c72:	fd070793          	addi	a5,a4,-48
+     c76:	00878733          	add	a4,a5,s0
+     c7a:	02d00793          	li	a5,45
+     c7e:	fef70823          	sb	a5,-16(a4)
+     c82:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+     c86:	02e05a63          	blez	a4,cba <printint+0x96>
+     c8a:	f04a                	sd	s2,32(sp)
+     c8c:	ec4e                	sd	s3,24(sp)
+     c8e:	fc040793          	addi	a5,s0,-64
+     c92:	00e78933          	add	s2,a5,a4
+     c96:	fff78993          	addi	s3,a5,-1
+     c9a:	99ba                	add	s3,s3,a4
+     c9c:	377d                	addiw	a4,a4,-1
+     c9e:	1702                	slli	a4,a4,0x20
+     ca0:	9301                	srli	a4,a4,0x20
+     ca2:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+     ca6:	fff94583          	lbu	a1,-1(s2)
+     caa:	8526                	mv	a0,s1
+     cac:	f5bff0ef          	jal	c06 <putc>
+  while(--i >= 0)
+     cb0:	197d                	addi	s2,s2,-1
+     cb2:	ff391ae3          	bne	s2,s3,ca6 <printint+0x82>
+     cb6:	7902                	ld	s2,32(sp)
+     cb8:	69e2                	ld	s3,24(sp)
+}
+     cba:	70e2                	ld	ra,56(sp)
+     cbc:	7442                	ld	s0,48(sp)
+     cbe:	74a2                	ld	s1,40(sp)
+     cc0:	6121                	addi	sp,sp,64
+     cc2:	8082                	ret
+    x = -xx;
+     cc4:	40b005bb          	negw	a1,a1
+    neg = 1;
+     cc8:	4885                	li	a7,1
+    x = -xx;
+     cca:	bf85                	j	c3a <printint+0x16>
+
+0000000000000ccc <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+     ccc:	711d                	addi	sp,sp,-96
+     cce:	ec86                	sd	ra,88(sp)
+     cd0:	e8a2                	sd	s0,80(sp)
+     cd2:	e0ca                	sd	s2,64(sp)
+     cd4:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+     cd6:	0005c903          	lbu	s2,0(a1)
+     cda:	26090863          	beqz	s2,f4a <vprintf+0x27e>
+     cde:	e4a6                	sd	s1,72(sp)
+     ce0:	fc4e                	sd	s3,56(sp)
+     ce2:	f852                	sd	s4,48(sp)
+     ce4:	f456                	sd	s5,40(sp)
+     ce6:	f05a                	sd	s6,32(sp)
+     ce8:	ec5e                	sd	s7,24(sp)
+     cea:	e862                	sd	s8,16(sp)
+     cec:	e466                	sd	s9,8(sp)
+     cee:	8b2a                	mv	s6,a0
+     cf0:	8a2e                	mv	s4,a1
+     cf2:	8bb2                	mv	s7,a2
+  state = 0;
+     cf4:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+     cf6:	4481                	li	s1,0
+     cf8:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+     cfa:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+     cfe:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+     d02:	06c00c93          	li	s9,108
+     d06:	a005                	j	d26 <vprintf+0x5a>
+        putc(fd, c0);
+     d08:	85ca                	mv	a1,s2
+     d0a:	855a                	mv	a0,s6
+     d0c:	efbff0ef          	jal	c06 <putc>
+     d10:	a019                	j	d16 <vprintf+0x4a>
+    } else if(state == '%'){
+     d12:	03598263          	beq	s3,s5,d36 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+     d16:	2485                	addiw	s1,s1,1
+     d18:	8726                	mv	a4,s1
+     d1a:	009a07b3          	add	a5,s4,s1
+     d1e:	0007c903          	lbu	s2,0(a5)
+     d22:	20090c63          	beqz	s2,f3a <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+     d26:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+     d2a:	fe0994e3          	bnez	s3,d12 <vprintf+0x46>
+      if(c0 == '%'){
+     d2e:	fd579de3          	bne	a5,s5,d08 <vprintf+0x3c>
+        state = '%';
+     d32:	89be                	mv	s3,a5
+     d34:	b7cd                	j	d16 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+     d36:	00ea06b3          	add	a3,s4,a4
+     d3a:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+     d3e:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+     d40:	c681                	beqz	a3,d48 <vprintf+0x7c>
+     d42:	9752                	add	a4,a4,s4
+     d44:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+     d48:	03878f63          	beq	a5,s8,d86 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+     d4c:	05978963          	beq	a5,s9,d9e <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+     d50:	07500713          	li	a4,117
+     d54:	0ee78363          	beq	a5,a4,e3a <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+     d58:	07800713          	li	a4,120
+     d5c:	12e78563          	beq	a5,a4,e86 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+     d60:	07000713          	li	a4,112
+     d64:	14e78a63          	beq	a5,a4,eb8 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+     d68:	07300713          	li	a4,115
+     d6c:	18e78a63          	beq	a5,a4,f00 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+     d70:	02500713          	li	a4,37
+     d74:	04e79563          	bne	a5,a4,dbe <vprintf+0xf2>
+        putc(fd, '%');
+     d78:	02500593          	li	a1,37
+     d7c:	855a                	mv	a0,s6
+     d7e:	e89ff0ef          	jal	c06 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+     d82:	4981                	li	s3,0
+     d84:	bf49                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+     d86:	008b8913          	addi	s2,s7,8
+     d8a:	4685                	li	a3,1
+     d8c:	4629                	li	a2,10
+     d8e:	000ba583          	lw	a1,0(s7)
+     d92:	855a                	mv	a0,s6
+     d94:	e91ff0ef          	jal	c24 <printint>
+     d98:	8bca                	mv	s7,s2
+      state = 0;
+     d9a:	4981                	li	s3,0
+     d9c:	bfad                	j	d16 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+     d9e:	06400793          	li	a5,100
+     da2:	02f68963          	beq	a3,a5,dd4 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+     da6:	06c00793          	li	a5,108
+     daa:	04f68263          	beq	a3,a5,dee <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+     dae:	07500793          	li	a5,117
+     db2:	0af68063          	beq	a3,a5,e52 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+     db6:	07800793          	li	a5,120
+     dba:	0ef68263          	beq	a3,a5,e9e <vprintf+0x1d2>
+        putc(fd, '%');
+     dbe:	02500593          	li	a1,37
+     dc2:	855a                	mv	a0,s6
+     dc4:	e43ff0ef          	jal	c06 <putc>
+        putc(fd, c0);
+     dc8:	85ca                	mv	a1,s2
+     dca:	855a                	mv	a0,s6
+     dcc:	e3bff0ef          	jal	c06 <putc>
+      state = 0;
+     dd0:	4981                	li	s3,0
+     dd2:	b791                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     dd4:	008b8913          	addi	s2,s7,8
+     dd8:	4685                	li	a3,1
+     dda:	4629                	li	a2,10
+     ddc:	000ba583          	lw	a1,0(s7)
+     de0:	855a                	mv	a0,s6
+     de2:	e43ff0ef          	jal	c24 <printint>
+        i += 1;
+     de6:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     de8:	8bca                	mv	s7,s2
+      state = 0;
+     dea:	4981                	li	s3,0
+        i += 1;
+     dec:	b72d                	j	d16 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+     dee:	06400793          	li	a5,100
+     df2:	02f60763          	beq	a2,a5,e20 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+     df6:	07500793          	li	a5,117
+     dfa:	06f60963          	beq	a2,a5,e6c <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+     dfe:	07800793          	li	a5,120
+     e02:	faf61ee3          	bne	a2,a5,dbe <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     e06:	008b8913          	addi	s2,s7,8
+     e0a:	4681                	li	a3,0
+     e0c:	4641                	li	a2,16
+     e0e:	000ba583          	lw	a1,0(s7)
+     e12:	855a                	mv	a0,s6
+     e14:	e11ff0ef          	jal	c24 <printint>
+        i += 2;
+     e18:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     e1a:	8bca                	mv	s7,s2
+      state = 0;
+     e1c:	4981                	li	s3,0
+        i += 2;
+     e1e:	bde5                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     e20:	008b8913          	addi	s2,s7,8
+     e24:	4685                	li	a3,1
+     e26:	4629                	li	a2,10
+     e28:	000ba583          	lw	a1,0(s7)
+     e2c:	855a                	mv	a0,s6
+     e2e:	df7ff0ef          	jal	c24 <printint>
+        i += 2;
+     e32:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     e34:	8bca                	mv	s7,s2
+      state = 0;
+     e36:	4981                	li	s3,0
+        i += 2;
+     e38:	bdf9                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+     e3a:	008b8913          	addi	s2,s7,8
+     e3e:	4681                	li	a3,0
+     e40:	4629                	li	a2,10
+     e42:	000ba583          	lw	a1,0(s7)
+     e46:	855a                	mv	a0,s6
+     e48:	dddff0ef          	jal	c24 <printint>
+     e4c:	8bca                	mv	s7,s2
+      state = 0;
+     e4e:	4981                	li	s3,0
+     e50:	b5d9                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     e52:	008b8913          	addi	s2,s7,8
+     e56:	4681                	li	a3,0
+     e58:	4629                	li	a2,10
+     e5a:	000ba583          	lw	a1,0(s7)
+     e5e:	855a                	mv	a0,s6
+     e60:	dc5ff0ef          	jal	c24 <printint>
+        i += 1;
+     e64:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     e66:	8bca                	mv	s7,s2
+      state = 0;
+     e68:	4981                	li	s3,0
+        i += 1;
+     e6a:	b575                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     e6c:	008b8913          	addi	s2,s7,8
+     e70:	4681                	li	a3,0
+     e72:	4629                	li	a2,10
+     e74:	000ba583          	lw	a1,0(s7)
+     e78:	855a                	mv	a0,s6
+     e7a:	dabff0ef          	jal	c24 <printint>
+        i += 2;
+     e7e:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     e80:	8bca                	mv	s7,s2
+      state = 0;
+     e82:	4981                	li	s3,0
+        i += 2;
+     e84:	bd49                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+     e86:	008b8913          	addi	s2,s7,8
+     e8a:	4681                	li	a3,0
+     e8c:	4641                	li	a2,16
+     e8e:	000ba583          	lw	a1,0(s7)
+     e92:	855a                	mv	a0,s6
+     e94:	d91ff0ef          	jal	c24 <printint>
+     e98:	8bca                	mv	s7,s2
+      state = 0;
+     e9a:	4981                	li	s3,0
+     e9c:	bdad                	j	d16 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     e9e:	008b8913          	addi	s2,s7,8
+     ea2:	4681                	li	a3,0
+     ea4:	4641                	li	a2,16
+     ea6:	000ba583          	lw	a1,0(s7)
+     eaa:	855a                	mv	a0,s6
+     eac:	d79ff0ef          	jal	c24 <printint>
+        i += 1;
+     eb0:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     eb2:	8bca                	mv	s7,s2
+      state = 0;
+     eb4:	4981                	li	s3,0
+        i += 1;
+     eb6:	b585                	j	d16 <vprintf+0x4a>
+     eb8:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+     eba:	008b8d13          	addi	s10,s7,8
+     ebe:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+     ec2:	03000593          	li	a1,48
+     ec6:	855a                	mv	a0,s6
+     ec8:	d3fff0ef          	jal	c06 <putc>
+  putc(fd, 'x');
+     ecc:	07800593          	li	a1,120
+     ed0:	855a                	mv	a0,s6
+     ed2:	d35ff0ef          	jal	c06 <putc>
+     ed6:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+     ed8:	00000b97          	auipc	s7,0x0
+     edc:	5c8b8b93          	addi	s7,s7,1480 # 14a0 <digits>
+     ee0:	03c9d793          	srli	a5,s3,0x3c
+     ee4:	97de                	add	a5,a5,s7
+     ee6:	0007c583          	lbu	a1,0(a5)
+     eea:	855a                	mv	a0,s6
+     eec:	d1bff0ef          	jal	c06 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+     ef0:	0992                	slli	s3,s3,0x4
+     ef2:	397d                	addiw	s2,s2,-1
+     ef4:	fe0916e3          	bnez	s2,ee0 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+     ef8:	8bea                	mv	s7,s10
+      state = 0;
+     efa:	4981                	li	s3,0
+     efc:	6d02                	ld	s10,0(sp)
+     efe:	bd21                	j	d16 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+     f00:	008b8993          	addi	s3,s7,8
+     f04:	000bb903          	ld	s2,0(s7)
+     f08:	00090f63          	beqz	s2,f26 <vprintf+0x25a>
+        for(; *s; s++)
+     f0c:	00094583          	lbu	a1,0(s2)
+     f10:	c195                	beqz	a1,f34 <vprintf+0x268>
+          putc(fd, *s);
+     f12:	855a                	mv	a0,s6
+     f14:	cf3ff0ef          	jal	c06 <putc>
+        for(; *s; s++)
+     f18:	0905                	addi	s2,s2,1
+     f1a:	00094583          	lbu	a1,0(s2)
+     f1e:	f9f5                	bnez	a1,f12 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+     f20:	8bce                	mv	s7,s3
+      state = 0;
+     f22:	4981                	li	s3,0
+     f24:	bbcd                	j	d16 <vprintf+0x4a>
+          s = "(null)";
+     f26:	00000917          	auipc	s2,0x0
+     f2a:	51290913          	addi	s2,s2,1298 # 1438 <malloc+0x406>
+        for(; *s; s++)
+     f2e:	02800593          	li	a1,40
+     f32:	b7c5                	j	f12 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+     f34:	8bce                	mv	s7,s3
+      state = 0;
+     f36:	4981                	li	s3,0
+     f38:	bbf9                	j	d16 <vprintf+0x4a>
+     f3a:	64a6                	ld	s1,72(sp)
+     f3c:	79e2                	ld	s3,56(sp)
+     f3e:	7a42                	ld	s4,48(sp)
+     f40:	7aa2                	ld	s5,40(sp)
+     f42:	7b02                	ld	s6,32(sp)
+     f44:	6be2                	ld	s7,24(sp)
+     f46:	6c42                	ld	s8,16(sp)
+     f48:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+     f4a:	60e6                	ld	ra,88(sp)
+     f4c:	6446                	ld	s0,80(sp)
+     f4e:	6906                	ld	s2,64(sp)
+     f50:	6125                	addi	sp,sp,96
+     f52:	8082                	ret
+
+0000000000000f54 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+     f54:	715d                	addi	sp,sp,-80
+     f56:	ec06                	sd	ra,24(sp)
+     f58:	e822                	sd	s0,16(sp)
+     f5a:	1000                	addi	s0,sp,32
+     f5c:	e010                	sd	a2,0(s0)
+     f5e:	e414                	sd	a3,8(s0)
+     f60:	e818                	sd	a4,16(s0)
+     f62:	ec1c                	sd	a5,24(s0)
+     f64:	03043023          	sd	a6,32(s0)
+     f68:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+     f6c:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+     f70:	8622                	mv	a2,s0
+     f72:	d5bff0ef          	jal	ccc <vprintf>
+}
+     f76:	60e2                	ld	ra,24(sp)
+     f78:	6442                	ld	s0,16(sp)
+     f7a:	6161                	addi	sp,sp,80
+     f7c:	8082                	ret
+
+0000000000000f7e <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+     f7e:	711d                	addi	sp,sp,-96
+     f80:	ec06                	sd	ra,24(sp)
+     f82:	e822                	sd	s0,16(sp)
+     f84:	1000                	addi	s0,sp,32
+     f86:	e40c                	sd	a1,8(s0)
+     f88:	e810                	sd	a2,16(s0)
+     f8a:	ec14                	sd	a3,24(s0)
+     f8c:	f018                	sd	a4,32(s0)
+     f8e:	f41c                	sd	a5,40(s0)
+     f90:	03043823          	sd	a6,48(s0)
+     f94:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+     f98:	00840613          	addi	a2,s0,8
+     f9c:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+     fa0:	85aa                	mv	a1,a0
+     fa2:	4505                	li	a0,1
+     fa4:	d29ff0ef          	jal	ccc <vprintf>
+}
+     fa8:	60e2                	ld	ra,24(sp)
+     faa:	6442                	ld	s0,16(sp)
+     fac:	6125                	addi	sp,sp,96
+     fae:	8082                	ret
+
+0000000000000fb0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+     fb0:	1141                	addi	sp,sp,-16
+     fb2:	e422                	sd	s0,8(sp)
+     fb4:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+     fb6:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+     fba:	00001797          	auipc	a5,0x1
+     fbe:	0567b783          	ld	a5,86(a5) # 2010 <freep>
+     fc2:	a02d                	j	fec <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+     fc4:	4618                	lw	a4,8(a2)
+     fc6:	9f2d                	addw	a4,a4,a1
+     fc8:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+     fcc:	6398                	ld	a4,0(a5)
+     fce:	6310                	ld	a2,0(a4)
+     fd0:	a83d                	j	100e <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+     fd2:	ff852703          	lw	a4,-8(a0)
+     fd6:	9f31                	addw	a4,a4,a2
+     fd8:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+     fda:	ff053683          	ld	a3,-16(a0)
+     fde:	a091                	j	1022 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+     fe0:	6398                	ld	a4,0(a5)
+     fe2:	00e7e463          	bltu	a5,a4,fea <free+0x3a>
+     fe6:	00e6ea63          	bltu	a3,a4,ffa <free+0x4a>
+{
+     fea:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+     fec:	fed7fae3          	bgeu	a5,a3,fe0 <free+0x30>
+     ff0:	6398                	ld	a4,0(a5)
+     ff2:	00e6e463          	bltu	a3,a4,ffa <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+     ff6:	fee7eae3          	bltu	a5,a4,fea <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+     ffa:	ff852583          	lw	a1,-8(a0)
+     ffe:	6390                	ld	a2,0(a5)
+    1000:	02059813          	slli	a6,a1,0x20
+    1004:	01c85713          	srli	a4,a6,0x1c
+    1008:	9736                	add	a4,a4,a3
+    100a:	fae60de3          	beq	a2,a4,fc4 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    100e:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    1012:	4790                	lw	a2,8(a5)
+    1014:	02061593          	slli	a1,a2,0x20
+    1018:	01c5d713          	srli	a4,a1,0x1c
+    101c:	973e                	add	a4,a4,a5
+    101e:	fae68ae3          	beq	a3,a4,fd2 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    1022:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    1024:	00001717          	auipc	a4,0x1
+    1028:	fef73623          	sd	a5,-20(a4) # 2010 <freep>
+}
+    102c:	6422                	ld	s0,8(sp)
+    102e:	0141                	addi	sp,sp,16
+    1030:	8082                	ret
+
+0000000000001032 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    1032:	7139                	addi	sp,sp,-64
+    1034:	fc06                	sd	ra,56(sp)
+    1036:	f822                	sd	s0,48(sp)
+    1038:	f426                	sd	s1,40(sp)
+    103a:	ec4e                	sd	s3,24(sp)
+    103c:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    103e:	02051493          	slli	s1,a0,0x20
+    1042:	9081                	srli	s1,s1,0x20
+    1044:	04bd                	addi	s1,s1,15
+    1046:	8091                	srli	s1,s1,0x4
+    1048:	0014899b          	addiw	s3,s1,1
+    104c:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    104e:	00001517          	auipc	a0,0x1
+    1052:	fc253503          	ld	a0,-62(a0) # 2010 <freep>
+    1056:	c915                	beqz	a0,108a <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1058:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    105a:	4798                	lw	a4,8(a5)
+    105c:	08977a63          	bgeu	a4,s1,10f0 <malloc+0xbe>
+    1060:	f04a                	sd	s2,32(sp)
+    1062:	e852                	sd	s4,16(sp)
+    1064:	e456                	sd	s5,8(sp)
+    1066:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+    1068:	8a4e                	mv	s4,s3
+    106a:	0009871b          	sext.w	a4,s3
+    106e:	6685                	lui	a3,0x1
+    1070:	00d77363          	bgeu	a4,a3,1076 <malloc+0x44>
+    1074:	6a05                	lui	s4,0x1
+    1076:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    107a:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    107e:	00001917          	auipc	s2,0x1
+    1082:	f9290913          	addi	s2,s2,-110 # 2010 <freep>
+  if(p == (char*)-1)
+    1086:	5afd                	li	s5,-1
+    1088:	a081                	j	10c8 <malloc+0x96>
+    108a:	f04a                	sd	s2,32(sp)
+    108c:	e852                	sd	s4,16(sp)
+    108e:	e456                	sd	s5,8(sp)
+    1090:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+    1092:	00001797          	auipc	a5,0x1
+    1096:	37678793          	addi	a5,a5,886 # 2408 <base>
+    109a:	00001717          	auipc	a4,0x1
+    109e:	f6f73b23          	sd	a5,-138(a4) # 2010 <freep>
+    10a2:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    10a4:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    10a8:	b7c1                	j	1068 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+    10aa:	6398                	ld	a4,0(a5)
+    10ac:	e118                	sd	a4,0(a0)
+    10ae:	a8a9                	j	1108 <malloc+0xd6>
+  hp->s.size = nu;
+    10b0:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    10b4:	0541                	addi	a0,a0,16
+    10b6:	efbff0ef          	jal	fb0 <free>
+  return freep;
+    10ba:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    10be:	c12d                	beqz	a0,1120 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    10c0:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    10c2:	4798                	lw	a4,8(a5)
+    10c4:	02977263          	bgeu	a4,s1,10e8 <malloc+0xb6>
+    if(p == freep)
+    10c8:	00093703          	ld	a4,0(s2)
+    10cc:	853e                	mv	a0,a5
+    10ce:	fef719e3          	bne	a4,a5,10c0 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+    10d2:	8552                	mv	a0,s4
+    10d4:	b03ff0ef          	jal	bd6 <sbrk>
+  if(p == (char*)-1)
+    10d8:	fd551ce3          	bne	a0,s5,10b0 <malloc+0x7e>
+        return 0;
+    10dc:	4501                	li	a0,0
+    10de:	7902                	ld	s2,32(sp)
+    10e0:	6a42                	ld	s4,16(sp)
+    10e2:	6aa2                	ld	s5,8(sp)
+    10e4:	6b02                	ld	s6,0(sp)
+    10e6:	a03d                	j	1114 <malloc+0xe2>
+    10e8:	7902                	ld	s2,32(sp)
+    10ea:	6a42                	ld	s4,16(sp)
+    10ec:	6aa2                	ld	s5,8(sp)
+    10ee:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+    10f0:	fae48de3          	beq	s1,a4,10aa <malloc+0x78>
+        p->s.size -= nunits;
+    10f4:	4137073b          	subw	a4,a4,s3
+    10f8:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    10fa:	02071693          	slli	a3,a4,0x20
+    10fe:	01c6d713          	srli	a4,a3,0x1c
+    1102:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    1104:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    1108:	00001717          	auipc	a4,0x1
+    110c:	f0a73423          	sd	a0,-248(a4) # 2010 <freep>
+      return (void*)(p + 1);
+    1110:	01078513          	addi	a0,a5,16
+  }
+}
+    1114:	70e2                	ld	ra,56(sp)
+    1116:	7442                	ld	s0,48(sp)
+    1118:	74a2                	ld	s1,40(sp)
+    111a:	69e2                	ld	s3,24(sp)
+    111c:	6121                	addi	sp,sp,64
+    111e:	8082                	ret
+    1120:	7902                	ld	s2,32(sp)
+    1122:	6a42                	ld	s4,16(sp)
+    1124:	6aa2                	ld	s5,8(sp)
+    1126:	6b02                	ld	s6,0(sp)
+    1128:	b7f5                	j	1114 <malloc+0xe2>
diff --git a/user/grind.c b/user/grind.c
new file mode 100644
index 0000000..431ed19
--- /dev/null
+++ b/user/grind.c
@@ -0,0 +1,351 @@
+//
+// run random system calls in parallel forever.
+//
+
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+// from FreeBSD.
+int
+do_rand(unsigned long *ctx)
+{
+/*
+ * Compute x = (7^5 * x) mod (2^31 - 1)
+ * without overflowing 31 bits:
+ *      (2^31 - 1) = 127773 * (7^5) + 2836
+ * From "Random number generators: good ones are hard to find",
+ * Park and Miller, Communications of the ACM, vol. 31, no. 10,
+ * October 1988, p. 1195.
+ */
+    long hi, lo, x;
+
+    /* Transform to [1, 0x7ffffffe] range. */
+    x = (*ctx % 0x7ffffffe) + 1;
+    hi = x / 127773;
+    lo = x % 127773;
+    x = 16807 * lo - 2836 * hi;
+    if (x < 0)
+        x += 0x7fffffff;
+    /* Transform to [0, 0x7ffffffd] range. */
+    x--;
+    *ctx = x;
+    return (x);
+}
+
+unsigned long rand_next = 1;
+
+int
+rand(void)
+{
+    return (do_rand(&rand_next));
+}
+
+void
+go(int which_child)
+{
+  int fd = -1;
+  static char buf[999];
+  char *break0 = sbrk(0);
+  uint64 iters = 0;
+
+  mkdir("grindir");
+  if(chdir("grindir") != 0){
+    printf("grind: chdir grindir failed\n");
+    exit(1);
+  }
+  chdir("/");
+  
+  while(1){
+    iters++;
+    if((iters % 500) == 0)
+      write(1, which_child?"B":"A", 1);
+    int what = rand() % 23;
+    if(what == 1){
+      close(open("grindir/../a", O_CREATE|O_RDWR));
+    } else if(what == 2){
+      close(open("grindir/../grindir/../b", O_CREATE|O_RDWR));
+    } else if(what == 3){
+      unlink("grindir/../a");
+    } else if(what == 4){
+      if(chdir("grindir") != 0){
+        printf("grind: chdir grindir failed\n");
+        exit(1);
+      }
+      unlink("../b");
+      chdir("/");
+    } else if(what == 5){
+      close(fd);
+      fd = open("/grindir/../a", O_CREATE|O_RDWR);
+    } else if(what == 6){
+      close(fd);
+      fd = open("/./grindir/./../b", O_CREATE|O_RDWR);
+    } else if(what == 7){
+      write(fd, buf, sizeof(buf));
+    } else if(what == 8){
+      read(fd, buf, sizeof(buf));
+    } else if(what == 9){
+      mkdir("grindir/../a");
+      close(open("a/../a/./a", O_CREATE|O_RDWR));
+      unlink("a/a");
+    } else if(what == 10){
+      mkdir("/../b");
+      close(open("grindir/../b/b", O_CREATE|O_RDWR));
+      unlink("b/b");
+    } else if(what == 11){
+      unlink("b");
+      link("../grindir/./../a", "../b");
+    } else if(what == 12){
+      unlink("../grindir/../a");
+      link(".././b", "/grindir/../a");
+    } else if(what == 13){
+      int pid = fork();
+      if(pid == 0){
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+    } else if(what == 14){
+      int pid = fork();
+      if(pid == 0){
+        fork();
+        fork();
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+    } else if(what == 15){
+      sbrk(6011);
+    } else if(what == 16){
+      if(sbrk(0) > break0)
+        sbrk(-(sbrk(0) - break0));
+    } else if(what == 17){
+      int pid = fork();
+      if(pid == 0){
+        close(open("a", O_CREATE|O_RDWR));
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      if(chdir("../grindir/..") != 0){
+        printf("grind: chdir failed\n");
+        exit(1);
+      }
+      kill(pid);
+      wait(0);
+    } else if(what == 18){
+      int pid = fork();
+      if(pid == 0){
+        kill(getpid());
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+    } else if(what == 19){
+      int fds[2];
+      if(pipe(fds) < 0){
+        printf("grind: pipe failed\n");
+        exit(1);
+      }
+      int pid = fork();
+      if(pid == 0){
+        fork();
+        fork();
+        if(write(fds[1], "x", 1) != 1)
+          printf("grind: pipe write failed\n");
+        char c;
+        if(read(fds[0], &c, 1) != 1)
+          printf("grind: pipe read failed\n");
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      close(fds[0]);
+      close(fds[1]);
+      wait(0);
+    } else if(what == 20){
+      int pid = fork();
+      if(pid == 0){
+        unlink("a");
+        mkdir("a");
+        chdir("a");
+        unlink("../a");
+        fd = open("x", O_CREATE|O_RDWR);
+        unlink("x");
+        exit(0);
+      } else if(pid < 0){
+        printf("grind: fork failed\n");
+        exit(1);
+      }
+      wait(0);
+    } else if(what == 21){
+      unlink("c");
+      // should always succeed. check that there are free i-nodes,
+      // file descriptors, blocks.
+      int fd1 = open("c", O_CREATE|O_RDWR);
+      if(fd1 < 0){
+        printf("grind: create c failed\n");
+        exit(1);
+      }
+      if(write(fd1, "x", 1) != 1){
+        printf("grind: write c failed\n");
+        exit(1);
+      }
+      struct stat st;
+      if(fstat(fd1, &st) != 0){
+        printf("grind: fstat failed\n");
+        exit(1);
+      }
+      if(st.size != 1){
+        printf("grind: fstat reports wrong size %d\n", (int)st.size);
+        exit(1);
+      }
+      if(st.ino > 200){
+        printf("grind: fstat reports crazy i-number %d\n", st.ino);
+        exit(1);
+      }
+      close(fd1);
+      unlink("c");
+    } else if(what == 22){
+      // echo hi | cat
+      int aa[2], bb[2];
+      if(pipe(aa) < 0){
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      if(pipe(bb) < 0){
+        fprintf(2, "grind: pipe failed\n");
+        exit(1);
+      }
+      int pid1 = fork();
+      if(pid1 == 0){
+        close(bb[0]);
+        close(bb[1]);
+        close(aa[0]);
+        close(1);
+        if(dup(aa[1]) != 1){
+          fprintf(2, "grind: dup failed\n");
+          exit(1);
+        }
+        close(aa[1]);
+        char *args[3] = { "echo", "hi", 0 };
+        exec("grindir/../echo", args);
+        fprintf(2, "grind: echo: not found\n");
+        exit(2);
+      } else if(pid1 < 0){
+        fprintf(2, "grind: fork failed\n");
+        exit(3);
+      }
+      int pid2 = fork();
+      if(pid2 == 0){
+        close(aa[1]);
+        close(bb[0]);
+        close(0);
+        if(dup(aa[0]) != 0){
+          fprintf(2, "grind: dup failed\n");
+          exit(4);
+        }
+        close(aa[0]);
+        close(1);
+        if(dup(bb[1]) != 1){
+          fprintf(2, "grind: dup failed\n");
+          exit(5);
+        }
+        close(bb[1]);
+        char *args[2] = { "cat", 0 };
+        exec("/cat", args);
+        fprintf(2, "grind: cat: not found\n");
+        exit(6);
+      } else if(pid2 < 0){
+        fprintf(2, "grind: fork failed\n");
+        exit(7);
+      }
+      close(aa[0]);
+      close(aa[1]);
+      close(bb[1]);
+      char buf[4] = { 0, 0, 0, 0 };
+      read(bb[0], buf+0, 1);
+      read(bb[0], buf+1, 1);
+      read(bb[0], buf+2, 1);
+      close(bb[0]);
+      int st1, st2;
+      wait(&st1);
+      wait(&st2);
+      if(st1 != 0 || st2 != 0 || strcmp(buf, "hi\n") != 0){
+        printf("grind: exec pipeline failed %d %d \"%s\"\n", st1, st2, buf);
+        exit(1);
+      }
+    }
+  }
+}
+
+void
+iter()
+{
+  unlink("a");
+  unlink("b");
+  
+  int pid1 = fork();
+  if(pid1 < 0){
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid1 == 0){
+    rand_next ^= 31;
+    go(0);
+    exit(0);
+  }
+
+  int pid2 = fork();
+  if(pid2 < 0){
+    printf("grind: fork failed\n");
+    exit(1);
+  }
+  if(pid2 == 0){
+    rand_next ^= 7177;
+    go(1);
+    exit(0);
+  }
+
+  int st1 = -1;
+  wait(&st1);
+  if(st1 != 0){
+    kill(pid1);
+    kill(pid2);
+  }
+  int st2 = -1;
+  wait(&st2);
+
+  exit(0);
+}
+
+int
+main()
+{
+  while(1){
+    int pid = fork();
+    if(pid == 0){
+      iter();
+      exit(0);
+    }
+    if(pid > 0){
+      wait(0);
+    }
+    sleep(20);
+    rand_next += 1;
+  }
+}
diff --git a/user/grind.d b/user/grind.d
new file mode 100644
index 0000000..2b8914b
--- /dev/null
+++ b/user/grind.d
@@ -0,0 +1,3 @@
+user/grind.o: user/grind.c kernel/param.h kernel/types.h kernel/stat.h \
+ user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
+ kernel/memlayout.h kernel/riscv.h
diff --git a/user/grind.o b/user/grind.o
new file mode 100644
index 0000000..c4ab99e
Binary files /dev/null and b/user/grind.o differ
diff --git a/user/grind.sym b/user/grind.sym
new file mode 100644
index 0000000..7677a0c
--- /dev/null
+++ b/user/grind.sym
@@ -0,0 +1,72 @@
+0000000000000000 .text
+0000000000001130 .rodata
+0000000000002000 .data
+0000000000002010 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_ranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 grind.c
+0000000000002020 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000c06 putc
+0000000000000c24 printint
+00000000000014a0 digits
+0000000000000000 umalloc.c
+0000000000002010 freep
+0000000000002408 base
+00000000000008f6 strcpy
+0000000000000f7e printf
+0000000000000000 do_rand
+0000000000000aa0 memmove
+0000000000000b96 mknod
+0000000000000bf6 trace
+00000000000009ae gets
+0000000000000bce getpid
+0000000000000bee hello
+0000000000000b32 memcpy
+0000000000001032 malloc
+0000000000000bde sleep
+0000000000000bfe sysinfo
+0000000000000b5e pipe
+0000000000000074 go
+00000000000007e2 iter
+0000000000000b6e write
+0000000000000ba6 fstat
+0000000000000f54 fprintf
+0000000000000b7e kill
+0000000000000ccc vprintf
+0000000000000bbe chdir
+0000000000000b86 exec
+0000000000000b56 wait
+0000000000000058 rand
+0000000000000b66 read
+0000000000000b9e unlink
+0000000000000af8 memcmp
+0000000000000b46 fork
+0000000000002000 rand_next
+0000000000000bd6 sbrk
+0000000000000be6 uptime
+0000000000000968 memset
+00000000000008ae main
+0000000000000912 strcmp
+0000000000000bc6 dup
+0000000000000a1e stat
+0000000000000bae link
+0000000000000b4e exit
+00000000000008e4 start
+0000000000000a58 atoi
+000000000000093e strlen
+0000000000000b8e open
+000000000000098a strchr
+0000000000000bb6 mkdir
+0000000000000b76 close
+0000000000000fb0 free
diff --git a/user/init.asm b/user/init.asm
new file mode 100644
index 0000000..a495de7
--- /dev/null
+++ b/user/init.asm
@@ -0,0 +1,1537 @@
+
+user/_init:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	e426                	sd	s1,8(sp)
+   8:	e04a                	sd	s2,0(sp)
+   a:	1000                	addi	s0,sp,32
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   c:	4589                	li	a1,2
+   e:	00001517          	auipc	a0,0x1
+  12:	90250513          	addi	a0,a0,-1790 # 910 <malloc+0x106>
+  16:	350000ef          	jal	366 <open>
+  1a:	04054563          	bltz	a0,64 <main+0x64>
+    mknod("console", CONSOLE, 0);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  1e:	4501                	li	a0,0
+  20:	37e000ef          	jal	39e <dup>
+  dup(0);  // stderr
+  24:	4501                	li	a0,0
+  26:	378000ef          	jal	39e <dup>
+
+  for(;;){
+    printf("init: starting sh\n");
+  2a:	00001917          	auipc	s2,0x1
+  2e:	8ee90913          	addi	s2,s2,-1810 # 918 <malloc+0x10e>
+  32:	854a                	mv	a0,s2
+  34:	722000ef          	jal	756 <printf>
+    pid = fork();
+  38:	2e6000ef          	jal	31e <fork>
+  3c:	84aa                	mv	s1,a0
+    if(pid < 0){
+  3e:	04054363          	bltz	a0,84 <main+0x84>
+      printf("init: fork failed\n");
+      exit(1);
+    }
+    if(pid == 0){
+  42:	c931                	beqz	a0,96 <main+0x96>
+    }
+
+    for(;;){
+      // this call to wait() returns if the shell exits,
+      // or if a parentless process exits.
+      wpid = wait((int *) 0);
+  44:	4501                	li	a0,0
+  46:	2e8000ef          	jal	32e <wait>
+      if(wpid == pid){
+  4a:	fea484e3          	beq	s1,a0,32 <main+0x32>
+        // the shell exited; restart it.
+        break;
+      } else if(wpid < 0){
+  4e:	fe055be3          	bgez	a0,44 <main+0x44>
+        printf("init: wait returned an error\n");
+  52:	00001517          	auipc	a0,0x1
+  56:	91650513          	addi	a0,a0,-1770 # 968 <malloc+0x15e>
+  5a:	6fc000ef          	jal	756 <printf>
+        exit(1);
+  5e:	4505                	li	a0,1
+  60:	2c6000ef          	jal	326 <exit>
+    mknod("console", CONSOLE, 0);
+  64:	4601                	li	a2,0
+  66:	4585                	li	a1,1
+  68:	00001517          	auipc	a0,0x1
+  6c:	8a850513          	addi	a0,a0,-1880 # 910 <malloc+0x106>
+  70:	2fe000ef          	jal	36e <mknod>
+    open("console", O_RDWR);
+  74:	4589                	li	a1,2
+  76:	00001517          	auipc	a0,0x1
+  7a:	89a50513          	addi	a0,a0,-1894 # 910 <malloc+0x106>
+  7e:	2e8000ef          	jal	366 <open>
+  82:	bf71                	j	1e <main+0x1e>
+      printf("init: fork failed\n");
+  84:	00001517          	auipc	a0,0x1
+  88:	8ac50513          	addi	a0,a0,-1876 # 930 <malloc+0x126>
+  8c:	6ca000ef          	jal	756 <printf>
+      exit(1);
+  90:	4505                	li	a0,1
+  92:	294000ef          	jal	326 <exit>
+      exec("sh", argv);
+  96:	00001597          	auipc	a1,0x1
+  9a:	f6a58593          	addi	a1,a1,-150 # 1000 <argv>
+  9e:	00001517          	auipc	a0,0x1
+  a2:	8aa50513          	addi	a0,a0,-1878 # 948 <malloc+0x13e>
+  a6:	2b8000ef          	jal	35e <exec>
+      printf("init: exec sh failed\n");
+  aa:	00001517          	auipc	a0,0x1
+  ae:	8a650513          	addi	a0,a0,-1882 # 950 <malloc+0x146>
+  b2:	6a4000ef          	jal	756 <printf>
+      exit(1);
+  b6:	4505                	li	a0,1
+  b8:	26e000ef          	jal	326 <exit>
+
+00000000000000bc <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  bc:	1141                	addi	sp,sp,-16
+  be:	e406                	sd	ra,8(sp)
+  c0:	e022                	sd	s0,0(sp)
+  c2:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  c4:	f3dff0ef          	jal	0 <main>
+  exit(0);
+  c8:	4501                	li	a0,0
+  ca:	25c000ef          	jal	326 <exit>
+
+00000000000000ce <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  ce:	1141                	addi	sp,sp,-16
+  d0:	e422                	sd	s0,8(sp)
+  d2:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  d4:	87aa                	mv	a5,a0
+  d6:	0585                	addi	a1,a1,1
+  d8:	0785                	addi	a5,a5,1
+  da:	fff5c703          	lbu	a4,-1(a1)
+  de:	fee78fa3          	sb	a4,-1(a5)
+  e2:	fb75                	bnez	a4,d6 <strcpy+0x8>
+    ;
+  return os;
+}
+  e4:	6422                	ld	s0,8(sp)
+  e6:	0141                	addi	sp,sp,16
+  e8:	8082                	ret
+
+00000000000000ea <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  f0:	00054783          	lbu	a5,0(a0)
+  f4:	cb91                	beqz	a5,108 <strcmp+0x1e>
+  f6:	0005c703          	lbu	a4,0(a1)
+  fa:	00f71763          	bne	a4,a5,108 <strcmp+0x1e>
+    p++, q++;
+  fe:	0505                	addi	a0,a0,1
+ 100:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 102:	00054783          	lbu	a5,0(a0)
+ 106:	fbe5                	bnez	a5,f6 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 108:	0005c503          	lbu	a0,0(a1)
+}
+ 10c:	40a7853b          	subw	a0,a5,a0
+ 110:	6422                	ld	s0,8(sp)
+ 112:	0141                	addi	sp,sp,16
+ 114:	8082                	ret
+
+0000000000000116 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 116:	1141                	addi	sp,sp,-16
+ 118:	e422                	sd	s0,8(sp)
+ 11a:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 11c:	00054783          	lbu	a5,0(a0)
+ 120:	cf91                	beqz	a5,13c <strlen+0x26>
+ 122:	0505                	addi	a0,a0,1
+ 124:	87aa                	mv	a5,a0
+ 126:	86be                	mv	a3,a5
+ 128:	0785                	addi	a5,a5,1
+ 12a:	fff7c703          	lbu	a4,-1(a5)
+ 12e:	ff65                	bnez	a4,126 <strlen+0x10>
+ 130:	40a6853b          	subw	a0,a3,a0
+ 134:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 136:	6422                	ld	s0,8(sp)
+ 138:	0141                	addi	sp,sp,16
+ 13a:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 13c:	4501                	li	a0,0
+ 13e:	bfe5                	j	136 <strlen+0x20>
+
+0000000000000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	1141                	addi	sp,sp,-16
+ 142:	e422                	sd	s0,8(sp)
+ 144:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 146:	ca19                	beqz	a2,15c <memset+0x1c>
+ 148:	87aa                	mv	a5,a0
+ 14a:	1602                	slli	a2,a2,0x20
+ 14c:	9201                	srli	a2,a2,0x20
+ 14e:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 152:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 156:	0785                	addi	a5,a5,1
+ 158:	fee79de3          	bne	a5,a4,152 <memset+0x12>
+  }
+  return dst;
+}
+ 15c:	6422                	ld	s0,8(sp)
+ 15e:	0141                	addi	sp,sp,16
+ 160:	8082                	ret
+
+0000000000000162 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 162:	1141                	addi	sp,sp,-16
+ 164:	e422                	sd	s0,8(sp)
+ 166:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 168:	00054783          	lbu	a5,0(a0)
+ 16c:	cb99                	beqz	a5,182 <strchr+0x20>
+    if(*s == c)
+ 16e:	00f58763          	beq	a1,a5,17c <strchr+0x1a>
+  for(; *s; s++)
+ 172:	0505                	addi	a0,a0,1
+ 174:	00054783          	lbu	a5,0(a0)
+ 178:	fbfd                	bnez	a5,16e <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 17a:	4501                	li	a0,0
+}
+ 17c:	6422                	ld	s0,8(sp)
+ 17e:	0141                	addi	sp,sp,16
+ 180:	8082                	ret
+  return 0;
+ 182:	4501                	li	a0,0
+ 184:	bfe5                	j	17c <strchr+0x1a>
+
+0000000000000186 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 186:	711d                	addi	sp,sp,-96
+ 188:	ec86                	sd	ra,88(sp)
+ 18a:	e8a2                	sd	s0,80(sp)
+ 18c:	e4a6                	sd	s1,72(sp)
+ 18e:	e0ca                	sd	s2,64(sp)
+ 190:	fc4e                	sd	s3,56(sp)
+ 192:	f852                	sd	s4,48(sp)
+ 194:	f456                	sd	s5,40(sp)
+ 196:	f05a                	sd	s6,32(sp)
+ 198:	ec5e                	sd	s7,24(sp)
+ 19a:	1080                	addi	s0,sp,96
+ 19c:	8baa                	mv	s7,a0
+ 19e:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1a0:	892a                	mv	s2,a0
+ 1a2:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1a4:	4aa9                	li	s5,10
+ 1a6:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1a8:	89a6                	mv	s3,s1
+ 1aa:	2485                	addiw	s1,s1,1
+ 1ac:	0344d663          	bge	s1,s4,1d8 <gets+0x52>
+    cc = read(0, &c, 1);
+ 1b0:	4605                	li	a2,1
+ 1b2:	faf40593          	addi	a1,s0,-81
+ 1b6:	4501                	li	a0,0
+ 1b8:	186000ef          	jal	33e <read>
+    if(cc < 1)
+ 1bc:	00a05e63          	blez	a0,1d8 <gets+0x52>
+    buf[i++] = c;
+ 1c0:	faf44783          	lbu	a5,-81(s0)
+ 1c4:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1c8:	01578763          	beq	a5,s5,1d6 <gets+0x50>
+ 1cc:	0905                	addi	s2,s2,1
+ 1ce:	fd679de3          	bne	a5,s6,1a8 <gets+0x22>
+    buf[i++] = c;
+ 1d2:	89a6                	mv	s3,s1
+ 1d4:	a011                	j	1d8 <gets+0x52>
+ 1d6:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 1d8:	99de                	add	s3,s3,s7
+ 1da:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 1de:	855e                	mv	a0,s7
+ 1e0:	60e6                	ld	ra,88(sp)
+ 1e2:	6446                	ld	s0,80(sp)
+ 1e4:	64a6                	ld	s1,72(sp)
+ 1e6:	6906                	ld	s2,64(sp)
+ 1e8:	79e2                	ld	s3,56(sp)
+ 1ea:	7a42                	ld	s4,48(sp)
+ 1ec:	7aa2                	ld	s5,40(sp)
+ 1ee:	7b02                	ld	s6,32(sp)
+ 1f0:	6be2                	ld	s7,24(sp)
+ 1f2:	6125                	addi	sp,sp,96
+ 1f4:	8082                	ret
+
+00000000000001f6 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f6:	1101                	addi	sp,sp,-32
+ 1f8:	ec06                	sd	ra,24(sp)
+ 1fa:	e822                	sd	s0,16(sp)
+ 1fc:	e04a                	sd	s2,0(sp)
+ 1fe:	1000                	addi	s0,sp,32
+ 200:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 202:	4581                	li	a1,0
+ 204:	162000ef          	jal	366 <open>
+  if(fd < 0)
+ 208:	02054263          	bltz	a0,22c <stat+0x36>
+ 20c:	e426                	sd	s1,8(sp)
+ 20e:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 210:	85ca                	mv	a1,s2
+ 212:	16c000ef          	jal	37e <fstat>
+ 216:	892a                	mv	s2,a0
+  close(fd);
+ 218:	8526                	mv	a0,s1
+ 21a:	134000ef          	jal	34e <close>
+  return r;
+ 21e:	64a2                	ld	s1,8(sp)
+}
+ 220:	854a                	mv	a0,s2
+ 222:	60e2                	ld	ra,24(sp)
+ 224:	6442                	ld	s0,16(sp)
+ 226:	6902                	ld	s2,0(sp)
+ 228:	6105                	addi	sp,sp,32
+ 22a:	8082                	ret
+    return -1;
+ 22c:	597d                	li	s2,-1
+ 22e:	bfcd                	j	220 <stat+0x2a>
+
+0000000000000230 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 230:	1141                	addi	sp,sp,-16
+ 232:	e422                	sd	s0,8(sp)
+ 234:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 236:	00054683          	lbu	a3,0(a0)
+ 23a:	fd06879b          	addiw	a5,a3,-48
+ 23e:	0ff7f793          	zext.b	a5,a5
+ 242:	4625                	li	a2,9
+ 244:	02f66863          	bltu	a2,a5,274 <atoi+0x44>
+ 248:	872a                	mv	a4,a0
+  n = 0;
+ 24a:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 24c:	0705                	addi	a4,a4,1
+ 24e:	0025179b          	slliw	a5,a0,0x2
+ 252:	9fa9                	addw	a5,a5,a0
+ 254:	0017979b          	slliw	a5,a5,0x1
+ 258:	9fb5                	addw	a5,a5,a3
+ 25a:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 25e:	00074683          	lbu	a3,0(a4)
+ 262:	fd06879b          	addiw	a5,a3,-48
+ 266:	0ff7f793          	zext.b	a5,a5
+ 26a:	fef671e3          	bgeu	a2,a5,24c <atoi+0x1c>
+  return n;
+}
+ 26e:	6422                	ld	s0,8(sp)
+ 270:	0141                	addi	sp,sp,16
+ 272:	8082                	ret
+  n = 0;
+ 274:	4501                	li	a0,0
+ 276:	bfe5                	j	26e <atoi+0x3e>
+
+0000000000000278 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 278:	1141                	addi	sp,sp,-16
+ 27a:	e422                	sd	s0,8(sp)
+ 27c:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 27e:	02b57463          	bgeu	a0,a1,2a6 <memmove+0x2e>
+    while(n-- > 0)
+ 282:	00c05f63          	blez	a2,2a0 <memmove+0x28>
+ 286:	1602                	slli	a2,a2,0x20
+ 288:	9201                	srli	a2,a2,0x20
+ 28a:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 28e:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 290:	0585                	addi	a1,a1,1
+ 292:	0705                	addi	a4,a4,1
+ 294:	fff5c683          	lbu	a3,-1(a1)
+ 298:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 29c:	fef71ae3          	bne	a4,a5,290 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2a0:	6422                	ld	s0,8(sp)
+ 2a2:	0141                	addi	sp,sp,16
+ 2a4:	8082                	ret
+    dst += n;
+ 2a6:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2aa:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2ac:	fec05ae3          	blez	a2,2a0 <memmove+0x28>
+ 2b0:	fff6079b          	addiw	a5,a2,-1
+ 2b4:	1782                	slli	a5,a5,0x20
+ 2b6:	9381                	srli	a5,a5,0x20
+ 2b8:	fff7c793          	not	a5,a5
+ 2bc:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2be:	15fd                	addi	a1,a1,-1
+ 2c0:	177d                	addi	a4,a4,-1
+ 2c2:	0005c683          	lbu	a3,0(a1)
+ 2c6:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2ca:	fee79ae3          	bne	a5,a4,2be <memmove+0x46>
+ 2ce:	bfc9                	j	2a0 <memmove+0x28>
+
+00000000000002d0 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2d0:	1141                	addi	sp,sp,-16
+ 2d2:	e422                	sd	s0,8(sp)
+ 2d4:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 2d6:	ca05                	beqz	a2,306 <memcmp+0x36>
+ 2d8:	fff6069b          	addiw	a3,a2,-1
+ 2dc:	1682                	slli	a3,a3,0x20
+ 2de:	9281                	srli	a3,a3,0x20
+ 2e0:	0685                	addi	a3,a3,1
+ 2e2:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 2e4:	00054783          	lbu	a5,0(a0)
+ 2e8:	0005c703          	lbu	a4,0(a1)
+ 2ec:	00e79863          	bne	a5,a4,2fc <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 2f0:	0505                	addi	a0,a0,1
+    p2++;
+ 2f2:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 2f4:	fed518e3          	bne	a0,a3,2e4 <memcmp+0x14>
+  }
+  return 0;
+ 2f8:	4501                	li	a0,0
+ 2fa:	a019                	j	300 <memcmp+0x30>
+      return *p1 - *p2;
+ 2fc:	40e7853b          	subw	a0,a5,a4
+}
+ 300:	6422                	ld	s0,8(sp)
+ 302:	0141                	addi	sp,sp,16
+ 304:	8082                	ret
+  return 0;
+ 306:	4501                	li	a0,0
+ 308:	bfe5                	j	300 <memcmp+0x30>
+
+000000000000030a <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 30a:	1141                	addi	sp,sp,-16
+ 30c:	e406                	sd	ra,8(sp)
+ 30e:	e022                	sd	s0,0(sp)
+ 310:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 312:	f67ff0ef          	jal	278 <memmove>
+}
+ 316:	60a2                	ld	ra,8(sp)
+ 318:	6402                	ld	s0,0(sp)
+ 31a:	0141                	addi	sp,sp,16
+ 31c:	8082                	ret
+
+000000000000031e <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 31e:	4885                	li	a7,1
+ ecall
+ 320:	00000073          	ecall
+ ret
+ 324:	8082                	ret
+
+0000000000000326 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 326:	4889                	li	a7,2
+ ecall
+ 328:	00000073          	ecall
+ ret
+ 32c:	8082                	ret
+
+000000000000032e <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 32e:	488d                	li	a7,3
+ ecall
+ 330:	00000073          	ecall
+ ret
+ 334:	8082                	ret
+
+0000000000000336 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 336:	4891                	li	a7,4
+ ecall
+ 338:	00000073          	ecall
+ ret
+ 33c:	8082                	ret
+
+000000000000033e <read>:
+.global read
+read:
+ li a7, SYS_read
+ 33e:	4895                	li	a7,5
+ ecall
+ 340:	00000073          	ecall
+ ret
+ 344:	8082                	ret
+
+0000000000000346 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 346:	48c1                	li	a7,16
+ ecall
+ 348:	00000073          	ecall
+ ret
+ 34c:	8082                	ret
+
+000000000000034e <close>:
+.global close
+close:
+ li a7, SYS_close
+ 34e:	48d5                	li	a7,21
+ ecall
+ 350:	00000073          	ecall
+ ret
+ 354:	8082                	ret
+
+0000000000000356 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 356:	4899                	li	a7,6
+ ecall
+ 358:	00000073          	ecall
+ ret
+ 35c:	8082                	ret
+
+000000000000035e <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 35e:	489d                	li	a7,7
+ ecall
+ 360:	00000073          	ecall
+ ret
+ 364:	8082                	ret
+
+0000000000000366 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 366:	48bd                	li	a7,15
+ ecall
+ 368:	00000073          	ecall
+ ret
+ 36c:	8082                	ret
+
+000000000000036e <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 36e:	48c5                	li	a7,17
+ ecall
+ 370:	00000073          	ecall
+ ret
+ 374:	8082                	ret
+
+0000000000000376 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 376:	48c9                	li	a7,18
+ ecall
+ 378:	00000073          	ecall
+ ret
+ 37c:	8082                	ret
+
+000000000000037e <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 37e:	48a1                	li	a7,8
+ ecall
+ 380:	00000073          	ecall
+ ret
+ 384:	8082                	ret
+
+0000000000000386 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 386:	48cd                	li	a7,19
+ ecall
+ 388:	00000073          	ecall
+ ret
+ 38c:	8082                	ret
+
+000000000000038e <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 38e:	48d1                	li	a7,20
+ ecall
+ 390:	00000073          	ecall
+ ret
+ 394:	8082                	ret
+
+0000000000000396 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 396:	48a5                	li	a7,9
+ ecall
+ 398:	00000073          	ecall
+ ret
+ 39c:	8082                	ret
+
+000000000000039e <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 39e:	48a9                	li	a7,10
+ ecall
+ 3a0:	00000073          	ecall
+ ret
+ 3a4:	8082                	ret
+
+00000000000003a6 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3a6:	48ad                	li	a7,11
+ ecall
+ 3a8:	00000073          	ecall
+ ret
+ 3ac:	8082                	ret
+
+00000000000003ae <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3ae:	48b1                	li	a7,12
+ ecall
+ 3b0:	00000073          	ecall
+ ret
+ 3b4:	8082                	ret
+
+00000000000003b6 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3b6:	48b5                	li	a7,13
+ ecall
+ 3b8:	00000073          	ecall
+ ret
+ 3bc:	8082                	ret
+
+00000000000003be <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3be:	48b9                	li	a7,14
+ ecall
+ 3c0:	00000073          	ecall
+ ret
+ 3c4:	8082                	ret
+
+00000000000003c6 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 3c6:	48d9                	li	a7,22
+ ecall
+ 3c8:	00000073          	ecall
+ ret
+ 3cc:	8082                	ret
+
+00000000000003ce <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 3ce:	48dd                	li	a7,23
+ ecall
+ 3d0:	00000073          	ecall
+ ret
+ 3d4:	8082                	ret
+
+00000000000003d6 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 3d6:	48e1                	li	a7,24
+ ecall
+ 3d8:	00000073          	ecall
+ ret
+ 3dc:	8082                	ret
+
+00000000000003de <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3de:	1101                	addi	sp,sp,-32
+ 3e0:	ec06                	sd	ra,24(sp)
+ 3e2:	e822                	sd	s0,16(sp)
+ 3e4:	1000                	addi	s0,sp,32
+ 3e6:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 3ea:	4605                	li	a2,1
+ 3ec:	fef40593          	addi	a1,s0,-17
+ 3f0:	f57ff0ef          	jal	346 <write>
+}
+ 3f4:	60e2                	ld	ra,24(sp)
+ 3f6:	6442                	ld	s0,16(sp)
+ 3f8:	6105                	addi	sp,sp,32
+ 3fa:	8082                	ret
+
+00000000000003fc <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3fc:	7139                	addi	sp,sp,-64
+ 3fe:	fc06                	sd	ra,56(sp)
+ 400:	f822                	sd	s0,48(sp)
+ 402:	f426                	sd	s1,40(sp)
+ 404:	0080                	addi	s0,sp,64
+ 406:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 408:	c299                	beqz	a3,40e <printint+0x12>
+ 40a:	0805c963          	bltz	a1,49c <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 40e:	2581                	sext.w	a1,a1
+  neg = 0;
+ 410:	4881                	li	a7,0
+ 412:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 416:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 418:	2601                	sext.w	a2,a2
+ 41a:	00000517          	auipc	a0,0x0
+ 41e:	57650513          	addi	a0,a0,1398 # 990 <digits>
+ 422:	883a                	mv	a6,a4
+ 424:	2705                	addiw	a4,a4,1
+ 426:	02c5f7bb          	remuw	a5,a1,a2
+ 42a:	1782                	slli	a5,a5,0x20
+ 42c:	9381                	srli	a5,a5,0x20
+ 42e:	97aa                	add	a5,a5,a0
+ 430:	0007c783          	lbu	a5,0(a5)
+ 434:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 438:	0005879b          	sext.w	a5,a1
+ 43c:	02c5d5bb          	divuw	a1,a1,a2
+ 440:	0685                	addi	a3,a3,1
+ 442:	fec7f0e3          	bgeu	a5,a2,422 <printint+0x26>
+  if(neg)
+ 446:	00088c63          	beqz	a7,45e <printint+0x62>
+    buf[i++] = '-';
+ 44a:	fd070793          	addi	a5,a4,-48
+ 44e:	00878733          	add	a4,a5,s0
+ 452:	02d00793          	li	a5,45
+ 456:	fef70823          	sb	a5,-16(a4)
+ 45a:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 45e:	02e05a63          	blez	a4,492 <printint+0x96>
+ 462:	f04a                	sd	s2,32(sp)
+ 464:	ec4e                	sd	s3,24(sp)
+ 466:	fc040793          	addi	a5,s0,-64
+ 46a:	00e78933          	add	s2,a5,a4
+ 46e:	fff78993          	addi	s3,a5,-1
+ 472:	99ba                	add	s3,s3,a4
+ 474:	377d                	addiw	a4,a4,-1
+ 476:	1702                	slli	a4,a4,0x20
+ 478:	9301                	srli	a4,a4,0x20
+ 47a:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 47e:	fff94583          	lbu	a1,-1(s2)
+ 482:	8526                	mv	a0,s1
+ 484:	f5bff0ef          	jal	3de <putc>
+  while(--i >= 0)
+ 488:	197d                	addi	s2,s2,-1
+ 48a:	ff391ae3          	bne	s2,s3,47e <printint+0x82>
+ 48e:	7902                	ld	s2,32(sp)
+ 490:	69e2                	ld	s3,24(sp)
+}
+ 492:	70e2                	ld	ra,56(sp)
+ 494:	7442                	ld	s0,48(sp)
+ 496:	74a2                	ld	s1,40(sp)
+ 498:	6121                	addi	sp,sp,64
+ 49a:	8082                	ret
+    x = -xx;
+ 49c:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4a0:	4885                	li	a7,1
+    x = -xx;
+ 4a2:	bf85                	j	412 <printint+0x16>
+
+00000000000004a4 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 4a4:	711d                	addi	sp,sp,-96
+ 4a6:	ec86                	sd	ra,88(sp)
+ 4a8:	e8a2                	sd	s0,80(sp)
+ 4aa:	e0ca                	sd	s2,64(sp)
+ 4ac:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4ae:	0005c903          	lbu	s2,0(a1)
+ 4b2:	26090863          	beqz	s2,722 <vprintf+0x27e>
+ 4b6:	e4a6                	sd	s1,72(sp)
+ 4b8:	fc4e                	sd	s3,56(sp)
+ 4ba:	f852                	sd	s4,48(sp)
+ 4bc:	f456                	sd	s5,40(sp)
+ 4be:	f05a                	sd	s6,32(sp)
+ 4c0:	ec5e                	sd	s7,24(sp)
+ 4c2:	e862                	sd	s8,16(sp)
+ 4c4:	e466                	sd	s9,8(sp)
+ 4c6:	8b2a                	mv	s6,a0
+ 4c8:	8a2e                	mv	s4,a1
+ 4ca:	8bb2                	mv	s7,a2
+  state = 0;
+ 4cc:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 4ce:	4481                	li	s1,0
+ 4d0:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 4d2:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 4d6:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4da:	06c00c93          	li	s9,108
+ 4de:	a005                	j	4fe <vprintf+0x5a>
+        putc(fd, c0);
+ 4e0:	85ca                	mv	a1,s2
+ 4e2:	855a                	mv	a0,s6
+ 4e4:	efbff0ef          	jal	3de <putc>
+ 4e8:	a019                	j	4ee <vprintf+0x4a>
+    } else if(state == '%'){
+ 4ea:	03598263          	beq	s3,s5,50e <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 4ee:	2485                	addiw	s1,s1,1
+ 4f0:	8726                	mv	a4,s1
+ 4f2:	009a07b3          	add	a5,s4,s1
+ 4f6:	0007c903          	lbu	s2,0(a5)
+ 4fa:	20090c63          	beqz	s2,712 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 4fe:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 502:	fe0994e3          	bnez	s3,4ea <vprintf+0x46>
+      if(c0 == '%'){
+ 506:	fd579de3          	bne	a5,s5,4e0 <vprintf+0x3c>
+        state = '%';
+ 50a:	89be                	mv	s3,a5
+ 50c:	b7cd                	j	4ee <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 50e:	00ea06b3          	add	a3,s4,a4
+ 512:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 516:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 518:	c681                	beqz	a3,520 <vprintf+0x7c>
+ 51a:	9752                	add	a4,a4,s4
+ 51c:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 520:	03878f63          	beq	a5,s8,55e <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 524:	05978963          	beq	a5,s9,576 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 528:	07500713          	li	a4,117
+ 52c:	0ee78363          	beq	a5,a4,612 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 530:	07800713          	li	a4,120
+ 534:	12e78563          	beq	a5,a4,65e <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 538:	07000713          	li	a4,112
+ 53c:	14e78a63          	beq	a5,a4,690 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 540:	07300713          	li	a4,115
+ 544:	18e78a63          	beq	a5,a4,6d8 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 548:	02500713          	li	a4,37
+ 54c:	04e79563          	bne	a5,a4,596 <vprintf+0xf2>
+        putc(fd, '%');
+ 550:	02500593          	li	a1,37
+ 554:	855a                	mv	a0,s6
+ 556:	e89ff0ef          	jal	3de <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 55a:	4981                	li	s3,0
+ 55c:	bf49                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 55e:	008b8913          	addi	s2,s7,8
+ 562:	4685                	li	a3,1
+ 564:	4629                	li	a2,10
+ 566:	000ba583          	lw	a1,0(s7)
+ 56a:	855a                	mv	a0,s6
+ 56c:	e91ff0ef          	jal	3fc <printint>
+ 570:	8bca                	mv	s7,s2
+      state = 0;
+ 572:	4981                	li	s3,0
+ 574:	bfad                	j	4ee <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 576:	06400793          	li	a5,100
+ 57a:	02f68963          	beq	a3,a5,5ac <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 57e:	06c00793          	li	a5,108
+ 582:	04f68263          	beq	a3,a5,5c6 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 586:	07500793          	li	a5,117
+ 58a:	0af68063          	beq	a3,a5,62a <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 58e:	07800793          	li	a5,120
+ 592:	0ef68263          	beq	a3,a5,676 <vprintf+0x1d2>
+        putc(fd, '%');
+ 596:	02500593          	li	a1,37
+ 59a:	855a                	mv	a0,s6
+ 59c:	e43ff0ef          	jal	3de <putc>
+        putc(fd, c0);
+ 5a0:	85ca                	mv	a1,s2
+ 5a2:	855a                	mv	a0,s6
+ 5a4:	e3bff0ef          	jal	3de <putc>
+      state = 0;
+ 5a8:	4981                	li	s3,0
+ 5aa:	b791                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5ac:	008b8913          	addi	s2,s7,8
+ 5b0:	4685                	li	a3,1
+ 5b2:	4629                	li	a2,10
+ 5b4:	000ba583          	lw	a1,0(s7)
+ 5b8:	855a                	mv	a0,s6
+ 5ba:	e43ff0ef          	jal	3fc <printint>
+        i += 1;
+ 5be:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5c0:	8bca                	mv	s7,s2
+      state = 0;
+ 5c2:	4981                	li	s3,0
+        i += 1;
+ 5c4:	b72d                	j	4ee <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 5c6:	06400793          	li	a5,100
+ 5ca:	02f60763          	beq	a2,a5,5f8 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 5ce:	07500793          	li	a5,117
+ 5d2:	06f60963          	beq	a2,a5,644 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 5d6:	07800793          	li	a5,120
+ 5da:	faf61ee3          	bne	a2,a5,596 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5de:	008b8913          	addi	s2,s7,8
+ 5e2:	4681                	li	a3,0
+ 5e4:	4641                	li	a2,16
+ 5e6:	000ba583          	lw	a1,0(s7)
+ 5ea:	855a                	mv	a0,s6
+ 5ec:	e11ff0ef          	jal	3fc <printint>
+        i += 2;
+ 5f0:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5f2:	8bca                	mv	s7,s2
+      state = 0;
+ 5f4:	4981                	li	s3,0
+        i += 2;
+ 5f6:	bde5                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5f8:	008b8913          	addi	s2,s7,8
+ 5fc:	4685                	li	a3,1
+ 5fe:	4629                	li	a2,10
+ 600:	000ba583          	lw	a1,0(s7)
+ 604:	855a                	mv	a0,s6
+ 606:	df7ff0ef          	jal	3fc <printint>
+        i += 2;
+ 60a:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 60c:	8bca                	mv	s7,s2
+      state = 0;
+ 60e:	4981                	li	s3,0
+        i += 2;
+ 610:	bdf9                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 612:	008b8913          	addi	s2,s7,8
+ 616:	4681                	li	a3,0
+ 618:	4629                	li	a2,10
+ 61a:	000ba583          	lw	a1,0(s7)
+ 61e:	855a                	mv	a0,s6
+ 620:	dddff0ef          	jal	3fc <printint>
+ 624:	8bca                	mv	s7,s2
+      state = 0;
+ 626:	4981                	li	s3,0
+ 628:	b5d9                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 62a:	008b8913          	addi	s2,s7,8
+ 62e:	4681                	li	a3,0
+ 630:	4629                	li	a2,10
+ 632:	000ba583          	lw	a1,0(s7)
+ 636:	855a                	mv	a0,s6
+ 638:	dc5ff0ef          	jal	3fc <printint>
+        i += 1;
+ 63c:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 63e:	8bca                	mv	s7,s2
+      state = 0;
+ 640:	4981                	li	s3,0
+        i += 1;
+ 642:	b575                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 644:	008b8913          	addi	s2,s7,8
+ 648:	4681                	li	a3,0
+ 64a:	4629                	li	a2,10
+ 64c:	000ba583          	lw	a1,0(s7)
+ 650:	855a                	mv	a0,s6
+ 652:	dabff0ef          	jal	3fc <printint>
+        i += 2;
+ 656:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 658:	8bca                	mv	s7,s2
+      state = 0;
+ 65a:	4981                	li	s3,0
+        i += 2;
+ 65c:	bd49                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 65e:	008b8913          	addi	s2,s7,8
+ 662:	4681                	li	a3,0
+ 664:	4641                	li	a2,16
+ 666:	000ba583          	lw	a1,0(s7)
+ 66a:	855a                	mv	a0,s6
+ 66c:	d91ff0ef          	jal	3fc <printint>
+ 670:	8bca                	mv	s7,s2
+      state = 0;
+ 672:	4981                	li	s3,0
+ 674:	bdad                	j	4ee <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 676:	008b8913          	addi	s2,s7,8
+ 67a:	4681                	li	a3,0
+ 67c:	4641                	li	a2,16
+ 67e:	000ba583          	lw	a1,0(s7)
+ 682:	855a                	mv	a0,s6
+ 684:	d79ff0ef          	jal	3fc <printint>
+        i += 1;
+ 688:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 68a:	8bca                	mv	s7,s2
+      state = 0;
+ 68c:	4981                	li	s3,0
+        i += 1;
+ 68e:	b585                	j	4ee <vprintf+0x4a>
+ 690:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 692:	008b8d13          	addi	s10,s7,8
+ 696:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 69a:	03000593          	li	a1,48
+ 69e:	855a                	mv	a0,s6
+ 6a0:	d3fff0ef          	jal	3de <putc>
+  putc(fd, 'x');
+ 6a4:	07800593          	li	a1,120
+ 6a8:	855a                	mv	a0,s6
+ 6aa:	d35ff0ef          	jal	3de <putc>
+ 6ae:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 6b0:	00000b97          	auipc	s7,0x0
+ 6b4:	2e0b8b93          	addi	s7,s7,736 # 990 <digits>
+ 6b8:	03c9d793          	srli	a5,s3,0x3c
+ 6bc:	97de                	add	a5,a5,s7
+ 6be:	0007c583          	lbu	a1,0(a5)
+ 6c2:	855a                	mv	a0,s6
+ 6c4:	d1bff0ef          	jal	3de <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 6c8:	0992                	slli	s3,s3,0x4
+ 6ca:	397d                	addiw	s2,s2,-1
+ 6cc:	fe0916e3          	bnez	s2,6b8 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 6d0:	8bea                	mv	s7,s10
+      state = 0;
+ 6d2:	4981                	li	s3,0
+ 6d4:	6d02                	ld	s10,0(sp)
+ 6d6:	bd21                	j	4ee <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 6d8:	008b8993          	addi	s3,s7,8
+ 6dc:	000bb903          	ld	s2,0(s7)
+ 6e0:	00090f63          	beqz	s2,6fe <vprintf+0x25a>
+        for(; *s; s++)
+ 6e4:	00094583          	lbu	a1,0(s2)
+ 6e8:	c195                	beqz	a1,70c <vprintf+0x268>
+          putc(fd, *s);
+ 6ea:	855a                	mv	a0,s6
+ 6ec:	cf3ff0ef          	jal	3de <putc>
+        for(; *s; s++)
+ 6f0:	0905                	addi	s2,s2,1
+ 6f2:	00094583          	lbu	a1,0(s2)
+ 6f6:	f9f5                	bnez	a1,6ea <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6f8:	8bce                	mv	s7,s3
+      state = 0;
+ 6fa:	4981                	li	s3,0
+ 6fc:	bbcd                	j	4ee <vprintf+0x4a>
+          s = "(null)";
+ 6fe:	00000917          	auipc	s2,0x0
+ 702:	28a90913          	addi	s2,s2,650 # 988 <malloc+0x17e>
+        for(; *s; s++)
+ 706:	02800593          	li	a1,40
+ 70a:	b7c5                	j	6ea <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 70c:	8bce                	mv	s7,s3
+      state = 0;
+ 70e:	4981                	li	s3,0
+ 710:	bbf9                	j	4ee <vprintf+0x4a>
+ 712:	64a6                	ld	s1,72(sp)
+ 714:	79e2                	ld	s3,56(sp)
+ 716:	7a42                	ld	s4,48(sp)
+ 718:	7aa2                	ld	s5,40(sp)
+ 71a:	7b02                	ld	s6,32(sp)
+ 71c:	6be2                	ld	s7,24(sp)
+ 71e:	6c42                	ld	s8,16(sp)
+ 720:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 722:	60e6                	ld	ra,88(sp)
+ 724:	6446                	ld	s0,80(sp)
+ 726:	6906                	ld	s2,64(sp)
+ 728:	6125                	addi	sp,sp,96
+ 72a:	8082                	ret
+
+000000000000072c <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 72c:	715d                	addi	sp,sp,-80
+ 72e:	ec06                	sd	ra,24(sp)
+ 730:	e822                	sd	s0,16(sp)
+ 732:	1000                	addi	s0,sp,32
+ 734:	e010                	sd	a2,0(s0)
+ 736:	e414                	sd	a3,8(s0)
+ 738:	e818                	sd	a4,16(s0)
+ 73a:	ec1c                	sd	a5,24(s0)
+ 73c:	03043023          	sd	a6,32(s0)
+ 740:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 744:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 748:	8622                	mv	a2,s0
+ 74a:	d5bff0ef          	jal	4a4 <vprintf>
+}
+ 74e:	60e2                	ld	ra,24(sp)
+ 750:	6442                	ld	s0,16(sp)
+ 752:	6161                	addi	sp,sp,80
+ 754:	8082                	ret
+
+0000000000000756 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 756:	711d                	addi	sp,sp,-96
+ 758:	ec06                	sd	ra,24(sp)
+ 75a:	e822                	sd	s0,16(sp)
+ 75c:	1000                	addi	s0,sp,32
+ 75e:	e40c                	sd	a1,8(s0)
+ 760:	e810                	sd	a2,16(s0)
+ 762:	ec14                	sd	a3,24(s0)
+ 764:	f018                	sd	a4,32(s0)
+ 766:	f41c                	sd	a5,40(s0)
+ 768:	03043823          	sd	a6,48(s0)
+ 76c:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 770:	00840613          	addi	a2,s0,8
+ 774:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 778:	85aa                	mv	a1,a0
+ 77a:	4505                	li	a0,1
+ 77c:	d29ff0ef          	jal	4a4 <vprintf>
+}
+ 780:	60e2                	ld	ra,24(sp)
+ 782:	6442                	ld	s0,16(sp)
+ 784:	6125                	addi	sp,sp,96
+ 786:	8082                	ret
+
+0000000000000788 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 788:	1141                	addi	sp,sp,-16
+ 78a:	e422                	sd	s0,8(sp)
+ 78c:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 78e:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 792:	00001797          	auipc	a5,0x1
+ 796:	87e7b783          	ld	a5,-1922(a5) # 1010 <freep>
+ 79a:	a02d                	j	7c4 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 79c:	4618                	lw	a4,8(a2)
+ 79e:	9f2d                	addw	a4,a4,a1
+ 7a0:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7a4:	6398                	ld	a4,0(a5)
+ 7a6:	6310                	ld	a2,0(a4)
+ 7a8:	a83d                	j	7e6 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 7aa:	ff852703          	lw	a4,-8(a0)
+ 7ae:	9f31                	addw	a4,a4,a2
+ 7b0:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 7b2:	ff053683          	ld	a3,-16(a0)
+ 7b6:	a091                	j	7fa <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7b8:	6398                	ld	a4,0(a5)
+ 7ba:	00e7e463          	bltu	a5,a4,7c2 <free+0x3a>
+ 7be:	00e6ea63          	bltu	a3,a4,7d2 <free+0x4a>
+{
+ 7c2:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7c4:	fed7fae3          	bgeu	a5,a3,7b8 <free+0x30>
+ 7c8:	6398                	ld	a4,0(a5)
+ 7ca:	00e6e463          	bltu	a3,a4,7d2 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7ce:	fee7eae3          	bltu	a5,a4,7c2 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 7d2:	ff852583          	lw	a1,-8(a0)
+ 7d6:	6390                	ld	a2,0(a5)
+ 7d8:	02059813          	slli	a6,a1,0x20
+ 7dc:	01c85713          	srli	a4,a6,0x1c
+ 7e0:	9736                	add	a4,a4,a3
+ 7e2:	fae60de3          	beq	a2,a4,79c <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7e6:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 7ea:	4790                	lw	a2,8(a5)
+ 7ec:	02061593          	slli	a1,a2,0x20
+ 7f0:	01c5d713          	srli	a4,a1,0x1c
+ 7f4:	973e                	add	a4,a4,a5
+ 7f6:	fae68ae3          	beq	a3,a4,7aa <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7fa:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7fc:	00001717          	auipc	a4,0x1
+ 800:	80f73a23          	sd	a5,-2028(a4) # 1010 <freep>
+}
+ 804:	6422                	ld	s0,8(sp)
+ 806:	0141                	addi	sp,sp,16
+ 808:	8082                	ret
+
+000000000000080a <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 80a:	7139                	addi	sp,sp,-64
+ 80c:	fc06                	sd	ra,56(sp)
+ 80e:	f822                	sd	s0,48(sp)
+ 810:	f426                	sd	s1,40(sp)
+ 812:	ec4e                	sd	s3,24(sp)
+ 814:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 816:	02051493          	slli	s1,a0,0x20
+ 81a:	9081                	srli	s1,s1,0x20
+ 81c:	04bd                	addi	s1,s1,15
+ 81e:	8091                	srli	s1,s1,0x4
+ 820:	0014899b          	addiw	s3,s1,1
+ 824:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 826:	00000517          	auipc	a0,0x0
+ 82a:	7ea53503          	ld	a0,2026(a0) # 1010 <freep>
+ 82e:	c915                	beqz	a0,862 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 830:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 832:	4798                	lw	a4,8(a5)
+ 834:	08977a63          	bgeu	a4,s1,8c8 <malloc+0xbe>
+ 838:	f04a                	sd	s2,32(sp)
+ 83a:	e852                	sd	s4,16(sp)
+ 83c:	e456                	sd	s5,8(sp)
+ 83e:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 840:	8a4e                	mv	s4,s3
+ 842:	0009871b          	sext.w	a4,s3
+ 846:	6685                	lui	a3,0x1
+ 848:	00d77363          	bgeu	a4,a3,84e <malloc+0x44>
+ 84c:	6a05                	lui	s4,0x1
+ 84e:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 852:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 856:	00000917          	auipc	s2,0x0
+ 85a:	7ba90913          	addi	s2,s2,1978 # 1010 <freep>
+  if(p == (char*)-1)
+ 85e:	5afd                	li	s5,-1
+ 860:	a081                	j	8a0 <malloc+0x96>
+ 862:	f04a                	sd	s2,32(sp)
+ 864:	e852                	sd	s4,16(sp)
+ 866:	e456                	sd	s5,8(sp)
+ 868:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 86a:	00000797          	auipc	a5,0x0
+ 86e:	7b678793          	addi	a5,a5,1974 # 1020 <base>
+ 872:	00000717          	auipc	a4,0x0
+ 876:	78f73f23          	sd	a5,1950(a4) # 1010 <freep>
+ 87a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 87c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 880:	b7c1                	j	840 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 882:	6398                	ld	a4,0(a5)
+ 884:	e118                	sd	a4,0(a0)
+ 886:	a8a9                	j	8e0 <malloc+0xd6>
+  hp->s.size = nu;
+ 888:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 88c:	0541                	addi	a0,a0,16
+ 88e:	efbff0ef          	jal	788 <free>
+  return freep;
+ 892:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 896:	c12d                	beqz	a0,8f8 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 898:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 89a:	4798                	lw	a4,8(a5)
+ 89c:	02977263          	bgeu	a4,s1,8c0 <malloc+0xb6>
+    if(p == freep)
+ 8a0:	00093703          	ld	a4,0(s2)
+ 8a4:	853e                	mv	a0,a5
+ 8a6:	fef719e3          	bne	a4,a5,898 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 8aa:	8552                	mv	a0,s4
+ 8ac:	b03ff0ef          	jal	3ae <sbrk>
+  if(p == (char*)-1)
+ 8b0:	fd551ce3          	bne	a0,s5,888 <malloc+0x7e>
+        return 0;
+ 8b4:	4501                	li	a0,0
+ 8b6:	7902                	ld	s2,32(sp)
+ 8b8:	6a42                	ld	s4,16(sp)
+ 8ba:	6aa2                	ld	s5,8(sp)
+ 8bc:	6b02                	ld	s6,0(sp)
+ 8be:	a03d                	j	8ec <malloc+0xe2>
+ 8c0:	7902                	ld	s2,32(sp)
+ 8c2:	6a42                	ld	s4,16(sp)
+ 8c4:	6aa2                	ld	s5,8(sp)
+ 8c6:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 8c8:	fae48de3          	beq	s1,a4,882 <malloc+0x78>
+        p->s.size -= nunits;
+ 8cc:	4137073b          	subw	a4,a4,s3
+ 8d0:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 8d2:	02071693          	slli	a3,a4,0x20
+ 8d6:	01c6d713          	srli	a4,a3,0x1c
+ 8da:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 8dc:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 8e0:	00000717          	auipc	a4,0x0
+ 8e4:	72a73823          	sd	a0,1840(a4) # 1010 <freep>
+      return (void*)(p + 1);
+ 8e8:	01078513          	addi	a0,a5,16
+  }
+}
+ 8ec:	70e2                	ld	ra,56(sp)
+ 8ee:	7442                	ld	s0,48(sp)
+ 8f0:	74a2                	ld	s1,40(sp)
+ 8f2:	69e2                	ld	s3,24(sp)
+ 8f4:	6121                	addi	sp,sp,64
+ 8f6:	8082                	ret
+ 8f8:	7902                	ld	s2,32(sp)
+ 8fa:	6a42                	ld	s4,16(sp)
+ 8fc:	6aa2                	ld	s5,8(sp)
+ 8fe:	6b02                	ld	s6,0(sp)
+ 900:	b7f5                	j	8ec <malloc+0xe2>
diff --git a/user/init.c b/user/init.c
new file mode 100644
index 0000000..e0a5689
--- /dev/null
+++ b/user/init.c
@@ -0,0 +1,54 @@
+// init: The initial user-level program
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/spinlock.h"
+#include "kernel/sleeplock.h"
+#include "kernel/fs.h"
+#include "kernel/file.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+    mknod("console", CONSOLE, 0);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  dup(0);  // stderr
+
+  for(;;){
+    printf("init: starting sh\n");
+    pid = fork();
+    if(pid < 0){
+      printf("init: fork failed\n");
+      exit(1);
+    }
+    if(pid == 0){
+      exec("sh", argv);
+      printf("init: exec sh failed\n");
+      exit(1);
+    }
+
+    for(;;){
+      // this call to wait() returns if the shell exits,
+      // or if a parentless process exits.
+      wpid = wait((int *) 0);
+      if(wpid == pid){
+        // the shell exited; restart it.
+        break;
+      } else if(wpid < 0){
+        printf("init: wait returned an error\n");
+        exit(1);
+      } else {
+        // it was a parentless process; do nothing.
+      }
+    }
+  }
+}
diff --git a/user/init.d b/user/init.d
new file mode 100644
index 0000000..82d3c33
--- /dev/null
+++ b/user/init.d
@@ -0,0 +1,2 @@
+user/init.o: user/init.c kernel/types.h kernel/stat.h kernel/spinlock.h \
+ kernel/sleeplock.h kernel/fs.h kernel/file.h user/user.h kernel/fcntl.h
diff --git a/user/init.o b/user/init.o
new file mode 100644
index 0000000..4eddcf2
Binary files /dev/null and b/user/init.o differ
diff --git a/user/init.sym b/user/init.sym
new file mode 100644
index 0000000..1c32805
--- /dev/null
+++ b/user/init.sym
@@ -0,0 +1,67 @@
+0000000000000000 .text
+0000000000000908 .rodata
+0000000000001000 .data
+0000000000001010 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 init.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003de putc
+00000000000003fc printint
+0000000000000990 digits
+0000000000000000 umalloc.c
+0000000000001010 freep
+0000000000001020 base
+00000000000000ce strcpy
+0000000000000756 printf
+0000000000001000 argv
+0000000000000278 memmove
+000000000000036e mknod
+00000000000003ce trace
+0000000000000186 gets
+00000000000003a6 getpid
+00000000000003c6 hello
+000000000000030a memcpy
+000000000000080a malloc
+00000000000003b6 sleep
+00000000000003d6 sysinfo
+0000000000000336 pipe
+0000000000000346 write
+000000000000037e fstat
+000000000000072c fprintf
+0000000000000356 kill
+00000000000004a4 vprintf
+0000000000000396 chdir
+000000000000035e exec
+000000000000032e wait
+000000000000033e read
+0000000000000376 unlink
+00000000000002d0 memcmp
+000000000000031e fork
+00000000000003ae sbrk
+00000000000003be uptime
+0000000000000140 memset
+0000000000000000 main
+00000000000000ea strcmp
+000000000000039e dup
+00000000000001f6 stat
+0000000000000386 link
+0000000000000326 exit
+00000000000000bc start
+0000000000000230 atoi
+0000000000000116 strlen
+0000000000000366 open
+0000000000000162 strchr
+000000000000038e mkdir
+000000000000034e close
+0000000000000788 free
diff --git a/user/initcode b/user/initcode
new file mode 100644
index 0000000..ce82e86
Binary files /dev/null and b/user/initcode differ
diff --git a/user/initcode.S b/user/initcode.S
new file mode 100644
index 0000000..ba44ff5
--- /dev/null
+++ b/user/initcode.S
@@ -0,0 +1,28 @@
+# Initial process that execs /init.
+# This code runs in user space.
+
+#include "syscall.h"
+
+# exec(init, argv)
+.globl start
+start:
+        la a0, init
+        la a1, argv
+        li a7, SYS_exec
+        ecall
+
+# for(;;) exit();
+exit:
+        li a7, SYS_exit
+        ecall
+        jal exit
+
+# char init[] = "/init\0";
+init:
+  .string "/init\0"
+
+# char *argv[] = { init, 0 };
+.p2align 2
+argv:
+  .quad init
+  .quad 0
diff --git a/user/initcode.asm b/user/initcode.asm
new file mode 100644
index 0000000..00b7104
--- /dev/null
+++ b/user/initcode.asm
@@ -0,0 +1,41 @@
+
+user/initcode.o:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <start>:
+#include "syscall.h"
+
+# exec(init, argv)
+.globl start
+start:
+        la a0, init
+   0:	00000517          	auipc	a0,0x0
+   4:	00050513          	mv	a0,a0
+        la a1, argv
+   8:	00000597          	auipc	a1,0x0
+   c:	00058593          	mv	a1,a1
+        li a7, SYS_exec
+  10:	00700893          	li	a7,7
+        ecall
+  14:	00000073          	ecall
+
+0000000000000018 <exit>:
+
+# for(;;) exit();
+exit:
+        li a7, SYS_exit
+  18:	00200893          	li	a7,2
+        ecall
+  1c:	00000073          	ecall
+        jal exit
+  20:	ff9ff0ef          	jal	18 <exit>
+
+0000000000000024 <init>:
+  24:	696e692f          	.word	0x696e692f
+  28:	Address 0x28 is out of bounds.
+
+
+000000000000002b <argv>:
+	...
diff --git a/user/initcode.d b/user/initcode.d
new file mode 100644
index 0000000..1cc7dff
--- /dev/null
+++ b/user/initcode.d
@@ -0,0 +1 @@
+user/initcode.o: user/initcode.S kernel/syscall.h
diff --git a/user/initcode.o b/user/initcode.o
new file mode 100644
index 0000000..e6e156f
Binary files /dev/null and b/user/initcode.o differ
diff --git a/user/initcode.out b/user/initcode.out
new file mode 100644
index 0000000..e031ac1
Binary files /dev/null and b/user/initcode.out differ
diff --git a/user/kill.asm b/user/kill.asm
new file mode 100644
index 0000000..d26860f
--- /dev/null
+++ b/user/kill.asm
@@ -0,0 +1,1485 @@
+
+user/_kill:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+   8:	4785                	li	a5,1
+   a:	02a7d963          	bge	a5,a0,3c <main+0x3c>
+   e:	e426                	sd	s1,8(sp)
+  10:	e04a                	sd	s2,0(sp)
+  12:	00858493          	addi	s1,a1,8
+  16:	ffe5091b          	addiw	s2,a0,-2
+  1a:	02091793          	slli	a5,s2,0x20
+  1e:	01d7d913          	srli	s2,a5,0x1d
+  22:	05c1                	addi	a1,a1,16
+  24:	992e                	add	s2,s2,a1
+    fprintf(2, "usage: kill pid...\n");
+    exit(1);
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  26:	6088                	ld	a0,0(s1)
+  28:	1a0000ef          	jal	1c8 <atoi>
+  2c:	2c2000ef          	jal	2ee <kill>
+  for(i=1; i<argc; i++)
+  30:	04a1                	addi	s1,s1,8
+  32:	ff249ae3          	bne	s1,s2,26 <main+0x26>
+  exit(0);
+  36:	4501                	li	a0,0
+  38:	286000ef          	jal	2be <exit>
+  3c:	e426                	sd	s1,8(sp)
+  3e:	e04a                	sd	s2,0(sp)
+    fprintf(2, "usage: kill pid...\n");
+  40:	00001597          	auipc	a1,0x1
+  44:	86058593          	addi	a1,a1,-1952 # 8a0 <malloc+0xfe>
+  48:	4509                	li	a0,2
+  4a:	67a000ef          	jal	6c4 <fprintf>
+    exit(1);
+  4e:	4505                	li	a0,1
+  50:	26e000ef          	jal	2be <exit>
+
+0000000000000054 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  54:	1141                	addi	sp,sp,-16
+  56:	e406                	sd	ra,8(sp)
+  58:	e022                	sd	s0,0(sp)
+  5a:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  5c:	fa5ff0ef          	jal	0 <main>
+  exit(0);
+  60:	4501                	li	a0,0
+  62:	25c000ef          	jal	2be <exit>
+
+0000000000000066 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  66:	1141                	addi	sp,sp,-16
+  68:	e422                	sd	s0,8(sp)
+  6a:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  6c:	87aa                	mv	a5,a0
+  6e:	0585                	addi	a1,a1,1
+  70:	0785                	addi	a5,a5,1
+  72:	fff5c703          	lbu	a4,-1(a1)
+  76:	fee78fa3          	sb	a4,-1(a5)
+  7a:	fb75                	bnez	a4,6e <strcpy+0x8>
+    ;
+  return os;
+}
+  7c:	6422                	ld	s0,8(sp)
+  7e:	0141                	addi	sp,sp,16
+  80:	8082                	ret
+
+0000000000000082 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  82:	1141                	addi	sp,sp,-16
+  84:	e422                	sd	s0,8(sp)
+  86:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  88:	00054783          	lbu	a5,0(a0)
+  8c:	cb91                	beqz	a5,a0 <strcmp+0x1e>
+  8e:	0005c703          	lbu	a4,0(a1)
+  92:	00f71763          	bne	a4,a5,a0 <strcmp+0x1e>
+    p++, q++;
+  96:	0505                	addi	a0,a0,1
+  98:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  9a:	00054783          	lbu	a5,0(a0)
+  9e:	fbe5                	bnez	a5,8e <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  a0:	0005c503          	lbu	a0,0(a1)
+}
+  a4:	40a7853b          	subw	a0,a5,a0
+  a8:	6422                	ld	s0,8(sp)
+  aa:	0141                	addi	sp,sp,16
+  ac:	8082                	ret
+
+00000000000000ae <strlen>:
+
+uint
+strlen(const char *s)
+{
+  ae:	1141                	addi	sp,sp,-16
+  b0:	e422                	sd	s0,8(sp)
+  b2:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  b4:	00054783          	lbu	a5,0(a0)
+  b8:	cf91                	beqz	a5,d4 <strlen+0x26>
+  ba:	0505                	addi	a0,a0,1
+  bc:	87aa                	mv	a5,a0
+  be:	86be                	mv	a3,a5
+  c0:	0785                	addi	a5,a5,1
+  c2:	fff7c703          	lbu	a4,-1(a5)
+  c6:	ff65                	bnez	a4,be <strlen+0x10>
+  c8:	40a6853b          	subw	a0,a3,a0
+  cc:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  ce:	6422                	ld	s0,8(sp)
+  d0:	0141                	addi	sp,sp,16
+  d2:	8082                	ret
+  for(n = 0; s[n]; n++)
+  d4:	4501                	li	a0,0
+  d6:	bfe5                	j	ce <strlen+0x20>
+
+00000000000000d8 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  d8:	1141                	addi	sp,sp,-16
+  da:	e422                	sd	s0,8(sp)
+  dc:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  de:	ca19                	beqz	a2,f4 <memset+0x1c>
+  e0:	87aa                	mv	a5,a0
+  e2:	1602                	slli	a2,a2,0x20
+  e4:	9201                	srli	a2,a2,0x20
+  e6:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  ea:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  ee:	0785                	addi	a5,a5,1
+  f0:	fee79de3          	bne	a5,a4,ea <memset+0x12>
+  }
+  return dst;
+}
+  f4:	6422                	ld	s0,8(sp)
+  f6:	0141                	addi	sp,sp,16
+  f8:	8082                	ret
+
+00000000000000fa <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  fa:	1141                	addi	sp,sp,-16
+  fc:	e422                	sd	s0,8(sp)
+  fe:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 100:	00054783          	lbu	a5,0(a0)
+ 104:	cb99                	beqz	a5,11a <strchr+0x20>
+    if(*s == c)
+ 106:	00f58763          	beq	a1,a5,114 <strchr+0x1a>
+  for(; *s; s++)
+ 10a:	0505                	addi	a0,a0,1
+ 10c:	00054783          	lbu	a5,0(a0)
+ 110:	fbfd                	bnez	a5,106 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 112:	4501                	li	a0,0
+}
+ 114:	6422                	ld	s0,8(sp)
+ 116:	0141                	addi	sp,sp,16
+ 118:	8082                	ret
+  return 0;
+ 11a:	4501                	li	a0,0
+ 11c:	bfe5                	j	114 <strchr+0x1a>
+
+000000000000011e <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 11e:	711d                	addi	sp,sp,-96
+ 120:	ec86                	sd	ra,88(sp)
+ 122:	e8a2                	sd	s0,80(sp)
+ 124:	e4a6                	sd	s1,72(sp)
+ 126:	e0ca                	sd	s2,64(sp)
+ 128:	fc4e                	sd	s3,56(sp)
+ 12a:	f852                	sd	s4,48(sp)
+ 12c:	f456                	sd	s5,40(sp)
+ 12e:	f05a                	sd	s6,32(sp)
+ 130:	ec5e                	sd	s7,24(sp)
+ 132:	1080                	addi	s0,sp,96
+ 134:	8baa                	mv	s7,a0
+ 136:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 138:	892a                	mv	s2,a0
+ 13a:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 13c:	4aa9                	li	s5,10
+ 13e:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 140:	89a6                	mv	s3,s1
+ 142:	2485                	addiw	s1,s1,1
+ 144:	0344d663          	bge	s1,s4,170 <gets+0x52>
+    cc = read(0, &c, 1);
+ 148:	4605                	li	a2,1
+ 14a:	faf40593          	addi	a1,s0,-81
+ 14e:	4501                	li	a0,0
+ 150:	186000ef          	jal	2d6 <read>
+    if(cc < 1)
+ 154:	00a05e63          	blez	a0,170 <gets+0x52>
+    buf[i++] = c;
+ 158:	faf44783          	lbu	a5,-81(s0)
+ 15c:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 160:	01578763          	beq	a5,s5,16e <gets+0x50>
+ 164:	0905                	addi	s2,s2,1
+ 166:	fd679de3          	bne	a5,s6,140 <gets+0x22>
+    buf[i++] = c;
+ 16a:	89a6                	mv	s3,s1
+ 16c:	a011                	j	170 <gets+0x52>
+ 16e:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 170:	99de                	add	s3,s3,s7
+ 172:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 176:	855e                	mv	a0,s7
+ 178:	60e6                	ld	ra,88(sp)
+ 17a:	6446                	ld	s0,80(sp)
+ 17c:	64a6                	ld	s1,72(sp)
+ 17e:	6906                	ld	s2,64(sp)
+ 180:	79e2                	ld	s3,56(sp)
+ 182:	7a42                	ld	s4,48(sp)
+ 184:	7aa2                	ld	s5,40(sp)
+ 186:	7b02                	ld	s6,32(sp)
+ 188:	6be2                	ld	s7,24(sp)
+ 18a:	6125                	addi	sp,sp,96
+ 18c:	8082                	ret
+
+000000000000018e <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 18e:	1101                	addi	sp,sp,-32
+ 190:	ec06                	sd	ra,24(sp)
+ 192:	e822                	sd	s0,16(sp)
+ 194:	e04a                	sd	s2,0(sp)
+ 196:	1000                	addi	s0,sp,32
+ 198:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 19a:	4581                	li	a1,0
+ 19c:	162000ef          	jal	2fe <open>
+  if(fd < 0)
+ 1a0:	02054263          	bltz	a0,1c4 <stat+0x36>
+ 1a4:	e426                	sd	s1,8(sp)
+ 1a6:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1a8:	85ca                	mv	a1,s2
+ 1aa:	16c000ef          	jal	316 <fstat>
+ 1ae:	892a                	mv	s2,a0
+  close(fd);
+ 1b0:	8526                	mv	a0,s1
+ 1b2:	134000ef          	jal	2e6 <close>
+  return r;
+ 1b6:	64a2                	ld	s1,8(sp)
+}
+ 1b8:	854a                	mv	a0,s2
+ 1ba:	60e2                	ld	ra,24(sp)
+ 1bc:	6442                	ld	s0,16(sp)
+ 1be:	6902                	ld	s2,0(sp)
+ 1c0:	6105                	addi	sp,sp,32
+ 1c2:	8082                	ret
+    return -1;
+ 1c4:	597d                	li	s2,-1
+ 1c6:	bfcd                	j	1b8 <stat+0x2a>
+
+00000000000001c8 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1c8:	1141                	addi	sp,sp,-16
+ 1ca:	e422                	sd	s0,8(sp)
+ 1cc:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1ce:	00054683          	lbu	a3,0(a0)
+ 1d2:	fd06879b          	addiw	a5,a3,-48
+ 1d6:	0ff7f793          	zext.b	a5,a5
+ 1da:	4625                	li	a2,9
+ 1dc:	02f66863          	bltu	a2,a5,20c <atoi+0x44>
+ 1e0:	872a                	mv	a4,a0
+  n = 0;
+ 1e2:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1e4:	0705                	addi	a4,a4,1
+ 1e6:	0025179b          	slliw	a5,a0,0x2
+ 1ea:	9fa9                	addw	a5,a5,a0
+ 1ec:	0017979b          	slliw	a5,a5,0x1
+ 1f0:	9fb5                	addw	a5,a5,a3
+ 1f2:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1f6:	00074683          	lbu	a3,0(a4)
+ 1fa:	fd06879b          	addiw	a5,a3,-48
+ 1fe:	0ff7f793          	zext.b	a5,a5
+ 202:	fef671e3          	bgeu	a2,a5,1e4 <atoi+0x1c>
+  return n;
+}
+ 206:	6422                	ld	s0,8(sp)
+ 208:	0141                	addi	sp,sp,16
+ 20a:	8082                	ret
+  n = 0;
+ 20c:	4501                	li	a0,0
+ 20e:	bfe5                	j	206 <atoi+0x3e>
+
+0000000000000210 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 210:	1141                	addi	sp,sp,-16
+ 212:	e422                	sd	s0,8(sp)
+ 214:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 216:	02b57463          	bgeu	a0,a1,23e <memmove+0x2e>
+    while(n-- > 0)
+ 21a:	00c05f63          	blez	a2,238 <memmove+0x28>
+ 21e:	1602                	slli	a2,a2,0x20
+ 220:	9201                	srli	a2,a2,0x20
+ 222:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 226:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 228:	0585                	addi	a1,a1,1
+ 22a:	0705                	addi	a4,a4,1
+ 22c:	fff5c683          	lbu	a3,-1(a1)
+ 230:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 234:	fef71ae3          	bne	a4,a5,228 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 238:	6422                	ld	s0,8(sp)
+ 23a:	0141                	addi	sp,sp,16
+ 23c:	8082                	ret
+    dst += n;
+ 23e:	00c50733          	add	a4,a0,a2
+    src += n;
+ 242:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 244:	fec05ae3          	blez	a2,238 <memmove+0x28>
+ 248:	fff6079b          	addiw	a5,a2,-1
+ 24c:	1782                	slli	a5,a5,0x20
+ 24e:	9381                	srli	a5,a5,0x20
+ 250:	fff7c793          	not	a5,a5
+ 254:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 256:	15fd                	addi	a1,a1,-1
+ 258:	177d                	addi	a4,a4,-1
+ 25a:	0005c683          	lbu	a3,0(a1)
+ 25e:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 262:	fee79ae3          	bne	a5,a4,256 <memmove+0x46>
+ 266:	bfc9                	j	238 <memmove+0x28>
+
+0000000000000268 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 268:	1141                	addi	sp,sp,-16
+ 26a:	e422                	sd	s0,8(sp)
+ 26c:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 26e:	ca05                	beqz	a2,29e <memcmp+0x36>
+ 270:	fff6069b          	addiw	a3,a2,-1
+ 274:	1682                	slli	a3,a3,0x20
+ 276:	9281                	srli	a3,a3,0x20
+ 278:	0685                	addi	a3,a3,1
+ 27a:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 27c:	00054783          	lbu	a5,0(a0)
+ 280:	0005c703          	lbu	a4,0(a1)
+ 284:	00e79863          	bne	a5,a4,294 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 288:	0505                	addi	a0,a0,1
+    p2++;
+ 28a:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 28c:	fed518e3          	bne	a0,a3,27c <memcmp+0x14>
+  }
+  return 0;
+ 290:	4501                	li	a0,0
+ 292:	a019                	j	298 <memcmp+0x30>
+      return *p1 - *p2;
+ 294:	40e7853b          	subw	a0,a5,a4
+}
+ 298:	6422                	ld	s0,8(sp)
+ 29a:	0141                	addi	sp,sp,16
+ 29c:	8082                	ret
+  return 0;
+ 29e:	4501                	li	a0,0
+ 2a0:	bfe5                	j	298 <memcmp+0x30>
+
+00000000000002a2 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2a2:	1141                	addi	sp,sp,-16
+ 2a4:	e406                	sd	ra,8(sp)
+ 2a6:	e022                	sd	s0,0(sp)
+ 2a8:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2aa:	f67ff0ef          	jal	210 <memmove>
+}
+ 2ae:	60a2                	ld	ra,8(sp)
+ 2b0:	6402                	ld	s0,0(sp)
+ 2b2:	0141                	addi	sp,sp,16
+ 2b4:	8082                	ret
+
+00000000000002b6 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2b6:	4885                	li	a7,1
+ ecall
+ 2b8:	00000073          	ecall
+ ret
+ 2bc:	8082                	ret
+
+00000000000002be <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2be:	4889                	li	a7,2
+ ecall
+ 2c0:	00000073          	ecall
+ ret
+ 2c4:	8082                	ret
+
+00000000000002c6 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2c6:	488d                	li	a7,3
+ ecall
+ 2c8:	00000073          	ecall
+ ret
+ 2cc:	8082                	ret
+
+00000000000002ce <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2ce:	4891                	li	a7,4
+ ecall
+ 2d0:	00000073          	ecall
+ ret
+ 2d4:	8082                	ret
+
+00000000000002d6 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2d6:	4895                	li	a7,5
+ ecall
+ 2d8:	00000073          	ecall
+ ret
+ 2dc:	8082                	ret
+
+00000000000002de <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2de:	48c1                	li	a7,16
+ ecall
+ 2e0:	00000073          	ecall
+ ret
+ 2e4:	8082                	ret
+
+00000000000002e6 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2e6:	48d5                	li	a7,21
+ ecall
+ 2e8:	00000073          	ecall
+ ret
+ 2ec:	8082                	ret
+
+00000000000002ee <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2ee:	4899                	li	a7,6
+ ecall
+ 2f0:	00000073          	ecall
+ ret
+ 2f4:	8082                	ret
+
+00000000000002f6 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2f6:	489d                	li	a7,7
+ ecall
+ 2f8:	00000073          	ecall
+ ret
+ 2fc:	8082                	ret
+
+00000000000002fe <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2fe:	48bd                	li	a7,15
+ ecall
+ 300:	00000073          	ecall
+ ret
+ 304:	8082                	ret
+
+0000000000000306 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 306:	48c5                	li	a7,17
+ ecall
+ 308:	00000073          	ecall
+ ret
+ 30c:	8082                	ret
+
+000000000000030e <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 30e:	48c9                	li	a7,18
+ ecall
+ 310:	00000073          	ecall
+ ret
+ 314:	8082                	ret
+
+0000000000000316 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 316:	48a1                	li	a7,8
+ ecall
+ 318:	00000073          	ecall
+ ret
+ 31c:	8082                	ret
+
+000000000000031e <link>:
+.global link
+link:
+ li a7, SYS_link
+ 31e:	48cd                	li	a7,19
+ ecall
+ 320:	00000073          	ecall
+ ret
+ 324:	8082                	ret
+
+0000000000000326 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 326:	48d1                	li	a7,20
+ ecall
+ 328:	00000073          	ecall
+ ret
+ 32c:	8082                	ret
+
+000000000000032e <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 32e:	48a5                	li	a7,9
+ ecall
+ 330:	00000073          	ecall
+ ret
+ 334:	8082                	ret
+
+0000000000000336 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 336:	48a9                	li	a7,10
+ ecall
+ 338:	00000073          	ecall
+ ret
+ 33c:	8082                	ret
+
+000000000000033e <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 33e:	48ad                	li	a7,11
+ ecall
+ 340:	00000073          	ecall
+ ret
+ 344:	8082                	ret
+
+0000000000000346 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 346:	48b1                	li	a7,12
+ ecall
+ 348:	00000073          	ecall
+ ret
+ 34c:	8082                	ret
+
+000000000000034e <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 34e:	48b5                	li	a7,13
+ ecall
+ 350:	00000073          	ecall
+ ret
+ 354:	8082                	ret
+
+0000000000000356 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 356:	48b9                	li	a7,14
+ ecall
+ 358:	00000073          	ecall
+ ret
+ 35c:	8082                	ret
+
+000000000000035e <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 35e:	48d9                	li	a7,22
+ ecall
+ 360:	00000073          	ecall
+ ret
+ 364:	8082                	ret
+
+0000000000000366 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 366:	48dd                	li	a7,23
+ ecall
+ 368:	00000073          	ecall
+ ret
+ 36c:	8082                	ret
+
+000000000000036e <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 36e:	48e1                	li	a7,24
+ ecall
+ 370:	00000073          	ecall
+ ret
+ 374:	8082                	ret
+
+0000000000000376 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 376:	1101                	addi	sp,sp,-32
+ 378:	ec06                	sd	ra,24(sp)
+ 37a:	e822                	sd	s0,16(sp)
+ 37c:	1000                	addi	s0,sp,32
+ 37e:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 382:	4605                	li	a2,1
+ 384:	fef40593          	addi	a1,s0,-17
+ 388:	f57ff0ef          	jal	2de <write>
+}
+ 38c:	60e2                	ld	ra,24(sp)
+ 38e:	6442                	ld	s0,16(sp)
+ 390:	6105                	addi	sp,sp,32
+ 392:	8082                	ret
+
+0000000000000394 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 394:	7139                	addi	sp,sp,-64
+ 396:	fc06                	sd	ra,56(sp)
+ 398:	f822                	sd	s0,48(sp)
+ 39a:	f426                	sd	s1,40(sp)
+ 39c:	0080                	addi	s0,sp,64
+ 39e:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3a0:	c299                	beqz	a3,3a6 <printint+0x12>
+ 3a2:	0805c963          	bltz	a1,434 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3a6:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3a8:	4881                	li	a7,0
+ 3aa:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3ae:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	2601                	sext.w	a2,a2
+ 3b2:	00000517          	auipc	a0,0x0
+ 3b6:	50e50513          	addi	a0,a0,1294 # 8c0 <digits>
+ 3ba:	883a                	mv	a6,a4
+ 3bc:	2705                	addiw	a4,a4,1
+ 3be:	02c5f7bb          	remuw	a5,a1,a2
+ 3c2:	1782                	slli	a5,a5,0x20
+ 3c4:	9381                	srli	a5,a5,0x20
+ 3c6:	97aa                	add	a5,a5,a0
+ 3c8:	0007c783          	lbu	a5,0(a5)
+ 3cc:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3d0:	0005879b          	sext.w	a5,a1
+ 3d4:	02c5d5bb          	divuw	a1,a1,a2
+ 3d8:	0685                	addi	a3,a3,1
+ 3da:	fec7f0e3          	bgeu	a5,a2,3ba <printint+0x26>
+  if(neg)
+ 3de:	00088c63          	beqz	a7,3f6 <printint+0x62>
+    buf[i++] = '-';
+ 3e2:	fd070793          	addi	a5,a4,-48
+ 3e6:	00878733          	add	a4,a5,s0
+ 3ea:	02d00793          	li	a5,45
+ 3ee:	fef70823          	sb	a5,-16(a4)
+ 3f2:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3f6:	02e05a63          	blez	a4,42a <printint+0x96>
+ 3fa:	f04a                	sd	s2,32(sp)
+ 3fc:	ec4e                	sd	s3,24(sp)
+ 3fe:	fc040793          	addi	a5,s0,-64
+ 402:	00e78933          	add	s2,a5,a4
+ 406:	fff78993          	addi	s3,a5,-1
+ 40a:	99ba                	add	s3,s3,a4
+ 40c:	377d                	addiw	a4,a4,-1
+ 40e:	1702                	slli	a4,a4,0x20
+ 410:	9301                	srli	a4,a4,0x20
+ 412:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 416:	fff94583          	lbu	a1,-1(s2)
+ 41a:	8526                	mv	a0,s1
+ 41c:	f5bff0ef          	jal	376 <putc>
+  while(--i >= 0)
+ 420:	197d                	addi	s2,s2,-1
+ 422:	ff391ae3          	bne	s2,s3,416 <printint+0x82>
+ 426:	7902                	ld	s2,32(sp)
+ 428:	69e2                	ld	s3,24(sp)
+}
+ 42a:	70e2                	ld	ra,56(sp)
+ 42c:	7442                	ld	s0,48(sp)
+ 42e:	74a2                	ld	s1,40(sp)
+ 430:	6121                	addi	sp,sp,64
+ 432:	8082                	ret
+    x = -xx;
+ 434:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 438:	4885                	li	a7,1
+    x = -xx;
+ 43a:	bf85                	j	3aa <printint+0x16>
+
+000000000000043c <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 43c:	711d                	addi	sp,sp,-96
+ 43e:	ec86                	sd	ra,88(sp)
+ 440:	e8a2                	sd	s0,80(sp)
+ 442:	e0ca                	sd	s2,64(sp)
+ 444:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 446:	0005c903          	lbu	s2,0(a1)
+ 44a:	26090863          	beqz	s2,6ba <vprintf+0x27e>
+ 44e:	e4a6                	sd	s1,72(sp)
+ 450:	fc4e                	sd	s3,56(sp)
+ 452:	f852                	sd	s4,48(sp)
+ 454:	f456                	sd	s5,40(sp)
+ 456:	f05a                	sd	s6,32(sp)
+ 458:	ec5e                	sd	s7,24(sp)
+ 45a:	e862                	sd	s8,16(sp)
+ 45c:	e466                	sd	s9,8(sp)
+ 45e:	8b2a                	mv	s6,a0
+ 460:	8a2e                	mv	s4,a1
+ 462:	8bb2                	mv	s7,a2
+  state = 0;
+ 464:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 466:	4481                	li	s1,0
+ 468:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 46a:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 46e:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 472:	06c00c93          	li	s9,108
+ 476:	a005                	j	496 <vprintf+0x5a>
+        putc(fd, c0);
+ 478:	85ca                	mv	a1,s2
+ 47a:	855a                	mv	a0,s6
+ 47c:	efbff0ef          	jal	376 <putc>
+ 480:	a019                	j	486 <vprintf+0x4a>
+    } else if(state == '%'){
+ 482:	03598263          	beq	s3,s5,4a6 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 486:	2485                	addiw	s1,s1,1
+ 488:	8726                	mv	a4,s1
+ 48a:	009a07b3          	add	a5,s4,s1
+ 48e:	0007c903          	lbu	s2,0(a5)
+ 492:	20090c63          	beqz	s2,6aa <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 496:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 49a:	fe0994e3          	bnez	s3,482 <vprintf+0x46>
+      if(c0 == '%'){
+ 49e:	fd579de3          	bne	a5,s5,478 <vprintf+0x3c>
+        state = '%';
+ 4a2:	89be                	mv	s3,a5
+ 4a4:	b7cd                	j	486 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 4a6:	00ea06b3          	add	a3,s4,a4
+ 4aa:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 4ae:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 4b0:	c681                	beqz	a3,4b8 <vprintf+0x7c>
+ 4b2:	9752                	add	a4,a4,s4
+ 4b4:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 4b8:	03878f63          	beq	a5,s8,4f6 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4bc:	05978963          	beq	a5,s9,50e <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 4c0:	07500713          	li	a4,117
+ 4c4:	0ee78363          	beq	a5,a4,5aa <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 4c8:	07800713          	li	a4,120
+ 4cc:	12e78563          	beq	a5,a4,5f6 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 4d0:	07000713          	li	a4,112
+ 4d4:	14e78a63          	beq	a5,a4,628 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4d8:	07300713          	li	a4,115
+ 4dc:	18e78a63          	beq	a5,a4,670 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 4e0:	02500713          	li	a4,37
+ 4e4:	04e79563          	bne	a5,a4,52e <vprintf+0xf2>
+        putc(fd, '%');
+ 4e8:	02500593          	li	a1,37
+ 4ec:	855a                	mv	a0,s6
+ 4ee:	e89ff0ef          	jal	376 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 4f2:	4981                	li	s3,0
+ 4f4:	bf49                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4f6:	008b8913          	addi	s2,s7,8
+ 4fa:	4685                	li	a3,1
+ 4fc:	4629                	li	a2,10
+ 4fe:	000ba583          	lw	a1,0(s7)
+ 502:	855a                	mv	a0,s6
+ 504:	e91ff0ef          	jal	394 <printint>
+ 508:	8bca                	mv	s7,s2
+      state = 0;
+ 50a:	4981                	li	s3,0
+ 50c:	bfad                	j	486 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 50e:	06400793          	li	a5,100
+ 512:	02f68963          	beq	a3,a5,544 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 516:	06c00793          	li	a5,108
+ 51a:	04f68263          	beq	a3,a5,55e <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 51e:	07500793          	li	a5,117
+ 522:	0af68063          	beq	a3,a5,5c2 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 526:	07800793          	li	a5,120
+ 52a:	0ef68263          	beq	a3,a5,60e <vprintf+0x1d2>
+        putc(fd, '%');
+ 52e:	02500593          	li	a1,37
+ 532:	855a                	mv	a0,s6
+ 534:	e43ff0ef          	jal	376 <putc>
+        putc(fd, c0);
+ 538:	85ca                	mv	a1,s2
+ 53a:	855a                	mv	a0,s6
+ 53c:	e3bff0ef          	jal	376 <putc>
+      state = 0;
+ 540:	4981                	li	s3,0
+ 542:	b791                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 544:	008b8913          	addi	s2,s7,8
+ 548:	4685                	li	a3,1
+ 54a:	4629                	li	a2,10
+ 54c:	000ba583          	lw	a1,0(s7)
+ 550:	855a                	mv	a0,s6
+ 552:	e43ff0ef          	jal	394 <printint>
+        i += 1;
+ 556:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 558:	8bca                	mv	s7,s2
+      state = 0;
+ 55a:	4981                	li	s3,0
+        i += 1;
+ 55c:	b72d                	j	486 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 55e:	06400793          	li	a5,100
+ 562:	02f60763          	beq	a2,a5,590 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 566:	07500793          	li	a5,117
+ 56a:	06f60963          	beq	a2,a5,5dc <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 56e:	07800793          	li	a5,120
+ 572:	faf61ee3          	bne	a2,a5,52e <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 576:	008b8913          	addi	s2,s7,8
+ 57a:	4681                	li	a3,0
+ 57c:	4641                	li	a2,16
+ 57e:	000ba583          	lw	a1,0(s7)
+ 582:	855a                	mv	a0,s6
+ 584:	e11ff0ef          	jal	394 <printint>
+        i += 2;
+ 588:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 58a:	8bca                	mv	s7,s2
+      state = 0;
+ 58c:	4981                	li	s3,0
+        i += 2;
+ 58e:	bde5                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 590:	008b8913          	addi	s2,s7,8
+ 594:	4685                	li	a3,1
+ 596:	4629                	li	a2,10
+ 598:	000ba583          	lw	a1,0(s7)
+ 59c:	855a                	mv	a0,s6
+ 59e:	df7ff0ef          	jal	394 <printint>
+        i += 2;
+ 5a2:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5a4:	8bca                	mv	s7,s2
+      state = 0;
+ 5a6:	4981                	li	s3,0
+        i += 2;
+ 5a8:	bdf9                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 5aa:	008b8913          	addi	s2,s7,8
+ 5ae:	4681                	li	a3,0
+ 5b0:	4629                	li	a2,10
+ 5b2:	000ba583          	lw	a1,0(s7)
+ 5b6:	855a                	mv	a0,s6
+ 5b8:	dddff0ef          	jal	394 <printint>
+ 5bc:	8bca                	mv	s7,s2
+      state = 0;
+ 5be:	4981                	li	s3,0
+ 5c0:	b5d9                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5c2:	008b8913          	addi	s2,s7,8
+ 5c6:	4681                	li	a3,0
+ 5c8:	4629                	li	a2,10
+ 5ca:	000ba583          	lw	a1,0(s7)
+ 5ce:	855a                	mv	a0,s6
+ 5d0:	dc5ff0ef          	jal	394 <printint>
+        i += 1;
+ 5d4:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d6:	8bca                	mv	s7,s2
+      state = 0;
+ 5d8:	4981                	li	s3,0
+        i += 1;
+ 5da:	b575                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5dc:	008b8913          	addi	s2,s7,8
+ 5e0:	4681                	li	a3,0
+ 5e2:	4629                	li	a2,10
+ 5e4:	000ba583          	lw	a1,0(s7)
+ 5e8:	855a                	mv	a0,s6
+ 5ea:	dabff0ef          	jal	394 <printint>
+        i += 2;
+ 5ee:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5f0:	8bca                	mv	s7,s2
+      state = 0;
+ 5f2:	4981                	li	s3,0
+        i += 2;
+ 5f4:	bd49                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5f6:	008b8913          	addi	s2,s7,8
+ 5fa:	4681                	li	a3,0
+ 5fc:	4641                	li	a2,16
+ 5fe:	000ba583          	lw	a1,0(s7)
+ 602:	855a                	mv	a0,s6
+ 604:	d91ff0ef          	jal	394 <printint>
+ 608:	8bca                	mv	s7,s2
+      state = 0;
+ 60a:	4981                	li	s3,0
+ 60c:	bdad                	j	486 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 60e:	008b8913          	addi	s2,s7,8
+ 612:	4681                	li	a3,0
+ 614:	4641                	li	a2,16
+ 616:	000ba583          	lw	a1,0(s7)
+ 61a:	855a                	mv	a0,s6
+ 61c:	d79ff0ef          	jal	394 <printint>
+        i += 1;
+ 620:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 622:	8bca                	mv	s7,s2
+      state = 0;
+ 624:	4981                	li	s3,0
+        i += 1;
+ 626:	b585                	j	486 <vprintf+0x4a>
+ 628:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 62a:	008b8d13          	addi	s10,s7,8
+ 62e:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 632:	03000593          	li	a1,48
+ 636:	855a                	mv	a0,s6
+ 638:	d3fff0ef          	jal	376 <putc>
+  putc(fd, 'x');
+ 63c:	07800593          	li	a1,120
+ 640:	855a                	mv	a0,s6
+ 642:	d35ff0ef          	jal	376 <putc>
+ 646:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 648:	00000b97          	auipc	s7,0x0
+ 64c:	278b8b93          	addi	s7,s7,632 # 8c0 <digits>
+ 650:	03c9d793          	srli	a5,s3,0x3c
+ 654:	97de                	add	a5,a5,s7
+ 656:	0007c583          	lbu	a1,0(a5)
+ 65a:	855a                	mv	a0,s6
+ 65c:	d1bff0ef          	jal	376 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 660:	0992                	slli	s3,s3,0x4
+ 662:	397d                	addiw	s2,s2,-1
+ 664:	fe0916e3          	bnez	s2,650 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 668:	8bea                	mv	s7,s10
+      state = 0;
+ 66a:	4981                	li	s3,0
+ 66c:	6d02                	ld	s10,0(sp)
+ 66e:	bd21                	j	486 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 670:	008b8993          	addi	s3,s7,8
+ 674:	000bb903          	ld	s2,0(s7)
+ 678:	00090f63          	beqz	s2,696 <vprintf+0x25a>
+        for(; *s; s++)
+ 67c:	00094583          	lbu	a1,0(s2)
+ 680:	c195                	beqz	a1,6a4 <vprintf+0x268>
+          putc(fd, *s);
+ 682:	855a                	mv	a0,s6
+ 684:	cf3ff0ef          	jal	376 <putc>
+        for(; *s; s++)
+ 688:	0905                	addi	s2,s2,1
+ 68a:	00094583          	lbu	a1,0(s2)
+ 68e:	f9f5                	bnez	a1,682 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 690:	8bce                	mv	s7,s3
+      state = 0;
+ 692:	4981                	li	s3,0
+ 694:	bbcd                	j	486 <vprintf+0x4a>
+          s = "(null)";
+ 696:	00000917          	auipc	s2,0x0
+ 69a:	22290913          	addi	s2,s2,546 # 8b8 <malloc+0x116>
+        for(; *s; s++)
+ 69e:	02800593          	li	a1,40
+ 6a2:	b7c5                	j	682 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6a4:	8bce                	mv	s7,s3
+      state = 0;
+ 6a6:	4981                	li	s3,0
+ 6a8:	bbf9                	j	486 <vprintf+0x4a>
+ 6aa:	64a6                	ld	s1,72(sp)
+ 6ac:	79e2                	ld	s3,56(sp)
+ 6ae:	7a42                	ld	s4,48(sp)
+ 6b0:	7aa2                	ld	s5,40(sp)
+ 6b2:	7b02                	ld	s6,32(sp)
+ 6b4:	6be2                	ld	s7,24(sp)
+ 6b6:	6c42                	ld	s8,16(sp)
+ 6b8:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 6ba:	60e6                	ld	ra,88(sp)
+ 6bc:	6446                	ld	s0,80(sp)
+ 6be:	6906                	ld	s2,64(sp)
+ 6c0:	6125                	addi	sp,sp,96
+ 6c2:	8082                	ret
+
+00000000000006c4 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6c4:	715d                	addi	sp,sp,-80
+ 6c6:	ec06                	sd	ra,24(sp)
+ 6c8:	e822                	sd	s0,16(sp)
+ 6ca:	1000                	addi	s0,sp,32
+ 6cc:	e010                	sd	a2,0(s0)
+ 6ce:	e414                	sd	a3,8(s0)
+ 6d0:	e818                	sd	a4,16(s0)
+ 6d2:	ec1c                	sd	a5,24(s0)
+ 6d4:	03043023          	sd	a6,32(s0)
+ 6d8:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6dc:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6e0:	8622                	mv	a2,s0
+ 6e2:	d5bff0ef          	jal	43c <vprintf>
+}
+ 6e6:	60e2                	ld	ra,24(sp)
+ 6e8:	6442                	ld	s0,16(sp)
+ 6ea:	6161                	addi	sp,sp,80
+ 6ec:	8082                	ret
+
+00000000000006ee <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 6ee:	711d                	addi	sp,sp,-96
+ 6f0:	ec06                	sd	ra,24(sp)
+ 6f2:	e822                	sd	s0,16(sp)
+ 6f4:	1000                	addi	s0,sp,32
+ 6f6:	e40c                	sd	a1,8(s0)
+ 6f8:	e810                	sd	a2,16(s0)
+ 6fa:	ec14                	sd	a3,24(s0)
+ 6fc:	f018                	sd	a4,32(s0)
+ 6fe:	f41c                	sd	a5,40(s0)
+ 700:	03043823          	sd	a6,48(s0)
+ 704:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 708:	00840613          	addi	a2,s0,8
+ 70c:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 710:	85aa                	mv	a1,a0
+ 712:	4505                	li	a0,1
+ 714:	d29ff0ef          	jal	43c <vprintf>
+}
+ 718:	60e2                	ld	ra,24(sp)
+ 71a:	6442                	ld	s0,16(sp)
+ 71c:	6125                	addi	sp,sp,96
+ 71e:	8082                	ret
+
+0000000000000720 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 720:	1141                	addi	sp,sp,-16
+ 722:	e422                	sd	s0,8(sp)
+ 724:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 726:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 72a:	00001797          	auipc	a5,0x1
+ 72e:	8d67b783          	ld	a5,-1834(a5) # 1000 <freep>
+ 732:	a02d                	j	75c <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 734:	4618                	lw	a4,8(a2)
+ 736:	9f2d                	addw	a4,a4,a1
+ 738:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 73c:	6398                	ld	a4,0(a5)
+ 73e:	6310                	ld	a2,0(a4)
+ 740:	a83d                	j	77e <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 742:	ff852703          	lw	a4,-8(a0)
+ 746:	9f31                	addw	a4,a4,a2
+ 748:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 74a:	ff053683          	ld	a3,-16(a0)
+ 74e:	a091                	j	792 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 750:	6398                	ld	a4,0(a5)
+ 752:	00e7e463          	bltu	a5,a4,75a <free+0x3a>
+ 756:	00e6ea63          	bltu	a3,a4,76a <free+0x4a>
+{
+ 75a:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 75c:	fed7fae3          	bgeu	a5,a3,750 <free+0x30>
+ 760:	6398                	ld	a4,0(a5)
+ 762:	00e6e463          	bltu	a3,a4,76a <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 766:	fee7eae3          	bltu	a5,a4,75a <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 76a:	ff852583          	lw	a1,-8(a0)
+ 76e:	6390                	ld	a2,0(a5)
+ 770:	02059813          	slli	a6,a1,0x20
+ 774:	01c85713          	srli	a4,a6,0x1c
+ 778:	9736                	add	a4,a4,a3
+ 77a:	fae60de3          	beq	a2,a4,734 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 77e:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 782:	4790                	lw	a2,8(a5)
+ 784:	02061593          	slli	a1,a2,0x20
+ 788:	01c5d713          	srli	a4,a1,0x1c
+ 78c:	973e                	add	a4,a4,a5
+ 78e:	fae68ae3          	beq	a3,a4,742 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 792:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 794:	00001717          	auipc	a4,0x1
+ 798:	86f73623          	sd	a5,-1940(a4) # 1000 <freep>
+}
+ 79c:	6422                	ld	s0,8(sp)
+ 79e:	0141                	addi	sp,sp,16
+ 7a0:	8082                	ret
+
+00000000000007a2 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7a2:	7139                	addi	sp,sp,-64
+ 7a4:	fc06                	sd	ra,56(sp)
+ 7a6:	f822                	sd	s0,48(sp)
+ 7a8:	f426                	sd	s1,40(sp)
+ 7aa:	ec4e                	sd	s3,24(sp)
+ 7ac:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7ae:	02051493          	slli	s1,a0,0x20
+ 7b2:	9081                	srli	s1,s1,0x20
+ 7b4:	04bd                	addi	s1,s1,15
+ 7b6:	8091                	srli	s1,s1,0x4
+ 7b8:	0014899b          	addiw	s3,s1,1
+ 7bc:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7be:	00001517          	auipc	a0,0x1
+ 7c2:	84253503          	ld	a0,-1982(a0) # 1000 <freep>
+ 7c6:	c915                	beqz	a0,7fa <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c8:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7ca:	4798                	lw	a4,8(a5)
+ 7cc:	08977a63          	bgeu	a4,s1,860 <malloc+0xbe>
+ 7d0:	f04a                	sd	s2,32(sp)
+ 7d2:	e852                	sd	s4,16(sp)
+ 7d4:	e456                	sd	s5,8(sp)
+ 7d6:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7d8:	8a4e                	mv	s4,s3
+ 7da:	0009871b          	sext.w	a4,s3
+ 7de:	6685                	lui	a3,0x1
+ 7e0:	00d77363          	bgeu	a4,a3,7e6 <malloc+0x44>
+ 7e4:	6a05                	lui	s4,0x1
+ 7e6:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7ea:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7ee:	00001917          	auipc	s2,0x1
+ 7f2:	81290913          	addi	s2,s2,-2030 # 1000 <freep>
+  if(p == (char*)-1)
+ 7f6:	5afd                	li	s5,-1
+ 7f8:	a081                	j	838 <malloc+0x96>
+ 7fa:	f04a                	sd	s2,32(sp)
+ 7fc:	e852                	sd	s4,16(sp)
+ 7fe:	e456                	sd	s5,8(sp)
+ 800:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 802:	00001797          	auipc	a5,0x1
+ 806:	80e78793          	addi	a5,a5,-2034 # 1010 <base>
+ 80a:	00000717          	auipc	a4,0x0
+ 80e:	7ef73b23          	sd	a5,2038(a4) # 1000 <freep>
+ 812:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 814:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 818:	b7c1                	j	7d8 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 81a:	6398                	ld	a4,0(a5)
+ 81c:	e118                	sd	a4,0(a0)
+ 81e:	a8a9                	j	878 <malloc+0xd6>
+  hp->s.size = nu;
+ 820:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 824:	0541                	addi	a0,a0,16
+ 826:	efbff0ef          	jal	720 <free>
+  return freep;
+ 82a:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 82e:	c12d                	beqz	a0,890 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 830:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 832:	4798                	lw	a4,8(a5)
+ 834:	02977263          	bgeu	a4,s1,858 <malloc+0xb6>
+    if(p == freep)
+ 838:	00093703          	ld	a4,0(s2)
+ 83c:	853e                	mv	a0,a5
+ 83e:	fef719e3          	bne	a4,a5,830 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 842:	8552                	mv	a0,s4
+ 844:	b03ff0ef          	jal	346 <sbrk>
+  if(p == (char*)-1)
+ 848:	fd551ce3          	bne	a0,s5,820 <malloc+0x7e>
+        return 0;
+ 84c:	4501                	li	a0,0
+ 84e:	7902                	ld	s2,32(sp)
+ 850:	6a42                	ld	s4,16(sp)
+ 852:	6aa2                	ld	s5,8(sp)
+ 854:	6b02                	ld	s6,0(sp)
+ 856:	a03d                	j	884 <malloc+0xe2>
+ 858:	7902                	ld	s2,32(sp)
+ 85a:	6a42                	ld	s4,16(sp)
+ 85c:	6aa2                	ld	s5,8(sp)
+ 85e:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 860:	fae48de3          	beq	s1,a4,81a <malloc+0x78>
+        p->s.size -= nunits;
+ 864:	4137073b          	subw	a4,a4,s3
+ 868:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 86a:	02071693          	slli	a3,a4,0x20
+ 86e:	01c6d713          	srli	a4,a3,0x1c
+ 872:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 874:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 878:	00000717          	auipc	a4,0x0
+ 87c:	78a73423          	sd	a0,1928(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 880:	01078513          	addi	a0,a5,16
+  }
+}
+ 884:	70e2                	ld	ra,56(sp)
+ 886:	7442                	ld	s0,48(sp)
+ 888:	74a2                	ld	s1,40(sp)
+ 88a:	69e2                	ld	s3,24(sp)
+ 88c:	6121                	addi	sp,sp,64
+ 88e:	8082                	ret
+ 890:	7902                	ld	s2,32(sp)
+ 892:	6a42                	ld	s4,16(sp)
+ 894:	6aa2                	ld	s5,8(sp)
+ 896:	6b02                	ld	s6,0(sp)
+ 898:	b7f5                	j	884 <malloc+0xe2>
diff --git a/user/kill.c b/user/kill.c
new file mode 100644
index 0000000..1b0253b
--- /dev/null
+++ b/user/kill.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char **argv)
+{
+  int i;
+
+  if(argc < 2){
+    fprintf(2, "usage: kill pid...\n");
+    exit(1);
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  exit(0);
+}
diff --git a/user/kill.d b/user/kill.d
new file mode 100644
index 0000000..e83f22f
--- /dev/null
+++ b/user/kill.d
@@ -0,0 +1 @@
+user/kill.o: user/kill.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/kill.o b/user/kill.o
new file mode 100644
index 0000000..f43c4d4
Binary files /dev/null and b/user/kill.o differ
diff --git a/user/kill.sym b/user/kill.sym
new file mode 100644
index 0000000..d0e003f
--- /dev/null
+++ b/user/kill.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+00000000000008a0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 kill.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000376 putc
+0000000000000394 printint
+00000000000008c0 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+0000000000000066 strcpy
+00000000000006ee printf
+0000000000000210 memmove
+0000000000000306 mknod
+0000000000000366 trace
+000000000000011e gets
+000000000000033e getpid
+000000000000035e hello
+00000000000002a2 memcpy
+00000000000007a2 malloc
+000000000000034e sleep
+000000000000036e sysinfo
+00000000000002ce pipe
+00000000000002de write
+0000000000000316 fstat
+00000000000006c4 fprintf
+00000000000002ee kill
+000000000000043c vprintf
+000000000000032e chdir
+00000000000002f6 exec
+00000000000002c6 wait
+00000000000002d6 read
+000000000000030e unlink
+0000000000000268 memcmp
+00000000000002b6 fork
+0000000000000346 sbrk
+0000000000000356 uptime
+00000000000000d8 memset
+0000000000000000 main
+0000000000000082 strcmp
+0000000000000336 dup
+000000000000018e stat
+000000000000031e link
+00000000000002be exit
+0000000000000054 start
+00000000000001c8 atoi
+00000000000000ae strlen
+00000000000002fe open
+00000000000000fa strchr
+0000000000000326 mkdir
+00000000000002e6 close
+0000000000000720 free
diff --git a/user/ln.asm b/user/ln.asm
new file mode 100644
index 0000000..17f2038
--- /dev/null
+++ b/user/ln.asm
@@ -0,0 +1,1480 @@
+
+user/_ln:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	1000                	addi	s0,sp,32
+  if(argc != 3){
+   8:	478d                	li	a5,3
+   a:	00f50d63          	beq	a0,a5,24 <main+0x24>
+   e:	e426                	sd	s1,8(sp)
+    fprintf(2, "Usage: ln old new\n");
+  10:	00001597          	auipc	a1,0x1
+  14:	89058593          	addi	a1,a1,-1904 # 8a0 <malloc+0x104>
+  18:	4509                	li	a0,2
+  1a:	6a4000ef          	jal	6be <fprintf>
+    exit(1);
+  1e:	4505                	li	a0,1
+  20:	298000ef          	jal	2b8 <exit>
+  24:	e426                	sd	s1,8(sp)
+  26:	84ae                	mv	s1,a1
+  }
+  if(link(argv[1], argv[2]) < 0)
+  28:	698c                	ld	a1,16(a1)
+  2a:	6488                	ld	a0,8(s1)
+  2c:	2ec000ef          	jal	318 <link>
+  30:	00054563          	bltz	a0,3a <main+0x3a>
+    fprintf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit(0);
+  34:	4501                	li	a0,0
+  36:	282000ef          	jal	2b8 <exit>
+    fprintf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  3a:	6894                	ld	a3,16(s1)
+  3c:	6490                	ld	a2,8(s1)
+  3e:	00001597          	auipc	a1,0x1
+  42:	87a58593          	addi	a1,a1,-1926 # 8b8 <malloc+0x11c>
+  46:	4509                	li	a0,2
+  48:	676000ef          	jal	6be <fprintf>
+  4c:	b7e5                	j	34 <main+0x34>
+
+000000000000004e <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  4e:	1141                	addi	sp,sp,-16
+  50:	e406                	sd	ra,8(sp)
+  52:	e022                	sd	s0,0(sp)
+  54:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  56:	fabff0ef          	jal	0 <main>
+  exit(0);
+  5a:	4501                	li	a0,0
+  5c:	25c000ef          	jal	2b8 <exit>
+
+0000000000000060 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	1141                	addi	sp,sp,-16
+  62:	e422                	sd	s0,8(sp)
+  64:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  66:	87aa                	mv	a5,a0
+  68:	0585                	addi	a1,a1,1
+  6a:	0785                	addi	a5,a5,1
+  6c:	fff5c703          	lbu	a4,-1(a1)
+  70:	fee78fa3          	sb	a4,-1(a5)
+  74:	fb75                	bnez	a4,68 <strcpy+0x8>
+    ;
+  return os;
+}
+  76:	6422                	ld	s0,8(sp)
+  78:	0141                	addi	sp,sp,16
+  7a:	8082                	ret
+
+000000000000007c <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  7c:	1141                	addi	sp,sp,-16
+  7e:	e422                	sd	s0,8(sp)
+  80:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  82:	00054783          	lbu	a5,0(a0)
+  86:	cb91                	beqz	a5,9a <strcmp+0x1e>
+  88:	0005c703          	lbu	a4,0(a1)
+  8c:	00f71763          	bne	a4,a5,9a <strcmp+0x1e>
+    p++, q++;
+  90:	0505                	addi	a0,a0,1
+  92:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  94:	00054783          	lbu	a5,0(a0)
+  98:	fbe5                	bnez	a5,88 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  9a:	0005c503          	lbu	a0,0(a1)
+}
+  9e:	40a7853b          	subw	a0,a5,a0
+  a2:	6422                	ld	s0,8(sp)
+  a4:	0141                	addi	sp,sp,16
+  a6:	8082                	ret
+
+00000000000000a8 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  a8:	1141                	addi	sp,sp,-16
+  aa:	e422                	sd	s0,8(sp)
+  ac:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  ae:	00054783          	lbu	a5,0(a0)
+  b2:	cf91                	beqz	a5,ce <strlen+0x26>
+  b4:	0505                	addi	a0,a0,1
+  b6:	87aa                	mv	a5,a0
+  b8:	86be                	mv	a3,a5
+  ba:	0785                	addi	a5,a5,1
+  bc:	fff7c703          	lbu	a4,-1(a5)
+  c0:	ff65                	bnez	a4,b8 <strlen+0x10>
+  c2:	40a6853b          	subw	a0,a3,a0
+  c6:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  c8:	6422                	ld	s0,8(sp)
+  ca:	0141                	addi	sp,sp,16
+  cc:	8082                	ret
+  for(n = 0; s[n]; n++)
+  ce:	4501                	li	a0,0
+  d0:	bfe5                	j	c8 <strlen+0x20>
+
+00000000000000d2 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  d2:	1141                	addi	sp,sp,-16
+  d4:	e422                	sd	s0,8(sp)
+  d6:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  d8:	ca19                	beqz	a2,ee <memset+0x1c>
+  da:	87aa                	mv	a5,a0
+  dc:	1602                	slli	a2,a2,0x20
+  de:	9201                	srli	a2,a2,0x20
+  e0:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  e4:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  e8:	0785                	addi	a5,a5,1
+  ea:	fee79de3          	bne	a5,a4,e4 <memset+0x12>
+  }
+  return dst;
+}
+  ee:	6422                	ld	s0,8(sp)
+  f0:	0141                	addi	sp,sp,16
+  f2:	8082                	ret
+
+00000000000000f4 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  f4:	1141                	addi	sp,sp,-16
+  f6:	e422                	sd	s0,8(sp)
+  f8:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  fa:	00054783          	lbu	a5,0(a0)
+  fe:	cb99                	beqz	a5,114 <strchr+0x20>
+    if(*s == c)
+ 100:	00f58763          	beq	a1,a5,10e <strchr+0x1a>
+  for(; *s; s++)
+ 104:	0505                	addi	a0,a0,1
+ 106:	00054783          	lbu	a5,0(a0)
+ 10a:	fbfd                	bnez	a5,100 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 10c:	4501                	li	a0,0
+}
+ 10e:	6422                	ld	s0,8(sp)
+ 110:	0141                	addi	sp,sp,16
+ 112:	8082                	ret
+  return 0;
+ 114:	4501                	li	a0,0
+ 116:	bfe5                	j	10e <strchr+0x1a>
+
+0000000000000118 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 118:	711d                	addi	sp,sp,-96
+ 11a:	ec86                	sd	ra,88(sp)
+ 11c:	e8a2                	sd	s0,80(sp)
+ 11e:	e4a6                	sd	s1,72(sp)
+ 120:	e0ca                	sd	s2,64(sp)
+ 122:	fc4e                	sd	s3,56(sp)
+ 124:	f852                	sd	s4,48(sp)
+ 126:	f456                	sd	s5,40(sp)
+ 128:	f05a                	sd	s6,32(sp)
+ 12a:	ec5e                	sd	s7,24(sp)
+ 12c:	1080                	addi	s0,sp,96
+ 12e:	8baa                	mv	s7,a0
+ 130:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 132:	892a                	mv	s2,a0
+ 134:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 136:	4aa9                	li	s5,10
+ 138:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 13a:	89a6                	mv	s3,s1
+ 13c:	2485                	addiw	s1,s1,1
+ 13e:	0344d663          	bge	s1,s4,16a <gets+0x52>
+    cc = read(0, &c, 1);
+ 142:	4605                	li	a2,1
+ 144:	faf40593          	addi	a1,s0,-81
+ 148:	4501                	li	a0,0
+ 14a:	186000ef          	jal	2d0 <read>
+    if(cc < 1)
+ 14e:	00a05e63          	blez	a0,16a <gets+0x52>
+    buf[i++] = c;
+ 152:	faf44783          	lbu	a5,-81(s0)
+ 156:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 15a:	01578763          	beq	a5,s5,168 <gets+0x50>
+ 15e:	0905                	addi	s2,s2,1
+ 160:	fd679de3          	bne	a5,s6,13a <gets+0x22>
+    buf[i++] = c;
+ 164:	89a6                	mv	s3,s1
+ 166:	a011                	j	16a <gets+0x52>
+ 168:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 16a:	99de                	add	s3,s3,s7
+ 16c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 170:	855e                	mv	a0,s7
+ 172:	60e6                	ld	ra,88(sp)
+ 174:	6446                	ld	s0,80(sp)
+ 176:	64a6                	ld	s1,72(sp)
+ 178:	6906                	ld	s2,64(sp)
+ 17a:	79e2                	ld	s3,56(sp)
+ 17c:	7a42                	ld	s4,48(sp)
+ 17e:	7aa2                	ld	s5,40(sp)
+ 180:	7b02                	ld	s6,32(sp)
+ 182:	6be2                	ld	s7,24(sp)
+ 184:	6125                	addi	sp,sp,96
+ 186:	8082                	ret
+
+0000000000000188 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 188:	1101                	addi	sp,sp,-32
+ 18a:	ec06                	sd	ra,24(sp)
+ 18c:	e822                	sd	s0,16(sp)
+ 18e:	e04a                	sd	s2,0(sp)
+ 190:	1000                	addi	s0,sp,32
+ 192:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 194:	4581                	li	a1,0
+ 196:	162000ef          	jal	2f8 <open>
+  if(fd < 0)
+ 19a:	02054263          	bltz	a0,1be <stat+0x36>
+ 19e:	e426                	sd	s1,8(sp)
+ 1a0:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1a2:	85ca                	mv	a1,s2
+ 1a4:	16c000ef          	jal	310 <fstat>
+ 1a8:	892a                	mv	s2,a0
+  close(fd);
+ 1aa:	8526                	mv	a0,s1
+ 1ac:	134000ef          	jal	2e0 <close>
+  return r;
+ 1b0:	64a2                	ld	s1,8(sp)
+}
+ 1b2:	854a                	mv	a0,s2
+ 1b4:	60e2                	ld	ra,24(sp)
+ 1b6:	6442                	ld	s0,16(sp)
+ 1b8:	6902                	ld	s2,0(sp)
+ 1ba:	6105                	addi	sp,sp,32
+ 1bc:	8082                	ret
+    return -1;
+ 1be:	597d                	li	s2,-1
+ 1c0:	bfcd                	j	1b2 <stat+0x2a>
+
+00000000000001c2 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1c2:	1141                	addi	sp,sp,-16
+ 1c4:	e422                	sd	s0,8(sp)
+ 1c6:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1c8:	00054683          	lbu	a3,0(a0)
+ 1cc:	fd06879b          	addiw	a5,a3,-48
+ 1d0:	0ff7f793          	zext.b	a5,a5
+ 1d4:	4625                	li	a2,9
+ 1d6:	02f66863          	bltu	a2,a5,206 <atoi+0x44>
+ 1da:	872a                	mv	a4,a0
+  n = 0;
+ 1dc:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1de:	0705                	addi	a4,a4,1
+ 1e0:	0025179b          	slliw	a5,a0,0x2
+ 1e4:	9fa9                	addw	a5,a5,a0
+ 1e6:	0017979b          	slliw	a5,a5,0x1
+ 1ea:	9fb5                	addw	a5,a5,a3
+ 1ec:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1f0:	00074683          	lbu	a3,0(a4)
+ 1f4:	fd06879b          	addiw	a5,a3,-48
+ 1f8:	0ff7f793          	zext.b	a5,a5
+ 1fc:	fef671e3          	bgeu	a2,a5,1de <atoi+0x1c>
+  return n;
+}
+ 200:	6422                	ld	s0,8(sp)
+ 202:	0141                	addi	sp,sp,16
+ 204:	8082                	ret
+  n = 0;
+ 206:	4501                	li	a0,0
+ 208:	bfe5                	j	200 <atoi+0x3e>
+
+000000000000020a <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 20a:	1141                	addi	sp,sp,-16
+ 20c:	e422                	sd	s0,8(sp)
+ 20e:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 210:	02b57463          	bgeu	a0,a1,238 <memmove+0x2e>
+    while(n-- > 0)
+ 214:	00c05f63          	blez	a2,232 <memmove+0x28>
+ 218:	1602                	slli	a2,a2,0x20
+ 21a:	9201                	srli	a2,a2,0x20
+ 21c:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 220:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 222:	0585                	addi	a1,a1,1
+ 224:	0705                	addi	a4,a4,1
+ 226:	fff5c683          	lbu	a3,-1(a1)
+ 22a:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 22e:	fef71ae3          	bne	a4,a5,222 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 232:	6422                	ld	s0,8(sp)
+ 234:	0141                	addi	sp,sp,16
+ 236:	8082                	ret
+    dst += n;
+ 238:	00c50733          	add	a4,a0,a2
+    src += n;
+ 23c:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 23e:	fec05ae3          	blez	a2,232 <memmove+0x28>
+ 242:	fff6079b          	addiw	a5,a2,-1
+ 246:	1782                	slli	a5,a5,0x20
+ 248:	9381                	srli	a5,a5,0x20
+ 24a:	fff7c793          	not	a5,a5
+ 24e:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 250:	15fd                	addi	a1,a1,-1
+ 252:	177d                	addi	a4,a4,-1
+ 254:	0005c683          	lbu	a3,0(a1)
+ 258:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 25c:	fee79ae3          	bne	a5,a4,250 <memmove+0x46>
+ 260:	bfc9                	j	232 <memmove+0x28>
+
+0000000000000262 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 262:	1141                	addi	sp,sp,-16
+ 264:	e422                	sd	s0,8(sp)
+ 266:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 268:	ca05                	beqz	a2,298 <memcmp+0x36>
+ 26a:	fff6069b          	addiw	a3,a2,-1
+ 26e:	1682                	slli	a3,a3,0x20
+ 270:	9281                	srli	a3,a3,0x20
+ 272:	0685                	addi	a3,a3,1
+ 274:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 276:	00054783          	lbu	a5,0(a0)
+ 27a:	0005c703          	lbu	a4,0(a1)
+ 27e:	00e79863          	bne	a5,a4,28e <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 282:	0505                	addi	a0,a0,1
+    p2++;
+ 284:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 286:	fed518e3          	bne	a0,a3,276 <memcmp+0x14>
+  }
+  return 0;
+ 28a:	4501                	li	a0,0
+ 28c:	a019                	j	292 <memcmp+0x30>
+      return *p1 - *p2;
+ 28e:	40e7853b          	subw	a0,a5,a4
+}
+ 292:	6422                	ld	s0,8(sp)
+ 294:	0141                	addi	sp,sp,16
+ 296:	8082                	ret
+  return 0;
+ 298:	4501                	li	a0,0
+ 29a:	bfe5                	j	292 <memcmp+0x30>
+
+000000000000029c <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 29c:	1141                	addi	sp,sp,-16
+ 29e:	e406                	sd	ra,8(sp)
+ 2a0:	e022                	sd	s0,0(sp)
+ 2a2:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2a4:	f67ff0ef          	jal	20a <memmove>
+}
+ 2a8:	60a2                	ld	ra,8(sp)
+ 2aa:	6402                	ld	s0,0(sp)
+ 2ac:	0141                	addi	sp,sp,16
+ 2ae:	8082                	ret
+
+00000000000002b0 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2b0:	4885                	li	a7,1
+ ecall
+ 2b2:	00000073          	ecall
+ ret
+ 2b6:	8082                	ret
+
+00000000000002b8 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2b8:	4889                	li	a7,2
+ ecall
+ 2ba:	00000073          	ecall
+ ret
+ 2be:	8082                	ret
+
+00000000000002c0 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2c0:	488d                	li	a7,3
+ ecall
+ 2c2:	00000073          	ecall
+ ret
+ 2c6:	8082                	ret
+
+00000000000002c8 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2c8:	4891                	li	a7,4
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2d0:	4895                	li	a7,5
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2d8:	48c1                	li	a7,16
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2e0:	48d5                	li	a7,21
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2e8:	4899                	li	a7,6
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2f0:	489d                	li	a7,7
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2f8:	48bd                	li	a7,15
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 300:	48c5                	li	a7,17
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 308:	48c9                	li	a7,18
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 310:	48a1                	li	a7,8
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 318:	48cd                	li	a7,19
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 320:	48d1                	li	a7,20
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 328:	48a5                	li	a7,9
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 330:	48a9                	li	a7,10
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 338:	48ad                	li	a7,11
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 340:	48b1                	li	a7,12
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 348:	48b5                	li	a7,13
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 350:	48b9                	li	a7,14
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 358:	48d9                	li	a7,22
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 360:	48dd                	li	a7,23
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 368:	48e1                	li	a7,24
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 370:	1101                	addi	sp,sp,-32
+ 372:	ec06                	sd	ra,24(sp)
+ 374:	e822                	sd	s0,16(sp)
+ 376:	1000                	addi	s0,sp,32
+ 378:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 37c:	4605                	li	a2,1
+ 37e:	fef40593          	addi	a1,s0,-17
+ 382:	f57ff0ef          	jal	2d8 <write>
+}
+ 386:	60e2                	ld	ra,24(sp)
+ 388:	6442                	ld	s0,16(sp)
+ 38a:	6105                	addi	sp,sp,32
+ 38c:	8082                	ret
+
+000000000000038e <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 38e:	7139                	addi	sp,sp,-64
+ 390:	fc06                	sd	ra,56(sp)
+ 392:	f822                	sd	s0,48(sp)
+ 394:	f426                	sd	s1,40(sp)
+ 396:	0080                	addi	s0,sp,64
+ 398:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 39a:	c299                	beqz	a3,3a0 <printint+0x12>
+ 39c:	0805c963          	bltz	a1,42e <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3a0:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3a2:	4881                	li	a7,0
+ 3a4:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3a8:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3aa:	2601                	sext.w	a2,a2
+ 3ac:	00000517          	auipc	a0,0x0
+ 3b0:	52c50513          	addi	a0,a0,1324 # 8d8 <digits>
+ 3b4:	883a                	mv	a6,a4
+ 3b6:	2705                	addiw	a4,a4,1
+ 3b8:	02c5f7bb          	remuw	a5,a1,a2
+ 3bc:	1782                	slli	a5,a5,0x20
+ 3be:	9381                	srli	a5,a5,0x20
+ 3c0:	97aa                	add	a5,a5,a0
+ 3c2:	0007c783          	lbu	a5,0(a5)
+ 3c6:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3ca:	0005879b          	sext.w	a5,a1
+ 3ce:	02c5d5bb          	divuw	a1,a1,a2
+ 3d2:	0685                	addi	a3,a3,1
+ 3d4:	fec7f0e3          	bgeu	a5,a2,3b4 <printint+0x26>
+  if(neg)
+ 3d8:	00088c63          	beqz	a7,3f0 <printint+0x62>
+    buf[i++] = '-';
+ 3dc:	fd070793          	addi	a5,a4,-48
+ 3e0:	00878733          	add	a4,a5,s0
+ 3e4:	02d00793          	li	a5,45
+ 3e8:	fef70823          	sb	a5,-16(a4)
+ 3ec:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3f0:	02e05a63          	blez	a4,424 <printint+0x96>
+ 3f4:	f04a                	sd	s2,32(sp)
+ 3f6:	ec4e                	sd	s3,24(sp)
+ 3f8:	fc040793          	addi	a5,s0,-64
+ 3fc:	00e78933          	add	s2,a5,a4
+ 400:	fff78993          	addi	s3,a5,-1
+ 404:	99ba                	add	s3,s3,a4
+ 406:	377d                	addiw	a4,a4,-1
+ 408:	1702                	slli	a4,a4,0x20
+ 40a:	9301                	srli	a4,a4,0x20
+ 40c:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 410:	fff94583          	lbu	a1,-1(s2)
+ 414:	8526                	mv	a0,s1
+ 416:	f5bff0ef          	jal	370 <putc>
+  while(--i >= 0)
+ 41a:	197d                	addi	s2,s2,-1
+ 41c:	ff391ae3          	bne	s2,s3,410 <printint+0x82>
+ 420:	7902                	ld	s2,32(sp)
+ 422:	69e2                	ld	s3,24(sp)
+}
+ 424:	70e2                	ld	ra,56(sp)
+ 426:	7442                	ld	s0,48(sp)
+ 428:	74a2                	ld	s1,40(sp)
+ 42a:	6121                	addi	sp,sp,64
+ 42c:	8082                	ret
+    x = -xx;
+ 42e:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 432:	4885                	li	a7,1
+    x = -xx;
+ 434:	bf85                	j	3a4 <printint+0x16>
+
+0000000000000436 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 436:	711d                	addi	sp,sp,-96
+ 438:	ec86                	sd	ra,88(sp)
+ 43a:	e8a2                	sd	s0,80(sp)
+ 43c:	e0ca                	sd	s2,64(sp)
+ 43e:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 440:	0005c903          	lbu	s2,0(a1)
+ 444:	26090863          	beqz	s2,6b4 <vprintf+0x27e>
+ 448:	e4a6                	sd	s1,72(sp)
+ 44a:	fc4e                	sd	s3,56(sp)
+ 44c:	f852                	sd	s4,48(sp)
+ 44e:	f456                	sd	s5,40(sp)
+ 450:	f05a                	sd	s6,32(sp)
+ 452:	ec5e                	sd	s7,24(sp)
+ 454:	e862                	sd	s8,16(sp)
+ 456:	e466                	sd	s9,8(sp)
+ 458:	8b2a                	mv	s6,a0
+ 45a:	8a2e                	mv	s4,a1
+ 45c:	8bb2                	mv	s7,a2
+  state = 0;
+ 45e:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 460:	4481                	li	s1,0
+ 462:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 464:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 468:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 46c:	06c00c93          	li	s9,108
+ 470:	a005                	j	490 <vprintf+0x5a>
+        putc(fd, c0);
+ 472:	85ca                	mv	a1,s2
+ 474:	855a                	mv	a0,s6
+ 476:	efbff0ef          	jal	370 <putc>
+ 47a:	a019                	j	480 <vprintf+0x4a>
+    } else if(state == '%'){
+ 47c:	03598263          	beq	s3,s5,4a0 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 480:	2485                	addiw	s1,s1,1
+ 482:	8726                	mv	a4,s1
+ 484:	009a07b3          	add	a5,s4,s1
+ 488:	0007c903          	lbu	s2,0(a5)
+ 48c:	20090c63          	beqz	s2,6a4 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 490:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 494:	fe0994e3          	bnez	s3,47c <vprintf+0x46>
+      if(c0 == '%'){
+ 498:	fd579de3          	bne	a5,s5,472 <vprintf+0x3c>
+        state = '%';
+ 49c:	89be                	mv	s3,a5
+ 49e:	b7cd                	j	480 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 4a0:	00ea06b3          	add	a3,s4,a4
+ 4a4:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 4a8:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 4aa:	c681                	beqz	a3,4b2 <vprintf+0x7c>
+ 4ac:	9752                	add	a4,a4,s4
+ 4ae:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 4b2:	03878f63          	beq	a5,s8,4f0 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4b6:	05978963          	beq	a5,s9,508 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 4ba:	07500713          	li	a4,117
+ 4be:	0ee78363          	beq	a5,a4,5a4 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 4c2:	07800713          	li	a4,120
+ 4c6:	12e78563          	beq	a5,a4,5f0 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 4ca:	07000713          	li	a4,112
+ 4ce:	14e78a63          	beq	a5,a4,622 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4d2:	07300713          	li	a4,115
+ 4d6:	18e78a63          	beq	a5,a4,66a <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 4da:	02500713          	li	a4,37
+ 4de:	04e79563          	bne	a5,a4,528 <vprintf+0xf2>
+        putc(fd, '%');
+ 4e2:	02500593          	li	a1,37
+ 4e6:	855a                	mv	a0,s6
+ 4e8:	e89ff0ef          	jal	370 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 4ec:	4981                	li	s3,0
+ 4ee:	bf49                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4f0:	008b8913          	addi	s2,s7,8
+ 4f4:	4685                	li	a3,1
+ 4f6:	4629                	li	a2,10
+ 4f8:	000ba583          	lw	a1,0(s7)
+ 4fc:	855a                	mv	a0,s6
+ 4fe:	e91ff0ef          	jal	38e <printint>
+ 502:	8bca                	mv	s7,s2
+      state = 0;
+ 504:	4981                	li	s3,0
+ 506:	bfad                	j	480 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 508:	06400793          	li	a5,100
+ 50c:	02f68963          	beq	a3,a5,53e <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 510:	06c00793          	li	a5,108
+ 514:	04f68263          	beq	a3,a5,558 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 518:	07500793          	li	a5,117
+ 51c:	0af68063          	beq	a3,a5,5bc <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 520:	07800793          	li	a5,120
+ 524:	0ef68263          	beq	a3,a5,608 <vprintf+0x1d2>
+        putc(fd, '%');
+ 528:	02500593          	li	a1,37
+ 52c:	855a                	mv	a0,s6
+ 52e:	e43ff0ef          	jal	370 <putc>
+        putc(fd, c0);
+ 532:	85ca                	mv	a1,s2
+ 534:	855a                	mv	a0,s6
+ 536:	e3bff0ef          	jal	370 <putc>
+      state = 0;
+ 53a:	4981                	li	s3,0
+ 53c:	b791                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 53e:	008b8913          	addi	s2,s7,8
+ 542:	4685                	li	a3,1
+ 544:	4629                	li	a2,10
+ 546:	000ba583          	lw	a1,0(s7)
+ 54a:	855a                	mv	a0,s6
+ 54c:	e43ff0ef          	jal	38e <printint>
+        i += 1;
+ 550:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 552:	8bca                	mv	s7,s2
+      state = 0;
+ 554:	4981                	li	s3,0
+        i += 1;
+ 556:	b72d                	j	480 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 558:	06400793          	li	a5,100
+ 55c:	02f60763          	beq	a2,a5,58a <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 560:	07500793          	li	a5,117
+ 564:	06f60963          	beq	a2,a5,5d6 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 568:	07800793          	li	a5,120
+ 56c:	faf61ee3          	bne	a2,a5,528 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 570:	008b8913          	addi	s2,s7,8
+ 574:	4681                	li	a3,0
+ 576:	4641                	li	a2,16
+ 578:	000ba583          	lw	a1,0(s7)
+ 57c:	855a                	mv	a0,s6
+ 57e:	e11ff0ef          	jal	38e <printint>
+        i += 2;
+ 582:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 584:	8bca                	mv	s7,s2
+      state = 0;
+ 586:	4981                	li	s3,0
+        i += 2;
+ 588:	bde5                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 58a:	008b8913          	addi	s2,s7,8
+ 58e:	4685                	li	a3,1
+ 590:	4629                	li	a2,10
+ 592:	000ba583          	lw	a1,0(s7)
+ 596:	855a                	mv	a0,s6
+ 598:	df7ff0ef          	jal	38e <printint>
+        i += 2;
+ 59c:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 59e:	8bca                	mv	s7,s2
+      state = 0;
+ 5a0:	4981                	li	s3,0
+        i += 2;
+ 5a2:	bdf9                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 5a4:	008b8913          	addi	s2,s7,8
+ 5a8:	4681                	li	a3,0
+ 5aa:	4629                	li	a2,10
+ 5ac:	000ba583          	lw	a1,0(s7)
+ 5b0:	855a                	mv	a0,s6
+ 5b2:	dddff0ef          	jal	38e <printint>
+ 5b6:	8bca                	mv	s7,s2
+      state = 0;
+ 5b8:	4981                	li	s3,0
+ 5ba:	b5d9                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5bc:	008b8913          	addi	s2,s7,8
+ 5c0:	4681                	li	a3,0
+ 5c2:	4629                	li	a2,10
+ 5c4:	000ba583          	lw	a1,0(s7)
+ 5c8:	855a                	mv	a0,s6
+ 5ca:	dc5ff0ef          	jal	38e <printint>
+        i += 1;
+ 5ce:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d0:	8bca                	mv	s7,s2
+      state = 0;
+ 5d2:	4981                	li	s3,0
+        i += 1;
+ 5d4:	b575                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d6:	008b8913          	addi	s2,s7,8
+ 5da:	4681                	li	a3,0
+ 5dc:	4629                	li	a2,10
+ 5de:	000ba583          	lw	a1,0(s7)
+ 5e2:	855a                	mv	a0,s6
+ 5e4:	dabff0ef          	jal	38e <printint>
+        i += 2;
+ 5e8:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5ea:	8bca                	mv	s7,s2
+      state = 0;
+ 5ec:	4981                	li	s3,0
+        i += 2;
+ 5ee:	bd49                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5f0:	008b8913          	addi	s2,s7,8
+ 5f4:	4681                	li	a3,0
+ 5f6:	4641                	li	a2,16
+ 5f8:	000ba583          	lw	a1,0(s7)
+ 5fc:	855a                	mv	a0,s6
+ 5fe:	d91ff0ef          	jal	38e <printint>
+ 602:	8bca                	mv	s7,s2
+      state = 0;
+ 604:	4981                	li	s3,0
+ 606:	bdad                	j	480 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 608:	008b8913          	addi	s2,s7,8
+ 60c:	4681                	li	a3,0
+ 60e:	4641                	li	a2,16
+ 610:	000ba583          	lw	a1,0(s7)
+ 614:	855a                	mv	a0,s6
+ 616:	d79ff0ef          	jal	38e <printint>
+        i += 1;
+ 61a:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 61c:	8bca                	mv	s7,s2
+      state = 0;
+ 61e:	4981                	li	s3,0
+        i += 1;
+ 620:	b585                	j	480 <vprintf+0x4a>
+ 622:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 624:	008b8d13          	addi	s10,s7,8
+ 628:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 62c:	03000593          	li	a1,48
+ 630:	855a                	mv	a0,s6
+ 632:	d3fff0ef          	jal	370 <putc>
+  putc(fd, 'x');
+ 636:	07800593          	li	a1,120
+ 63a:	855a                	mv	a0,s6
+ 63c:	d35ff0ef          	jal	370 <putc>
+ 640:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 642:	00000b97          	auipc	s7,0x0
+ 646:	296b8b93          	addi	s7,s7,662 # 8d8 <digits>
+ 64a:	03c9d793          	srli	a5,s3,0x3c
+ 64e:	97de                	add	a5,a5,s7
+ 650:	0007c583          	lbu	a1,0(a5)
+ 654:	855a                	mv	a0,s6
+ 656:	d1bff0ef          	jal	370 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 65a:	0992                	slli	s3,s3,0x4
+ 65c:	397d                	addiw	s2,s2,-1
+ 65e:	fe0916e3          	bnez	s2,64a <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 662:	8bea                	mv	s7,s10
+      state = 0;
+ 664:	4981                	li	s3,0
+ 666:	6d02                	ld	s10,0(sp)
+ 668:	bd21                	j	480 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 66a:	008b8993          	addi	s3,s7,8
+ 66e:	000bb903          	ld	s2,0(s7)
+ 672:	00090f63          	beqz	s2,690 <vprintf+0x25a>
+        for(; *s; s++)
+ 676:	00094583          	lbu	a1,0(s2)
+ 67a:	c195                	beqz	a1,69e <vprintf+0x268>
+          putc(fd, *s);
+ 67c:	855a                	mv	a0,s6
+ 67e:	cf3ff0ef          	jal	370 <putc>
+        for(; *s; s++)
+ 682:	0905                	addi	s2,s2,1
+ 684:	00094583          	lbu	a1,0(s2)
+ 688:	f9f5                	bnez	a1,67c <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 68a:	8bce                	mv	s7,s3
+      state = 0;
+ 68c:	4981                	li	s3,0
+ 68e:	bbcd                	j	480 <vprintf+0x4a>
+          s = "(null)";
+ 690:	00000917          	auipc	s2,0x0
+ 694:	24090913          	addi	s2,s2,576 # 8d0 <malloc+0x134>
+        for(; *s; s++)
+ 698:	02800593          	li	a1,40
+ 69c:	b7c5                	j	67c <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 69e:	8bce                	mv	s7,s3
+      state = 0;
+ 6a0:	4981                	li	s3,0
+ 6a2:	bbf9                	j	480 <vprintf+0x4a>
+ 6a4:	64a6                	ld	s1,72(sp)
+ 6a6:	79e2                	ld	s3,56(sp)
+ 6a8:	7a42                	ld	s4,48(sp)
+ 6aa:	7aa2                	ld	s5,40(sp)
+ 6ac:	7b02                	ld	s6,32(sp)
+ 6ae:	6be2                	ld	s7,24(sp)
+ 6b0:	6c42                	ld	s8,16(sp)
+ 6b2:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 6b4:	60e6                	ld	ra,88(sp)
+ 6b6:	6446                	ld	s0,80(sp)
+ 6b8:	6906                	ld	s2,64(sp)
+ 6ba:	6125                	addi	sp,sp,96
+ 6bc:	8082                	ret
+
+00000000000006be <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6be:	715d                	addi	sp,sp,-80
+ 6c0:	ec06                	sd	ra,24(sp)
+ 6c2:	e822                	sd	s0,16(sp)
+ 6c4:	1000                	addi	s0,sp,32
+ 6c6:	e010                	sd	a2,0(s0)
+ 6c8:	e414                	sd	a3,8(s0)
+ 6ca:	e818                	sd	a4,16(s0)
+ 6cc:	ec1c                	sd	a5,24(s0)
+ 6ce:	03043023          	sd	a6,32(s0)
+ 6d2:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6d6:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6da:	8622                	mv	a2,s0
+ 6dc:	d5bff0ef          	jal	436 <vprintf>
+}
+ 6e0:	60e2                	ld	ra,24(sp)
+ 6e2:	6442                	ld	s0,16(sp)
+ 6e4:	6161                	addi	sp,sp,80
+ 6e6:	8082                	ret
+
+00000000000006e8 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 6e8:	711d                	addi	sp,sp,-96
+ 6ea:	ec06                	sd	ra,24(sp)
+ 6ec:	e822                	sd	s0,16(sp)
+ 6ee:	1000                	addi	s0,sp,32
+ 6f0:	e40c                	sd	a1,8(s0)
+ 6f2:	e810                	sd	a2,16(s0)
+ 6f4:	ec14                	sd	a3,24(s0)
+ 6f6:	f018                	sd	a4,32(s0)
+ 6f8:	f41c                	sd	a5,40(s0)
+ 6fa:	03043823          	sd	a6,48(s0)
+ 6fe:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 702:	00840613          	addi	a2,s0,8
+ 706:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 70a:	85aa                	mv	a1,a0
+ 70c:	4505                	li	a0,1
+ 70e:	d29ff0ef          	jal	436 <vprintf>
+}
+ 712:	60e2                	ld	ra,24(sp)
+ 714:	6442                	ld	s0,16(sp)
+ 716:	6125                	addi	sp,sp,96
+ 718:	8082                	ret
+
+000000000000071a <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 71a:	1141                	addi	sp,sp,-16
+ 71c:	e422                	sd	s0,8(sp)
+ 71e:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 720:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 724:	00001797          	auipc	a5,0x1
+ 728:	8dc7b783          	ld	a5,-1828(a5) # 1000 <freep>
+ 72c:	a02d                	j	756 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 72e:	4618                	lw	a4,8(a2)
+ 730:	9f2d                	addw	a4,a4,a1
+ 732:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 736:	6398                	ld	a4,0(a5)
+ 738:	6310                	ld	a2,0(a4)
+ 73a:	a83d                	j	778 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 73c:	ff852703          	lw	a4,-8(a0)
+ 740:	9f31                	addw	a4,a4,a2
+ 742:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 744:	ff053683          	ld	a3,-16(a0)
+ 748:	a091                	j	78c <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 74a:	6398                	ld	a4,0(a5)
+ 74c:	00e7e463          	bltu	a5,a4,754 <free+0x3a>
+ 750:	00e6ea63          	bltu	a3,a4,764 <free+0x4a>
+{
+ 754:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 756:	fed7fae3          	bgeu	a5,a3,74a <free+0x30>
+ 75a:	6398                	ld	a4,0(a5)
+ 75c:	00e6e463          	bltu	a3,a4,764 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 760:	fee7eae3          	bltu	a5,a4,754 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 764:	ff852583          	lw	a1,-8(a0)
+ 768:	6390                	ld	a2,0(a5)
+ 76a:	02059813          	slli	a6,a1,0x20
+ 76e:	01c85713          	srli	a4,a6,0x1c
+ 772:	9736                	add	a4,a4,a3
+ 774:	fae60de3          	beq	a2,a4,72e <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 778:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 77c:	4790                	lw	a2,8(a5)
+ 77e:	02061593          	slli	a1,a2,0x20
+ 782:	01c5d713          	srli	a4,a1,0x1c
+ 786:	973e                	add	a4,a4,a5
+ 788:	fae68ae3          	beq	a3,a4,73c <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 78c:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 78e:	00001717          	auipc	a4,0x1
+ 792:	86f73923          	sd	a5,-1934(a4) # 1000 <freep>
+}
+ 796:	6422                	ld	s0,8(sp)
+ 798:	0141                	addi	sp,sp,16
+ 79a:	8082                	ret
+
+000000000000079c <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 79c:	7139                	addi	sp,sp,-64
+ 79e:	fc06                	sd	ra,56(sp)
+ 7a0:	f822                	sd	s0,48(sp)
+ 7a2:	f426                	sd	s1,40(sp)
+ 7a4:	ec4e                	sd	s3,24(sp)
+ 7a6:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7a8:	02051493          	slli	s1,a0,0x20
+ 7ac:	9081                	srli	s1,s1,0x20
+ 7ae:	04bd                	addi	s1,s1,15
+ 7b0:	8091                	srli	s1,s1,0x4
+ 7b2:	0014899b          	addiw	s3,s1,1
+ 7b6:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7b8:	00001517          	auipc	a0,0x1
+ 7bc:	84853503          	ld	a0,-1976(a0) # 1000 <freep>
+ 7c0:	c915                	beqz	a0,7f4 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c2:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7c4:	4798                	lw	a4,8(a5)
+ 7c6:	08977a63          	bgeu	a4,s1,85a <malloc+0xbe>
+ 7ca:	f04a                	sd	s2,32(sp)
+ 7cc:	e852                	sd	s4,16(sp)
+ 7ce:	e456                	sd	s5,8(sp)
+ 7d0:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7d2:	8a4e                	mv	s4,s3
+ 7d4:	0009871b          	sext.w	a4,s3
+ 7d8:	6685                	lui	a3,0x1
+ 7da:	00d77363          	bgeu	a4,a3,7e0 <malloc+0x44>
+ 7de:	6a05                	lui	s4,0x1
+ 7e0:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7e4:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7e8:	00001917          	auipc	s2,0x1
+ 7ec:	81890913          	addi	s2,s2,-2024 # 1000 <freep>
+  if(p == (char*)-1)
+ 7f0:	5afd                	li	s5,-1
+ 7f2:	a081                	j	832 <malloc+0x96>
+ 7f4:	f04a                	sd	s2,32(sp)
+ 7f6:	e852                	sd	s4,16(sp)
+ 7f8:	e456                	sd	s5,8(sp)
+ 7fa:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 7fc:	00001797          	auipc	a5,0x1
+ 800:	81478793          	addi	a5,a5,-2028 # 1010 <base>
+ 804:	00000717          	auipc	a4,0x0
+ 808:	7ef73e23          	sd	a5,2044(a4) # 1000 <freep>
+ 80c:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 80e:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 812:	b7c1                	j	7d2 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 814:	6398                	ld	a4,0(a5)
+ 816:	e118                	sd	a4,0(a0)
+ 818:	a8a9                	j	872 <malloc+0xd6>
+  hp->s.size = nu;
+ 81a:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 81e:	0541                	addi	a0,a0,16
+ 820:	efbff0ef          	jal	71a <free>
+  return freep;
+ 824:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 828:	c12d                	beqz	a0,88a <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 82a:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 82c:	4798                	lw	a4,8(a5)
+ 82e:	02977263          	bgeu	a4,s1,852 <malloc+0xb6>
+    if(p == freep)
+ 832:	00093703          	ld	a4,0(s2)
+ 836:	853e                	mv	a0,a5
+ 838:	fef719e3          	bne	a4,a5,82a <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 83c:	8552                	mv	a0,s4
+ 83e:	b03ff0ef          	jal	340 <sbrk>
+  if(p == (char*)-1)
+ 842:	fd551ce3          	bne	a0,s5,81a <malloc+0x7e>
+        return 0;
+ 846:	4501                	li	a0,0
+ 848:	7902                	ld	s2,32(sp)
+ 84a:	6a42                	ld	s4,16(sp)
+ 84c:	6aa2                	ld	s5,8(sp)
+ 84e:	6b02                	ld	s6,0(sp)
+ 850:	a03d                	j	87e <malloc+0xe2>
+ 852:	7902                	ld	s2,32(sp)
+ 854:	6a42                	ld	s4,16(sp)
+ 856:	6aa2                	ld	s5,8(sp)
+ 858:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 85a:	fae48de3          	beq	s1,a4,814 <malloc+0x78>
+        p->s.size -= nunits;
+ 85e:	4137073b          	subw	a4,a4,s3
+ 862:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 864:	02071693          	slli	a3,a4,0x20
+ 868:	01c6d713          	srli	a4,a3,0x1c
+ 86c:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 86e:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 872:	00000717          	auipc	a4,0x0
+ 876:	78a73723          	sd	a0,1934(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 87a:	01078513          	addi	a0,a5,16
+  }
+}
+ 87e:	70e2                	ld	ra,56(sp)
+ 880:	7442                	ld	s0,48(sp)
+ 882:	74a2                	ld	s1,40(sp)
+ 884:	69e2                	ld	s3,24(sp)
+ 886:	6121                	addi	sp,sp,64
+ 888:	8082                	ret
+ 88a:	7902                	ld	s2,32(sp)
+ 88c:	6a42                	ld	s4,16(sp)
+ 88e:	6aa2                	ld	s5,8(sp)
+ 890:	6b02                	ld	s6,0(sp)
+ 892:	b7f5                	j	87e <malloc+0xe2>
diff --git a/user/ln.c b/user/ln.c
new file mode 100644
index 0000000..1894143
--- /dev/null
+++ b/user/ln.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  if(argc != 3){
+    fprintf(2, "Usage: ln old new\n");
+    exit(1);
+  }
+  if(link(argv[1], argv[2]) < 0)
+    fprintf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit(0);
+}
diff --git a/user/ln.d b/user/ln.d
new file mode 100644
index 0000000..927138d
--- /dev/null
+++ b/user/ln.d
@@ -0,0 +1 @@
+user/ln.o: user/ln.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/ln.o b/user/ln.o
new file mode 100644
index 0000000..5fbcc4c
Binary files /dev/null and b/user/ln.o differ
diff --git a/user/ln.sym b/user/ln.sym
new file mode 100644
index 0000000..4a1c190
--- /dev/null
+++ b/user/ln.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+0000000000000898 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 ln.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000370 putc
+000000000000038e printint
+00000000000008d8 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+0000000000000060 strcpy
+00000000000006e8 printf
+000000000000020a memmove
+0000000000000300 mknod
+0000000000000360 trace
+0000000000000118 gets
+0000000000000338 getpid
+0000000000000358 hello
+000000000000029c memcpy
+000000000000079c malloc
+0000000000000348 sleep
+0000000000000368 sysinfo
+00000000000002c8 pipe
+00000000000002d8 write
+0000000000000310 fstat
+00000000000006be fprintf
+00000000000002e8 kill
+0000000000000436 vprintf
+0000000000000328 chdir
+00000000000002f0 exec
+00000000000002c0 wait
+00000000000002d0 read
+0000000000000308 unlink
+0000000000000262 memcmp
+00000000000002b0 fork
+0000000000000340 sbrk
+0000000000000350 uptime
+00000000000000d2 memset
+0000000000000000 main
+000000000000007c strcmp
+0000000000000330 dup
+0000000000000188 stat
+0000000000000318 link
+00000000000002b8 exit
+000000000000004e start
+00000000000001c2 atoi
+00000000000000a8 strlen
+00000000000002f8 open
+00000000000000f4 strchr
+0000000000000320 mkdir
+00000000000002e0 close
+000000000000071a free
diff --git a/user/ls.asm b/user/ls.asm
new file mode 100644
index 0000000..ca4c215
--- /dev/null
+++ b/user/ls.asm
@@ -0,0 +1,1730 @@
+
+user/_ls:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <fmtname>:
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+char*
+fmtname(char *path)
+{
+   0:	7179                	addi	sp,sp,-48
+   2:	f406                	sd	ra,40(sp)
+   4:	f022                	sd	s0,32(sp)
+   6:	ec26                	sd	s1,24(sp)
+   8:	1800                	addi	s0,sp,48
+   a:	84aa                	mv	s1,a0
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+   c:	2b6000ef          	jal	2c2 <strlen>
+  10:	02051793          	slli	a5,a0,0x20
+  14:	9381                	srli	a5,a5,0x20
+  16:	97a6                	add	a5,a5,s1
+  18:	02f00693          	li	a3,47
+  1c:	0097e963          	bltu	a5,s1,2e <fmtname+0x2e>
+  20:	0007c703          	lbu	a4,0(a5)
+  24:	00d70563          	beq	a4,a3,2e <fmtname+0x2e>
+  28:	17fd                	addi	a5,a5,-1
+  2a:	fe97fbe3          	bgeu	a5,s1,20 <fmtname+0x20>
+    ;
+  p++;
+  2e:	00178493          	addi	s1,a5,1
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+  32:	8526                	mv	a0,s1
+  34:	28e000ef          	jal	2c2 <strlen>
+  38:	2501                	sext.w	a0,a0
+  3a:	47b5                	li	a5,13
+  3c:	00a7f863          	bgeu	a5,a0,4c <fmtname+0x4c>
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+  40:	8526                	mv	a0,s1
+  42:	70a2                	ld	ra,40(sp)
+  44:	7402                	ld	s0,32(sp)
+  46:	64e2                	ld	s1,24(sp)
+  48:	6145                	addi	sp,sp,48
+  4a:	8082                	ret
+  4c:	e84a                	sd	s2,16(sp)
+  4e:	e44e                	sd	s3,8(sp)
+  memmove(buf, p, strlen(p));
+  50:	8526                	mv	a0,s1
+  52:	270000ef          	jal	2c2 <strlen>
+  56:	00001997          	auipc	s3,0x1
+  5a:	fba98993          	addi	s3,s3,-70 # 1010 <buf.0>
+  5e:	0005061b          	sext.w	a2,a0
+  62:	85a6                	mv	a1,s1
+  64:	854e                	mv	a0,s3
+  66:	3be000ef          	jal	424 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  6a:	8526                	mv	a0,s1
+  6c:	256000ef          	jal	2c2 <strlen>
+  70:	0005091b          	sext.w	s2,a0
+  74:	8526                	mv	a0,s1
+  76:	24c000ef          	jal	2c2 <strlen>
+  7a:	1902                	slli	s2,s2,0x20
+  7c:	02095913          	srli	s2,s2,0x20
+  80:	4639                	li	a2,14
+  82:	9e09                	subw	a2,a2,a0
+  84:	02000593          	li	a1,32
+  88:	01298533          	add	a0,s3,s2
+  8c:	260000ef          	jal	2ec <memset>
+  return buf;
+  90:	84ce                	mv	s1,s3
+  92:	6942                	ld	s2,16(sp)
+  94:	69a2                	ld	s3,8(sp)
+  96:	b76d                	j	40 <fmtname+0x40>
+
+0000000000000098 <ls>:
+
+void
+ls(char *path)
+{
+  98:	d9010113          	addi	sp,sp,-624
+  9c:	26113423          	sd	ra,616(sp)
+  a0:	26813023          	sd	s0,608(sp)
+  a4:	25213823          	sd	s2,592(sp)
+  a8:	1c80                	addi	s0,sp,624
+  aa:	892a                	mv	s2,a0
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, O_RDONLY)) < 0){
+  ac:	4581                	li	a1,0
+  ae:	464000ef          	jal	512 <open>
+  b2:	06054363          	bltz	a0,118 <ls+0x80>
+  b6:	24913c23          	sd	s1,600(sp)
+  ba:	84aa                	mv	s1,a0
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+  bc:	d9840593          	addi	a1,s0,-616
+  c0:	46a000ef          	jal	52a <fstat>
+  c4:	06054363          	bltz	a0,12a <ls+0x92>
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  c8:	da041783          	lh	a5,-608(s0)
+  cc:	4705                	li	a4,1
+  ce:	06e78c63          	beq	a5,a4,146 <ls+0xae>
+  d2:	37f9                	addiw	a5,a5,-2
+  d4:	17c2                	slli	a5,a5,0x30
+  d6:	93c1                	srli	a5,a5,0x30
+  d8:	02f76263          	bltu	a4,a5,fc <ls+0x64>
+  case T_DEVICE:
+  case T_FILE:
+    printf("%s %d %d %d\n", fmtname(path), st.type, st.ino, (int) st.size);
+  dc:	854a                	mv	a0,s2
+  de:	f23ff0ef          	jal	0 <fmtname>
+  e2:	85aa                	mv	a1,a0
+  e4:	da842703          	lw	a4,-600(s0)
+  e8:	d9c42683          	lw	a3,-612(s0)
+  ec:	da041603          	lh	a2,-608(s0)
+  f0:	00001517          	auipc	a0,0x1
+  f4:	9f050513          	addi	a0,a0,-1552 # ae0 <malloc+0x12a>
+  f8:	00b000ef          	jal	902 <printf>
+      }
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, (int) st.size);
+    }
+    break;
+  }
+  close(fd);
+  fc:	8526                	mv	a0,s1
+  fe:	3fc000ef          	jal	4fa <close>
+ 102:	25813483          	ld	s1,600(sp)
+}
+ 106:	26813083          	ld	ra,616(sp)
+ 10a:	26013403          	ld	s0,608(sp)
+ 10e:	25013903          	ld	s2,592(sp)
+ 112:	27010113          	addi	sp,sp,624
+ 116:	8082                	ret
+    fprintf(2, "ls: cannot open %s\n", path);
+ 118:	864a                	mv	a2,s2
+ 11a:	00001597          	auipc	a1,0x1
+ 11e:	99658593          	addi	a1,a1,-1642 # ab0 <malloc+0xfa>
+ 122:	4509                	li	a0,2
+ 124:	7b4000ef          	jal	8d8 <fprintf>
+    return;
+ 128:	bff9                	j	106 <ls+0x6e>
+    fprintf(2, "ls: cannot stat %s\n", path);
+ 12a:	864a                	mv	a2,s2
+ 12c:	00001597          	auipc	a1,0x1
+ 130:	99c58593          	addi	a1,a1,-1636 # ac8 <malloc+0x112>
+ 134:	4509                	li	a0,2
+ 136:	7a2000ef          	jal	8d8 <fprintf>
+    close(fd);
+ 13a:	8526                	mv	a0,s1
+ 13c:	3be000ef          	jal	4fa <close>
+    return;
+ 140:	25813483          	ld	s1,600(sp)
+ 144:	b7c9                	j	106 <ls+0x6e>
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 146:	854a                	mv	a0,s2
+ 148:	17a000ef          	jal	2c2 <strlen>
+ 14c:	2541                	addiw	a0,a0,16
+ 14e:	20000793          	li	a5,512
+ 152:	00a7f963          	bgeu	a5,a0,164 <ls+0xcc>
+      printf("ls: path too long\n");
+ 156:	00001517          	auipc	a0,0x1
+ 15a:	99a50513          	addi	a0,a0,-1638 # af0 <malloc+0x13a>
+ 15e:	7a4000ef          	jal	902 <printf>
+      break;
+ 162:	bf69                	j	fc <ls+0x64>
+ 164:	25313423          	sd	s3,584(sp)
+ 168:	25413023          	sd	s4,576(sp)
+ 16c:	23513c23          	sd	s5,568(sp)
+    strcpy(buf, path);
+ 170:	85ca                	mv	a1,s2
+ 172:	dc040513          	addi	a0,s0,-576
+ 176:	104000ef          	jal	27a <strcpy>
+    p = buf+strlen(buf);
+ 17a:	dc040513          	addi	a0,s0,-576
+ 17e:	144000ef          	jal	2c2 <strlen>
+ 182:	1502                	slli	a0,a0,0x20
+ 184:	9101                	srli	a0,a0,0x20
+ 186:	dc040793          	addi	a5,s0,-576
+ 18a:	00a78933          	add	s2,a5,a0
+    *p++ = '/';
+ 18e:	00190993          	addi	s3,s2,1
+ 192:	02f00793          	li	a5,47
+ 196:	00f90023          	sb	a5,0(s2)
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, (int) st.size);
+ 19a:	00001a17          	auipc	s4,0x1
+ 19e:	946a0a13          	addi	s4,s4,-1722 # ae0 <malloc+0x12a>
+        printf("ls: cannot stat %s\n", buf);
+ 1a2:	00001a97          	auipc	s5,0x1
+ 1a6:	926a8a93          	addi	s5,s5,-1754 # ac8 <malloc+0x112>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1aa:	a031                	j	1b6 <ls+0x11e>
+        printf("ls: cannot stat %s\n", buf);
+ 1ac:	dc040593          	addi	a1,s0,-576
+ 1b0:	8556                	mv	a0,s5
+ 1b2:	750000ef          	jal	902 <printf>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1b6:	4641                	li	a2,16
+ 1b8:	db040593          	addi	a1,s0,-592
+ 1bc:	8526                	mv	a0,s1
+ 1be:	32c000ef          	jal	4ea <read>
+ 1c2:	47c1                	li	a5,16
+ 1c4:	04f51463          	bne	a0,a5,20c <ls+0x174>
+      if(de.inum == 0)
+ 1c8:	db045783          	lhu	a5,-592(s0)
+ 1cc:	d7ed                	beqz	a5,1b6 <ls+0x11e>
+      memmove(p, de.name, DIRSIZ);
+ 1ce:	4639                	li	a2,14
+ 1d0:	db240593          	addi	a1,s0,-590
+ 1d4:	854e                	mv	a0,s3
+ 1d6:	24e000ef          	jal	424 <memmove>
+      p[DIRSIZ] = 0;
+ 1da:	000907a3          	sb	zero,15(s2)
+      if(stat(buf, &st) < 0){
+ 1de:	d9840593          	addi	a1,s0,-616
+ 1e2:	dc040513          	addi	a0,s0,-576
+ 1e6:	1bc000ef          	jal	3a2 <stat>
+ 1ea:	fc0541e3          	bltz	a0,1ac <ls+0x114>
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, (int) st.size);
+ 1ee:	dc040513          	addi	a0,s0,-576
+ 1f2:	e0fff0ef          	jal	0 <fmtname>
+ 1f6:	85aa                	mv	a1,a0
+ 1f8:	da842703          	lw	a4,-600(s0)
+ 1fc:	d9c42683          	lw	a3,-612(s0)
+ 200:	da041603          	lh	a2,-608(s0)
+ 204:	8552                	mv	a0,s4
+ 206:	6fc000ef          	jal	902 <printf>
+ 20a:	b775                	j	1b6 <ls+0x11e>
+ 20c:	24813983          	ld	s3,584(sp)
+ 210:	24013a03          	ld	s4,576(sp)
+ 214:	23813a83          	ld	s5,568(sp)
+ 218:	b5d5                	j	fc <ls+0x64>
+
+000000000000021a <main>:
+
+int
+main(int argc, char *argv[])
+{
+ 21a:	1101                	addi	sp,sp,-32
+ 21c:	ec06                	sd	ra,24(sp)
+ 21e:	e822                	sd	s0,16(sp)
+ 220:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+ 222:	4785                	li	a5,1
+ 224:	02a7d763          	bge	a5,a0,252 <main+0x38>
+ 228:	e426                	sd	s1,8(sp)
+ 22a:	e04a                	sd	s2,0(sp)
+ 22c:	00858493          	addi	s1,a1,8
+ 230:	ffe5091b          	addiw	s2,a0,-2
+ 234:	02091793          	slli	a5,s2,0x20
+ 238:	01d7d913          	srli	s2,a5,0x1d
+ 23c:	05c1                	addi	a1,a1,16
+ 23e:	992e                	add	s2,s2,a1
+    ls(".");
+    exit(0);
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+ 240:	6088                	ld	a0,0(s1)
+ 242:	e57ff0ef          	jal	98 <ls>
+  for(i=1; i<argc; i++)
+ 246:	04a1                	addi	s1,s1,8
+ 248:	ff249ce3          	bne	s1,s2,240 <main+0x26>
+  exit(0);
+ 24c:	4501                	li	a0,0
+ 24e:	284000ef          	jal	4d2 <exit>
+ 252:	e426                	sd	s1,8(sp)
+ 254:	e04a                	sd	s2,0(sp)
+    ls(".");
+ 256:	00001517          	auipc	a0,0x1
+ 25a:	8b250513          	addi	a0,a0,-1870 # b08 <malloc+0x152>
+ 25e:	e3bff0ef          	jal	98 <ls>
+    exit(0);
+ 262:	4501                	li	a0,0
+ 264:	26e000ef          	jal	4d2 <exit>
+
+0000000000000268 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+ 268:	1141                	addi	sp,sp,-16
+ 26a:	e406                	sd	ra,8(sp)
+ 26c:	e022                	sd	s0,0(sp)
+ 26e:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+ 270:	fabff0ef          	jal	21a <main>
+  exit(0);
+ 274:	4501                	li	a0,0
+ 276:	25c000ef          	jal	4d2 <exit>
+
+000000000000027a <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+ 27a:	1141                	addi	sp,sp,-16
+ 27c:	e422                	sd	s0,8(sp)
+ 27e:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 280:	87aa                	mv	a5,a0
+ 282:	0585                	addi	a1,a1,1
+ 284:	0785                	addi	a5,a5,1
+ 286:	fff5c703          	lbu	a4,-1(a1)
+ 28a:	fee78fa3          	sb	a4,-1(a5)
+ 28e:	fb75                	bnez	a4,282 <strcpy+0x8>
+    ;
+  return os;
+}
+ 290:	6422                	ld	s0,8(sp)
+ 292:	0141                	addi	sp,sp,16
+ 294:	8082                	ret
+
+0000000000000296 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 296:	1141                	addi	sp,sp,-16
+ 298:	e422                	sd	s0,8(sp)
+ 29a:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 29c:	00054783          	lbu	a5,0(a0)
+ 2a0:	cb91                	beqz	a5,2b4 <strcmp+0x1e>
+ 2a2:	0005c703          	lbu	a4,0(a1)
+ 2a6:	00f71763          	bne	a4,a5,2b4 <strcmp+0x1e>
+    p++, q++;
+ 2aa:	0505                	addi	a0,a0,1
+ 2ac:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 2ae:	00054783          	lbu	a5,0(a0)
+ 2b2:	fbe5                	bnez	a5,2a2 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 2b4:	0005c503          	lbu	a0,0(a1)
+}
+ 2b8:	40a7853b          	subw	a0,a5,a0
+ 2bc:	6422                	ld	s0,8(sp)
+ 2be:	0141                	addi	sp,sp,16
+ 2c0:	8082                	ret
+
+00000000000002c2 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 2c2:	1141                	addi	sp,sp,-16
+ 2c4:	e422                	sd	s0,8(sp)
+ 2c6:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 2c8:	00054783          	lbu	a5,0(a0)
+ 2cc:	cf91                	beqz	a5,2e8 <strlen+0x26>
+ 2ce:	0505                	addi	a0,a0,1
+ 2d0:	87aa                	mv	a5,a0
+ 2d2:	86be                	mv	a3,a5
+ 2d4:	0785                	addi	a5,a5,1
+ 2d6:	fff7c703          	lbu	a4,-1(a5)
+ 2da:	ff65                	bnez	a4,2d2 <strlen+0x10>
+ 2dc:	40a6853b          	subw	a0,a3,a0
+ 2e0:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 2e2:	6422                	ld	s0,8(sp)
+ 2e4:	0141                	addi	sp,sp,16
+ 2e6:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 2e8:	4501                	li	a0,0
+ 2ea:	bfe5                	j	2e2 <strlen+0x20>
+
+00000000000002ec <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 2ec:	1141                	addi	sp,sp,-16
+ 2ee:	e422                	sd	s0,8(sp)
+ 2f0:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 2f2:	ca19                	beqz	a2,308 <memset+0x1c>
+ 2f4:	87aa                	mv	a5,a0
+ 2f6:	1602                	slli	a2,a2,0x20
+ 2f8:	9201                	srli	a2,a2,0x20
+ 2fa:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 2fe:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 302:	0785                	addi	a5,a5,1
+ 304:	fee79de3          	bne	a5,a4,2fe <memset+0x12>
+  }
+  return dst;
+}
+ 308:	6422                	ld	s0,8(sp)
+ 30a:	0141                	addi	sp,sp,16
+ 30c:	8082                	ret
+
+000000000000030e <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 30e:	1141                	addi	sp,sp,-16
+ 310:	e422                	sd	s0,8(sp)
+ 312:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 314:	00054783          	lbu	a5,0(a0)
+ 318:	cb99                	beqz	a5,32e <strchr+0x20>
+    if(*s == c)
+ 31a:	00f58763          	beq	a1,a5,328 <strchr+0x1a>
+  for(; *s; s++)
+ 31e:	0505                	addi	a0,a0,1
+ 320:	00054783          	lbu	a5,0(a0)
+ 324:	fbfd                	bnez	a5,31a <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 326:	4501                	li	a0,0
+}
+ 328:	6422                	ld	s0,8(sp)
+ 32a:	0141                	addi	sp,sp,16
+ 32c:	8082                	ret
+  return 0;
+ 32e:	4501                	li	a0,0
+ 330:	bfe5                	j	328 <strchr+0x1a>
+
+0000000000000332 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 332:	711d                	addi	sp,sp,-96
+ 334:	ec86                	sd	ra,88(sp)
+ 336:	e8a2                	sd	s0,80(sp)
+ 338:	e4a6                	sd	s1,72(sp)
+ 33a:	e0ca                	sd	s2,64(sp)
+ 33c:	fc4e                	sd	s3,56(sp)
+ 33e:	f852                	sd	s4,48(sp)
+ 340:	f456                	sd	s5,40(sp)
+ 342:	f05a                	sd	s6,32(sp)
+ 344:	ec5e                	sd	s7,24(sp)
+ 346:	1080                	addi	s0,sp,96
+ 348:	8baa                	mv	s7,a0
+ 34a:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 34c:	892a                	mv	s2,a0
+ 34e:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 350:	4aa9                	li	s5,10
+ 352:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 354:	89a6                	mv	s3,s1
+ 356:	2485                	addiw	s1,s1,1
+ 358:	0344d663          	bge	s1,s4,384 <gets+0x52>
+    cc = read(0, &c, 1);
+ 35c:	4605                	li	a2,1
+ 35e:	faf40593          	addi	a1,s0,-81
+ 362:	4501                	li	a0,0
+ 364:	186000ef          	jal	4ea <read>
+    if(cc < 1)
+ 368:	00a05e63          	blez	a0,384 <gets+0x52>
+    buf[i++] = c;
+ 36c:	faf44783          	lbu	a5,-81(s0)
+ 370:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 374:	01578763          	beq	a5,s5,382 <gets+0x50>
+ 378:	0905                	addi	s2,s2,1
+ 37a:	fd679de3          	bne	a5,s6,354 <gets+0x22>
+    buf[i++] = c;
+ 37e:	89a6                	mv	s3,s1
+ 380:	a011                	j	384 <gets+0x52>
+ 382:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 384:	99de                	add	s3,s3,s7
+ 386:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 38a:	855e                	mv	a0,s7
+ 38c:	60e6                	ld	ra,88(sp)
+ 38e:	6446                	ld	s0,80(sp)
+ 390:	64a6                	ld	s1,72(sp)
+ 392:	6906                	ld	s2,64(sp)
+ 394:	79e2                	ld	s3,56(sp)
+ 396:	7a42                	ld	s4,48(sp)
+ 398:	7aa2                	ld	s5,40(sp)
+ 39a:	7b02                	ld	s6,32(sp)
+ 39c:	6be2                	ld	s7,24(sp)
+ 39e:	6125                	addi	sp,sp,96
+ 3a0:	8082                	ret
+
+00000000000003a2 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 3a2:	1101                	addi	sp,sp,-32
+ 3a4:	ec06                	sd	ra,24(sp)
+ 3a6:	e822                	sd	s0,16(sp)
+ 3a8:	e04a                	sd	s2,0(sp)
+ 3aa:	1000                	addi	s0,sp,32
+ 3ac:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 3ae:	4581                	li	a1,0
+ 3b0:	162000ef          	jal	512 <open>
+  if(fd < 0)
+ 3b4:	02054263          	bltz	a0,3d8 <stat+0x36>
+ 3b8:	e426                	sd	s1,8(sp)
+ 3ba:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 3bc:	85ca                	mv	a1,s2
+ 3be:	16c000ef          	jal	52a <fstat>
+ 3c2:	892a                	mv	s2,a0
+  close(fd);
+ 3c4:	8526                	mv	a0,s1
+ 3c6:	134000ef          	jal	4fa <close>
+  return r;
+ 3ca:	64a2                	ld	s1,8(sp)
+}
+ 3cc:	854a                	mv	a0,s2
+ 3ce:	60e2                	ld	ra,24(sp)
+ 3d0:	6442                	ld	s0,16(sp)
+ 3d2:	6902                	ld	s2,0(sp)
+ 3d4:	6105                	addi	sp,sp,32
+ 3d6:	8082                	ret
+    return -1;
+ 3d8:	597d                	li	s2,-1
+ 3da:	bfcd                	j	3cc <stat+0x2a>
+
+00000000000003dc <atoi>:
+
+int
+atoi(const char *s)
+{
+ 3dc:	1141                	addi	sp,sp,-16
+ 3de:	e422                	sd	s0,8(sp)
+ 3e0:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 3e2:	00054683          	lbu	a3,0(a0)
+ 3e6:	fd06879b          	addiw	a5,a3,-48
+ 3ea:	0ff7f793          	zext.b	a5,a5
+ 3ee:	4625                	li	a2,9
+ 3f0:	02f66863          	bltu	a2,a5,420 <atoi+0x44>
+ 3f4:	872a                	mv	a4,a0
+  n = 0;
+ 3f6:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 3f8:	0705                	addi	a4,a4,1
+ 3fa:	0025179b          	slliw	a5,a0,0x2
+ 3fe:	9fa9                	addw	a5,a5,a0
+ 400:	0017979b          	slliw	a5,a5,0x1
+ 404:	9fb5                	addw	a5,a5,a3
+ 406:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 40a:	00074683          	lbu	a3,0(a4)
+ 40e:	fd06879b          	addiw	a5,a3,-48
+ 412:	0ff7f793          	zext.b	a5,a5
+ 416:	fef671e3          	bgeu	a2,a5,3f8 <atoi+0x1c>
+  return n;
+}
+ 41a:	6422                	ld	s0,8(sp)
+ 41c:	0141                	addi	sp,sp,16
+ 41e:	8082                	ret
+  n = 0;
+ 420:	4501                	li	a0,0
+ 422:	bfe5                	j	41a <atoi+0x3e>
+
+0000000000000424 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 424:	1141                	addi	sp,sp,-16
+ 426:	e422                	sd	s0,8(sp)
+ 428:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 42a:	02b57463          	bgeu	a0,a1,452 <memmove+0x2e>
+    while(n-- > 0)
+ 42e:	00c05f63          	blez	a2,44c <memmove+0x28>
+ 432:	1602                	slli	a2,a2,0x20
+ 434:	9201                	srli	a2,a2,0x20
+ 436:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 43a:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 43c:	0585                	addi	a1,a1,1
+ 43e:	0705                	addi	a4,a4,1
+ 440:	fff5c683          	lbu	a3,-1(a1)
+ 444:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 448:	fef71ae3          	bne	a4,a5,43c <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 44c:	6422                	ld	s0,8(sp)
+ 44e:	0141                	addi	sp,sp,16
+ 450:	8082                	ret
+    dst += n;
+ 452:	00c50733          	add	a4,a0,a2
+    src += n;
+ 456:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 458:	fec05ae3          	blez	a2,44c <memmove+0x28>
+ 45c:	fff6079b          	addiw	a5,a2,-1
+ 460:	1782                	slli	a5,a5,0x20
+ 462:	9381                	srli	a5,a5,0x20
+ 464:	fff7c793          	not	a5,a5
+ 468:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 46a:	15fd                	addi	a1,a1,-1
+ 46c:	177d                	addi	a4,a4,-1
+ 46e:	0005c683          	lbu	a3,0(a1)
+ 472:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 476:	fee79ae3          	bne	a5,a4,46a <memmove+0x46>
+ 47a:	bfc9                	j	44c <memmove+0x28>
+
+000000000000047c <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 47c:	1141                	addi	sp,sp,-16
+ 47e:	e422                	sd	s0,8(sp)
+ 480:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 482:	ca05                	beqz	a2,4b2 <memcmp+0x36>
+ 484:	fff6069b          	addiw	a3,a2,-1
+ 488:	1682                	slli	a3,a3,0x20
+ 48a:	9281                	srli	a3,a3,0x20
+ 48c:	0685                	addi	a3,a3,1
+ 48e:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 490:	00054783          	lbu	a5,0(a0)
+ 494:	0005c703          	lbu	a4,0(a1)
+ 498:	00e79863          	bne	a5,a4,4a8 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 49c:	0505                	addi	a0,a0,1
+    p2++;
+ 49e:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 4a0:	fed518e3          	bne	a0,a3,490 <memcmp+0x14>
+  }
+  return 0;
+ 4a4:	4501                	li	a0,0
+ 4a6:	a019                	j	4ac <memcmp+0x30>
+      return *p1 - *p2;
+ 4a8:	40e7853b          	subw	a0,a5,a4
+}
+ 4ac:	6422                	ld	s0,8(sp)
+ 4ae:	0141                	addi	sp,sp,16
+ 4b0:	8082                	ret
+  return 0;
+ 4b2:	4501                	li	a0,0
+ 4b4:	bfe5                	j	4ac <memcmp+0x30>
+
+00000000000004b6 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 4b6:	1141                	addi	sp,sp,-16
+ 4b8:	e406                	sd	ra,8(sp)
+ 4ba:	e022                	sd	s0,0(sp)
+ 4bc:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 4be:	f67ff0ef          	jal	424 <memmove>
+}
+ 4c2:	60a2                	ld	ra,8(sp)
+ 4c4:	6402                	ld	s0,0(sp)
+ 4c6:	0141                	addi	sp,sp,16
+ 4c8:	8082                	ret
+
+00000000000004ca <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 4ca:	4885                	li	a7,1
+ ecall
+ 4cc:	00000073          	ecall
+ ret
+ 4d0:	8082                	ret
+
+00000000000004d2 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 4d2:	4889                	li	a7,2
+ ecall
+ 4d4:	00000073          	ecall
+ ret
+ 4d8:	8082                	ret
+
+00000000000004da <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 4da:	488d                	li	a7,3
+ ecall
+ 4dc:	00000073          	ecall
+ ret
+ 4e0:	8082                	ret
+
+00000000000004e2 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 4e2:	4891                	li	a7,4
+ ecall
+ 4e4:	00000073          	ecall
+ ret
+ 4e8:	8082                	ret
+
+00000000000004ea <read>:
+.global read
+read:
+ li a7, SYS_read
+ 4ea:	4895                	li	a7,5
+ ecall
+ 4ec:	00000073          	ecall
+ ret
+ 4f0:	8082                	ret
+
+00000000000004f2 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 4f2:	48c1                	li	a7,16
+ ecall
+ 4f4:	00000073          	ecall
+ ret
+ 4f8:	8082                	ret
+
+00000000000004fa <close>:
+.global close
+close:
+ li a7, SYS_close
+ 4fa:	48d5                	li	a7,21
+ ecall
+ 4fc:	00000073          	ecall
+ ret
+ 500:	8082                	ret
+
+0000000000000502 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 502:	4899                	li	a7,6
+ ecall
+ 504:	00000073          	ecall
+ ret
+ 508:	8082                	ret
+
+000000000000050a <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 50a:	489d                	li	a7,7
+ ecall
+ 50c:	00000073          	ecall
+ ret
+ 510:	8082                	ret
+
+0000000000000512 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 512:	48bd                	li	a7,15
+ ecall
+ 514:	00000073          	ecall
+ ret
+ 518:	8082                	ret
+
+000000000000051a <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 51a:	48c5                	li	a7,17
+ ecall
+ 51c:	00000073          	ecall
+ ret
+ 520:	8082                	ret
+
+0000000000000522 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 522:	48c9                	li	a7,18
+ ecall
+ 524:	00000073          	ecall
+ ret
+ 528:	8082                	ret
+
+000000000000052a <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 52a:	48a1                	li	a7,8
+ ecall
+ 52c:	00000073          	ecall
+ ret
+ 530:	8082                	ret
+
+0000000000000532 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 532:	48cd                	li	a7,19
+ ecall
+ 534:	00000073          	ecall
+ ret
+ 538:	8082                	ret
+
+000000000000053a <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 53a:	48d1                	li	a7,20
+ ecall
+ 53c:	00000073          	ecall
+ ret
+ 540:	8082                	ret
+
+0000000000000542 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 542:	48a5                	li	a7,9
+ ecall
+ 544:	00000073          	ecall
+ ret
+ 548:	8082                	ret
+
+000000000000054a <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 54a:	48a9                	li	a7,10
+ ecall
+ 54c:	00000073          	ecall
+ ret
+ 550:	8082                	ret
+
+0000000000000552 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 552:	48ad                	li	a7,11
+ ecall
+ 554:	00000073          	ecall
+ ret
+ 558:	8082                	ret
+
+000000000000055a <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 55a:	48b1                	li	a7,12
+ ecall
+ 55c:	00000073          	ecall
+ ret
+ 560:	8082                	ret
+
+0000000000000562 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 562:	48b5                	li	a7,13
+ ecall
+ 564:	00000073          	ecall
+ ret
+ 568:	8082                	ret
+
+000000000000056a <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 56a:	48b9                	li	a7,14
+ ecall
+ 56c:	00000073          	ecall
+ ret
+ 570:	8082                	ret
+
+0000000000000572 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 572:	48d9                	li	a7,22
+ ecall
+ 574:	00000073          	ecall
+ ret
+ 578:	8082                	ret
+
+000000000000057a <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 57a:	48dd                	li	a7,23
+ ecall
+ 57c:	00000073          	ecall
+ ret
+ 580:	8082                	ret
+
+0000000000000582 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 582:	48e1                	li	a7,24
+ ecall
+ 584:	00000073          	ecall
+ ret
+ 588:	8082                	ret
+
+000000000000058a <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 58a:	1101                	addi	sp,sp,-32
+ 58c:	ec06                	sd	ra,24(sp)
+ 58e:	e822                	sd	s0,16(sp)
+ 590:	1000                	addi	s0,sp,32
+ 592:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 596:	4605                	li	a2,1
+ 598:	fef40593          	addi	a1,s0,-17
+ 59c:	f57ff0ef          	jal	4f2 <write>
+}
+ 5a0:	60e2                	ld	ra,24(sp)
+ 5a2:	6442                	ld	s0,16(sp)
+ 5a4:	6105                	addi	sp,sp,32
+ 5a6:	8082                	ret
+
+00000000000005a8 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 5a8:	7139                	addi	sp,sp,-64
+ 5aa:	fc06                	sd	ra,56(sp)
+ 5ac:	f822                	sd	s0,48(sp)
+ 5ae:	f426                	sd	s1,40(sp)
+ 5b0:	0080                	addi	s0,sp,64
+ 5b2:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 5b4:	c299                	beqz	a3,5ba <printint+0x12>
+ 5b6:	0805c963          	bltz	a1,648 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 5ba:	2581                	sext.w	a1,a1
+  neg = 0;
+ 5bc:	4881                	li	a7,0
+ 5be:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 5c2:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 5c4:	2601                	sext.w	a2,a2
+ 5c6:	00000517          	auipc	a0,0x0
+ 5ca:	55250513          	addi	a0,a0,1362 # b18 <digits>
+ 5ce:	883a                	mv	a6,a4
+ 5d0:	2705                	addiw	a4,a4,1
+ 5d2:	02c5f7bb          	remuw	a5,a1,a2
+ 5d6:	1782                	slli	a5,a5,0x20
+ 5d8:	9381                	srli	a5,a5,0x20
+ 5da:	97aa                	add	a5,a5,a0
+ 5dc:	0007c783          	lbu	a5,0(a5)
+ 5e0:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 5e4:	0005879b          	sext.w	a5,a1
+ 5e8:	02c5d5bb          	divuw	a1,a1,a2
+ 5ec:	0685                	addi	a3,a3,1
+ 5ee:	fec7f0e3          	bgeu	a5,a2,5ce <printint+0x26>
+  if(neg)
+ 5f2:	00088c63          	beqz	a7,60a <printint+0x62>
+    buf[i++] = '-';
+ 5f6:	fd070793          	addi	a5,a4,-48
+ 5fa:	00878733          	add	a4,a5,s0
+ 5fe:	02d00793          	li	a5,45
+ 602:	fef70823          	sb	a5,-16(a4)
+ 606:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 60a:	02e05a63          	blez	a4,63e <printint+0x96>
+ 60e:	f04a                	sd	s2,32(sp)
+ 610:	ec4e                	sd	s3,24(sp)
+ 612:	fc040793          	addi	a5,s0,-64
+ 616:	00e78933          	add	s2,a5,a4
+ 61a:	fff78993          	addi	s3,a5,-1
+ 61e:	99ba                	add	s3,s3,a4
+ 620:	377d                	addiw	a4,a4,-1
+ 622:	1702                	slli	a4,a4,0x20
+ 624:	9301                	srli	a4,a4,0x20
+ 626:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 62a:	fff94583          	lbu	a1,-1(s2)
+ 62e:	8526                	mv	a0,s1
+ 630:	f5bff0ef          	jal	58a <putc>
+  while(--i >= 0)
+ 634:	197d                	addi	s2,s2,-1
+ 636:	ff391ae3          	bne	s2,s3,62a <printint+0x82>
+ 63a:	7902                	ld	s2,32(sp)
+ 63c:	69e2                	ld	s3,24(sp)
+}
+ 63e:	70e2                	ld	ra,56(sp)
+ 640:	7442                	ld	s0,48(sp)
+ 642:	74a2                	ld	s1,40(sp)
+ 644:	6121                	addi	sp,sp,64
+ 646:	8082                	ret
+    x = -xx;
+ 648:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 64c:	4885                	li	a7,1
+    x = -xx;
+ 64e:	bf85                	j	5be <printint+0x16>
+
+0000000000000650 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 650:	711d                	addi	sp,sp,-96
+ 652:	ec86                	sd	ra,88(sp)
+ 654:	e8a2                	sd	s0,80(sp)
+ 656:	e0ca                	sd	s2,64(sp)
+ 658:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 65a:	0005c903          	lbu	s2,0(a1)
+ 65e:	26090863          	beqz	s2,8ce <vprintf+0x27e>
+ 662:	e4a6                	sd	s1,72(sp)
+ 664:	fc4e                	sd	s3,56(sp)
+ 666:	f852                	sd	s4,48(sp)
+ 668:	f456                	sd	s5,40(sp)
+ 66a:	f05a                	sd	s6,32(sp)
+ 66c:	ec5e                	sd	s7,24(sp)
+ 66e:	e862                	sd	s8,16(sp)
+ 670:	e466                	sd	s9,8(sp)
+ 672:	8b2a                	mv	s6,a0
+ 674:	8a2e                	mv	s4,a1
+ 676:	8bb2                	mv	s7,a2
+  state = 0;
+ 678:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 67a:	4481                	li	s1,0
+ 67c:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 67e:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 682:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 686:	06c00c93          	li	s9,108
+ 68a:	a005                	j	6aa <vprintf+0x5a>
+        putc(fd, c0);
+ 68c:	85ca                	mv	a1,s2
+ 68e:	855a                	mv	a0,s6
+ 690:	efbff0ef          	jal	58a <putc>
+ 694:	a019                	j	69a <vprintf+0x4a>
+    } else if(state == '%'){
+ 696:	03598263          	beq	s3,s5,6ba <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 69a:	2485                	addiw	s1,s1,1
+ 69c:	8726                	mv	a4,s1
+ 69e:	009a07b3          	add	a5,s4,s1
+ 6a2:	0007c903          	lbu	s2,0(a5)
+ 6a6:	20090c63          	beqz	s2,8be <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 6aa:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 6ae:	fe0994e3          	bnez	s3,696 <vprintf+0x46>
+      if(c0 == '%'){
+ 6b2:	fd579de3          	bne	a5,s5,68c <vprintf+0x3c>
+        state = '%';
+ 6b6:	89be                	mv	s3,a5
+ 6b8:	b7cd                	j	69a <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 6ba:	00ea06b3          	add	a3,s4,a4
+ 6be:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 6c2:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 6c4:	c681                	beqz	a3,6cc <vprintf+0x7c>
+ 6c6:	9752                	add	a4,a4,s4
+ 6c8:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 6cc:	03878f63          	beq	a5,s8,70a <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 6d0:	05978963          	beq	a5,s9,722 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 6d4:	07500713          	li	a4,117
+ 6d8:	0ee78363          	beq	a5,a4,7be <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 6dc:	07800713          	li	a4,120
+ 6e0:	12e78563          	beq	a5,a4,80a <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 6e4:	07000713          	li	a4,112
+ 6e8:	14e78a63          	beq	a5,a4,83c <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 6ec:	07300713          	li	a4,115
+ 6f0:	18e78a63          	beq	a5,a4,884 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 6f4:	02500713          	li	a4,37
+ 6f8:	04e79563          	bne	a5,a4,742 <vprintf+0xf2>
+        putc(fd, '%');
+ 6fc:	02500593          	li	a1,37
+ 700:	855a                	mv	a0,s6
+ 702:	e89ff0ef          	jal	58a <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 706:	4981                	li	s3,0
+ 708:	bf49                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 70a:	008b8913          	addi	s2,s7,8
+ 70e:	4685                	li	a3,1
+ 710:	4629                	li	a2,10
+ 712:	000ba583          	lw	a1,0(s7)
+ 716:	855a                	mv	a0,s6
+ 718:	e91ff0ef          	jal	5a8 <printint>
+ 71c:	8bca                	mv	s7,s2
+      state = 0;
+ 71e:	4981                	li	s3,0
+ 720:	bfad                	j	69a <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 722:	06400793          	li	a5,100
+ 726:	02f68963          	beq	a3,a5,758 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 72a:	06c00793          	li	a5,108
+ 72e:	04f68263          	beq	a3,a5,772 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 732:	07500793          	li	a5,117
+ 736:	0af68063          	beq	a3,a5,7d6 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 73a:	07800793          	li	a5,120
+ 73e:	0ef68263          	beq	a3,a5,822 <vprintf+0x1d2>
+        putc(fd, '%');
+ 742:	02500593          	li	a1,37
+ 746:	855a                	mv	a0,s6
+ 748:	e43ff0ef          	jal	58a <putc>
+        putc(fd, c0);
+ 74c:	85ca                	mv	a1,s2
+ 74e:	855a                	mv	a0,s6
+ 750:	e3bff0ef          	jal	58a <putc>
+      state = 0;
+ 754:	4981                	li	s3,0
+ 756:	b791                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 758:	008b8913          	addi	s2,s7,8
+ 75c:	4685                	li	a3,1
+ 75e:	4629                	li	a2,10
+ 760:	000ba583          	lw	a1,0(s7)
+ 764:	855a                	mv	a0,s6
+ 766:	e43ff0ef          	jal	5a8 <printint>
+        i += 1;
+ 76a:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 76c:	8bca                	mv	s7,s2
+      state = 0;
+ 76e:	4981                	li	s3,0
+        i += 1;
+ 770:	b72d                	j	69a <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 772:	06400793          	li	a5,100
+ 776:	02f60763          	beq	a2,a5,7a4 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 77a:	07500793          	li	a5,117
+ 77e:	06f60963          	beq	a2,a5,7f0 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 782:	07800793          	li	a5,120
+ 786:	faf61ee3          	bne	a2,a5,742 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 78a:	008b8913          	addi	s2,s7,8
+ 78e:	4681                	li	a3,0
+ 790:	4641                	li	a2,16
+ 792:	000ba583          	lw	a1,0(s7)
+ 796:	855a                	mv	a0,s6
+ 798:	e11ff0ef          	jal	5a8 <printint>
+        i += 2;
+ 79c:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 79e:	8bca                	mv	s7,s2
+      state = 0;
+ 7a0:	4981                	li	s3,0
+        i += 2;
+ 7a2:	bde5                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 7a4:	008b8913          	addi	s2,s7,8
+ 7a8:	4685                	li	a3,1
+ 7aa:	4629                	li	a2,10
+ 7ac:	000ba583          	lw	a1,0(s7)
+ 7b0:	855a                	mv	a0,s6
+ 7b2:	df7ff0ef          	jal	5a8 <printint>
+        i += 2;
+ 7b6:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 7b8:	8bca                	mv	s7,s2
+      state = 0;
+ 7ba:	4981                	li	s3,0
+        i += 2;
+ 7bc:	bdf9                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 7be:	008b8913          	addi	s2,s7,8
+ 7c2:	4681                	li	a3,0
+ 7c4:	4629                	li	a2,10
+ 7c6:	000ba583          	lw	a1,0(s7)
+ 7ca:	855a                	mv	a0,s6
+ 7cc:	dddff0ef          	jal	5a8 <printint>
+ 7d0:	8bca                	mv	s7,s2
+      state = 0;
+ 7d2:	4981                	li	s3,0
+ 7d4:	b5d9                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7d6:	008b8913          	addi	s2,s7,8
+ 7da:	4681                	li	a3,0
+ 7dc:	4629                	li	a2,10
+ 7de:	000ba583          	lw	a1,0(s7)
+ 7e2:	855a                	mv	a0,s6
+ 7e4:	dc5ff0ef          	jal	5a8 <printint>
+        i += 1;
+ 7e8:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7ea:	8bca                	mv	s7,s2
+      state = 0;
+ 7ec:	4981                	li	s3,0
+        i += 1;
+ 7ee:	b575                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 7f0:	008b8913          	addi	s2,s7,8
+ 7f4:	4681                	li	a3,0
+ 7f6:	4629                	li	a2,10
+ 7f8:	000ba583          	lw	a1,0(s7)
+ 7fc:	855a                	mv	a0,s6
+ 7fe:	dabff0ef          	jal	5a8 <printint>
+        i += 2;
+ 802:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 804:	8bca                	mv	s7,s2
+      state = 0;
+ 806:	4981                	li	s3,0
+        i += 2;
+ 808:	bd49                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 80a:	008b8913          	addi	s2,s7,8
+ 80e:	4681                	li	a3,0
+ 810:	4641                	li	a2,16
+ 812:	000ba583          	lw	a1,0(s7)
+ 816:	855a                	mv	a0,s6
+ 818:	d91ff0ef          	jal	5a8 <printint>
+ 81c:	8bca                	mv	s7,s2
+      state = 0;
+ 81e:	4981                	li	s3,0
+ 820:	bdad                	j	69a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 822:	008b8913          	addi	s2,s7,8
+ 826:	4681                	li	a3,0
+ 828:	4641                	li	a2,16
+ 82a:	000ba583          	lw	a1,0(s7)
+ 82e:	855a                	mv	a0,s6
+ 830:	d79ff0ef          	jal	5a8 <printint>
+        i += 1;
+ 834:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 836:	8bca                	mv	s7,s2
+      state = 0;
+ 838:	4981                	li	s3,0
+        i += 1;
+ 83a:	b585                	j	69a <vprintf+0x4a>
+ 83c:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 83e:	008b8d13          	addi	s10,s7,8
+ 842:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 846:	03000593          	li	a1,48
+ 84a:	855a                	mv	a0,s6
+ 84c:	d3fff0ef          	jal	58a <putc>
+  putc(fd, 'x');
+ 850:	07800593          	li	a1,120
+ 854:	855a                	mv	a0,s6
+ 856:	d35ff0ef          	jal	58a <putc>
+ 85a:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 85c:	00000b97          	auipc	s7,0x0
+ 860:	2bcb8b93          	addi	s7,s7,700 # b18 <digits>
+ 864:	03c9d793          	srli	a5,s3,0x3c
+ 868:	97de                	add	a5,a5,s7
+ 86a:	0007c583          	lbu	a1,0(a5)
+ 86e:	855a                	mv	a0,s6
+ 870:	d1bff0ef          	jal	58a <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 874:	0992                	slli	s3,s3,0x4
+ 876:	397d                	addiw	s2,s2,-1
+ 878:	fe0916e3          	bnez	s2,864 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 87c:	8bea                	mv	s7,s10
+      state = 0;
+ 87e:	4981                	li	s3,0
+ 880:	6d02                	ld	s10,0(sp)
+ 882:	bd21                	j	69a <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 884:	008b8993          	addi	s3,s7,8
+ 888:	000bb903          	ld	s2,0(s7)
+ 88c:	00090f63          	beqz	s2,8aa <vprintf+0x25a>
+        for(; *s; s++)
+ 890:	00094583          	lbu	a1,0(s2)
+ 894:	c195                	beqz	a1,8b8 <vprintf+0x268>
+          putc(fd, *s);
+ 896:	855a                	mv	a0,s6
+ 898:	cf3ff0ef          	jal	58a <putc>
+        for(; *s; s++)
+ 89c:	0905                	addi	s2,s2,1
+ 89e:	00094583          	lbu	a1,0(s2)
+ 8a2:	f9f5                	bnez	a1,896 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 8a4:	8bce                	mv	s7,s3
+      state = 0;
+ 8a6:	4981                	li	s3,0
+ 8a8:	bbcd                	j	69a <vprintf+0x4a>
+          s = "(null)";
+ 8aa:	00000917          	auipc	s2,0x0
+ 8ae:	26690913          	addi	s2,s2,614 # b10 <malloc+0x15a>
+        for(; *s; s++)
+ 8b2:	02800593          	li	a1,40
+ 8b6:	b7c5                	j	896 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 8b8:	8bce                	mv	s7,s3
+      state = 0;
+ 8ba:	4981                	li	s3,0
+ 8bc:	bbf9                	j	69a <vprintf+0x4a>
+ 8be:	64a6                	ld	s1,72(sp)
+ 8c0:	79e2                	ld	s3,56(sp)
+ 8c2:	7a42                	ld	s4,48(sp)
+ 8c4:	7aa2                	ld	s5,40(sp)
+ 8c6:	7b02                	ld	s6,32(sp)
+ 8c8:	6be2                	ld	s7,24(sp)
+ 8ca:	6c42                	ld	s8,16(sp)
+ 8cc:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 8ce:	60e6                	ld	ra,88(sp)
+ 8d0:	6446                	ld	s0,80(sp)
+ 8d2:	6906                	ld	s2,64(sp)
+ 8d4:	6125                	addi	sp,sp,96
+ 8d6:	8082                	ret
+
+00000000000008d8 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 8d8:	715d                	addi	sp,sp,-80
+ 8da:	ec06                	sd	ra,24(sp)
+ 8dc:	e822                	sd	s0,16(sp)
+ 8de:	1000                	addi	s0,sp,32
+ 8e0:	e010                	sd	a2,0(s0)
+ 8e2:	e414                	sd	a3,8(s0)
+ 8e4:	e818                	sd	a4,16(s0)
+ 8e6:	ec1c                	sd	a5,24(s0)
+ 8e8:	03043023          	sd	a6,32(s0)
+ 8ec:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 8f0:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 8f4:	8622                	mv	a2,s0
+ 8f6:	d5bff0ef          	jal	650 <vprintf>
+}
+ 8fa:	60e2                	ld	ra,24(sp)
+ 8fc:	6442                	ld	s0,16(sp)
+ 8fe:	6161                	addi	sp,sp,80
+ 900:	8082                	ret
+
+0000000000000902 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 902:	711d                	addi	sp,sp,-96
+ 904:	ec06                	sd	ra,24(sp)
+ 906:	e822                	sd	s0,16(sp)
+ 908:	1000                	addi	s0,sp,32
+ 90a:	e40c                	sd	a1,8(s0)
+ 90c:	e810                	sd	a2,16(s0)
+ 90e:	ec14                	sd	a3,24(s0)
+ 910:	f018                	sd	a4,32(s0)
+ 912:	f41c                	sd	a5,40(s0)
+ 914:	03043823          	sd	a6,48(s0)
+ 918:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 91c:	00840613          	addi	a2,s0,8
+ 920:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 924:	85aa                	mv	a1,a0
+ 926:	4505                	li	a0,1
+ 928:	d29ff0ef          	jal	650 <vprintf>
+}
+ 92c:	60e2                	ld	ra,24(sp)
+ 92e:	6442                	ld	s0,16(sp)
+ 930:	6125                	addi	sp,sp,96
+ 932:	8082                	ret
+
+0000000000000934 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 934:	1141                	addi	sp,sp,-16
+ 936:	e422                	sd	s0,8(sp)
+ 938:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 93a:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 93e:	00000797          	auipc	a5,0x0
+ 942:	6c27b783          	ld	a5,1730(a5) # 1000 <freep>
+ 946:	a02d                	j	970 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 948:	4618                	lw	a4,8(a2)
+ 94a:	9f2d                	addw	a4,a4,a1
+ 94c:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 950:	6398                	ld	a4,0(a5)
+ 952:	6310                	ld	a2,0(a4)
+ 954:	a83d                	j	992 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 956:	ff852703          	lw	a4,-8(a0)
+ 95a:	9f31                	addw	a4,a4,a2
+ 95c:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 95e:	ff053683          	ld	a3,-16(a0)
+ 962:	a091                	j	9a6 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 964:	6398                	ld	a4,0(a5)
+ 966:	00e7e463          	bltu	a5,a4,96e <free+0x3a>
+ 96a:	00e6ea63          	bltu	a3,a4,97e <free+0x4a>
+{
+ 96e:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 970:	fed7fae3          	bgeu	a5,a3,964 <free+0x30>
+ 974:	6398                	ld	a4,0(a5)
+ 976:	00e6e463          	bltu	a3,a4,97e <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 97a:	fee7eae3          	bltu	a5,a4,96e <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 97e:	ff852583          	lw	a1,-8(a0)
+ 982:	6390                	ld	a2,0(a5)
+ 984:	02059813          	slli	a6,a1,0x20
+ 988:	01c85713          	srli	a4,a6,0x1c
+ 98c:	9736                	add	a4,a4,a3
+ 98e:	fae60de3          	beq	a2,a4,948 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 992:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 996:	4790                	lw	a2,8(a5)
+ 998:	02061593          	slli	a1,a2,0x20
+ 99c:	01c5d713          	srli	a4,a1,0x1c
+ 9a0:	973e                	add	a4,a4,a5
+ 9a2:	fae68ae3          	beq	a3,a4,956 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 9a6:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 9a8:	00000717          	auipc	a4,0x0
+ 9ac:	64f73c23          	sd	a5,1624(a4) # 1000 <freep>
+}
+ 9b0:	6422                	ld	s0,8(sp)
+ 9b2:	0141                	addi	sp,sp,16
+ 9b4:	8082                	ret
+
+00000000000009b6 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 9b6:	7139                	addi	sp,sp,-64
+ 9b8:	fc06                	sd	ra,56(sp)
+ 9ba:	f822                	sd	s0,48(sp)
+ 9bc:	f426                	sd	s1,40(sp)
+ 9be:	ec4e                	sd	s3,24(sp)
+ 9c0:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 9c2:	02051493          	slli	s1,a0,0x20
+ 9c6:	9081                	srli	s1,s1,0x20
+ 9c8:	04bd                	addi	s1,s1,15
+ 9ca:	8091                	srli	s1,s1,0x4
+ 9cc:	0014899b          	addiw	s3,s1,1
+ 9d0:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 9d2:	00000517          	auipc	a0,0x0
+ 9d6:	62e53503          	ld	a0,1582(a0) # 1000 <freep>
+ 9da:	c915                	beqz	a0,a0e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9dc:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 9de:	4798                	lw	a4,8(a5)
+ 9e0:	08977a63          	bgeu	a4,s1,a74 <malloc+0xbe>
+ 9e4:	f04a                	sd	s2,32(sp)
+ 9e6:	e852                	sd	s4,16(sp)
+ 9e8:	e456                	sd	s5,8(sp)
+ 9ea:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 9ec:	8a4e                	mv	s4,s3
+ 9ee:	0009871b          	sext.w	a4,s3
+ 9f2:	6685                	lui	a3,0x1
+ 9f4:	00d77363          	bgeu	a4,a3,9fa <malloc+0x44>
+ 9f8:	6a05                	lui	s4,0x1
+ 9fa:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 9fe:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ a02:	00000917          	auipc	s2,0x0
+ a06:	5fe90913          	addi	s2,s2,1534 # 1000 <freep>
+  if(p == (char*)-1)
+ a0a:	5afd                	li	s5,-1
+ a0c:	a081                	j	a4c <malloc+0x96>
+ a0e:	f04a                	sd	s2,32(sp)
+ a10:	e852                	sd	s4,16(sp)
+ a12:	e456                	sd	s5,8(sp)
+ a14:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ a16:	00000797          	auipc	a5,0x0
+ a1a:	60a78793          	addi	a5,a5,1546 # 1020 <base>
+ a1e:	00000717          	auipc	a4,0x0
+ a22:	5ef73123          	sd	a5,1506(a4) # 1000 <freep>
+ a26:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ a28:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ a2c:	b7c1                	j	9ec <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ a2e:	6398                	ld	a4,0(a5)
+ a30:	e118                	sd	a4,0(a0)
+ a32:	a8a9                	j	a8c <malloc+0xd6>
+  hp->s.size = nu;
+ a34:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ a38:	0541                	addi	a0,a0,16
+ a3a:	efbff0ef          	jal	934 <free>
+  return freep;
+ a3e:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ a42:	c12d                	beqz	a0,aa4 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a44:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ a46:	4798                	lw	a4,8(a5)
+ a48:	02977263          	bgeu	a4,s1,a6c <malloc+0xb6>
+    if(p == freep)
+ a4c:	00093703          	ld	a4,0(s2)
+ a50:	853e                	mv	a0,a5
+ a52:	fef719e3          	bne	a4,a5,a44 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ a56:	8552                	mv	a0,s4
+ a58:	b03ff0ef          	jal	55a <sbrk>
+  if(p == (char*)-1)
+ a5c:	fd551ce3          	bne	a0,s5,a34 <malloc+0x7e>
+        return 0;
+ a60:	4501                	li	a0,0
+ a62:	7902                	ld	s2,32(sp)
+ a64:	6a42                	ld	s4,16(sp)
+ a66:	6aa2                	ld	s5,8(sp)
+ a68:	6b02                	ld	s6,0(sp)
+ a6a:	a03d                	j	a98 <malloc+0xe2>
+ a6c:	7902                	ld	s2,32(sp)
+ a6e:	6a42                	ld	s4,16(sp)
+ a70:	6aa2                	ld	s5,8(sp)
+ a72:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ a74:	fae48de3          	beq	s1,a4,a2e <malloc+0x78>
+        p->s.size -= nunits;
+ a78:	4137073b          	subw	a4,a4,s3
+ a7c:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ a7e:	02071693          	slli	a3,a4,0x20
+ a82:	01c6d713          	srli	a4,a3,0x1c
+ a86:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ a88:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ a8c:	00000717          	auipc	a4,0x0
+ a90:	56a73a23          	sd	a0,1396(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ a94:	01078513          	addi	a0,a5,16
+  }
+}
+ a98:	70e2                	ld	ra,56(sp)
+ a9a:	7442                	ld	s0,48(sp)
+ a9c:	74a2                	ld	s1,40(sp)
+ a9e:	69e2                	ld	s3,24(sp)
+ aa0:	6121                	addi	sp,sp,64
+ aa2:	8082                	ret
+ aa4:	7902                	ld	s2,32(sp)
+ aa6:	6a42                	ld	s4,16(sp)
+ aa8:	6aa2                	ld	s5,8(sp)
+ aaa:	6b02                	ld	s6,0(sp)
+ aac:	b7f5                	j	a98 <malloc+0xe2>
diff --git a/user/ls.c b/user/ls.c
new file mode 100644
index 0000000..39ab074
--- /dev/null
+++ b/user/ls.c
@@ -0,0 +1,87 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+char*
+fmtname(char *path)
+{
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  // Find first character after last slash.
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+
+  // Return blank-padded name.
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+
+void
+ls(char *path)
+{
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if((fd = open(path, O_RDONLY)) < 0){
+    fprintf(2, "ls: cannot open %s\n", path);
+    return;
+  }
+
+  if(fstat(fd, &st) < 0){
+    fprintf(2, "ls: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch(st.type){
+  case T_DEVICE:
+  case T_FILE:
+    printf("%s %d %d %d\n", fmtname(path), st.type, st.ino, (int) st.size);
+    break;
+
+  case T_DIR:
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+      printf("ls: path too long\n");
+      break;
+    }
+    strcpy(buf, path);
+    p = buf+strlen(buf);
+    *p++ = '/';
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+      if(de.inum == 0)
+        continue;
+      memmove(p, de.name, DIRSIZ);
+      p[DIRSIZ] = 0;
+      if(stat(buf, &st) < 0){
+        printf("ls: cannot stat %s\n", buf);
+        continue;
+      }
+      printf("%s %d %d %d\n", fmtname(buf), st.type, st.ino, (int) st.size);
+    }
+    break;
+  }
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    ls(".");
+    exit(0);
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  exit(0);
+}
diff --git a/user/ls.d b/user/ls.d
new file mode 100644
index 0000000..7dddf9b
--- /dev/null
+++ b/user/ls.d
@@ -0,0 +1,2 @@
+user/ls.o: user/ls.c kernel/types.h kernel/stat.h user/user.h kernel/fs.h \
+ kernel/fcntl.h
diff --git a/user/ls.o b/user/ls.o
new file mode 100644
index 0000000..29cc4c0
Binary files /dev/null and b/user/ls.o differ
diff --git a/user/ls.sym b/user/ls.sym
new file mode 100644
index 0000000..488751f
--- /dev/null
+++ b/user/ls.sym
@@ -0,0 +1,69 @@
+0000000000000000 .text
+0000000000000ab0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 ls.c
+0000000000001010 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000058a putc
+00000000000005a8 printint
+0000000000000b18 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001020 base
+000000000000027a strcpy
+0000000000000000 fmtname
+0000000000000902 printf
+0000000000000424 memmove
+000000000000051a mknod
+000000000000057a trace
+0000000000000332 gets
+0000000000000552 getpid
+0000000000000572 hello
+00000000000004b6 memcpy
+00000000000009b6 malloc
+0000000000000562 sleep
+0000000000000582 sysinfo
+00000000000004e2 pipe
+00000000000004f2 write
+000000000000052a fstat
+00000000000008d8 fprintf
+0000000000000502 kill
+0000000000000650 vprintf
+0000000000000542 chdir
+000000000000050a exec
+00000000000004da wait
+00000000000004ea read
+0000000000000522 unlink
+000000000000047c memcmp
+00000000000004ca fork
+000000000000055a sbrk
+000000000000056a uptime
+00000000000002ec memset
+000000000000021a main
+0000000000000296 strcmp
+000000000000054a dup
+00000000000003a2 stat
+0000000000000532 link
+0000000000000098 ls
+00000000000004d2 exit
+0000000000000268 start
+00000000000003dc atoi
+00000000000002c2 strlen
+0000000000000512 open
+000000000000030e strchr
+000000000000053a mkdir
+00000000000004fa close
+0000000000000934 free
diff --git a/user/mkdir.asm b/user/mkdir.asm
new file mode 100644
index 0000000..f070c87
--- /dev/null
+++ b/user/mkdir.asm
@@ -0,0 +1,1497 @@
+
+user/_mkdir:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+   8:	4785                	li	a5,1
+   a:	02a7d763          	bge	a5,a0,38 <main+0x38>
+   e:	e426                	sd	s1,8(sp)
+  10:	e04a                	sd	s2,0(sp)
+  12:	00858493          	addi	s1,a1,8
+  16:	ffe5091b          	addiw	s2,a0,-2
+  1a:	02091793          	slli	a5,s2,0x20
+  1e:	01d7d913          	srli	s2,a5,0x1d
+  22:	05c1                	addi	a1,a1,16
+  24:	992e                	add	s2,s2,a1
+    fprintf(2, "Usage: mkdir files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  26:	6088                	ld	a0,0(s1)
+  28:	310000ef          	jal	338 <mkdir>
+  2c:	02054263          	bltz	a0,50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  30:	04a1                	addi	s1,s1,8
+  32:	ff249ae3          	bne	s1,s2,26 <main+0x26>
+  36:	a02d                	j	60 <main+0x60>
+  38:	e426                	sd	s1,8(sp)
+  3a:	e04a                	sd	s2,0(sp)
+    fprintf(2, "Usage: mkdir files...\n");
+  3c:	00001597          	auipc	a1,0x1
+  40:	87458593          	addi	a1,a1,-1932 # 8b0 <malloc+0xfc>
+  44:	4509                	li	a0,2
+  46:	690000ef          	jal	6d6 <fprintf>
+    exit(1);
+  4a:	4505                	li	a0,1
+  4c:	284000ef          	jal	2d0 <exit>
+      fprintf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	6090                	ld	a2,0(s1)
+  52:	00001597          	auipc	a1,0x1
+  56:	87658593          	addi	a1,a1,-1930 # 8c8 <malloc+0x114>
+  5a:	4509                	li	a0,2
+  5c:	67a000ef          	jal	6d6 <fprintf>
+      break;
+    }
+  }
+
+  exit(0);
+  60:	4501                	li	a0,0
+  62:	26e000ef          	jal	2d0 <exit>
+
+0000000000000066 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  66:	1141                	addi	sp,sp,-16
+  68:	e406                	sd	ra,8(sp)
+  6a:	e022                	sd	s0,0(sp)
+  6c:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  6e:	f93ff0ef          	jal	0 <main>
+  exit(0);
+  72:	4501                	li	a0,0
+  74:	25c000ef          	jal	2d0 <exit>
+
+0000000000000078 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  78:	1141                	addi	sp,sp,-16
+  7a:	e422                	sd	s0,8(sp)
+  7c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7e:	87aa                	mv	a5,a0
+  80:	0585                	addi	a1,a1,1
+  82:	0785                	addi	a5,a5,1
+  84:	fff5c703          	lbu	a4,-1(a1)
+  88:	fee78fa3          	sb	a4,-1(a5)
+  8c:	fb75                	bnez	a4,80 <strcpy+0x8>
+    ;
+  return os;
+}
+  8e:	6422                	ld	s0,8(sp)
+  90:	0141                	addi	sp,sp,16
+  92:	8082                	ret
+
+0000000000000094 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  94:	1141                	addi	sp,sp,-16
+  96:	e422                	sd	s0,8(sp)
+  98:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  9a:	00054783          	lbu	a5,0(a0)
+  9e:	cb91                	beqz	a5,b2 <strcmp+0x1e>
+  a0:	0005c703          	lbu	a4,0(a1)
+  a4:	00f71763          	bne	a4,a5,b2 <strcmp+0x1e>
+    p++, q++;
+  a8:	0505                	addi	a0,a0,1
+  aa:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  ac:	00054783          	lbu	a5,0(a0)
+  b0:	fbe5                	bnez	a5,a0 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  b2:	0005c503          	lbu	a0,0(a1)
+}
+  b6:	40a7853b          	subw	a0,a5,a0
+  ba:	6422                	ld	s0,8(sp)
+  bc:	0141                	addi	sp,sp,16
+  be:	8082                	ret
+
+00000000000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	1141                	addi	sp,sp,-16
+  c2:	e422                	sd	s0,8(sp)
+  c4:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	00054783          	lbu	a5,0(a0)
+  ca:	cf91                	beqz	a5,e6 <strlen+0x26>
+  cc:	0505                	addi	a0,a0,1
+  ce:	87aa                	mv	a5,a0
+  d0:	86be                	mv	a3,a5
+  d2:	0785                	addi	a5,a5,1
+  d4:	fff7c703          	lbu	a4,-1(a5)
+  d8:	ff65                	bnez	a4,d0 <strlen+0x10>
+  da:	40a6853b          	subw	a0,a3,a0
+  de:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  e0:	6422                	ld	s0,8(sp)
+  e2:	0141                	addi	sp,sp,16
+  e4:	8082                	ret
+  for(n = 0; s[n]; n++)
+  e6:	4501                	li	a0,0
+  e8:	bfe5                	j	e0 <strlen+0x20>
+
+00000000000000ea <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  f0:	ca19                	beqz	a2,106 <memset+0x1c>
+  f2:	87aa                	mv	a5,a0
+  f4:	1602                	slli	a2,a2,0x20
+  f6:	9201                	srli	a2,a2,0x20
+  f8:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  fc:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 100:	0785                	addi	a5,a5,1
+ 102:	fee79de3          	bne	a5,a4,fc <memset+0x12>
+  }
+  return dst;
+}
+ 106:	6422                	ld	s0,8(sp)
+ 108:	0141                	addi	sp,sp,16
+ 10a:	8082                	ret
+
+000000000000010c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 10c:	1141                	addi	sp,sp,-16
+ 10e:	e422                	sd	s0,8(sp)
+ 110:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 112:	00054783          	lbu	a5,0(a0)
+ 116:	cb99                	beqz	a5,12c <strchr+0x20>
+    if(*s == c)
+ 118:	00f58763          	beq	a1,a5,126 <strchr+0x1a>
+  for(; *s; s++)
+ 11c:	0505                	addi	a0,a0,1
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	fbfd                	bnez	a5,118 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 124:	4501                	li	a0,0
+}
+ 126:	6422                	ld	s0,8(sp)
+ 128:	0141                	addi	sp,sp,16
+ 12a:	8082                	ret
+  return 0;
+ 12c:	4501                	li	a0,0
+ 12e:	bfe5                	j	126 <strchr+0x1a>
+
+0000000000000130 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 130:	711d                	addi	sp,sp,-96
+ 132:	ec86                	sd	ra,88(sp)
+ 134:	e8a2                	sd	s0,80(sp)
+ 136:	e4a6                	sd	s1,72(sp)
+ 138:	e0ca                	sd	s2,64(sp)
+ 13a:	fc4e                	sd	s3,56(sp)
+ 13c:	f852                	sd	s4,48(sp)
+ 13e:	f456                	sd	s5,40(sp)
+ 140:	f05a                	sd	s6,32(sp)
+ 142:	ec5e                	sd	s7,24(sp)
+ 144:	1080                	addi	s0,sp,96
+ 146:	8baa                	mv	s7,a0
+ 148:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14a:	892a                	mv	s2,a0
+ 14c:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 14e:	4aa9                	li	s5,10
+ 150:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 152:	89a6                	mv	s3,s1
+ 154:	2485                	addiw	s1,s1,1
+ 156:	0344d663          	bge	s1,s4,182 <gets+0x52>
+    cc = read(0, &c, 1);
+ 15a:	4605                	li	a2,1
+ 15c:	faf40593          	addi	a1,s0,-81
+ 160:	4501                	li	a0,0
+ 162:	186000ef          	jal	2e8 <read>
+    if(cc < 1)
+ 166:	00a05e63          	blez	a0,182 <gets+0x52>
+    buf[i++] = c;
+ 16a:	faf44783          	lbu	a5,-81(s0)
+ 16e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 172:	01578763          	beq	a5,s5,180 <gets+0x50>
+ 176:	0905                	addi	s2,s2,1
+ 178:	fd679de3          	bne	a5,s6,152 <gets+0x22>
+    buf[i++] = c;
+ 17c:	89a6                	mv	s3,s1
+ 17e:	a011                	j	182 <gets+0x52>
+ 180:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 182:	99de                	add	s3,s3,s7
+ 184:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 188:	855e                	mv	a0,s7
+ 18a:	60e6                	ld	ra,88(sp)
+ 18c:	6446                	ld	s0,80(sp)
+ 18e:	64a6                	ld	s1,72(sp)
+ 190:	6906                	ld	s2,64(sp)
+ 192:	79e2                	ld	s3,56(sp)
+ 194:	7a42                	ld	s4,48(sp)
+ 196:	7aa2                	ld	s5,40(sp)
+ 198:	7b02                	ld	s6,32(sp)
+ 19a:	6be2                	ld	s7,24(sp)
+ 19c:	6125                	addi	sp,sp,96
+ 19e:	8082                	ret
+
+00000000000001a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1a0:	1101                	addi	sp,sp,-32
+ 1a2:	ec06                	sd	ra,24(sp)
+ 1a4:	e822                	sd	s0,16(sp)
+ 1a6:	e04a                	sd	s2,0(sp)
+ 1a8:	1000                	addi	s0,sp,32
+ 1aa:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1ac:	4581                	li	a1,0
+ 1ae:	162000ef          	jal	310 <open>
+  if(fd < 0)
+ 1b2:	02054263          	bltz	a0,1d6 <stat+0x36>
+ 1b6:	e426                	sd	s1,8(sp)
+ 1b8:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1ba:	85ca                	mv	a1,s2
+ 1bc:	16c000ef          	jal	328 <fstat>
+ 1c0:	892a                	mv	s2,a0
+  close(fd);
+ 1c2:	8526                	mv	a0,s1
+ 1c4:	134000ef          	jal	2f8 <close>
+  return r;
+ 1c8:	64a2                	ld	s1,8(sp)
+}
+ 1ca:	854a                	mv	a0,s2
+ 1cc:	60e2                	ld	ra,24(sp)
+ 1ce:	6442                	ld	s0,16(sp)
+ 1d0:	6902                	ld	s2,0(sp)
+ 1d2:	6105                	addi	sp,sp,32
+ 1d4:	8082                	ret
+    return -1;
+ 1d6:	597d                	li	s2,-1
+ 1d8:	bfcd                	j	1ca <stat+0x2a>
+
+00000000000001da <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1da:	1141                	addi	sp,sp,-16
+ 1dc:	e422                	sd	s0,8(sp)
+ 1de:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1e0:	00054683          	lbu	a3,0(a0)
+ 1e4:	fd06879b          	addiw	a5,a3,-48
+ 1e8:	0ff7f793          	zext.b	a5,a5
+ 1ec:	4625                	li	a2,9
+ 1ee:	02f66863          	bltu	a2,a5,21e <atoi+0x44>
+ 1f2:	872a                	mv	a4,a0
+  n = 0;
+ 1f4:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1f6:	0705                	addi	a4,a4,1
+ 1f8:	0025179b          	slliw	a5,a0,0x2
+ 1fc:	9fa9                	addw	a5,a5,a0
+ 1fe:	0017979b          	slliw	a5,a5,0x1
+ 202:	9fb5                	addw	a5,a5,a3
+ 204:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 208:	00074683          	lbu	a3,0(a4)
+ 20c:	fd06879b          	addiw	a5,a3,-48
+ 210:	0ff7f793          	zext.b	a5,a5
+ 214:	fef671e3          	bgeu	a2,a5,1f6 <atoi+0x1c>
+  return n;
+}
+ 218:	6422                	ld	s0,8(sp)
+ 21a:	0141                	addi	sp,sp,16
+ 21c:	8082                	ret
+  n = 0;
+ 21e:	4501                	li	a0,0
+ 220:	bfe5                	j	218 <atoi+0x3e>
+
+0000000000000222 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 222:	1141                	addi	sp,sp,-16
+ 224:	e422                	sd	s0,8(sp)
+ 226:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 228:	02b57463          	bgeu	a0,a1,250 <memmove+0x2e>
+    while(n-- > 0)
+ 22c:	00c05f63          	blez	a2,24a <memmove+0x28>
+ 230:	1602                	slli	a2,a2,0x20
+ 232:	9201                	srli	a2,a2,0x20
+ 234:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 238:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 23a:	0585                	addi	a1,a1,1
+ 23c:	0705                	addi	a4,a4,1
+ 23e:	fff5c683          	lbu	a3,-1(a1)
+ 242:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 246:	fef71ae3          	bne	a4,a5,23a <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 24a:	6422                	ld	s0,8(sp)
+ 24c:	0141                	addi	sp,sp,16
+ 24e:	8082                	ret
+    dst += n;
+ 250:	00c50733          	add	a4,a0,a2
+    src += n;
+ 254:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 256:	fec05ae3          	blez	a2,24a <memmove+0x28>
+ 25a:	fff6079b          	addiw	a5,a2,-1
+ 25e:	1782                	slli	a5,a5,0x20
+ 260:	9381                	srli	a5,a5,0x20
+ 262:	fff7c793          	not	a5,a5
+ 266:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 268:	15fd                	addi	a1,a1,-1
+ 26a:	177d                	addi	a4,a4,-1
+ 26c:	0005c683          	lbu	a3,0(a1)
+ 270:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 274:	fee79ae3          	bne	a5,a4,268 <memmove+0x46>
+ 278:	bfc9                	j	24a <memmove+0x28>
+
+000000000000027a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 27a:	1141                	addi	sp,sp,-16
+ 27c:	e422                	sd	s0,8(sp)
+ 27e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 280:	ca05                	beqz	a2,2b0 <memcmp+0x36>
+ 282:	fff6069b          	addiw	a3,a2,-1
+ 286:	1682                	slli	a3,a3,0x20
+ 288:	9281                	srli	a3,a3,0x20
+ 28a:	0685                	addi	a3,a3,1
+ 28c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 28e:	00054783          	lbu	a5,0(a0)
+ 292:	0005c703          	lbu	a4,0(a1)
+ 296:	00e79863          	bne	a5,a4,2a6 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 29a:	0505                	addi	a0,a0,1
+    p2++;
+ 29c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 29e:	fed518e3          	bne	a0,a3,28e <memcmp+0x14>
+  }
+  return 0;
+ 2a2:	4501                	li	a0,0
+ 2a4:	a019                	j	2aa <memcmp+0x30>
+      return *p1 - *p2;
+ 2a6:	40e7853b          	subw	a0,a5,a4
+}
+ 2aa:	6422                	ld	s0,8(sp)
+ 2ac:	0141                	addi	sp,sp,16
+ 2ae:	8082                	ret
+  return 0;
+ 2b0:	4501                	li	a0,0
+ 2b2:	bfe5                	j	2aa <memcmp+0x30>
+
+00000000000002b4 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2b4:	1141                	addi	sp,sp,-16
+ 2b6:	e406                	sd	ra,8(sp)
+ 2b8:	e022                	sd	s0,0(sp)
+ 2ba:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2bc:	f67ff0ef          	jal	222 <memmove>
+}
+ 2c0:	60a2                	ld	ra,8(sp)
+ 2c2:	6402                	ld	s0,0(sp)
+ 2c4:	0141                	addi	sp,sp,16
+ 2c6:	8082                	ret
+
+00000000000002c8 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2c8:	4885                	li	a7,1
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2d0:	4889                	li	a7,2
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2d8:	488d                	li	a7,3
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2e0:	4891                	li	a7,4
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2e8:	4895                	li	a7,5
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2f0:	48c1                	li	a7,16
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2f8:	48d5                	li	a7,21
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 300:	4899                	li	a7,6
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 308:	489d                	li	a7,7
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 310:	48bd                	li	a7,15
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 318:	48c5                	li	a7,17
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 320:	48c9                	li	a7,18
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 328:	48a1                	li	a7,8
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 330:	48cd                	li	a7,19
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 338:	48d1                	li	a7,20
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 340:	48a5                	li	a7,9
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 348:	48a9                	li	a7,10
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 350:	48ad                	li	a7,11
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 358:	48b1                	li	a7,12
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 360:	48b5                	li	a7,13
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 368:	48b9                	li	a7,14
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 370:	48d9                	li	a7,22
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 378:	48dd                	li	a7,23
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 380:	48e1                	li	a7,24
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 388:	1101                	addi	sp,sp,-32
+ 38a:	ec06                	sd	ra,24(sp)
+ 38c:	e822                	sd	s0,16(sp)
+ 38e:	1000                	addi	s0,sp,32
+ 390:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 394:	4605                	li	a2,1
+ 396:	fef40593          	addi	a1,s0,-17
+ 39a:	f57ff0ef          	jal	2f0 <write>
+}
+ 39e:	60e2                	ld	ra,24(sp)
+ 3a0:	6442                	ld	s0,16(sp)
+ 3a2:	6105                	addi	sp,sp,32
+ 3a4:	8082                	ret
+
+00000000000003a6 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a6:	7139                	addi	sp,sp,-64
+ 3a8:	fc06                	sd	ra,56(sp)
+ 3aa:	f822                	sd	s0,48(sp)
+ 3ac:	f426                	sd	s1,40(sp)
+ 3ae:	0080                	addi	s0,sp,64
+ 3b0:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3b2:	c299                	beqz	a3,3b8 <printint+0x12>
+ 3b4:	0805c963          	bltz	a1,446 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3b8:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3ba:	4881                	li	a7,0
+ 3bc:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3c0:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3c2:	2601                	sext.w	a2,a2
+ 3c4:	00000517          	auipc	a0,0x0
+ 3c8:	52c50513          	addi	a0,a0,1324 # 8f0 <digits>
+ 3cc:	883a                	mv	a6,a4
+ 3ce:	2705                	addiw	a4,a4,1
+ 3d0:	02c5f7bb          	remuw	a5,a1,a2
+ 3d4:	1782                	slli	a5,a5,0x20
+ 3d6:	9381                	srli	a5,a5,0x20
+ 3d8:	97aa                	add	a5,a5,a0
+ 3da:	0007c783          	lbu	a5,0(a5)
+ 3de:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3e2:	0005879b          	sext.w	a5,a1
+ 3e6:	02c5d5bb          	divuw	a1,a1,a2
+ 3ea:	0685                	addi	a3,a3,1
+ 3ec:	fec7f0e3          	bgeu	a5,a2,3cc <printint+0x26>
+  if(neg)
+ 3f0:	00088c63          	beqz	a7,408 <printint+0x62>
+    buf[i++] = '-';
+ 3f4:	fd070793          	addi	a5,a4,-48
+ 3f8:	00878733          	add	a4,a5,s0
+ 3fc:	02d00793          	li	a5,45
+ 400:	fef70823          	sb	a5,-16(a4)
+ 404:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 408:	02e05a63          	blez	a4,43c <printint+0x96>
+ 40c:	f04a                	sd	s2,32(sp)
+ 40e:	ec4e                	sd	s3,24(sp)
+ 410:	fc040793          	addi	a5,s0,-64
+ 414:	00e78933          	add	s2,a5,a4
+ 418:	fff78993          	addi	s3,a5,-1
+ 41c:	99ba                	add	s3,s3,a4
+ 41e:	377d                	addiw	a4,a4,-1
+ 420:	1702                	slli	a4,a4,0x20
+ 422:	9301                	srli	a4,a4,0x20
+ 424:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 428:	fff94583          	lbu	a1,-1(s2)
+ 42c:	8526                	mv	a0,s1
+ 42e:	f5bff0ef          	jal	388 <putc>
+  while(--i >= 0)
+ 432:	197d                	addi	s2,s2,-1
+ 434:	ff391ae3          	bne	s2,s3,428 <printint+0x82>
+ 438:	7902                	ld	s2,32(sp)
+ 43a:	69e2                	ld	s3,24(sp)
+}
+ 43c:	70e2                	ld	ra,56(sp)
+ 43e:	7442                	ld	s0,48(sp)
+ 440:	74a2                	ld	s1,40(sp)
+ 442:	6121                	addi	sp,sp,64
+ 444:	8082                	ret
+    x = -xx;
+ 446:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 44a:	4885                	li	a7,1
+    x = -xx;
+ 44c:	bf85                	j	3bc <printint+0x16>
+
+000000000000044e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 44e:	711d                	addi	sp,sp,-96
+ 450:	ec86                	sd	ra,88(sp)
+ 452:	e8a2                	sd	s0,80(sp)
+ 454:	e0ca                	sd	s2,64(sp)
+ 456:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 458:	0005c903          	lbu	s2,0(a1)
+ 45c:	26090863          	beqz	s2,6cc <vprintf+0x27e>
+ 460:	e4a6                	sd	s1,72(sp)
+ 462:	fc4e                	sd	s3,56(sp)
+ 464:	f852                	sd	s4,48(sp)
+ 466:	f456                	sd	s5,40(sp)
+ 468:	f05a                	sd	s6,32(sp)
+ 46a:	ec5e                	sd	s7,24(sp)
+ 46c:	e862                	sd	s8,16(sp)
+ 46e:	e466                	sd	s9,8(sp)
+ 470:	8b2a                	mv	s6,a0
+ 472:	8a2e                	mv	s4,a1
+ 474:	8bb2                	mv	s7,a2
+  state = 0;
+ 476:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 478:	4481                	li	s1,0
+ 47a:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 47c:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 480:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 484:	06c00c93          	li	s9,108
+ 488:	a005                	j	4a8 <vprintf+0x5a>
+        putc(fd, c0);
+ 48a:	85ca                	mv	a1,s2
+ 48c:	855a                	mv	a0,s6
+ 48e:	efbff0ef          	jal	388 <putc>
+ 492:	a019                	j	498 <vprintf+0x4a>
+    } else if(state == '%'){
+ 494:	03598263          	beq	s3,s5,4b8 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 498:	2485                	addiw	s1,s1,1
+ 49a:	8726                	mv	a4,s1
+ 49c:	009a07b3          	add	a5,s4,s1
+ 4a0:	0007c903          	lbu	s2,0(a5)
+ 4a4:	20090c63          	beqz	s2,6bc <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 4a8:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 4ac:	fe0994e3          	bnez	s3,494 <vprintf+0x46>
+      if(c0 == '%'){
+ 4b0:	fd579de3          	bne	a5,s5,48a <vprintf+0x3c>
+        state = '%';
+ 4b4:	89be                	mv	s3,a5
+ 4b6:	b7cd                	j	498 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 4b8:	00ea06b3          	add	a3,s4,a4
+ 4bc:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 4c0:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 4c2:	c681                	beqz	a3,4ca <vprintf+0x7c>
+ 4c4:	9752                	add	a4,a4,s4
+ 4c6:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 4ca:	03878f63          	beq	a5,s8,508 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4ce:	05978963          	beq	a5,s9,520 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 4d2:	07500713          	li	a4,117
+ 4d6:	0ee78363          	beq	a5,a4,5bc <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 4da:	07800713          	li	a4,120
+ 4de:	12e78563          	beq	a5,a4,608 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 4e2:	07000713          	li	a4,112
+ 4e6:	14e78a63          	beq	a5,a4,63a <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4ea:	07300713          	li	a4,115
+ 4ee:	18e78a63          	beq	a5,a4,682 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 4f2:	02500713          	li	a4,37
+ 4f6:	04e79563          	bne	a5,a4,540 <vprintf+0xf2>
+        putc(fd, '%');
+ 4fa:	02500593          	li	a1,37
+ 4fe:	855a                	mv	a0,s6
+ 500:	e89ff0ef          	jal	388 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 504:	4981                	li	s3,0
+ 506:	bf49                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 508:	008b8913          	addi	s2,s7,8
+ 50c:	4685                	li	a3,1
+ 50e:	4629                	li	a2,10
+ 510:	000ba583          	lw	a1,0(s7)
+ 514:	855a                	mv	a0,s6
+ 516:	e91ff0ef          	jal	3a6 <printint>
+ 51a:	8bca                	mv	s7,s2
+      state = 0;
+ 51c:	4981                	li	s3,0
+ 51e:	bfad                	j	498 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 520:	06400793          	li	a5,100
+ 524:	02f68963          	beq	a3,a5,556 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 528:	06c00793          	li	a5,108
+ 52c:	04f68263          	beq	a3,a5,570 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 530:	07500793          	li	a5,117
+ 534:	0af68063          	beq	a3,a5,5d4 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 538:	07800793          	li	a5,120
+ 53c:	0ef68263          	beq	a3,a5,620 <vprintf+0x1d2>
+        putc(fd, '%');
+ 540:	02500593          	li	a1,37
+ 544:	855a                	mv	a0,s6
+ 546:	e43ff0ef          	jal	388 <putc>
+        putc(fd, c0);
+ 54a:	85ca                	mv	a1,s2
+ 54c:	855a                	mv	a0,s6
+ 54e:	e3bff0ef          	jal	388 <putc>
+      state = 0;
+ 552:	4981                	li	s3,0
+ 554:	b791                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 556:	008b8913          	addi	s2,s7,8
+ 55a:	4685                	li	a3,1
+ 55c:	4629                	li	a2,10
+ 55e:	000ba583          	lw	a1,0(s7)
+ 562:	855a                	mv	a0,s6
+ 564:	e43ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 568:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 56a:	8bca                	mv	s7,s2
+      state = 0;
+ 56c:	4981                	li	s3,0
+        i += 1;
+ 56e:	b72d                	j	498 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 570:	06400793          	li	a5,100
+ 574:	02f60763          	beq	a2,a5,5a2 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 578:	07500793          	li	a5,117
+ 57c:	06f60963          	beq	a2,a5,5ee <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 580:	07800793          	li	a5,120
+ 584:	faf61ee3          	bne	a2,a5,540 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 588:	008b8913          	addi	s2,s7,8
+ 58c:	4681                	li	a3,0
+ 58e:	4641                	li	a2,16
+ 590:	000ba583          	lw	a1,0(s7)
+ 594:	855a                	mv	a0,s6
+ 596:	e11ff0ef          	jal	3a6 <printint>
+        i += 2;
+ 59a:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 59c:	8bca                	mv	s7,s2
+      state = 0;
+ 59e:	4981                	li	s3,0
+        i += 2;
+ 5a0:	bde5                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5a2:	008b8913          	addi	s2,s7,8
+ 5a6:	4685                	li	a3,1
+ 5a8:	4629                	li	a2,10
+ 5aa:	000ba583          	lw	a1,0(s7)
+ 5ae:	855a                	mv	a0,s6
+ 5b0:	df7ff0ef          	jal	3a6 <printint>
+        i += 2;
+ 5b4:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5b6:	8bca                	mv	s7,s2
+      state = 0;
+ 5b8:	4981                	li	s3,0
+        i += 2;
+ 5ba:	bdf9                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 5bc:	008b8913          	addi	s2,s7,8
+ 5c0:	4681                	li	a3,0
+ 5c2:	4629                	li	a2,10
+ 5c4:	000ba583          	lw	a1,0(s7)
+ 5c8:	855a                	mv	a0,s6
+ 5ca:	dddff0ef          	jal	3a6 <printint>
+ 5ce:	8bca                	mv	s7,s2
+      state = 0;
+ 5d0:	4981                	li	s3,0
+ 5d2:	b5d9                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d4:	008b8913          	addi	s2,s7,8
+ 5d8:	4681                	li	a3,0
+ 5da:	4629                	li	a2,10
+ 5dc:	000ba583          	lw	a1,0(s7)
+ 5e0:	855a                	mv	a0,s6
+ 5e2:	dc5ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 5e6:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5e8:	8bca                	mv	s7,s2
+      state = 0;
+ 5ea:	4981                	li	s3,0
+        i += 1;
+ 5ec:	b575                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5ee:	008b8913          	addi	s2,s7,8
+ 5f2:	4681                	li	a3,0
+ 5f4:	4629                	li	a2,10
+ 5f6:	000ba583          	lw	a1,0(s7)
+ 5fa:	855a                	mv	a0,s6
+ 5fc:	dabff0ef          	jal	3a6 <printint>
+        i += 2;
+ 600:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 602:	8bca                	mv	s7,s2
+      state = 0;
+ 604:	4981                	li	s3,0
+        i += 2;
+ 606:	bd49                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 608:	008b8913          	addi	s2,s7,8
+ 60c:	4681                	li	a3,0
+ 60e:	4641                	li	a2,16
+ 610:	000ba583          	lw	a1,0(s7)
+ 614:	855a                	mv	a0,s6
+ 616:	d91ff0ef          	jal	3a6 <printint>
+ 61a:	8bca                	mv	s7,s2
+      state = 0;
+ 61c:	4981                	li	s3,0
+ 61e:	bdad                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 620:	008b8913          	addi	s2,s7,8
+ 624:	4681                	li	a3,0
+ 626:	4641                	li	a2,16
+ 628:	000ba583          	lw	a1,0(s7)
+ 62c:	855a                	mv	a0,s6
+ 62e:	d79ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 632:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 634:	8bca                	mv	s7,s2
+      state = 0;
+ 636:	4981                	li	s3,0
+        i += 1;
+ 638:	b585                	j	498 <vprintf+0x4a>
+ 63a:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 63c:	008b8d13          	addi	s10,s7,8
+ 640:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 644:	03000593          	li	a1,48
+ 648:	855a                	mv	a0,s6
+ 64a:	d3fff0ef          	jal	388 <putc>
+  putc(fd, 'x');
+ 64e:	07800593          	li	a1,120
+ 652:	855a                	mv	a0,s6
+ 654:	d35ff0ef          	jal	388 <putc>
+ 658:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 65a:	00000b97          	auipc	s7,0x0
+ 65e:	296b8b93          	addi	s7,s7,662 # 8f0 <digits>
+ 662:	03c9d793          	srli	a5,s3,0x3c
+ 666:	97de                	add	a5,a5,s7
+ 668:	0007c583          	lbu	a1,0(a5)
+ 66c:	855a                	mv	a0,s6
+ 66e:	d1bff0ef          	jal	388 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 672:	0992                	slli	s3,s3,0x4
+ 674:	397d                	addiw	s2,s2,-1
+ 676:	fe0916e3          	bnez	s2,662 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 67a:	8bea                	mv	s7,s10
+      state = 0;
+ 67c:	4981                	li	s3,0
+ 67e:	6d02                	ld	s10,0(sp)
+ 680:	bd21                	j	498 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 682:	008b8993          	addi	s3,s7,8
+ 686:	000bb903          	ld	s2,0(s7)
+ 68a:	00090f63          	beqz	s2,6a8 <vprintf+0x25a>
+        for(; *s; s++)
+ 68e:	00094583          	lbu	a1,0(s2)
+ 692:	c195                	beqz	a1,6b6 <vprintf+0x268>
+          putc(fd, *s);
+ 694:	855a                	mv	a0,s6
+ 696:	cf3ff0ef          	jal	388 <putc>
+        for(; *s; s++)
+ 69a:	0905                	addi	s2,s2,1
+ 69c:	00094583          	lbu	a1,0(s2)
+ 6a0:	f9f5                	bnez	a1,694 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6a2:	8bce                	mv	s7,s3
+      state = 0;
+ 6a4:	4981                	li	s3,0
+ 6a6:	bbcd                	j	498 <vprintf+0x4a>
+          s = "(null)";
+ 6a8:	00000917          	auipc	s2,0x0
+ 6ac:	24090913          	addi	s2,s2,576 # 8e8 <malloc+0x134>
+        for(; *s; s++)
+ 6b0:	02800593          	li	a1,40
+ 6b4:	b7c5                	j	694 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6b6:	8bce                	mv	s7,s3
+      state = 0;
+ 6b8:	4981                	li	s3,0
+ 6ba:	bbf9                	j	498 <vprintf+0x4a>
+ 6bc:	64a6                	ld	s1,72(sp)
+ 6be:	79e2                	ld	s3,56(sp)
+ 6c0:	7a42                	ld	s4,48(sp)
+ 6c2:	7aa2                	ld	s5,40(sp)
+ 6c4:	7b02                	ld	s6,32(sp)
+ 6c6:	6be2                	ld	s7,24(sp)
+ 6c8:	6c42                	ld	s8,16(sp)
+ 6ca:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 6cc:	60e6                	ld	ra,88(sp)
+ 6ce:	6446                	ld	s0,80(sp)
+ 6d0:	6906                	ld	s2,64(sp)
+ 6d2:	6125                	addi	sp,sp,96
+ 6d4:	8082                	ret
+
+00000000000006d6 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6d6:	715d                	addi	sp,sp,-80
+ 6d8:	ec06                	sd	ra,24(sp)
+ 6da:	e822                	sd	s0,16(sp)
+ 6dc:	1000                	addi	s0,sp,32
+ 6de:	e010                	sd	a2,0(s0)
+ 6e0:	e414                	sd	a3,8(s0)
+ 6e2:	e818                	sd	a4,16(s0)
+ 6e4:	ec1c                	sd	a5,24(s0)
+ 6e6:	03043023          	sd	a6,32(s0)
+ 6ea:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6ee:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6f2:	8622                	mv	a2,s0
+ 6f4:	d5bff0ef          	jal	44e <vprintf>
+}
+ 6f8:	60e2                	ld	ra,24(sp)
+ 6fa:	6442                	ld	s0,16(sp)
+ 6fc:	6161                	addi	sp,sp,80
+ 6fe:	8082                	ret
+
+0000000000000700 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 700:	711d                	addi	sp,sp,-96
+ 702:	ec06                	sd	ra,24(sp)
+ 704:	e822                	sd	s0,16(sp)
+ 706:	1000                	addi	s0,sp,32
+ 708:	e40c                	sd	a1,8(s0)
+ 70a:	e810                	sd	a2,16(s0)
+ 70c:	ec14                	sd	a3,24(s0)
+ 70e:	f018                	sd	a4,32(s0)
+ 710:	f41c                	sd	a5,40(s0)
+ 712:	03043823          	sd	a6,48(s0)
+ 716:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 71a:	00840613          	addi	a2,s0,8
+ 71e:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 722:	85aa                	mv	a1,a0
+ 724:	4505                	li	a0,1
+ 726:	d29ff0ef          	jal	44e <vprintf>
+}
+ 72a:	60e2                	ld	ra,24(sp)
+ 72c:	6442                	ld	s0,16(sp)
+ 72e:	6125                	addi	sp,sp,96
+ 730:	8082                	ret
+
+0000000000000732 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 732:	1141                	addi	sp,sp,-16
+ 734:	e422                	sd	s0,8(sp)
+ 736:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 738:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 73c:	00001797          	auipc	a5,0x1
+ 740:	8c47b783          	ld	a5,-1852(a5) # 1000 <freep>
+ 744:	a02d                	j	76e <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 746:	4618                	lw	a4,8(a2)
+ 748:	9f2d                	addw	a4,a4,a1
+ 74a:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 74e:	6398                	ld	a4,0(a5)
+ 750:	6310                	ld	a2,0(a4)
+ 752:	a83d                	j	790 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 754:	ff852703          	lw	a4,-8(a0)
+ 758:	9f31                	addw	a4,a4,a2
+ 75a:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 75c:	ff053683          	ld	a3,-16(a0)
+ 760:	a091                	j	7a4 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 762:	6398                	ld	a4,0(a5)
+ 764:	00e7e463          	bltu	a5,a4,76c <free+0x3a>
+ 768:	00e6ea63          	bltu	a3,a4,77c <free+0x4a>
+{
+ 76c:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 76e:	fed7fae3          	bgeu	a5,a3,762 <free+0x30>
+ 772:	6398                	ld	a4,0(a5)
+ 774:	00e6e463          	bltu	a3,a4,77c <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 778:	fee7eae3          	bltu	a5,a4,76c <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 77c:	ff852583          	lw	a1,-8(a0)
+ 780:	6390                	ld	a2,0(a5)
+ 782:	02059813          	slli	a6,a1,0x20
+ 786:	01c85713          	srli	a4,a6,0x1c
+ 78a:	9736                	add	a4,a4,a3
+ 78c:	fae60de3          	beq	a2,a4,746 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 790:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 794:	4790                	lw	a2,8(a5)
+ 796:	02061593          	slli	a1,a2,0x20
+ 79a:	01c5d713          	srli	a4,a1,0x1c
+ 79e:	973e                	add	a4,a4,a5
+ 7a0:	fae68ae3          	beq	a3,a4,754 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7a4:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7a6:	00001717          	auipc	a4,0x1
+ 7aa:	84f73d23          	sd	a5,-1958(a4) # 1000 <freep>
+}
+ 7ae:	6422                	ld	s0,8(sp)
+ 7b0:	0141                	addi	sp,sp,16
+ 7b2:	8082                	ret
+
+00000000000007b4 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7b4:	7139                	addi	sp,sp,-64
+ 7b6:	fc06                	sd	ra,56(sp)
+ 7b8:	f822                	sd	s0,48(sp)
+ 7ba:	f426                	sd	s1,40(sp)
+ 7bc:	ec4e                	sd	s3,24(sp)
+ 7be:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7c0:	02051493          	slli	s1,a0,0x20
+ 7c4:	9081                	srli	s1,s1,0x20
+ 7c6:	04bd                	addi	s1,s1,15
+ 7c8:	8091                	srli	s1,s1,0x4
+ 7ca:	0014899b          	addiw	s3,s1,1
+ 7ce:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7d0:	00001517          	auipc	a0,0x1
+ 7d4:	83053503          	ld	a0,-2000(a0) # 1000 <freep>
+ 7d8:	c915                	beqz	a0,80c <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7da:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7dc:	4798                	lw	a4,8(a5)
+ 7de:	08977a63          	bgeu	a4,s1,872 <malloc+0xbe>
+ 7e2:	f04a                	sd	s2,32(sp)
+ 7e4:	e852                	sd	s4,16(sp)
+ 7e6:	e456                	sd	s5,8(sp)
+ 7e8:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7ea:	8a4e                	mv	s4,s3
+ 7ec:	0009871b          	sext.w	a4,s3
+ 7f0:	6685                	lui	a3,0x1
+ 7f2:	00d77363          	bgeu	a4,a3,7f8 <malloc+0x44>
+ 7f6:	6a05                	lui	s4,0x1
+ 7f8:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7fc:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 800:	00001917          	auipc	s2,0x1
+ 804:	80090913          	addi	s2,s2,-2048 # 1000 <freep>
+  if(p == (char*)-1)
+ 808:	5afd                	li	s5,-1
+ 80a:	a081                	j	84a <malloc+0x96>
+ 80c:	f04a                	sd	s2,32(sp)
+ 80e:	e852                	sd	s4,16(sp)
+ 810:	e456                	sd	s5,8(sp)
+ 812:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 814:	00000797          	auipc	a5,0x0
+ 818:	7fc78793          	addi	a5,a5,2044 # 1010 <base>
+ 81c:	00000717          	auipc	a4,0x0
+ 820:	7ef73223          	sd	a5,2020(a4) # 1000 <freep>
+ 824:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 826:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 82a:	b7c1                	j	7ea <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 82c:	6398                	ld	a4,0(a5)
+ 82e:	e118                	sd	a4,0(a0)
+ 830:	a8a9                	j	88a <malloc+0xd6>
+  hp->s.size = nu;
+ 832:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 836:	0541                	addi	a0,a0,16
+ 838:	efbff0ef          	jal	732 <free>
+  return freep;
+ 83c:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 840:	c12d                	beqz	a0,8a2 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 842:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 844:	4798                	lw	a4,8(a5)
+ 846:	02977263          	bgeu	a4,s1,86a <malloc+0xb6>
+    if(p == freep)
+ 84a:	00093703          	ld	a4,0(s2)
+ 84e:	853e                	mv	a0,a5
+ 850:	fef719e3          	bne	a4,a5,842 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 854:	8552                	mv	a0,s4
+ 856:	b03ff0ef          	jal	358 <sbrk>
+  if(p == (char*)-1)
+ 85a:	fd551ce3          	bne	a0,s5,832 <malloc+0x7e>
+        return 0;
+ 85e:	4501                	li	a0,0
+ 860:	7902                	ld	s2,32(sp)
+ 862:	6a42                	ld	s4,16(sp)
+ 864:	6aa2                	ld	s5,8(sp)
+ 866:	6b02                	ld	s6,0(sp)
+ 868:	a03d                	j	896 <malloc+0xe2>
+ 86a:	7902                	ld	s2,32(sp)
+ 86c:	6a42                	ld	s4,16(sp)
+ 86e:	6aa2                	ld	s5,8(sp)
+ 870:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 872:	fae48de3          	beq	s1,a4,82c <malloc+0x78>
+        p->s.size -= nunits;
+ 876:	4137073b          	subw	a4,a4,s3
+ 87a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 87c:	02071693          	slli	a3,a4,0x20
+ 880:	01c6d713          	srli	a4,a3,0x1c
+ 884:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 886:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 88a:	00000717          	auipc	a4,0x0
+ 88e:	76a73b23          	sd	a0,1910(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 892:	01078513          	addi	a0,a5,16
+  }
+}
+ 896:	70e2                	ld	ra,56(sp)
+ 898:	7442                	ld	s0,48(sp)
+ 89a:	74a2                	ld	s1,40(sp)
+ 89c:	69e2                	ld	s3,24(sp)
+ 89e:	6121                	addi	sp,sp,64
+ 8a0:	8082                	ret
+ 8a2:	7902                	ld	s2,32(sp)
+ 8a4:	6a42                	ld	s4,16(sp)
+ 8a6:	6aa2                	ld	s5,8(sp)
+ 8a8:	6b02                	ld	s6,0(sp)
+ 8aa:	b7f5                	j	896 <malloc+0xe2>
diff --git a/user/mkdir.c b/user/mkdir.c
new file mode 100644
index 0000000..c2b31c1
--- /dev/null
+++ b/user/mkdir.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    fprintf(2, "Usage: mkdir files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+      fprintf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit(0);
+}
diff --git a/user/mkdir.d b/user/mkdir.d
new file mode 100644
index 0000000..7ad28be
--- /dev/null
+++ b/user/mkdir.d
@@ -0,0 +1 @@
+user/mkdir.o: user/mkdir.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/mkdir.o b/user/mkdir.o
new file mode 100644
index 0000000..98bbfce
Binary files /dev/null and b/user/mkdir.o differ
diff --git a/user/mkdir.sym b/user/mkdir.sym
new file mode 100644
index 0000000..6863028
--- /dev/null
+++ b/user/mkdir.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+00000000000008b0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 mkdir.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000388 putc
+00000000000003a6 printint
+00000000000008f0 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+0000000000000078 strcpy
+0000000000000700 printf
+0000000000000222 memmove
+0000000000000318 mknod
+0000000000000378 trace
+0000000000000130 gets
+0000000000000350 getpid
+0000000000000370 hello
+00000000000002b4 memcpy
+00000000000007b4 malloc
+0000000000000360 sleep
+0000000000000380 sysinfo
+00000000000002e0 pipe
+00000000000002f0 write
+0000000000000328 fstat
+00000000000006d6 fprintf
+0000000000000300 kill
+000000000000044e vprintf
+0000000000000340 chdir
+0000000000000308 exec
+00000000000002d8 wait
+00000000000002e8 read
+0000000000000320 unlink
+000000000000027a memcmp
+00000000000002c8 fork
+0000000000000358 sbrk
+0000000000000368 uptime
+00000000000000ea memset
+0000000000000000 main
+0000000000000094 strcmp
+0000000000000348 dup
+00000000000001a0 stat
+0000000000000330 link
+00000000000002d0 exit
+0000000000000066 start
+00000000000001da atoi
+00000000000000c0 strlen
+0000000000000310 open
+000000000000010c strchr
+0000000000000338 mkdir
+00000000000002f8 close
+0000000000000732 free
diff --git a/user/printf.c b/user/printf.c
new file mode 100644
index 0000000..8178746
--- /dev/null
+++ b/user/printf.c
@@ -0,0 +1,157 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#include <stdarg.h>
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+  do{
+    buf[i++] = digits[x % base];
+  }while((x /= base) != 0);
+  if(neg)
+    buf[i++] = '-';
+
+  while(--i >= 0)
+    putc(fd, buf[i]);
+}
+
+static void
+printptr(int fd, uint64 x) {
+  int i;
+  putc(fd, '0');
+  putc(fd, 'x');
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+    c0 = fmt[i] & 0xff;
+    if(state == 0){
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+        printint(fd, va_arg(ap, int), 10, 0);
+      } else if(c0 == 'l' && c1 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+        printint(fd, va_arg(ap, int), 16, 0);
+      } else if(c0 == 'l' && c1 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+        putc(fd, '%');
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c0);
+      }
+
+#if 0
+      if(c == 'd'){
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c == 'l') {
+        printint(fd, va_arg(ap, uint64), 10, 0);
+      } else if(c == 'x') {
+        printint(fd, va_arg(ap, int), 16, 0);
+      } else if(c == 'p') {
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c == 's'){
+        s = va_arg(ap, char*);
+        if(s == 0)
+          s = "(null)";
+        while(*s != 0){
+          putc(fd, *s);
+          s++;
+        }
+      } else if(c == 'c'){
+        putc(fd, va_arg(ap, uint));
+      } else if(c == '%'){
+        putc(fd, c);
+      } else {
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+    }
+  }
+}
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+  va_list ap;
+
+  va_start(ap, fmt);
+  vprintf(fd, fmt, ap);
+}
+
+void
+printf(const char *fmt, ...)
+{
+  va_list ap;
+
+  va_start(ap, fmt);
+  vprintf(1, fmt, ap);
+}
diff --git a/user/printf.d b/user/printf.d
new file mode 100644
index 0000000..7533221
--- /dev/null
+++ b/user/printf.d
@@ -0,0 +1,2 @@
+user/printf.o: user/printf.c kernel/types.h kernel/stat.h user/user.h \
+ /usr/lib/gcc/riscv64-unknown-elf/13.2.0/include/stdarg.h
diff --git a/user/printf.o b/user/printf.o
new file mode 100644
index 0000000..a9c405f
Binary files /dev/null and b/user/printf.o differ
diff --git a/user/rm.asm b/user/rm.asm
new file mode 100644
index 0000000..45c5170
--- /dev/null
+++ b/user/rm.asm
@@ -0,0 +1,1497 @@
+
+user/_rm:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	1101                	addi	sp,sp,-32
+   2:	ec06                	sd	ra,24(sp)
+   4:	e822                	sd	s0,16(sp)
+   6:	1000                	addi	s0,sp,32
+  int i;
+
+  if(argc < 2){
+   8:	4785                	li	a5,1
+   a:	02a7d763          	bge	a5,a0,38 <main+0x38>
+   e:	e426                	sd	s1,8(sp)
+  10:	e04a                	sd	s2,0(sp)
+  12:	00858493          	addi	s1,a1,8
+  16:	ffe5091b          	addiw	s2,a0,-2
+  1a:	02091793          	slli	a5,s2,0x20
+  1e:	01d7d913          	srli	s2,a5,0x1d
+  22:	05c1                	addi	a1,a1,16
+  24:	992e                	add	s2,s2,a1
+    fprintf(2, "Usage: rm files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  26:	6088                	ld	a0,0(s1)
+  28:	2f8000ef          	jal	320 <unlink>
+  2c:	02054263          	bltz	a0,50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  30:	04a1                	addi	s1,s1,8
+  32:	ff249ae3          	bne	s1,s2,26 <main+0x26>
+  36:	a02d                	j	60 <main+0x60>
+  38:	e426                	sd	s1,8(sp)
+  3a:	e04a                	sd	s2,0(sp)
+    fprintf(2, "Usage: rm files...\n");
+  3c:	00001597          	auipc	a1,0x1
+  40:	87458593          	addi	a1,a1,-1932 # 8b0 <malloc+0xfc>
+  44:	4509                	li	a0,2
+  46:	690000ef          	jal	6d6 <fprintf>
+    exit(1);
+  4a:	4505                	li	a0,1
+  4c:	284000ef          	jal	2d0 <exit>
+      fprintf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	6090                	ld	a2,0(s1)
+  52:	00001597          	auipc	a1,0x1
+  56:	87658593          	addi	a1,a1,-1930 # 8c8 <malloc+0x114>
+  5a:	4509                	li	a0,2
+  5c:	67a000ef          	jal	6d6 <fprintf>
+      break;
+    }
+  }
+
+  exit(0);
+  60:	4501                	li	a0,0
+  62:	26e000ef          	jal	2d0 <exit>
+
+0000000000000066 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  66:	1141                	addi	sp,sp,-16
+  68:	e406                	sd	ra,8(sp)
+  6a:	e022                	sd	s0,0(sp)
+  6c:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  6e:	f93ff0ef          	jal	0 <main>
+  exit(0);
+  72:	4501                	li	a0,0
+  74:	25c000ef          	jal	2d0 <exit>
+
+0000000000000078 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  78:	1141                	addi	sp,sp,-16
+  7a:	e422                	sd	s0,8(sp)
+  7c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  7e:	87aa                	mv	a5,a0
+  80:	0585                	addi	a1,a1,1
+  82:	0785                	addi	a5,a5,1
+  84:	fff5c703          	lbu	a4,-1(a1)
+  88:	fee78fa3          	sb	a4,-1(a5)
+  8c:	fb75                	bnez	a4,80 <strcpy+0x8>
+    ;
+  return os;
+}
+  8e:	6422                	ld	s0,8(sp)
+  90:	0141                	addi	sp,sp,16
+  92:	8082                	ret
+
+0000000000000094 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  94:	1141                	addi	sp,sp,-16
+  96:	e422                	sd	s0,8(sp)
+  98:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  9a:	00054783          	lbu	a5,0(a0)
+  9e:	cb91                	beqz	a5,b2 <strcmp+0x1e>
+  a0:	0005c703          	lbu	a4,0(a1)
+  a4:	00f71763          	bne	a4,a5,b2 <strcmp+0x1e>
+    p++, q++;
+  a8:	0505                	addi	a0,a0,1
+  aa:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  ac:	00054783          	lbu	a5,0(a0)
+  b0:	fbe5                	bnez	a5,a0 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  b2:	0005c503          	lbu	a0,0(a1)
+}
+  b6:	40a7853b          	subw	a0,a5,a0
+  ba:	6422                	ld	s0,8(sp)
+  bc:	0141                	addi	sp,sp,16
+  be:	8082                	ret
+
+00000000000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	1141                	addi	sp,sp,-16
+  c2:	e422                	sd	s0,8(sp)
+  c4:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	00054783          	lbu	a5,0(a0)
+  ca:	cf91                	beqz	a5,e6 <strlen+0x26>
+  cc:	0505                	addi	a0,a0,1
+  ce:	87aa                	mv	a5,a0
+  d0:	86be                	mv	a3,a5
+  d2:	0785                	addi	a5,a5,1
+  d4:	fff7c703          	lbu	a4,-1(a5)
+  d8:	ff65                	bnez	a4,d0 <strlen+0x10>
+  da:	40a6853b          	subw	a0,a3,a0
+  de:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  e0:	6422                	ld	s0,8(sp)
+  e2:	0141                	addi	sp,sp,16
+  e4:	8082                	ret
+  for(n = 0; s[n]; n++)
+  e6:	4501                	li	a0,0
+  e8:	bfe5                	j	e0 <strlen+0x20>
+
+00000000000000ea <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  f0:	ca19                	beqz	a2,106 <memset+0x1c>
+  f2:	87aa                	mv	a5,a0
+  f4:	1602                	slli	a2,a2,0x20
+  f6:	9201                	srli	a2,a2,0x20
+  f8:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  fc:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 100:	0785                	addi	a5,a5,1
+ 102:	fee79de3          	bne	a5,a4,fc <memset+0x12>
+  }
+  return dst;
+}
+ 106:	6422                	ld	s0,8(sp)
+ 108:	0141                	addi	sp,sp,16
+ 10a:	8082                	ret
+
+000000000000010c <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 10c:	1141                	addi	sp,sp,-16
+ 10e:	e422                	sd	s0,8(sp)
+ 110:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 112:	00054783          	lbu	a5,0(a0)
+ 116:	cb99                	beqz	a5,12c <strchr+0x20>
+    if(*s == c)
+ 118:	00f58763          	beq	a1,a5,126 <strchr+0x1a>
+  for(; *s; s++)
+ 11c:	0505                	addi	a0,a0,1
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	fbfd                	bnez	a5,118 <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 124:	4501                	li	a0,0
+}
+ 126:	6422                	ld	s0,8(sp)
+ 128:	0141                	addi	sp,sp,16
+ 12a:	8082                	ret
+  return 0;
+ 12c:	4501                	li	a0,0
+ 12e:	bfe5                	j	126 <strchr+0x1a>
+
+0000000000000130 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 130:	711d                	addi	sp,sp,-96
+ 132:	ec86                	sd	ra,88(sp)
+ 134:	e8a2                	sd	s0,80(sp)
+ 136:	e4a6                	sd	s1,72(sp)
+ 138:	e0ca                	sd	s2,64(sp)
+ 13a:	fc4e                	sd	s3,56(sp)
+ 13c:	f852                	sd	s4,48(sp)
+ 13e:	f456                	sd	s5,40(sp)
+ 140:	f05a                	sd	s6,32(sp)
+ 142:	ec5e                	sd	s7,24(sp)
+ 144:	1080                	addi	s0,sp,96
+ 146:	8baa                	mv	s7,a0
+ 148:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 14a:	892a                	mv	s2,a0
+ 14c:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 14e:	4aa9                	li	s5,10
+ 150:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 152:	89a6                	mv	s3,s1
+ 154:	2485                	addiw	s1,s1,1
+ 156:	0344d663          	bge	s1,s4,182 <gets+0x52>
+    cc = read(0, &c, 1);
+ 15a:	4605                	li	a2,1
+ 15c:	faf40593          	addi	a1,s0,-81
+ 160:	4501                	li	a0,0
+ 162:	186000ef          	jal	2e8 <read>
+    if(cc < 1)
+ 166:	00a05e63          	blez	a0,182 <gets+0x52>
+    buf[i++] = c;
+ 16a:	faf44783          	lbu	a5,-81(s0)
+ 16e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 172:	01578763          	beq	a5,s5,180 <gets+0x50>
+ 176:	0905                	addi	s2,s2,1
+ 178:	fd679de3          	bne	a5,s6,152 <gets+0x22>
+    buf[i++] = c;
+ 17c:	89a6                	mv	s3,s1
+ 17e:	a011                	j	182 <gets+0x52>
+ 180:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 182:	99de                	add	s3,s3,s7
+ 184:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 188:	855e                	mv	a0,s7
+ 18a:	60e6                	ld	ra,88(sp)
+ 18c:	6446                	ld	s0,80(sp)
+ 18e:	64a6                	ld	s1,72(sp)
+ 190:	6906                	ld	s2,64(sp)
+ 192:	79e2                	ld	s3,56(sp)
+ 194:	7a42                	ld	s4,48(sp)
+ 196:	7aa2                	ld	s5,40(sp)
+ 198:	7b02                	ld	s6,32(sp)
+ 19a:	6be2                	ld	s7,24(sp)
+ 19c:	6125                	addi	sp,sp,96
+ 19e:	8082                	ret
+
+00000000000001a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1a0:	1101                	addi	sp,sp,-32
+ 1a2:	ec06                	sd	ra,24(sp)
+ 1a4:	e822                	sd	s0,16(sp)
+ 1a6:	e04a                	sd	s2,0(sp)
+ 1a8:	1000                	addi	s0,sp,32
+ 1aa:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1ac:	4581                	li	a1,0
+ 1ae:	162000ef          	jal	310 <open>
+  if(fd < 0)
+ 1b2:	02054263          	bltz	a0,1d6 <stat+0x36>
+ 1b6:	e426                	sd	s1,8(sp)
+ 1b8:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 1ba:	85ca                	mv	a1,s2
+ 1bc:	16c000ef          	jal	328 <fstat>
+ 1c0:	892a                	mv	s2,a0
+  close(fd);
+ 1c2:	8526                	mv	a0,s1
+ 1c4:	134000ef          	jal	2f8 <close>
+  return r;
+ 1c8:	64a2                	ld	s1,8(sp)
+}
+ 1ca:	854a                	mv	a0,s2
+ 1cc:	60e2                	ld	ra,24(sp)
+ 1ce:	6442                	ld	s0,16(sp)
+ 1d0:	6902                	ld	s2,0(sp)
+ 1d2:	6105                	addi	sp,sp,32
+ 1d4:	8082                	ret
+    return -1;
+ 1d6:	597d                	li	s2,-1
+ 1d8:	bfcd                	j	1ca <stat+0x2a>
+
+00000000000001da <atoi>:
+
+int
+atoi(const char *s)
+{
+ 1da:	1141                	addi	sp,sp,-16
+ 1dc:	e422                	sd	s0,8(sp)
+ 1de:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 1e0:	00054683          	lbu	a3,0(a0)
+ 1e4:	fd06879b          	addiw	a5,a3,-48
+ 1e8:	0ff7f793          	zext.b	a5,a5
+ 1ec:	4625                	li	a2,9
+ 1ee:	02f66863          	bltu	a2,a5,21e <atoi+0x44>
+ 1f2:	872a                	mv	a4,a0
+  n = 0;
+ 1f4:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1f6:	0705                	addi	a4,a4,1
+ 1f8:	0025179b          	slliw	a5,a0,0x2
+ 1fc:	9fa9                	addw	a5,a5,a0
+ 1fe:	0017979b          	slliw	a5,a5,0x1
+ 202:	9fb5                	addw	a5,a5,a3
+ 204:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 208:	00074683          	lbu	a3,0(a4)
+ 20c:	fd06879b          	addiw	a5,a3,-48
+ 210:	0ff7f793          	zext.b	a5,a5
+ 214:	fef671e3          	bgeu	a2,a5,1f6 <atoi+0x1c>
+  return n;
+}
+ 218:	6422                	ld	s0,8(sp)
+ 21a:	0141                	addi	sp,sp,16
+ 21c:	8082                	ret
+  n = 0;
+ 21e:	4501                	li	a0,0
+ 220:	bfe5                	j	218 <atoi+0x3e>
+
+0000000000000222 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 222:	1141                	addi	sp,sp,-16
+ 224:	e422                	sd	s0,8(sp)
+ 226:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 228:	02b57463          	bgeu	a0,a1,250 <memmove+0x2e>
+    while(n-- > 0)
+ 22c:	00c05f63          	blez	a2,24a <memmove+0x28>
+ 230:	1602                	slli	a2,a2,0x20
+ 232:	9201                	srli	a2,a2,0x20
+ 234:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 238:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 23a:	0585                	addi	a1,a1,1
+ 23c:	0705                	addi	a4,a4,1
+ 23e:	fff5c683          	lbu	a3,-1(a1)
+ 242:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 246:	fef71ae3          	bne	a4,a5,23a <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 24a:	6422                	ld	s0,8(sp)
+ 24c:	0141                	addi	sp,sp,16
+ 24e:	8082                	ret
+    dst += n;
+ 250:	00c50733          	add	a4,a0,a2
+    src += n;
+ 254:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 256:	fec05ae3          	blez	a2,24a <memmove+0x28>
+ 25a:	fff6079b          	addiw	a5,a2,-1
+ 25e:	1782                	slli	a5,a5,0x20
+ 260:	9381                	srli	a5,a5,0x20
+ 262:	fff7c793          	not	a5,a5
+ 266:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 268:	15fd                	addi	a1,a1,-1
+ 26a:	177d                	addi	a4,a4,-1
+ 26c:	0005c683          	lbu	a3,0(a1)
+ 270:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 274:	fee79ae3          	bne	a5,a4,268 <memmove+0x46>
+ 278:	bfc9                	j	24a <memmove+0x28>
+
+000000000000027a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 27a:	1141                	addi	sp,sp,-16
+ 27c:	e422                	sd	s0,8(sp)
+ 27e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 280:	ca05                	beqz	a2,2b0 <memcmp+0x36>
+ 282:	fff6069b          	addiw	a3,a2,-1
+ 286:	1682                	slli	a3,a3,0x20
+ 288:	9281                	srli	a3,a3,0x20
+ 28a:	0685                	addi	a3,a3,1
+ 28c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 28e:	00054783          	lbu	a5,0(a0)
+ 292:	0005c703          	lbu	a4,0(a1)
+ 296:	00e79863          	bne	a5,a4,2a6 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 29a:	0505                	addi	a0,a0,1
+    p2++;
+ 29c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 29e:	fed518e3          	bne	a0,a3,28e <memcmp+0x14>
+  }
+  return 0;
+ 2a2:	4501                	li	a0,0
+ 2a4:	a019                	j	2aa <memcmp+0x30>
+      return *p1 - *p2;
+ 2a6:	40e7853b          	subw	a0,a5,a4
+}
+ 2aa:	6422                	ld	s0,8(sp)
+ 2ac:	0141                	addi	sp,sp,16
+ 2ae:	8082                	ret
+  return 0;
+ 2b0:	4501                	li	a0,0
+ 2b2:	bfe5                	j	2aa <memcmp+0x30>
+
+00000000000002b4 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 2b4:	1141                	addi	sp,sp,-16
+ 2b6:	e406                	sd	ra,8(sp)
+ 2b8:	e022                	sd	s0,0(sp)
+ 2ba:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 2bc:	f67ff0ef          	jal	222 <memmove>
+}
+ 2c0:	60a2                	ld	ra,8(sp)
+ 2c2:	6402                	ld	s0,0(sp)
+ 2c4:	0141                	addi	sp,sp,16
+ 2c6:	8082                	ret
+
+00000000000002c8 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 2c8:	4885                	li	a7,1
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 2d0:	4889                	li	a7,2
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 2d8:	488d                	li	a7,3
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 2e0:	4891                	li	a7,4
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2e8:	4895                	li	a7,5
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2f0:	48c1                	li	a7,16
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2f8:	48d5                	li	a7,21
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 300:	4899                	li	a7,6
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 308:	489d                	li	a7,7
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 310:	48bd                	li	a7,15
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 318:	48c5                	li	a7,17
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 320:	48c9                	li	a7,18
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 328:	48a1                	li	a7,8
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 330:	48cd                	li	a7,19
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 338:	48d1                	li	a7,20
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 340:	48a5                	li	a7,9
+ ecall
+ 342:	00000073          	ecall
+ ret
+ 346:	8082                	ret
+
+0000000000000348 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 348:	48a9                	li	a7,10
+ ecall
+ 34a:	00000073          	ecall
+ ret
+ 34e:	8082                	ret
+
+0000000000000350 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 350:	48ad                	li	a7,11
+ ecall
+ 352:	00000073          	ecall
+ ret
+ 356:	8082                	ret
+
+0000000000000358 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 358:	48b1                	li	a7,12
+ ecall
+ 35a:	00000073          	ecall
+ ret
+ 35e:	8082                	ret
+
+0000000000000360 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 360:	48b5                	li	a7,13
+ ecall
+ 362:	00000073          	ecall
+ ret
+ 366:	8082                	ret
+
+0000000000000368 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 368:	48b9                	li	a7,14
+ ecall
+ 36a:	00000073          	ecall
+ ret
+ 36e:	8082                	ret
+
+0000000000000370 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 370:	48d9                	li	a7,22
+ ecall
+ 372:	00000073          	ecall
+ ret
+ 376:	8082                	ret
+
+0000000000000378 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 378:	48dd                	li	a7,23
+ ecall
+ 37a:	00000073          	ecall
+ ret
+ 37e:	8082                	ret
+
+0000000000000380 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 380:	48e1                	li	a7,24
+ ecall
+ 382:	00000073          	ecall
+ ret
+ 386:	8082                	ret
+
+0000000000000388 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 388:	1101                	addi	sp,sp,-32
+ 38a:	ec06                	sd	ra,24(sp)
+ 38c:	e822                	sd	s0,16(sp)
+ 38e:	1000                	addi	s0,sp,32
+ 390:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 394:	4605                	li	a2,1
+ 396:	fef40593          	addi	a1,s0,-17
+ 39a:	f57ff0ef          	jal	2f0 <write>
+}
+ 39e:	60e2                	ld	ra,24(sp)
+ 3a0:	6442                	ld	s0,16(sp)
+ 3a2:	6105                	addi	sp,sp,32
+ 3a4:	8082                	ret
+
+00000000000003a6 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a6:	7139                	addi	sp,sp,-64
+ 3a8:	fc06                	sd	ra,56(sp)
+ 3aa:	f822                	sd	s0,48(sp)
+ 3ac:	f426                	sd	s1,40(sp)
+ 3ae:	0080                	addi	s0,sp,64
+ 3b0:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 3b2:	c299                	beqz	a3,3b8 <printint+0x12>
+ 3b4:	0805c963          	bltz	a1,446 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 3b8:	2581                	sext.w	a1,a1
+  neg = 0;
+ 3ba:	4881                	li	a7,0
+ 3bc:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 3c0:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 3c2:	2601                	sext.w	a2,a2
+ 3c4:	00000517          	auipc	a0,0x0
+ 3c8:	52c50513          	addi	a0,a0,1324 # 8f0 <digits>
+ 3cc:	883a                	mv	a6,a4
+ 3ce:	2705                	addiw	a4,a4,1
+ 3d0:	02c5f7bb          	remuw	a5,a1,a2
+ 3d4:	1782                	slli	a5,a5,0x20
+ 3d6:	9381                	srli	a5,a5,0x20
+ 3d8:	97aa                	add	a5,a5,a0
+ 3da:	0007c783          	lbu	a5,0(a5)
+ 3de:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 3e2:	0005879b          	sext.w	a5,a1
+ 3e6:	02c5d5bb          	divuw	a1,a1,a2
+ 3ea:	0685                	addi	a3,a3,1
+ 3ec:	fec7f0e3          	bgeu	a5,a2,3cc <printint+0x26>
+  if(neg)
+ 3f0:	00088c63          	beqz	a7,408 <printint+0x62>
+    buf[i++] = '-';
+ 3f4:	fd070793          	addi	a5,a4,-48
+ 3f8:	00878733          	add	a4,a5,s0
+ 3fc:	02d00793          	li	a5,45
+ 400:	fef70823          	sb	a5,-16(a4)
+ 404:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 408:	02e05a63          	blez	a4,43c <printint+0x96>
+ 40c:	f04a                	sd	s2,32(sp)
+ 40e:	ec4e                	sd	s3,24(sp)
+ 410:	fc040793          	addi	a5,s0,-64
+ 414:	00e78933          	add	s2,a5,a4
+ 418:	fff78993          	addi	s3,a5,-1
+ 41c:	99ba                	add	s3,s3,a4
+ 41e:	377d                	addiw	a4,a4,-1
+ 420:	1702                	slli	a4,a4,0x20
+ 422:	9301                	srli	a4,a4,0x20
+ 424:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 428:	fff94583          	lbu	a1,-1(s2)
+ 42c:	8526                	mv	a0,s1
+ 42e:	f5bff0ef          	jal	388 <putc>
+  while(--i >= 0)
+ 432:	197d                	addi	s2,s2,-1
+ 434:	ff391ae3          	bne	s2,s3,428 <printint+0x82>
+ 438:	7902                	ld	s2,32(sp)
+ 43a:	69e2                	ld	s3,24(sp)
+}
+ 43c:	70e2                	ld	ra,56(sp)
+ 43e:	7442                	ld	s0,48(sp)
+ 440:	74a2                	ld	s1,40(sp)
+ 442:	6121                	addi	sp,sp,64
+ 444:	8082                	ret
+    x = -xx;
+ 446:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 44a:	4885                	li	a7,1
+    x = -xx;
+ 44c:	bf85                	j	3bc <printint+0x16>
+
+000000000000044e <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 44e:	711d                	addi	sp,sp,-96
+ 450:	ec86                	sd	ra,88(sp)
+ 452:	e8a2                	sd	s0,80(sp)
+ 454:	e0ca                	sd	s2,64(sp)
+ 456:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 458:	0005c903          	lbu	s2,0(a1)
+ 45c:	26090863          	beqz	s2,6cc <vprintf+0x27e>
+ 460:	e4a6                	sd	s1,72(sp)
+ 462:	fc4e                	sd	s3,56(sp)
+ 464:	f852                	sd	s4,48(sp)
+ 466:	f456                	sd	s5,40(sp)
+ 468:	f05a                	sd	s6,32(sp)
+ 46a:	ec5e                	sd	s7,24(sp)
+ 46c:	e862                	sd	s8,16(sp)
+ 46e:	e466                	sd	s9,8(sp)
+ 470:	8b2a                	mv	s6,a0
+ 472:	8a2e                	mv	s4,a1
+ 474:	8bb2                	mv	s7,a2
+  state = 0;
+ 476:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 478:	4481                	li	s1,0
+ 47a:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 47c:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 480:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 484:	06c00c93          	li	s9,108
+ 488:	a005                	j	4a8 <vprintf+0x5a>
+        putc(fd, c0);
+ 48a:	85ca                	mv	a1,s2
+ 48c:	855a                	mv	a0,s6
+ 48e:	efbff0ef          	jal	388 <putc>
+ 492:	a019                	j	498 <vprintf+0x4a>
+    } else if(state == '%'){
+ 494:	03598263          	beq	s3,s5,4b8 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 498:	2485                	addiw	s1,s1,1
+ 49a:	8726                	mv	a4,s1
+ 49c:	009a07b3          	add	a5,s4,s1
+ 4a0:	0007c903          	lbu	s2,0(a5)
+ 4a4:	20090c63          	beqz	s2,6bc <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 4a8:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 4ac:	fe0994e3          	bnez	s3,494 <vprintf+0x46>
+      if(c0 == '%'){
+ 4b0:	fd579de3          	bne	a5,s5,48a <vprintf+0x3c>
+        state = '%';
+ 4b4:	89be                	mv	s3,a5
+ 4b6:	b7cd                	j	498 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 4b8:	00ea06b3          	add	a3,s4,a4
+ 4bc:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 4c0:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 4c2:	c681                	beqz	a3,4ca <vprintf+0x7c>
+ 4c4:	9752                	add	a4,a4,s4
+ 4c6:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 4ca:	03878f63          	beq	a5,s8,508 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4ce:	05978963          	beq	a5,s9,520 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 4d2:	07500713          	li	a4,117
+ 4d6:	0ee78363          	beq	a5,a4,5bc <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 4da:	07800713          	li	a4,120
+ 4de:	12e78563          	beq	a5,a4,608 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 4e2:	07000713          	li	a4,112
+ 4e6:	14e78a63          	beq	a5,a4,63a <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4ea:	07300713          	li	a4,115
+ 4ee:	18e78a63          	beq	a5,a4,682 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 4f2:	02500713          	li	a4,37
+ 4f6:	04e79563          	bne	a5,a4,540 <vprintf+0xf2>
+        putc(fd, '%');
+ 4fa:	02500593          	li	a1,37
+ 4fe:	855a                	mv	a0,s6
+ 500:	e89ff0ef          	jal	388 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 504:	4981                	li	s3,0
+ 506:	bf49                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 508:	008b8913          	addi	s2,s7,8
+ 50c:	4685                	li	a3,1
+ 50e:	4629                	li	a2,10
+ 510:	000ba583          	lw	a1,0(s7)
+ 514:	855a                	mv	a0,s6
+ 516:	e91ff0ef          	jal	3a6 <printint>
+ 51a:	8bca                	mv	s7,s2
+      state = 0;
+ 51c:	4981                	li	s3,0
+ 51e:	bfad                	j	498 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 520:	06400793          	li	a5,100
+ 524:	02f68963          	beq	a3,a5,556 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 528:	06c00793          	li	a5,108
+ 52c:	04f68263          	beq	a3,a5,570 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 530:	07500793          	li	a5,117
+ 534:	0af68063          	beq	a3,a5,5d4 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 538:	07800793          	li	a5,120
+ 53c:	0ef68263          	beq	a3,a5,620 <vprintf+0x1d2>
+        putc(fd, '%');
+ 540:	02500593          	li	a1,37
+ 544:	855a                	mv	a0,s6
+ 546:	e43ff0ef          	jal	388 <putc>
+        putc(fd, c0);
+ 54a:	85ca                	mv	a1,s2
+ 54c:	855a                	mv	a0,s6
+ 54e:	e3bff0ef          	jal	388 <putc>
+      state = 0;
+ 552:	4981                	li	s3,0
+ 554:	b791                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 556:	008b8913          	addi	s2,s7,8
+ 55a:	4685                	li	a3,1
+ 55c:	4629                	li	a2,10
+ 55e:	000ba583          	lw	a1,0(s7)
+ 562:	855a                	mv	a0,s6
+ 564:	e43ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 568:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 56a:	8bca                	mv	s7,s2
+      state = 0;
+ 56c:	4981                	li	s3,0
+        i += 1;
+ 56e:	b72d                	j	498 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 570:	06400793          	li	a5,100
+ 574:	02f60763          	beq	a2,a5,5a2 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 578:	07500793          	li	a5,117
+ 57c:	06f60963          	beq	a2,a5,5ee <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 580:	07800793          	li	a5,120
+ 584:	faf61ee3          	bne	a2,a5,540 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 588:	008b8913          	addi	s2,s7,8
+ 58c:	4681                	li	a3,0
+ 58e:	4641                	li	a2,16
+ 590:	000ba583          	lw	a1,0(s7)
+ 594:	855a                	mv	a0,s6
+ 596:	e11ff0ef          	jal	3a6 <printint>
+        i += 2;
+ 59a:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 59c:	8bca                	mv	s7,s2
+      state = 0;
+ 59e:	4981                	li	s3,0
+        i += 2;
+ 5a0:	bde5                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5a2:	008b8913          	addi	s2,s7,8
+ 5a6:	4685                	li	a3,1
+ 5a8:	4629                	li	a2,10
+ 5aa:	000ba583          	lw	a1,0(s7)
+ 5ae:	855a                	mv	a0,s6
+ 5b0:	df7ff0ef          	jal	3a6 <printint>
+        i += 2;
+ 5b4:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5b6:	8bca                	mv	s7,s2
+      state = 0;
+ 5b8:	4981                	li	s3,0
+        i += 2;
+ 5ba:	bdf9                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 5bc:	008b8913          	addi	s2,s7,8
+ 5c0:	4681                	li	a3,0
+ 5c2:	4629                	li	a2,10
+ 5c4:	000ba583          	lw	a1,0(s7)
+ 5c8:	855a                	mv	a0,s6
+ 5ca:	dddff0ef          	jal	3a6 <printint>
+ 5ce:	8bca                	mv	s7,s2
+      state = 0;
+ 5d0:	4981                	li	s3,0
+ 5d2:	b5d9                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5d4:	008b8913          	addi	s2,s7,8
+ 5d8:	4681                	li	a3,0
+ 5da:	4629                	li	a2,10
+ 5dc:	000ba583          	lw	a1,0(s7)
+ 5e0:	855a                	mv	a0,s6
+ 5e2:	dc5ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 5e6:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5e8:	8bca                	mv	s7,s2
+      state = 0;
+ 5ea:	4981                	li	s3,0
+        i += 1;
+ 5ec:	b575                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5ee:	008b8913          	addi	s2,s7,8
+ 5f2:	4681                	li	a3,0
+ 5f4:	4629                	li	a2,10
+ 5f6:	000ba583          	lw	a1,0(s7)
+ 5fa:	855a                	mv	a0,s6
+ 5fc:	dabff0ef          	jal	3a6 <printint>
+        i += 2;
+ 600:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 602:	8bca                	mv	s7,s2
+      state = 0;
+ 604:	4981                	li	s3,0
+        i += 2;
+ 606:	bd49                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 608:	008b8913          	addi	s2,s7,8
+ 60c:	4681                	li	a3,0
+ 60e:	4641                	li	a2,16
+ 610:	000ba583          	lw	a1,0(s7)
+ 614:	855a                	mv	a0,s6
+ 616:	d91ff0ef          	jal	3a6 <printint>
+ 61a:	8bca                	mv	s7,s2
+      state = 0;
+ 61c:	4981                	li	s3,0
+ 61e:	bdad                	j	498 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 620:	008b8913          	addi	s2,s7,8
+ 624:	4681                	li	a3,0
+ 626:	4641                	li	a2,16
+ 628:	000ba583          	lw	a1,0(s7)
+ 62c:	855a                	mv	a0,s6
+ 62e:	d79ff0ef          	jal	3a6 <printint>
+        i += 1;
+ 632:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 634:	8bca                	mv	s7,s2
+      state = 0;
+ 636:	4981                	li	s3,0
+        i += 1;
+ 638:	b585                	j	498 <vprintf+0x4a>
+ 63a:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 63c:	008b8d13          	addi	s10,s7,8
+ 640:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 644:	03000593          	li	a1,48
+ 648:	855a                	mv	a0,s6
+ 64a:	d3fff0ef          	jal	388 <putc>
+  putc(fd, 'x');
+ 64e:	07800593          	li	a1,120
+ 652:	855a                	mv	a0,s6
+ 654:	d35ff0ef          	jal	388 <putc>
+ 658:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 65a:	00000b97          	auipc	s7,0x0
+ 65e:	296b8b93          	addi	s7,s7,662 # 8f0 <digits>
+ 662:	03c9d793          	srli	a5,s3,0x3c
+ 666:	97de                	add	a5,a5,s7
+ 668:	0007c583          	lbu	a1,0(a5)
+ 66c:	855a                	mv	a0,s6
+ 66e:	d1bff0ef          	jal	388 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 672:	0992                	slli	s3,s3,0x4
+ 674:	397d                	addiw	s2,s2,-1
+ 676:	fe0916e3          	bnez	s2,662 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 67a:	8bea                	mv	s7,s10
+      state = 0;
+ 67c:	4981                	li	s3,0
+ 67e:	6d02                	ld	s10,0(sp)
+ 680:	bd21                	j	498 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 682:	008b8993          	addi	s3,s7,8
+ 686:	000bb903          	ld	s2,0(s7)
+ 68a:	00090f63          	beqz	s2,6a8 <vprintf+0x25a>
+        for(; *s; s++)
+ 68e:	00094583          	lbu	a1,0(s2)
+ 692:	c195                	beqz	a1,6b6 <vprintf+0x268>
+          putc(fd, *s);
+ 694:	855a                	mv	a0,s6
+ 696:	cf3ff0ef          	jal	388 <putc>
+        for(; *s; s++)
+ 69a:	0905                	addi	s2,s2,1
+ 69c:	00094583          	lbu	a1,0(s2)
+ 6a0:	f9f5                	bnez	a1,694 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6a2:	8bce                	mv	s7,s3
+      state = 0;
+ 6a4:	4981                	li	s3,0
+ 6a6:	bbcd                	j	498 <vprintf+0x4a>
+          s = "(null)";
+ 6a8:	00000917          	auipc	s2,0x0
+ 6ac:	24090913          	addi	s2,s2,576 # 8e8 <malloc+0x134>
+        for(; *s; s++)
+ 6b0:	02800593          	li	a1,40
+ 6b4:	b7c5                	j	694 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 6b6:	8bce                	mv	s7,s3
+      state = 0;
+ 6b8:	4981                	li	s3,0
+ 6ba:	bbf9                	j	498 <vprintf+0x4a>
+ 6bc:	64a6                	ld	s1,72(sp)
+ 6be:	79e2                	ld	s3,56(sp)
+ 6c0:	7a42                	ld	s4,48(sp)
+ 6c2:	7aa2                	ld	s5,40(sp)
+ 6c4:	7b02                	ld	s6,32(sp)
+ 6c6:	6be2                	ld	s7,24(sp)
+ 6c8:	6c42                	ld	s8,16(sp)
+ 6ca:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 6cc:	60e6                	ld	ra,88(sp)
+ 6ce:	6446                	ld	s0,80(sp)
+ 6d0:	6906                	ld	s2,64(sp)
+ 6d2:	6125                	addi	sp,sp,96
+ 6d4:	8082                	ret
+
+00000000000006d6 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 6d6:	715d                	addi	sp,sp,-80
+ 6d8:	ec06                	sd	ra,24(sp)
+ 6da:	e822                	sd	s0,16(sp)
+ 6dc:	1000                	addi	s0,sp,32
+ 6de:	e010                	sd	a2,0(s0)
+ 6e0:	e414                	sd	a3,8(s0)
+ 6e2:	e818                	sd	a4,16(s0)
+ 6e4:	ec1c                	sd	a5,24(s0)
+ 6e6:	03043023          	sd	a6,32(s0)
+ 6ea:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6ee:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6f2:	8622                	mv	a2,s0
+ 6f4:	d5bff0ef          	jal	44e <vprintf>
+}
+ 6f8:	60e2                	ld	ra,24(sp)
+ 6fa:	6442                	ld	s0,16(sp)
+ 6fc:	6161                	addi	sp,sp,80
+ 6fe:	8082                	ret
+
+0000000000000700 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 700:	711d                	addi	sp,sp,-96
+ 702:	ec06                	sd	ra,24(sp)
+ 704:	e822                	sd	s0,16(sp)
+ 706:	1000                	addi	s0,sp,32
+ 708:	e40c                	sd	a1,8(s0)
+ 70a:	e810                	sd	a2,16(s0)
+ 70c:	ec14                	sd	a3,24(s0)
+ 70e:	f018                	sd	a4,32(s0)
+ 710:	f41c                	sd	a5,40(s0)
+ 712:	03043823          	sd	a6,48(s0)
+ 716:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 71a:	00840613          	addi	a2,s0,8
+ 71e:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 722:	85aa                	mv	a1,a0
+ 724:	4505                	li	a0,1
+ 726:	d29ff0ef          	jal	44e <vprintf>
+}
+ 72a:	60e2                	ld	ra,24(sp)
+ 72c:	6442                	ld	s0,16(sp)
+ 72e:	6125                	addi	sp,sp,96
+ 730:	8082                	ret
+
+0000000000000732 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 732:	1141                	addi	sp,sp,-16
+ 734:	e422                	sd	s0,8(sp)
+ 736:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 738:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 73c:	00001797          	auipc	a5,0x1
+ 740:	8c47b783          	ld	a5,-1852(a5) # 1000 <freep>
+ 744:	a02d                	j	76e <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 746:	4618                	lw	a4,8(a2)
+ 748:	9f2d                	addw	a4,a4,a1
+ 74a:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 74e:	6398                	ld	a4,0(a5)
+ 750:	6310                	ld	a2,0(a4)
+ 752:	a83d                	j	790 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 754:	ff852703          	lw	a4,-8(a0)
+ 758:	9f31                	addw	a4,a4,a2
+ 75a:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 75c:	ff053683          	ld	a3,-16(a0)
+ 760:	a091                	j	7a4 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 762:	6398                	ld	a4,0(a5)
+ 764:	00e7e463          	bltu	a5,a4,76c <free+0x3a>
+ 768:	00e6ea63          	bltu	a3,a4,77c <free+0x4a>
+{
+ 76c:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 76e:	fed7fae3          	bgeu	a5,a3,762 <free+0x30>
+ 772:	6398                	ld	a4,0(a5)
+ 774:	00e6e463          	bltu	a3,a4,77c <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 778:	fee7eae3          	bltu	a5,a4,76c <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 77c:	ff852583          	lw	a1,-8(a0)
+ 780:	6390                	ld	a2,0(a5)
+ 782:	02059813          	slli	a6,a1,0x20
+ 786:	01c85713          	srli	a4,a6,0x1c
+ 78a:	9736                	add	a4,a4,a3
+ 78c:	fae60de3          	beq	a2,a4,746 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 790:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 794:	4790                	lw	a2,8(a5)
+ 796:	02061593          	slli	a1,a2,0x20
+ 79a:	01c5d713          	srli	a4,a1,0x1c
+ 79e:	973e                	add	a4,a4,a5
+ 7a0:	fae68ae3          	beq	a3,a4,754 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 7a4:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 7a6:	00001717          	auipc	a4,0x1
+ 7aa:	84f73d23          	sd	a5,-1958(a4) # 1000 <freep>
+}
+ 7ae:	6422                	ld	s0,8(sp)
+ 7b0:	0141                	addi	sp,sp,16
+ 7b2:	8082                	ret
+
+00000000000007b4 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 7b4:	7139                	addi	sp,sp,-64
+ 7b6:	fc06                	sd	ra,56(sp)
+ 7b8:	f822                	sd	s0,48(sp)
+ 7ba:	f426                	sd	s1,40(sp)
+ 7bc:	ec4e                	sd	s3,24(sp)
+ 7be:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 7c0:	02051493          	slli	s1,a0,0x20
+ 7c4:	9081                	srli	s1,s1,0x20
+ 7c6:	04bd                	addi	s1,s1,15
+ 7c8:	8091                	srli	s1,s1,0x4
+ 7ca:	0014899b          	addiw	s3,s1,1
+ 7ce:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 7d0:	00001517          	auipc	a0,0x1
+ 7d4:	83053503          	ld	a0,-2000(a0) # 1000 <freep>
+ 7d8:	c915                	beqz	a0,80c <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7da:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7dc:	4798                	lw	a4,8(a5)
+ 7de:	08977a63          	bgeu	a4,s1,872 <malloc+0xbe>
+ 7e2:	f04a                	sd	s2,32(sp)
+ 7e4:	e852                	sd	s4,16(sp)
+ 7e6:	e456                	sd	s5,8(sp)
+ 7e8:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7ea:	8a4e                	mv	s4,s3
+ 7ec:	0009871b          	sext.w	a4,s3
+ 7f0:	6685                	lui	a3,0x1
+ 7f2:	00d77363          	bgeu	a4,a3,7f8 <malloc+0x44>
+ 7f6:	6a05                	lui	s4,0x1
+ 7f8:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7fc:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 800:	00001917          	auipc	s2,0x1
+ 804:	80090913          	addi	s2,s2,-2048 # 1000 <freep>
+  if(p == (char*)-1)
+ 808:	5afd                	li	s5,-1
+ 80a:	a081                	j	84a <malloc+0x96>
+ 80c:	f04a                	sd	s2,32(sp)
+ 80e:	e852                	sd	s4,16(sp)
+ 810:	e456                	sd	s5,8(sp)
+ 812:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 814:	00000797          	auipc	a5,0x0
+ 818:	7fc78793          	addi	a5,a5,2044 # 1010 <base>
+ 81c:	00000717          	auipc	a4,0x0
+ 820:	7ef73223          	sd	a5,2020(a4) # 1000 <freep>
+ 824:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 826:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 82a:	b7c1                	j	7ea <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 82c:	6398                	ld	a4,0(a5)
+ 82e:	e118                	sd	a4,0(a0)
+ 830:	a8a9                	j	88a <malloc+0xd6>
+  hp->s.size = nu;
+ 832:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 836:	0541                	addi	a0,a0,16
+ 838:	efbff0ef          	jal	732 <free>
+  return freep;
+ 83c:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 840:	c12d                	beqz	a0,8a2 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 842:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 844:	4798                	lw	a4,8(a5)
+ 846:	02977263          	bgeu	a4,s1,86a <malloc+0xb6>
+    if(p == freep)
+ 84a:	00093703          	ld	a4,0(s2)
+ 84e:	853e                	mv	a0,a5
+ 850:	fef719e3          	bne	a4,a5,842 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 854:	8552                	mv	a0,s4
+ 856:	b03ff0ef          	jal	358 <sbrk>
+  if(p == (char*)-1)
+ 85a:	fd551ce3          	bne	a0,s5,832 <malloc+0x7e>
+        return 0;
+ 85e:	4501                	li	a0,0
+ 860:	7902                	ld	s2,32(sp)
+ 862:	6a42                	ld	s4,16(sp)
+ 864:	6aa2                	ld	s5,8(sp)
+ 866:	6b02                	ld	s6,0(sp)
+ 868:	a03d                	j	896 <malloc+0xe2>
+ 86a:	7902                	ld	s2,32(sp)
+ 86c:	6a42                	ld	s4,16(sp)
+ 86e:	6aa2                	ld	s5,8(sp)
+ 870:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 872:	fae48de3          	beq	s1,a4,82c <malloc+0x78>
+        p->s.size -= nunits;
+ 876:	4137073b          	subw	a4,a4,s3
+ 87a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 87c:	02071693          	slli	a3,a4,0x20
+ 880:	01c6d713          	srli	a4,a3,0x1c
+ 884:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 886:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 88a:	00000717          	auipc	a4,0x0
+ 88e:	76a73b23          	sd	a0,1910(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 892:	01078513          	addi	a0,a5,16
+  }
+}
+ 896:	70e2                	ld	ra,56(sp)
+ 898:	7442                	ld	s0,48(sp)
+ 89a:	74a2                	ld	s1,40(sp)
+ 89c:	69e2                	ld	s3,24(sp)
+ 89e:	6121                	addi	sp,sp,64
+ 8a0:	8082                	ret
+ 8a2:	7902                	ld	s2,32(sp)
+ 8a4:	6a42                	ld	s4,16(sp)
+ 8a6:	6aa2                	ld	s5,8(sp)
+ 8a8:	6b02                	ld	s6,0(sp)
+ 8aa:	b7f5                	j	896 <malloc+0xe2>
diff --git a/user/rm.c b/user/rm.c
new file mode 100644
index 0000000..26b8f1f
--- /dev/null
+++ b/user/rm.c
@@ -0,0 +1,23 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+
+  if(argc < 2){
+    fprintf(2, "Usage: rm files...\n");
+    exit(1);
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+      fprintf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit(0);
+}
diff --git a/user/rm.d b/user/rm.d
new file mode 100644
index 0000000..bc40001
--- /dev/null
+++ b/user/rm.d
@@ -0,0 +1 @@
+user/rm.o: user/rm.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/rm.o b/user/rm.o
new file mode 100644
index 0000000..0ad3034
Binary files /dev/null and b/user/rm.o differ
diff --git a/user/rm.sym b/user/rm.sym
new file mode 100644
index 0000000..24d42e9
--- /dev/null
+++ b/user/rm.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+00000000000008b0 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 rm.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000388 putc
+00000000000003a6 printint
+00000000000008f0 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+0000000000000078 strcpy
+0000000000000700 printf
+0000000000000222 memmove
+0000000000000318 mknod
+0000000000000378 trace
+0000000000000130 gets
+0000000000000350 getpid
+0000000000000370 hello
+00000000000002b4 memcpy
+00000000000007b4 malloc
+0000000000000360 sleep
+0000000000000380 sysinfo
+00000000000002e0 pipe
+00000000000002f0 write
+0000000000000328 fstat
+00000000000006d6 fprintf
+0000000000000300 kill
+000000000000044e vprintf
+0000000000000340 chdir
+0000000000000308 exec
+00000000000002d8 wait
+00000000000002e8 read
+0000000000000320 unlink
+000000000000027a memcmp
+00000000000002c8 fork
+0000000000000358 sbrk
+0000000000000368 uptime
+00000000000000ea memset
+0000000000000000 main
+0000000000000094 strcmp
+0000000000000348 dup
+00000000000001a0 stat
+0000000000000330 link
+00000000000002d0 exit
+0000000000000066 start
+00000000000001da atoi
+00000000000000c0 strlen
+0000000000000310 open
+000000000000010c strchr
+0000000000000338 mkdir
+00000000000002f8 close
+0000000000000732 free
diff --git a/user/sh.asm b/user/sh.asm
new file mode 100644
index 0000000..37021fa
--- /dev/null
+++ b/user/sh.asm
@@ -0,0 +1,2753 @@
+
+user/_sh:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <getcmd>:
+  exit(0);
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+       0:	1101                	addi	sp,sp,-32
+       2:	ec06                	sd	ra,24(sp)
+       4:	e822                	sd	s0,16(sp)
+       6:	e426                	sd	s1,8(sp)
+       8:	e04a                	sd	s2,0(sp)
+       a:	1000                	addi	s0,sp,32
+       c:	84aa                	mv	s1,a0
+       e:	892e                	mv	s2,a1
+  write(2, "$ ", 2);
+      10:	4609                	li	a2,2
+      12:	00001597          	auipc	a1,0x1
+      16:	1ce58593          	addi	a1,a1,462 # 11e0 <malloc+0x100>
+      1a:	4509                	li	a0,2
+      1c:	401000ef          	jal	c1c <write>
+  memset(buf, 0, nbuf);
+      20:	864a                	mv	a2,s2
+      22:	4581                	li	a1,0
+      24:	8526                	mv	a0,s1
+      26:	1f1000ef          	jal	a16 <memset>
+  gets(buf, nbuf);
+      2a:	85ca                	mv	a1,s2
+      2c:	8526                	mv	a0,s1
+      2e:	22f000ef          	jal	a5c <gets>
+  if(buf[0] == 0) // EOF
+      32:	0004c503          	lbu	a0,0(s1)
+      36:	00153513          	seqz	a0,a0
+    return -1;
+  return 0;
+}
+      3a:	40a00533          	neg	a0,a0
+      3e:	60e2                	ld	ra,24(sp)
+      40:	6442                	ld	s0,16(sp)
+      42:	64a2                	ld	s1,8(sp)
+      44:	6902                	ld	s2,0(sp)
+      46:	6105                	addi	sp,sp,32
+      48:	8082                	ret
+
+000000000000004a <panic>:
+  exit(0);
+}
+
+void
+panic(char *s)
+{
+      4a:	1141                	addi	sp,sp,-16
+      4c:	e406                	sd	ra,8(sp)
+      4e:	e022                	sd	s0,0(sp)
+      50:	0800                	addi	s0,sp,16
+      52:	862a                	mv	a2,a0
+  fprintf(2, "%s\n", s);
+      54:	00001597          	auipc	a1,0x1
+      58:	19c58593          	addi	a1,a1,412 # 11f0 <malloc+0x110>
+      5c:	4509                	li	a0,2
+      5e:	7a5000ef          	jal	1002 <fprintf>
+  exit(1);
+      62:	4505                	li	a0,1
+      64:	399000ef          	jal	bfc <exit>
+
+0000000000000068 <fork1>:
+}
+
+int
+fork1(void)
+{
+      68:	1141                	addi	sp,sp,-16
+      6a:	e406                	sd	ra,8(sp)
+      6c:	e022                	sd	s0,0(sp)
+      6e:	0800                	addi	s0,sp,16
+  int pid;
+
+  pid = fork();
+      70:	385000ef          	jal	bf4 <fork>
+  if(pid == -1)
+      74:	57fd                	li	a5,-1
+      76:	00f50663          	beq	a0,a5,82 <fork1+0x1a>
+    panic("fork");
+  return pid;
+}
+      7a:	60a2                	ld	ra,8(sp)
+      7c:	6402                	ld	s0,0(sp)
+      7e:	0141                	addi	sp,sp,16
+      80:	8082                	ret
+    panic("fork");
+      82:	00001517          	auipc	a0,0x1
+      86:	17650513          	addi	a0,a0,374 # 11f8 <malloc+0x118>
+      8a:	fc1ff0ef          	jal	4a <panic>
+
+000000000000008e <runcmd>:
+{
+      8e:	7179                	addi	sp,sp,-48
+      90:	f406                	sd	ra,40(sp)
+      92:	f022                	sd	s0,32(sp)
+      94:	1800                	addi	s0,sp,48
+  if(cmd == 0)
+      96:	c115                	beqz	a0,ba <runcmd+0x2c>
+      98:	ec26                	sd	s1,24(sp)
+      9a:	84aa                	mv	s1,a0
+  switch(cmd->type){
+      9c:	4118                	lw	a4,0(a0)
+      9e:	4795                	li	a5,5
+      a0:	02e7e163          	bltu	a5,a4,c2 <runcmd+0x34>
+      a4:	00056783          	lwu	a5,0(a0)
+      a8:	078a                	slli	a5,a5,0x2
+      aa:	00001717          	auipc	a4,0x1
+      ae:	24e70713          	addi	a4,a4,590 # 12f8 <malloc+0x218>
+      b2:	97ba                	add	a5,a5,a4
+      b4:	439c                	lw	a5,0(a5)
+      b6:	97ba                	add	a5,a5,a4
+      b8:	8782                	jr	a5
+      ba:	ec26                	sd	s1,24(sp)
+    exit(1);
+      bc:	4505                	li	a0,1
+      be:	33f000ef          	jal	bfc <exit>
+    panic("runcmd");
+      c2:	00001517          	auipc	a0,0x1
+      c6:	13e50513          	addi	a0,a0,318 # 1200 <malloc+0x120>
+      ca:	f81ff0ef          	jal	4a <panic>
+    if(ecmd->argv[0] == 0)
+      ce:	6508                	ld	a0,8(a0)
+      d0:	c105                	beqz	a0,f0 <runcmd+0x62>
+    exec(ecmd->argv[0], ecmd->argv);
+      d2:	00848593          	addi	a1,s1,8
+      d6:	35f000ef          	jal	c34 <exec>
+    fprintf(2, "exec %s failed\n", ecmd->argv[0]);
+      da:	6490                	ld	a2,8(s1)
+      dc:	00001597          	auipc	a1,0x1
+      e0:	12c58593          	addi	a1,a1,300 # 1208 <malloc+0x128>
+      e4:	4509                	li	a0,2
+      e6:	71d000ef          	jal	1002 <fprintf>
+  exit(0);
+      ea:	4501                	li	a0,0
+      ec:	311000ef          	jal	bfc <exit>
+      exit(1);
+      f0:	4505                	li	a0,1
+      f2:	30b000ef          	jal	bfc <exit>
+    close(rcmd->fd);
+      f6:	5148                	lw	a0,36(a0)
+      f8:	32d000ef          	jal	c24 <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+      fc:	508c                	lw	a1,32(s1)
+      fe:	6888                	ld	a0,16(s1)
+     100:	33d000ef          	jal	c3c <open>
+     104:	00054563          	bltz	a0,10e <runcmd+0x80>
+    runcmd(rcmd->cmd);
+     108:	6488                	ld	a0,8(s1)
+     10a:	f85ff0ef          	jal	8e <runcmd>
+      fprintf(2, "open %s failed\n", rcmd->file);
+     10e:	6890                	ld	a2,16(s1)
+     110:	00001597          	auipc	a1,0x1
+     114:	10858593          	addi	a1,a1,264 # 1218 <malloc+0x138>
+     118:	4509                	li	a0,2
+     11a:	6e9000ef          	jal	1002 <fprintf>
+      exit(1);
+     11e:	4505                	li	a0,1
+     120:	2dd000ef          	jal	bfc <exit>
+    if(fork1() == 0)
+     124:	f45ff0ef          	jal	68 <fork1>
+     128:	e501                	bnez	a0,130 <runcmd+0xa2>
+      runcmd(lcmd->left);
+     12a:	6488                	ld	a0,8(s1)
+     12c:	f63ff0ef          	jal	8e <runcmd>
+    wait(0);
+     130:	4501                	li	a0,0
+     132:	2d3000ef          	jal	c04 <wait>
+    runcmd(lcmd->right);
+     136:	6888                	ld	a0,16(s1)
+     138:	f57ff0ef          	jal	8e <runcmd>
+    if(pipe(p) < 0)
+     13c:	fd840513          	addi	a0,s0,-40
+     140:	2cd000ef          	jal	c0c <pipe>
+     144:	02054763          	bltz	a0,172 <runcmd+0xe4>
+    if(fork1() == 0){
+     148:	f21ff0ef          	jal	68 <fork1>
+     14c:	e90d                	bnez	a0,17e <runcmd+0xf0>
+      close(1);
+     14e:	4505                	li	a0,1
+     150:	2d5000ef          	jal	c24 <close>
+      dup(p[1]);
+     154:	fdc42503          	lw	a0,-36(s0)
+     158:	31d000ef          	jal	c74 <dup>
+      close(p[0]);
+     15c:	fd842503          	lw	a0,-40(s0)
+     160:	2c5000ef          	jal	c24 <close>
+      close(p[1]);
+     164:	fdc42503          	lw	a0,-36(s0)
+     168:	2bd000ef          	jal	c24 <close>
+      runcmd(pcmd->left);
+     16c:	6488                	ld	a0,8(s1)
+     16e:	f21ff0ef          	jal	8e <runcmd>
+      panic("pipe");
+     172:	00001517          	auipc	a0,0x1
+     176:	0b650513          	addi	a0,a0,182 # 1228 <malloc+0x148>
+     17a:	ed1ff0ef          	jal	4a <panic>
+    if(fork1() == 0){
+     17e:	eebff0ef          	jal	68 <fork1>
+     182:	e115                	bnez	a0,1a6 <runcmd+0x118>
+      close(0);
+     184:	2a1000ef          	jal	c24 <close>
+      dup(p[0]);
+     188:	fd842503          	lw	a0,-40(s0)
+     18c:	2e9000ef          	jal	c74 <dup>
+      close(p[0]);
+     190:	fd842503          	lw	a0,-40(s0)
+     194:	291000ef          	jal	c24 <close>
+      close(p[1]);
+     198:	fdc42503          	lw	a0,-36(s0)
+     19c:	289000ef          	jal	c24 <close>
+      runcmd(pcmd->right);
+     1a0:	6888                	ld	a0,16(s1)
+     1a2:	eedff0ef          	jal	8e <runcmd>
+    close(p[0]);
+     1a6:	fd842503          	lw	a0,-40(s0)
+     1aa:	27b000ef          	jal	c24 <close>
+    close(p[1]);
+     1ae:	fdc42503          	lw	a0,-36(s0)
+     1b2:	273000ef          	jal	c24 <close>
+    wait(0);
+     1b6:	4501                	li	a0,0
+     1b8:	24d000ef          	jal	c04 <wait>
+    wait(0);
+     1bc:	4501                	li	a0,0
+     1be:	247000ef          	jal	c04 <wait>
+    break;
+     1c2:	b725                	j	ea <runcmd+0x5c>
+    if(fork1() == 0)
+     1c4:	ea5ff0ef          	jal	68 <fork1>
+     1c8:	f20511e3          	bnez	a0,ea <runcmd+0x5c>
+      runcmd(bcmd->cmd);
+     1cc:	6488                	ld	a0,8(s1)
+     1ce:	ec1ff0ef          	jal	8e <runcmd>
+
+00000000000001d2 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     1d2:	1101                	addi	sp,sp,-32
+     1d4:	ec06                	sd	ra,24(sp)
+     1d6:	e822                	sd	s0,16(sp)
+     1d8:	e426                	sd	s1,8(sp)
+     1da:	1000                	addi	s0,sp,32
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     1dc:	0a800513          	li	a0,168
+     1e0:	701000ef          	jal	10e0 <malloc>
+     1e4:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     1e6:	0a800613          	li	a2,168
+     1ea:	4581                	li	a1,0
+     1ec:	02b000ef          	jal	a16 <memset>
+  cmd->type = EXEC;
+     1f0:	4785                	li	a5,1
+     1f2:	c09c                	sw	a5,0(s1)
+  return (struct cmd*)cmd;
+}
+     1f4:	8526                	mv	a0,s1
+     1f6:	60e2                	ld	ra,24(sp)
+     1f8:	6442                	ld	s0,16(sp)
+     1fa:	64a2                	ld	s1,8(sp)
+     1fc:	6105                	addi	sp,sp,32
+     1fe:	8082                	ret
+
+0000000000000200 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     200:	7139                	addi	sp,sp,-64
+     202:	fc06                	sd	ra,56(sp)
+     204:	f822                	sd	s0,48(sp)
+     206:	f426                	sd	s1,40(sp)
+     208:	f04a                	sd	s2,32(sp)
+     20a:	ec4e                	sd	s3,24(sp)
+     20c:	e852                	sd	s4,16(sp)
+     20e:	e456                	sd	s5,8(sp)
+     210:	e05a                	sd	s6,0(sp)
+     212:	0080                	addi	s0,sp,64
+     214:	8b2a                	mv	s6,a0
+     216:	8aae                	mv	s5,a1
+     218:	8a32                	mv	s4,a2
+     21a:	89b6                	mv	s3,a3
+     21c:	893a                	mv	s2,a4
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     21e:	02800513          	li	a0,40
+     222:	6bf000ef          	jal	10e0 <malloc>
+     226:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     228:	02800613          	li	a2,40
+     22c:	4581                	li	a1,0
+     22e:	7e8000ef          	jal	a16 <memset>
+  cmd->type = REDIR;
+     232:	4789                	li	a5,2
+     234:	c09c                	sw	a5,0(s1)
+  cmd->cmd = subcmd;
+     236:	0164b423          	sd	s6,8(s1)
+  cmd->file = file;
+     23a:	0154b823          	sd	s5,16(s1)
+  cmd->efile = efile;
+     23e:	0144bc23          	sd	s4,24(s1)
+  cmd->mode = mode;
+     242:	0334a023          	sw	s3,32(s1)
+  cmd->fd = fd;
+     246:	0324a223          	sw	s2,36(s1)
+  return (struct cmd*)cmd;
+}
+     24a:	8526                	mv	a0,s1
+     24c:	70e2                	ld	ra,56(sp)
+     24e:	7442                	ld	s0,48(sp)
+     250:	74a2                	ld	s1,40(sp)
+     252:	7902                	ld	s2,32(sp)
+     254:	69e2                	ld	s3,24(sp)
+     256:	6a42                	ld	s4,16(sp)
+     258:	6aa2                	ld	s5,8(sp)
+     25a:	6b02                	ld	s6,0(sp)
+     25c:	6121                	addi	sp,sp,64
+     25e:	8082                	ret
+
+0000000000000260 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     260:	7179                	addi	sp,sp,-48
+     262:	f406                	sd	ra,40(sp)
+     264:	f022                	sd	s0,32(sp)
+     266:	ec26                	sd	s1,24(sp)
+     268:	e84a                	sd	s2,16(sp)
+     26a:	e44e                	sd	s3,8(sp)
+     26c:	1800                	addi	s0,sp,48
+     26e:	89aa                	mv	s3,a0
+     270:	892e                	mv	s2,a1
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     272:	4561                	li	a0,24
+     274:	66d000ef          	jal	10e0 <malloc>
+     278:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     27a:	4661                	li	a2,24
+     27c:	4581                	li	a1,0
+     27e:	798000ef          	jal	a16 <memset>
+  cmd->type = PIPE;
+     282:	478d                	li	a5,3
+     284:	c09c                	sw	a5,0(s1)
+  cmd->left = left;
+     286:	0134b423          	sd	s3,8(s1)
+  cmd->right = right;
+     28a:	0124b823          	sd	s2,16(s1)
+  return (struct cmd*)cmd;
+}
+     28e:	8526                	mv	a0,s1
+     290:	70a2                	ld	ra,40(sp)
+     292:	7402                	ld	s0,32(sp)
+     294:	64e2                	ld	s1,24(sp)
+     296:	6942                	ld	s2,16(sp)
+     298:	69a2                	ld	s3,8(sp)
+     29a:	6145                	addi	sp,sp,48
+     29c:	8082                	ret
+
+000000000000029e <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     29e:	7179                	addi	sp,sp,-48
+     2a0:	f406                	sd	ra,40(sp)
+     2a2:	f022                	sd	s0,32(sp)
+     2a4:	ec26                	sd	s1,24(sp)
+     2a6:	e84a                	sd	s2,16(sp)
+     2a8:	e44e                	sd	s3,8(sp)
+     2aa:	1800                	addi	s0,sp,48
+     2ac:	89aa                	mv	s3,a0
+     2ae:	892e                	mv	s2,a1
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     2b0:	4561                	li	a0,24
+     2b2:	62f000ef          	jal	10e0 <malloc>
+     2b6:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     2b8:	4661                	li	a2,24
+     2ba:	4581                	li	a1,0
+     2bc:	75a000ef          	jal	a16 <memset>
+  cmd->type = LIST;
+     2c0:	4791                	li	a5,4
+     2c2:	c09c                	sw	a5,0(s1)
+  cmd->left = left;
+     2c4:	0134b423          	sd	s3,8(s1)
+  cmd->right = right;
+     2c8:	0124b823          	sd	s2,16(s1)
+  return (struct cmd*)cmd;
+}
+     2cc:	8526                	mv	a0,s1
+     2ce:	70a2                	ld	ra,40(sp)
+     2d0:	7402                	ld	s0,32(sp)
+     2d2:	64e2                	ld	s1,24(sp)
+     2d4:	6942                	ld	s2,16(sp)
+     2d6:	69a2                	ld	s3,8(sp)
+     2d8:	6145                	addi	sp,sp,48
+     2da:	8082                	ret
+
+00000000000002dc <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     2dc:	1101                	addi	sp,sp,-32
+     2de:	ec06                	sd	ra,24(sp)
+     2e0:	e822                	sd	s0,16(sp)
+     2e2:	e426                	sd	s1,8(sp)
+     2e4:	e04a                	sd	s2,0(sp)
+     2e6:	1000                	addi	s0,sp,32
+     2e8:	892a                	mv	s2,a0
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     2ea:	4541                	li	a0,16
+     2ec:	5f5000ef          	jal	10e0 <malloc>
+     2f0:	84aa                	mv	s1,a0
+  memset(cmd, 0, sizeof(*cmd));
+     2f2:	4641                	li	a2,16
+     2f4:	4581                	li	a1,0
+     2f6:	720000ef          	jal	a16 <memset>
+  cmd->type = BACK;
+     2fa:	4795                	li	a5,5
+     2fc:	c09c                	sw	a5,0(s1)
+  cmd->cmd = subcmd;
+     2fe:	0124b423          	sd	s2,8(s1)
+  return (struct cmd*)cmd;
+}
+     302:	8526                	mv	a0,s1
+     304:	60e2                	ld	ra,24(sp)
+     306:	6442                	ld	s0,16(sp)
+     308:	64a2                	ld	s1,8(sp)
+     30a:	6902                	ld	s2,0(sp)
+     30c:	6105                	addi	sp,sp,32
+     30e:	8082                	ret
+
+0000000000000310 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     310:	7139                	addi	sp,sp,-64
+     312:	fc06                	sd	ra,56(sp)
+     314:	f822                	sd	s0,48(sp)
+     316:	f426                	sd	s1,40(sp)
+     318:	f04a                	sd	s2,32(sp)
+     31a:	ec4e                	sd	s3,24(sp)
+     31c:	e852                	sd	s4,16(sp)
+     31e:	e456                	sd	s5,8(sp)
+     320:	e05a                	sd	s6,0(sp)
+     322:	0080                	addi	s0,sp,64
+     324:	8a2a                	mv	s4,a0
+     326:	892e                	mv	s2,a1
+     328:	8ab2                	mv	s5,a2
+     32a:	8b36                	mv	s6,a3
+  char *s;
+  int ret;
+
+  s = *ps;
+     32c:	6104                	ld	s1,0(a0)
+  while(s < es && strchr(whitespace, *s))
+     32e:	00002997          	auipc	s3,0x2
+     332:	cda98993          	addi	s3,s3,-806 # 2008 <whitespace>
+     336:	00b4fc63          	bgeu	s1,a1,34e <gettoken+0x3e>
+     33a:	0004c583          	lbu	a1,0(s1)
+     33e:	854e                	mv	a0,s3
+     340:	6f8000ef          	jal	a38 <strchr>
+     344:	c509                	beqz	a0,34e <gettoken+0x3e>
+    s++;
+     346:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     348:	fe9919e3          	bne	s2,s1,33a <gettoken+0x2a>
+     34c:	84ca                	mv	s1,s2
+  if(q)
+     34e:	000a8463          	beqz	s5,356 <gettoken+0x46>
+    *q = s;
+     352:	009ab023          	sd	s1,0(s5)
+  ret = *s;
+     356:	0004c783          	lbu	a5,0(s1)
+     35a:	00078a9b          	sext.w	s5,a5
+  switch(*s){
+     35e:	03c00713          	li	a4,60
+     362:	06f76463          	bltu	a4,a5,3ca <gettoken+0xba>
+     366:	03a00713          	li	a4,58
+     36a:	00f76e63          	bltu	a4,a5,386 <gettoken+0x76>
+     36e:	cf89                	beqz	a5,388 <gettoken+0x78>
+     370:	02600713          	li	a4,38
+     374:	00e78963          	beq	a5,a4,386 <gettoken+0x76>
+     378:	fd87879b          	addiw	a5,a5,-40
+     37c:	0ff7f793          	zext.b	a5,a5
+     380:	4705                	li	a4,1
+     382:	06f76b63          	bltu	a4,a5,3f8 <gettoken+0xe8>
+  case '(':
+  case ')':
+  case ';':
+  case '&':
+  case '<':
+    s++;
+     386:	0485                	addi	s1,s1,1
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     388:	000b0463          	beqz	s6,390 <gettoken+0x80>
+    *eq = s;
+     38c:	009b3023          	sd	s1,0(s6)
+
+  while(s < es && strchr(whitespace, *s))
+     390:	00002997          	auipc	s3,0x2
+     394:	c7898993          	addi	s3,s3,-904 # 2008 <whitespace>
+     398:	0124fc63          	bgeu	s1,s2,3b0 <gettoken+0xa0>
+     39c:	0004c583          	lbu	a1,0(s1)
+     3a0:	854e                	mv	a0,s3
+     3a2:	696000ef          	jal	a38 <strchr>
+     3a6:	c509                	beqz	a0,3b0 <gettoken+0xa0>
+    s++;
+     3a8:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     3aa:	fe9919e3          	bne	s2,s1,39c <gettoken+0x8c>
+     3ae:	84ca                	mv	s1,s2
+  *ps = s;
+     3b0:	009a3023          	sd	s1,0(s4)
+  return ret;
+}
+     3b4:	8556                	mv	a0,s5
+     3b6:	70e2                	ld	ra,56(sp)
+     3b8:	7442                	ld	s0,48(sp)
+     3ba:	74a2                	ld	s1,40(sp)
+     3bc:	7902                	ld	s2,32(sp)
+     3be:	69e2                	ld	s3,24(sp)
+     3c0:	6a42                	ld	s4,16(sp)
+     3c2:	6aa2                	ld	s5,8(sp)
+     3c4:	6b02                	ld	s6,0(sp)
+     3c6:	6121                	addi	sp,sp,64
+     3c8:	8082                	ret
+  switch(*s){
+     3ca:	03e00713          	li	a4,62
+     3ce:	02e79163          	bne	a5,a4,3f0 <gettoken+0xe0>
+    s++;
+     3d2:	00148693          	addi	a3,s1,1
+    if(*s == '>'){
+     3d6:	0014c703          	lbu	a4,1(s1)
+     3da:	03e00793          	li	a5,62
+      s++;
+     3de:	0489                	addi	s1,s1,2
+      ret = '+';
+     3e0:	02b00a93          	li	s5,43
+    if(*s == '>'){
+     3e4:	faf702e3          	beq	a4,a5,388 <gettoken+0x78>
+    s++;
+     3e8:	84b6                	mv	s1,a3
+  ret = *s;
+     3ea:	03e00a93          	li	s5,62
+     3ee:	bf69                	j	388 <gettoken+0x78>
+  switch(*s){
+     3f0:	07c00713          	li	a4,124
+     3f4:	f8e789e3          	beq	a5,a4,386 <gettoken+0x76>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     3f8:	00002997          	auipc	s3,0x2
+     3fc:	c1098993          	addi	s3,s3,-1008 # 2008 <whitespace>
+     400:	00002a97          	auipc	s5,0x2
+     404:	c00a8a93          	addi	s5,s5,-1024 # 2000 <symbols>
+     408:	0324fd63          	bgeu	s1,s2,442 <gettoken+0x132>
+     40c:	0004c583          	lbu	a1,0(s1)
+     410:	854e                	mv	a0,s3
+     412:	626000ef          	jal	a38 <strchr>
+     416:	e11d                	bnez	a0,43c <gettoken+0x12c>
+     418:	0004c583          	lbu	a1,0(s1)
+     41c:	8556                	mv	a0,s5
+     41e:	61a000ef          	jal	a38 <strchr>
+     422:	e911                	bnez	a0,436 <gettoken+0x126>
+      s++;
+     424:	0485                	addi	s1,s1,1
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     426:	fe9913e3          	bne	s2,s1,40c <gettoken+0xfc>
+  if(eq)
+     42a:	84ca                	mv	s1,s2
+    ret = 'a';
+     42c:	06100a93          	li	s5,97
+  if(eq)
+     430:	f40b1ee3          	bnez	s6,38c <gettoken+0x7c>
+     434:	bfb5                	j	3b0 <gettoken+0xa0>
+    ret = 'a';
+     436:	06100a93          	li	s5,97
+     43a:	b7b9                	j	388 <gettoken+0x78>
+     43c:	06100a93          	li	s5,97
+     440:	b7a1                	j	388 <gettoken+0x78>
+     442:	06100a93          	li	s5,97
+  if(eq)
+     446:	f40b13e3          	bnez	s6,38c <gettoken+0x7c>
+     44a:	b79d                	j	3b0 <gettoken+0xa0>
+
+000000000000044c <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     44c:	7139                	addi	sp,sp,-64
+     44e:	fc06                	sd	ra,56(sp)
+     450:	f822                	sd	s0,48(sp)
+     452:	f426                	sd	s1,40(sp)
+     454:	f04a                	sd	s2,32(sp)
+     456:	ec4e                	sd	s3,24(sp)
+     458:	e852                	sd	s4,16(sp)
+     45a:	e456                	sd	s5,8(sp)
+     45c:	0080                	addi	s0,sp,64
+     45e:	8a2a                	mv	s4,a0
+     460:	892e                	mv	s2,a1
+     462:	8ab2                	mv	s5,a2
+  char *s;
+
+  s = *ps;
+     464:	6104                	ld	s1,0(a0)
+  while(s < es && strchr(whitespace, *s))
+     466:	00002997          	auipc	s3,0x2
+     46a:	ba298993          	addi	s3,s3,-1118 # 2008 <whitespace>
+     46e:	00b4fc63          	bgeu	s1,a1,486 <peek+0x3a>
+     472:	0004c583          	lbu	a1,0(s1)
+     476:	854e                	mv	a0,s3
+     478:	5c0000ef          	jal	a38 <strchr>
+     47c:	c509                	beqz	a0,486 <peek+0x3a>
+    s++;
+     47e:	0485                	addi	s1,s1,1
+  while(s < es && strchr(whitespace, *s))
+     480:	fe9919e3          	bne	s2,s1,472 <peek+0x26>
+     484:	84ca                	mv	s1,s2
+  *ps = s;
+     486:	009a3023          	sd	s1,0(s4)
+  return *s && strchr(toks, *s);
+     48a:	0004c583          	lbu	a1,0(s1)
+     48e:	4501                	li	a0,0
+     490:	e991                	bnez	a1,4a4 <peek+0x58>
+}
+     492:	70e2                	ld	ra,56(sp)
+     494:	7442                	ld	s0,48(sp)
+     496:	74a2                	ld	s1,40(sp)
+     498:	7902                	ld	s2,32(sp)
+     49a:	69e2                	ld	s3,24(sp)
+     49c:	6a42                	ld	s4,16(sp)
+     49e:	6aa2                	ld	s5,8(sp)
+     4a0:	6121                	addi	sp,sp,64
+     4a2:	8082                	ret
+  return *s && strchr(toks, *s);
+     4a4:	8556                	mv	a0,s5
+     4a6:	592000ef          	jal	a38 <strchr>
+     4aa:	00a03533          	snez	a0,a0
+     4ae:	b7d5                	j	492 <peek+0x46>
+
+00000000000004b0 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     4b0:	711d                	addi	sp,sp,-96
+     4b2:	ec86                	sd	ra,88(sp)
+     4b4:	e8a2                	sd	s0,80(sp)
+     4b6:	e4a6                	sd	s1,72(sp)
+     4b8:	e0ca                	sd	s2,64(sp)
+     4ba:	fc4e                	sd	s3,56(sp)
+     4bc:	f852                	sd	s4,48(sp)
+     4be:	f456                	sd	s5,40(sp)
+     4c0:	f05a                	sd	s6,32(sp)
+     4c2:	ec5e                	sd	s7,24(sp)
+     4c4:	1080                	addi	s0,sp,96
+     4c6:	8a2a                	mv	s4,a0
+     4c8:	89ae                	mv	s3,a1
+     4ca:	8932                	mv	s2,a2
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     4cc:	00001a97          	auipc	s5,0x1
+     4d0:	d84a8a93          	addi	s5,s5,-636 # 1250 <malloc+0x170>
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     4d4:	06100b13          	li	s6,97
+      panic("missing file for redirection");
+    switch(tok){
+     4d8:	03c00b93          	li	s7,60
+  while(peek(ps, es, "<>")){
+     4dc:	a00d                	j	4fe <parseredirs+0x4e>
+      panic("missing file for redirection");
+     4de:	00001517          	auipc	a0,0x1
+     4e2:	d5250513          	addi	a0,a0,-686 # 1230 <malloc+0x150>
+     4e6:	b65ff0ef          	jal	4a <panic>
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     4ea:	4701                	li	a4,0
+     4ec:	4681                	li	a3,0
+     4ee:	fa043603          	ld	a2,-96(s0)
+     4f2:	fa843583          	ld	a1,-88(s0)
+     4f6:	8552                	mv	a0,s4
+     4f8:	d09ff0ef          	jal	200 <redircmd>
+     4fc:	8a2a                	mv	s4,a0
+  while(peek(ps, es, "<>")){
+     4fe:	8656                	mv	a2,s5
+     500:	85ca                	mv	a1,s2
+     502:	854e                	mv	a0,s3
+     504:	f49ff0ef          	jal	44c <peek>
+     508:	c525                	beqz	a0,570 <parseredirs+0xc0>
+    tok = gettoken(ps, es, 0, 0);
+     50a:	4681                	li	a3,0
+     50c:	4601                	li	a2,0
+     50e:	85ca                	mv	a1,s2
+     510:	854e                	mv	a0,s3
+     512:	dffff0ef          	jal	310 <gettoken>
+     516:	84aa                	mv	s1,a0
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     518:	fa040693          	addi	a3,s0,-96
+     51c:	fa840613          	addi	a2,s0,-88
+     520:	85ca                	mv	a1,s2
+     522:	854e                	mv	a0,s3
+     524:	dedff0ef          	jal	310 <gettoken>
+     528:	fb651be3          	bne	a0,s6,4de <parseredirs+0x2e>
+    switch(tok){
+     52c:	fb748fe3          	beq	s1,s7,4ea <parseredirs+0x3a>
+     530:	03e00793          	li	a5,62
+     534:	02f48263          	beq	s1,a5,558 <parseredirs+0xa8>
+     538:	02b00793          	li	a5,43
+     53c:	fcf491e3          	bne	s1,a5,4fe <parseredirs+0x4e>
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     540:	4705                	li	a4,1
+     542:	20100693          	li	a3,513
+     546:	fa043603          	ld	a2,-96(s0)
+     54a:	fa843583          	ld	a1,-88(s0)
+     54e:	8552                	mv	a0,s4
+     550:	cb1ff0ef          	jal	200 <redircmd>
+     554:	8a2a                	mv	s4,a0
+      break;
+     556:	b765                	j	4fe <parseredirs+0x4e>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+     558:	4705                	li	a4,1
+     55a:	60100693          	li	a3,1537
+     55e:	fa043603          	ld	a2,-96(s0)
+     562:	fa843583          	ld	a1,-88(s0)
+     566:	8552                	mv	a0,s4
+     568:	c99ff0ef          	jal	200 <redircmd>
+     56c:	8a2a                	mv	s4,a0
+      break;
+     56e:	bf41                	j	4fe <parseredirs+0x4e>
+    }
+  }
+  return cmd;
+}
+     570:	8552                	mv	a0,s4
+     572:	60e6                	ld	ra,88(sp)
+     574:	6446                	ld	s0,80(sp)
+     576:	64a6                	ld	s1,72(sp)
+     578:	6906                	ld	s2,64(sp)
+     57a:	79e2                	ld	s3,56(sp)
+     57c:	7a42                	ld	s4,48(sp)
+     57e:	7aa2                	ld	s5,40(sp)
+     580:	7b02                	ld	s6,32(sp)
+     582:	6be2                	ld	s7,24(sp)
+     584:	6125                	addi	sp,sp,96
+     586:	8082                	ret
+
+0000000000000588 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     588:	7159                	addi	sp,sp,-112
+     58a:	f486                	sd	ra,104(sp)
+     58c:	f0a2                	sd	s0,96(sp)
+     58e:	eca6                	sd	s1,88(sp)
+     590:	e0d2                	sd	s4,64(sp)
+     592:	fc56                	sd	s5,56(sp)
+     594:	1880                	addi	s0,sp,112
+     596:	8a2a                	mv	s4,a0
+     598:	8aae                	mv	s5,a1
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     59a:	00001617          	auipc	a2,0x1
+     59e:	cbe60613          	addi	a2,a2,-834 # 1258 <malloc+0x178>
+     5a2:	eabff0ef          	jal	44c <peek>
+     5a6:	e915                	bnez	a0,5da <parseexec+0x52>
+     5a8:	e8ca                	sd	s2,80(sp)
+     5aa:	e4ce                	sd	s3,72(sp)
+     5ac:	f85a                	sd	s6,48(sp)
+     5ae:	f45e                	sd	s7,40(sp)
+     5b0:	f062                	sd	s8,32(sp)
+     5b2:	ec66                	sd	s9,24(sp)
+     5b4:	89aa                	mv	s3,a0
+    return parseblock(ps, es);
+
+  ret = execcmd();
+     5b6:	c1dff0ef          	jal	1d2 <execcmd>
+     5ba:	8c2a                	mv	s8,a0
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     5bc:	8656                	mv	a2,s5
+     5be:	85d2                	mv	a1,s4
+     5c0:	ef1ff0ef          	jal	4b0 <parseredirs>
+     5c4:	84aa                	mv	s1,a0
+  while(!peek(ps, es, "|)&;")){
+     5c6:	008c0913          	addi	s2,s8,8
+     5ca:	00001b17          	auipc	s6,0x1
+     5ce:	caeb0b13          	addi	s6,s6,-850 # 1278 <malloc+0x198>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+     5d2:	06100c93          	li	s9,97
+      panic("syntax");
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+     5d6:	4ba9                	li	s7,10
+  while(!peek(ps, es, "|)&;")){
+     5d8:	a815                	j	60c <parseexec+0x84>
+    return parseblock(ps, es);
+     5da:	85d6                	mv	a1,s5
+     5dc:	8552                	mv	a0,s4
+     5de:	170000ef          	jal	74e <parseblock>
+     5e2:	84aa                	mv	s1,a0
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     5e4:	8526                	mv	a0,s1
+     5e6:	70a6                	ld	ra,104(sp)
+     5e8:	7406                	ld	s0,96(sp)
+     5ea:	64e6                	ld	s1,88(sp)
+     5ec:	6a06                	ld	s4,64(sp)
+     5ee:	7ae2                	ld	s5,56(sp)
+     5f0:	6165                	addi	sp,sp,112
+     5f2:	8082                	ret
+      panic("syntax");
+     5f4:	00001517          	auipc	a0,0x1
+     5f8:	c6c50513          	addi	a0,a0,-916 # 1260 <malloc+0x180>
+     5fc:	a4fff0ef          	jal	4a <panic>
+    ret = parseredirs(ret, ps, es);
+     600:	8656                	mv	a2,s5
+     602:	85d2                	mv	a1,s4
+     604:	8526                	mv	a0,s1
+     606:	eabff0ef          	jal	4b0 <parseredirs>
+     60a:	84aa                	mv	s1,a0
+  while(!peek(ps, es, "|)&;")){
+     60c:	865a                	mv	a2,s6
+     60e:	85d6                	mv	a1,s5
+     610:	8552                	mv	a0,s4
+     612:	e3bff0ef          	jal	44c <peek>
+     616:	ed15                	bnez	a0,652 <parseexec+0xca>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     618:	f9040693          	addi	a3,s0,-112
+     61c:	f9840613          	addi	a2,s0,-104
+     620:	85d6                	mv	a1,s5
+     622:	8552                	mv	a0,s4
+     624:	cedff0ef          	jal	310 <gettoken>
+     628:	c50d                	beqz	a0,652 <parseexec+0xca>
+    if(tok != 'a')
+     62a:	fd9515e3          	bne	a0,s9,5f4 <parseexec+0x6c>
+    cmd->argv[argc] = q;
+     62e:	f9843783          	ld	a5,-104(s0)
+     632:	00f93023          	sd	a5,0(s2)
+    cmd->eargv[argc] = eq;
+     636:	f9043783          	ld	a5,-112(s0)
+     63a:	04f93823          	sd	a5,80(s2)
+    argc++;
+     63e:	2985                	addiw	s3,s3,1
+    if(argc >= MAXARGS)
+     640:	0921                	addi	s2,s2,8
+     642:	fb799fe3          	bne	s3,s7,600 <parseexec+0x78>
+      panic("too many args");
+     646:	00001517          	auipc	a0,0x1
+     64a:	c2250513          	addi	a0,a0,-990 # 1268 <malloc+0x188>
+     64e:	9fdff0ef          	jal	4a <panic>
+  cmd->argv[argc] = 0;
+     652:	098e                	slli	s3,s3,0x3
+     654:	9c4e                	add	s8,s8,s3
+     656:	000c3423          	sd	zero,8(s8)
+  cmd->eargv[argc] = 0;
+     65a:	040c3c23          	sd	zero,88(s8)
+     65e:	6946                	ld	s2,80(sp)
+     660:	69a6                	ld	s3,72(sp)
+     662:	7b42                	ld	s6,48(sp)
+     664:	7ba2                	ld	s7,40(sp)
+     666:	7c02                	ld	s8,32(sp)
+     668:	6ce2                	ld	s9,24(sp)
+  return ret;
+     66a:	bfad                	j	5e4 <parseexec+0x5c>
+
+000000000000066c <parsepipe>:
+{
+     66c:	7179                	addi	sp,sp,-48
+     66e:	f406                	sd	ra,40(sp)
+     670:	f022                	sd	s0,32(sp)
+     672:	ec26                	sd	s1,24(sp)
+     674:	e84a                	sd	s2,16(sp)
+     676:	e44e                	sd	s3,8(sp)
+     678:	1800                	addi	s0,sp,48
+     67a:	892a                	mv	s2,a0
+     67c:	89ae                	mv	s3,a1
+  cmd = parseexec(ps, es);
+     67e:	f0bff0ef          	jal	588 <parseexec>
+     682:	84aa                	mv	s1,a0
+  if(peek(ps, es, "|")){
+     684:	00001617          	auipc	a2,0x1
+     688:	bfc60613          	addi	a2,a2,-1028 # 1280 <malloc+0x1a0>
+     68c:	85ce                	mv	a1,s3
+     68e:	854a                	mv	a0,s2
+     690:	dbdff0ef          	jal	44c <peek>
+     694:	e909                	bnez	a0,6a6 <parsepipe+0x3a>
+}
+     696:	8526                	mv	a0,s1
+     698:	70a2                	ld	ra,40(sp)
+     69a:	7402                	ld	s0,32(sp)
+     69c:	64e2                	ld	s1,24(sp)
+     69e:	6942                	ld	s2,16(sp)
+     6a0:	69a2                	ld	s3,8(sp)
+     6a2:	6145                	addi	sp,sp,48
+     6a4:	8082                	ret
+    gettoken(ps, es, 0, 0);
+     6a6:	4681                	li	a3,0
+     6a8:	4601                	li	a2,0
+     6aa:	85ce                	mv	a1,s3
+     6ac:	854a                	mv	a0,s2
+     6ae:	c63ff0ef          	jal	310 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     6b2:	85ce                	mv	a1,s3
+     6b4:	854a                	mv	a0,s2
+     6b6:	fb7ff0ef          	jal	66c <parsepipe>
+     6ba:	85aa                	mv	a1,a0
+     6bc:	8526                	mv	a0,s1
+     6be:	ba3ff0ef          	jal	260 <pipecmd>
+     6c2:	84aa                	mv	s1,a0
+  return cmd;
+     6c4:	bfc9                	j	696 <parsepipe+0x2a>
+
+00000000000006c6 <parseline>:
+{
+     6c6:	7179                	addi	sp,sp,-48
+     6c8:	f406                	sd	ra,40(sp)
+     6ca:	f022                	sd	s0,32(sp)
+     6cc:	ec26                	sd	s1,24(sp)
+     6ce:	e84a                	sd	s2,16(sp)
+     6d0:	e44e                	sd	s3,8(sp)
+     6d2:	e052                	sd	s4,0(sp)
+     6d4:	1800                	addi	s0,sp,48
+     6d6:	892a                	mv	s2,a0
+     6d8:	89ae                	mv	s3,a1
+  cmd = parsepipe(ps, es);
+     6da:	f93ff0ef          	jal	66c <parsepipe>
+     6de:	84aa                	mv	s1,a0
+  while(peek(ps, es, "&")){
+     6e0:	00001a17          	auipc	s4,0x1
+     6e4:	ba8a0a13          	addi	s4,s4,-1112 # 1288 <malloc+0x1a8>
+     6e8:	a819                	j	6fe <parseline+0x38>
+    gettoken(ps, es, 0, 0);
+     6ea:	4681                	li	a3,0
+     6ec:	4601                	li	a2,0
+     6ee:	85ce                	mv	a1,s3
+     6f0:	854a                	mv	a0,s2
+     6f2:	c1fff0ef          	jal	310 <gettoken>
+    cmd = backcmd(cmd);
+     6f6:	8526                	mv	a0,s1
+     6f8:	be5ff0ef          	jal	2dc <backcmd>
+     6fc:	84aa                	mv	s1,a0
+  while(peek(ps, es, "&")){
+     6fe:	8652                	mv	a2,s4
+     700:	85ce                	mv	a1,s3
+     702:	854a                	mv	a0,s2
+     704:	d49ff0ef          	jal	44c <peek>
+     708:	f16d                	bnez	a0,6ea <parseline+0x24>
+  if(peek(ps, es, ";")){
+     70a:	00001617          	auipc	a2,0x1
+     70e:	b8660613          	addi	a2,a2,-1146 # 1290 <malloc+0x1b0>
+     712:	85ce                	mv	a1,s3
+     714:	854a                	mv	a0,s2
+     716:	d37ff0ef          	jal	44c <peek>
+     71a:	e911                	bnez	a0,72e <parseline+0x68>
+}
+     71c:	8526                	mv	a0,s1
+     71e:	70a2                	ld	ra,40(sp)
+     720:	7402                	ld	s0,32(sp)
+     722:	64e2                	ld	s1,24(sp)
+     724:	6942                	ld	s2,16(sp)
+     726:	69a2                	ld	s3,8(sp)
+     728:	6a02                	ld	s4,0(sp)
+     72a:	6145                	addi	sp,sp,48
+     72c:	8082                	ret
+    gettoken(ps, es, 0, 0);
+     72e:	4681                	li	a3,0
+     730:	4601                	li	a2,0
+     732:	85ce                	mv	a1,s3
+     734:	854a                	mv	a0,s2
+     736:	bdbff0ef          	jal	310 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     73a:	85ce                	mv	a1,s3
+     73c:	854a                	mv	a0,s2
+     73e:	f89ff0ef          	jal	6c6 <parseline>
+     742:	85aa                	mv	a1,a0
+     744:	8526                	mv	a0,s1
+     746:	b59ff0ef          	jal	29e <listcmd>
+     74a:	84aa                	mv	s1,a0
+  return cmd;
+     74c:	bfc1                	j	71c <parseline+0x56>
+
+000000000000074e <parseblock>:
+{
+     74e:	7179                	addi	sp,sp,-48
+     750:	f406                	sd	ra,40(sp)
+     752:	f022                	sd	s0,32(sp)
+     754:	ec26                	sd	s1,24(sp)
+     756:	e84a                	sd	s2,16(sp)
+     758:	e44e                	sd	s3,8(sp)
+     75a:	1800                	addi	s0,sp,48
+     75c:	84aa                	mv	s1,a0
+     75e:	892e                	mv	s2,a1
+  if(!peek(ps, es, "("))
+     760:	00001617          	auipc	a2,0x1
+     764:	af860613          	addi	a2,a2,-1288 # 1258 <malloc+0x178>
+     768:	ce5ff0ef          	jal	44c <peek>
+     76c:	c539                	beqz	a0,7ba <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     76e:	4681                	li	a3,0
+     770:	4601                	li	a2,0
+     772:	85ca                	mv	a1,s2
+     774:	8526                	mv	a0,s1
+     776:	b9bff0ef          	jal	310 <gettoken>
+  cmd = parseline(ps, es);
+     77a:	85ca                	mv	a1,s2
+     77c:	8526                	mv	a0,s1
+     77e:	f49ff0ef          	jal	6c6 <parseline>
+     782:	89aa                	mv	s3,a0
+  if(!peek(ps, es, ")"))
+     784:	00001617          	auipc	a2,0x1
+     788:	b2460613          	addi	a2,a2,-1244 # 12a8 <malloc+0x1c8>
+     78c:	85ca                	mv	a1,s2
+     78e:	8526                	mv	a0,s1
+     790:	cbdff0ef          	jal	44c <peek>
+     794:	c90d                	beqz	a0,7c6 <parseblock+0x78>
+  gettoken(ps, es, 0, 0);
+     796:	4681                	li	a3,0
+     798:	4601                	li	a2,0
+     79a:	85ca                	mv	a1,s2
+     79c:	8526                	mv	a0,s1
+     79e:	b73ff0ef          	jal	310 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     7a2:	864a                	mv	a2,s2
+     7a4:	85a6                	mv	a1,s1
+     7a6:	854e                	mv	a0,s3
+     7a8:	d09ff0ef          	jal	4b0 <parseredirs>
+}
+     7ac:	70a2                	ld	ra,40(sp)
+     7ae:	7402                	ld	s0,32(sp)
+     7b0:	64e2                	ld	s1,24(sp)
+     7b2:	6942                	ld	s2,16(sp)
+     7b4:	69a2                	ld	s3,8(sp)
+     7b6:	6145                	addi	sp,sp,48
+     7b8:	8082                	ret
+    panic("parseblock");
+     7ba:	00001517          	auipc	a0,0x1
+     7be:	ade50513          	addi	a0,a0,-1314 # 1298 <malloc+0x1b8>
+     7c2:	889ff0ef          	jal	4a <panic>
+    panic("syntax - missing )");
+     7c6:	00001517          	auipc	a0,0x1
+     7ca:	aea50513          	addi	a0,a0,-1302 # 12b0 <malloc+0x1d0>
+     7ce:	87dff0ef          	jal	4a <panic>
+
+00000000000007d2 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     7d2:	1101                	addi	sp,sp,-32
+     7d4:	ec06                	sd	ra,24(sp)
+     7d6:	e822                	sd	s0,16(sp)
+     7d8:	e426                	sd	s1,8(sp)
+     7da:	1000                	addi	s0,sp,32
+     7dc:	84aa                	mv	s1,a0
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     7de:	c131                	beqz	a0,822 <nulterminate+0x50>
+    return 0;
+
+  switch(cmd->type){
+     7e0:	4118                	lw	a4,0(a0)
+     7e2:	4795                	li	a5,5
+     7e4:	02e7ef63          	bltu	a5,a4,822 <nulterminate+0x50>
+     7e8:	00056783          	lwu	a5,0(a0)
+     7ec:	078a                	slli	a5,a5,0x2
+     7ee:	00001717          	auipc	a4,0x1
+     7f2:	b2270713          	addi	a4,a4,-1246 # 1310 <malloc+0x230>
+     7f6:	97ba                	add	a5,a5,a4
+     7f8:	439c                	lw	a5,0(a5)
+     7fa:	97ba                	add	a5,a5,a4
+     7fc:	8782                	jr	a5
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+     7fe:	651c                	ld	a5,8(a0)
+     800:	c38d                	beqz	a5,822 <nulterminate+0x50>
+     802:	01050793          	addi	a5,a0,16
+      *ecmd->eargv[i] = 0;
+     806:	67b8                	ld	a4,72(a5)
+     808:	00070023          	sb	zero,0(a4)
+    for(i=0; ecmd->argv[i]; i++)
+     80c:	07a1                	addi	a5,a5,8
+     80e:	ff87b703          	ld	a4,-8(a5)
+     812:	fb75                	bnez	a4,806 <nulterminate+0x34>
+     814:	a039                	j	822 <nulterminate+0x50>
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+     816:	6508                	ld	a0,8(a0)
+     818:	fbbff0ef          	jal	7d2 <nulterminate>
+    *rcmd->efile = 0;
+     81c:	6c9c                	ld	a5,24(s1)
+     81e:	00078023          	sb	zero,0(a5)
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     822:	8526                	mv	a0,s1
+     824:	60e2                	ld	ra,24(sp)
+     826:	6442                	ld	s0,16(sp)
+     828:	64a2                	ld	s1,8(sp)
+     82a:	6105                	addi	sp,sp,32
+     82c:	8082                	ret
+    nulterminate(pcmd->left);
+     82e:	6508                	ld	a0,8(a0)
+     830:	fa3ff0ef          	jal	7d2 <nulterminate>
+    nulterminate(pcmd->right);
+     834:	6888                	ld	a0,16(s1)
+     836:	f9dff0ef          	jal	7d2 <nulterminate>
+    break;
+     83a:	b7e5                	j	822 <nulterminate+0x50>
+    nulterminate(lcmd->left);
+     83c:	6508                	ld	a0,8(a0)
+     83e:	f95ff0ef          	jal	7d2 <nulterminate>
+    nulterminate(lcmd->right);
+     842:	6888                	ld	a0,16(s1)
+     844:	f8fff0ef          	jal	7d2 <nulterminate>
+    break;
+     848:	bfe9                	j	822 <nulterminate+0x50>
+    nulterminate(bcmd->cmd);
+     84a:	6508                	ld	a0,8(a0)
+     84c:	f87ff0ef          	jal	7d2 <nulterminate>
+    break;
+     850:	bfc9                	j	822 <nulterminate+0x50>
+
+0000000000000852 <parsecmd>:
+{
+     852:	7179                	addi	sp,sp,-48
+     854:	f406                	sd	ra,40(sp)
+     856:	f022                	sd	s0,32(sp)
+     858:	ec26                	sd	s1,24(sp)
+     85a:	e84a                	sd	s2,16(sp)
+     85c:	1800                	addi	s0,sp,48
+     85e:	fca43c23          	sd	a0,-40(s0)
+  es = s + strlen(s);
+     862:	84aa                	mv	s1,a0
+     864:	188000ef          	jal	9ec <strlen>
+     868:	1502                	slli	a0,a0,0x20
+     86a:	9101                	srli	a0,a0,0x20
+     86c:	94aa                	add	s1,s1,a0
+  cmd = parseline(&s, es);
+     86e:	85a6                	mv	a1,s1
+     870:	fd840513          	addi	a0,s0,-40
+     874:	e53ff0ef          	jal	6c6 <parseline>
+     878:	892a                	mv	s2,a0
+  peek(&s, es, "");
+     87a:	00001617          	auipc	a2,0x1
+     87e:	96e60613          	addi	a2,a2,-1682 # 11e8 <malloc+0x108>
+     882:	85a6                	mv	a1,s1
+     884:	fd840513          	addi	a0,s0,-40
+     888:	bc5ff0ef          	jal	44c <peek>
+  if(s != es){
+     88c:	fd843603          	ld	a2,-40(s0)
+     890:	00961c63          	bne	a2,s1,8a8 <parsecmd+0x56>
+  nulterminate(cmd);
+     894:	854a                	mv	a0,s2
+     896:	f3dff0ef          	jal	7d2 <nulterminate>
+}
+     89a:	854a                	mv	a0,s2
+     89c:	70a2                	ld	ra,40(sp)
+     89e:	7402                	ld	s0,32(sp)
+     8a0:	64e2                	ld	s1,24(sp)
+     8a2:	6942                	ld	s2,16(sp)
+     8a4:	6145                	addi	sp,sp,48
+     8a6:	8082                	ret
+    fprintf(2, "leftovers: %s\n", s);
+     8a8:	00001597          	auipc	a1,0x1
+     8ac:	a2058593          	addi	a1,a1,-1504 # 12c8 <malloc+0x1e8>
+     8b0:	4509                	li	a0,2
+     8b2:	750000ef          	jal	1002 <fprintf>
+    panic("syntax");
+     8b6:	00001517          	auipc	a0,0x1
+     8ba:	9aa50513          	addi	a0,a0,-1622 # 1260 <malloc+0x180>
+     8be:	f8cff0ef          	jal	4a <panic>
+
+00000000000008c2 <main>:
+{
+     8c2:	7179                	addi	sp,sp,-48
+     8c4:	f406                	sd	ra,40(sp)
+     8c6:	f022                	sd	s0,32(sp)
+     8c8:	ec26                	sd	s1,24(sp)
+     8ca:	e84a                	sd	s2,16(sp)
+     8cc:	e44e                	sd	s3,8(sp)
+     8ce:	e052                	sd	s4,0(sp)
+     8d0:	1800                	addi	s0,sp,48
+  while((fd = open("console", O_RDWR)) >= 0){
+     8d2:	00001497          	auipc	s1,0x1
+     8d6:	a0648493          	addi	s1,s1,-1530 # 12d8 <malloc+0x1f8>
+     8da:	4589                	li	a1,2
+     8dc:	8526                	mv	a0,s1
+     8de:	35e000ef          	jal	c3c <open>
+     8e2:	00054763          	bltz	a0,8f0 <main+0x2e>
+    if(fd >= 3){
+     8e6:	4789                	li	a5,2
+     8e8:	fea7d9e3          	bge	a5,a0,8da <main+0x18>
+      close(fd);
+     8ec:	338000ef          	jal	c24 <close>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     8f0:	00001497          	auipc	s1,0x1
+     8f4:	73048493          	addi	s1,s1,1840 # 2020 <buf.0>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+     8f8:	06300913          	li	s2,99
+     8fc:	02000993          	li	s3,32
+     900:	a039                	j	90e <main+0x4c>
+    if(fork1() == 0)
+     902:	f66ff0ef          	jal	68 <fork1>
+     906:	c93d                	beqz	a0,97c <main+0xba>
+    wait(0);
+     908:	4501                	li	a0,0
+     90a:	2fa000ef          	jal	c04 <wait>
+  while(getcmd(buf, sizeof(buf)) >= 0){
+     90e:	06400593          	li	a1,100
+     912:	8526                	mv	a0,s1
+     914:	eecff0ef          	jal	0 <getcmd>
+     918:	06054a63          	bltz	a0,98c <main+0xca>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+     91c:	0004c783          	lbu	a5,0(s1)
+     920:	ff2791e3          	bne	a5,s2,902 <main+0x40>
+     924:	0014c703          	lbu	a4,1(s1)
+     928:	06400793          	li	a5,100
+     92c:	fcf71be3          	bne	a4,a5,902 <main+0x40>
+     930:	0024c783          	lbu	a5,2(s1)
+     934:	fd3797e3          	bne	a5,s3,902 <main+0x40>
+      buf[strlen(buf)-1] = 0;  // chop \n
+     938:	00001a17          	auipc	s4,0x1
+     93c:	6e8a0a13          	addi	s4,s4,1768 # 2020 <buf.0>
+     940:	8552                	mv	a0,s4
+     942:	0aa000ef          	jal	9ec <strlen>
+     946:	fff5079b          	addiw	a5,a0,-1
+     94a:	1782                	slli	a5,a5,0x20
+     94c:	9381                	srli	a5,a5,0x20
+     94e:	9a3e                	add	s4,s4,a5
+     950:	000a0023          	sb	zero,0(s4)
+      if(chdir(buf+3) < 0)
+     954:	00001517          	auipc	a0,0x1
+     958:	6cf50513          	addi	a0,a0,1743 # 2023 <buf.0+0x3>
+     95c:	310000ef          	jal	c6c <chdir>
+     960:	fa0557e3          	bgez	a0,90e <main+0x4c>
+        fprintf(2, "cannot cd %s\n", buf+3);
+     964:	00001617          	auipc	a2,0x1
+     968:	6bf60613          	addi	a2,a2,1727 # 2023 <buf.0+0x3>
+     96c:	00001597          	auipc	a1,0x1
+     970:	97458593          	addi	a1,a1,-1676 # 12e0 <malloc+0x200>
+     974:	4509                	li	a0,2
+     976:	68c000ef          	jal	1002 <fprintf>
+     97a:	bf51                	j	90e <main+0x4c>
+      runcmd(parsecmd(buf));
+     97c:	00001517          	auipc	a0,0x1
+     980:	6a450513          	addi	a0,a0,1700 # 2020 <buf.0>
+     984:	ecfff0ef          	jal	852 <parsecmd>
+     988:	f06ff0ef          	jal	8e <runcmd>
+  exit(0);
+     98c:	4501                	li	a0,0
+     98e:	26e000ef          	jal	bfc <exit>
+
+0000000000000992 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+     992:	1141                	addi	sp,sp,-16
+     994:	e406                	sd	ra,8(sp)
+     996:	e022                	sd	s0,0(sp)
+     998:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+     99a:	f29ff0ef          	jal	8c2 <main>
+  exit(0);
+     99e:	4501                	li	a0,0
+     9a0:	25c000ef          	jal	bfc <exit>
+
+00000000000009a4 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+     9a4:	1141                	addi	sp,sp,-16
+     9a6:	e422                	sd	s0,8(sp)
+     9a8:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     9aa:	87aa                	mv	a5,a0
+     9ac:	0585                	addi	a1,a1,1
+     9ae:	0785                	addi	a5,a5,1
+     9b0:	fff5c703          	lbu	a4,-1(a1)
+     9b4:	fee78fa3          	sb	a4,-1(a5)
+     9b8:	fb75                	bnez	a4,9ac <strcpy+0x8>
+    ;
+  return os;
+}
+     9ba:	6422                	ld	s0,8(sp)
+     9bc:	0141                	addi	sp,sp,16
+     9be:	8082                	ret
+
+00000000000009c0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     9c0:	1141                	addi	sp,sp,-16
+     9c2:	e422                	sd	s0,8(sp)
+     9c4:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+     9c6:	00054783          	lbu	a5,0(a0)
+     9ca:	cb91                	beqz	a5,9de <strcmp+0x1e>
+     9cc:	0005c703          	lbu	a4,0(a1)
+     9d0:	00f71763          	bne	a4,a5,9de <strcmp+0x1e>
+    p++, q++;
+     9d4:	0505                	addi	a0,a0,1
+     9d6:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+     9d8:	00054783          	lbu	a5,0(a0)
+     9dc:	fbe5                	bnez	a5,9cc <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+     9de:	0005c503          	lbu	a0,0(a1)
+}
+     9e2:	40a7853b          	subw	a0,a5,a0
+     9e6:	6422                	ld	s0,8(sp)
+     9e8:	0141                	addi	sp,sp,16
+     9ea:	8082                	ret
+
+00000000000009ec <strlen>:
+
+uint
+strlen(const char *s)
+{
+     9ec:	1141                	addi	sp,sp,-16
+     9ee:	e422                	sd	s0,8(sp)
+     9f0:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+     9f2:	00054783          	lbu	a5,0(a0)
+     9f6:	cf91                	beqz	a5,a12 <strlen+0x26>
+     9f8:	0505                	addi	a0,a0,1
+     9fa:	87aa                	mv	a5,a0
+     9fc:	86be                	mv	a3,a5
+     9fe:	0785                	addi	a5,a5,1
+     a00:	fff7c703          	lbu	a4,-1(a5)
+     a04:	ff65                	bnez	a4,9fc <strlen+0x10>
+     a06:	40a6853b          	subw	a0,a3,a0
+     a0a:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+     a0c:	6422                	ld	s0,8(sp)
+     a0e:	0141                	addi	sp,sp,16
+     a10:	8082                	ret
+  for(n = 0; s[n]; n++)
+     a12:	4501                	li	a0,0
+     a14:	bfe5                	j	a0c <strlen+0x20>
+
+0000000000000a16 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     a16:	1141                	addi	sp,sp,-16
+     a18:	e422                	sd	s0,8(sp)
+     a1a:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+     a1c:	ca19                	beqz	a2,a32 <memset+0x1c>
+     a1e:	87aa                	mv	a5,a0
+     a20:	1602                	slli	a2,a2,0x20
+     a22:	9201                	srli	a2,a2,0x20
+     a24:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+     a28:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+     a2c:	0785                	addi	a5,a5,1
+     a2e:	fee79de3          	bne	a5,a4,a28 <memset+0x12>
+  }
+  return dst;
+}
+     a32:	6422                	ld	s0,8(sp)
+     a34:	0141                	addi	sp,sp,16
+     a36:	8082                	ret
+
+0000000000000a38 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     a38:	1141                	addi	sp,sp,-16
+     a3a:	e422                	sd	s0,8(sp)
+     a3c:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+     a3e:	00054783          	lbu	a5,0(a0)
+     a42:	cb99                	beqz	a5,a58 <strchr+0x20>
+    if(*s == c)
+     a44:	00f58763          	beq	a1,a5,a52 <strchr+0x1a>
+  for(; *s; s++)
+     a48:	0505                	addi	a0,a0,1
+     a4a:	00054783          	lbu	a5,0(a0)
+     a4e:	fbfd                	bnez	a5,a44 <strchr+0xc>
+      return (char*)s;
+  return 0;
+     a50:	4501                	li	a0,0
+}
+     a52:	6422                	ld	s0,8(sp)
+     a54:	0141                	addi	sp,sp,16
+     a56:	8082                	ret
+  return 0;
+     a58:	4501                	li	a0,0
+     a5a:	bfe5                	j	a52 <strchr+0x1a>
+
+0000000000000a5c <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     a5c:	711d                	addi	sp,sp,-96
+     a5e:	ec86                	sd	ra,88(sp)
+     a60:	e8a2                	sd	s0,80(sp)
+     a62:	e4a6                	sd	s1,72(sp)
+     a64:	e0ca                	sd	s2,64(sp)
+     a66:	fc4e                	sd	s3,56(sp)
+     a68:	f852                	sd	s4,48(sp)
+     a6a:	f456                	sd	s5,40(sp)
+     a6c:	f05a                	sd	s6,32(sp)
+     a6e:	ec5e                	sd	s7,24(sp)
+     a70:	1080                	addi	s0,sp,96
+     a72:	8baa                	mv	s7,a0
+     a74:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+     a76:	892a                	mv	s2,a0
+     a78:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+     a7a:	4aa9                	li	s5,10
+     a7c:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+     a7e:	89a6                	mv	s3,s1
+     a80:	2485                	addiw	s1,s1,1
+     a82:	0344d663          	bge	s1,s4,aae <gets+0x52>
+    cc = read(0, &c, 1);
+     a86:	4605                	li	a2,1
+     a88:	faf40593          	addi	a1,s0,-81
+     a8c:	4501                	li	a0,0
+     a8e:	186000ef          	jal	c14 <read>
+    if(cc < 1)
+     a92:	00a05e63          	blez	a0,aae <gets+0x52>
+    buf[i++] = c;
+     a96:	faf44783          	lbu	a5,-81(s0)
+     a9a:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+     a9e:	01578763          	beq	a5,s5,aac <gets+0x50>
+     aa2:	0905                	addi	s2,s2,1
+     aa4:	fd679de3          	bne	a5,s6,a7e <gets+0x22>
+    buf[i++] = c;
+     aa8:	89a6                	mv	s3,s1
+     aaa:	a011                	j	aae <gets+0x52>
+     aac:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+     aae:	99de                	add	s3,s3,s7
+     ab0:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+     ab4:	855e                	mv	a0,s7
+     ab6:	60e6                	ld	ra,88(sp)
+     ab8:	6446                	ld	s0,80(sp)
+     aba:	64a6                	ld	s1,72(sp)
+     abc:	6906                	ld	s2,64(sp)
+     abe:	79e2                	ld	s3,56(sp)
+     ac0:	7a42                	ld	s4,48(sp)
+     ac2:	7aa2                	ld	s5,40(sp)
+     ac4:	7b02                	ld	s6,32(sp)
+     ac6:	6be2                	ld	s7,24(sp)
+     ac8:	6125                	addi	sp,sp,96
+     aca:	8082                	ret
+
+0000000000000acc <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     acc:	1101                	addi	sp,sp,-32
+     ace:	ec06                	sd	ra,24(sp)
+     ad0:	e822                	sd	s0,16(sp)
+     ad2:	e04a                	sd	s2,0(sp)
+     ad4:	1000                	addi	s0,sp,32
+     ad6:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     ad8:	4581                	li	a1,0
+     ada:	162000ef          	jal	c3c <open>
+  if(fd < 0)
+     ade:	02054263          	bltz	a0,b02 <stat+0x36>
+     ae2:	e426                	sd	s1,8(sp)
+     ae4:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+     ae6:	85ca                	mv	a1,s2
+     ae8:	16c000ef          	jal	c54 <fstat>
+     aec:	892a                	mv	s2,a0
+  close(fd);
+     aee:	8526                	mv	a0,s1
+     af0:	134000ef          	jal	c24 <close>
+  return r;
+     af4:	64a2                	ld	s1,8(sp)
+}
+     af6:	854a                	mv	a0,s2
+     af8:	60e2                	ld	ra,24(sp)
+     afa:	6442                	ld	s0,16(sp)
+     afc:	6902                	ld	s2,0(sp)
+     afe:	6105                	addi	sp,sp,32
+     b00:	8082                	ret
+    return -1;
+     b02:	597d                	li	s2,-1
+     b04:	bfcd                	j	af6 <stat+0x2a>
+
+0000000000000b06 <atoi>:
+
+int
+atoi(const char *s)
+{
+     b06:	1141                	addi	sp,sp,-16
+     b08:	e422                	sd	s0,8(sp)
+     b0a:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     b0c:	00054683          	lbu	a3,0(a0)
+     b10:	fd06879b          	addiw	a5,a3,-48
+     b14:	0ff7f793          	zext.b	a5,a5
+     b18:	4625                	li	a2,9
+     b1a:	02f66863          	bltu	a2,a5,b4a <atoi+0x44>
+     b1e:	872a                	mv	a4,a0
+  n = 0;
+     b20:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+     b22:	0705                	addi	a4,a4,1
+     b24:	0025179b          	slliw	a5,a0,0x2
+     b28:	9fa9                	addw	a5,a5,a0
+     b2a:	0017979b          	slliw	a5,a5,0x1
+     b2e:	9fb5                	addw	a5,a5,a3
+     b30:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+     b34:	00074683          	lbu	a3,0(a4)
+     b38:	fd06879b          	addiw	a5,a3,-48
+     b3c:	0ff7f793          	zext.b	a5,a5
+     b40:	fef671e3          	bgeu	a2,a5,b22 <atoi+0x1c>
+  return n;
+}
+     b44:	6422                	ld	s0,8(sp)
+     b46:	0141                	addi	sp,sp,16
+     b48:	8082                	ret
+  n = 0;
+     b4a:	4501                	li	a0,0
+     b4c:	bfe5                	j	b44 <atoi+0x3e>
+
+0000000000000b4e <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     b4e:	1141                	addi	sp,sp,-16
+     b50:	e422                	sd	s0,8(sp)
+     b52:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+     b54:	02b57463          	bgeu	a0,a1,b7c <memmove+0x2e>
+    while(n-- > 0)
+     b58:	00c05f63          	blez	a2,b76 <memmove+0x28>
+     b5c:	1602                	slli	a2,a2,0x20
+     b5e:	9201                	srli	a2,a2,0x20
+     b60:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+     b64:	872a                	mv	a4,a0
+      *dst++ = *src++;
+     b66:	0585                	addi	a1,a1,1
+     b68:	0705                	addi	a4,a4,1
+     b6a:	fff5c683          	lbu	a3,-1(a1)
+     b6e:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+     b72:	fef71ae3          	bne	a4,a5,b66 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+     b76:	6422                	ld	s0,8(sp)
+     b78:	0141                	addi	sp,sp,16
+     b7a:	8082                	ret
+    dst += n;
+     b7c:	00c50733          	add	a4,a0,a2
+    src += n;
+     b80:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+     b82:	fec05ae3          	blez	a2,b76 <memmove+0x28>
+     b86:	fff6079b          	addiw	a5,a2,-1
+     b8a:	1782                	slli	a5,a5,0x20
+     b8c:	9381                	srli	a5,a5,0x20
+     b8e:	fff7c793          	not	a5,a5
+     b92:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+     b94:	15fd                	addi	a1,a1,-1
+     b96:	177d                	addi	a4,a4,-1
+     b98:	0005c683          	lbu	a3,0(a1)
+     b9c:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+     ba0:	fee79ae3          	bne	a5,a4,b94 <memmove+0x46>
+     ba4:	bfc9                	j	b76 <memmove+0x28>
+
+0000000000000ba6 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+     ba6:	1141                	addi	sp,sp,-16
+     ba8:	e422                	sd	s0,8(sp)
+     baa:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+     bac:	ca05                	beqz	a2,bdc <memcmp+0x36>
+     bae:	fff6069b          	addiw	a3,a2,-1
+     bb2:	1682                	slli	a3,a3,0x20
+     bb4:	9281                	srli	a3,a3,0x20
+     bb6:	0685                	addi	a3,a3,1
+     bb8:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+     bba:	00054783          	lbu	a5,0(a0)
+     bbe:	0005c703          	lbu	a4,0(a1)
+     bc2:	00e79863          	bne	a5,a4,bd2 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+     bc6:	0505                	addi	a0,a0,1
+    p2++;
+     bc8:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+     bca:	fed518e3          	bne	a0,a3,bba <memcmp+0x14>
+  }
+  return 0;
+     bce:	4501                	li	a0,0
+     bd0:	a019                	j	bd6 <memcmp+0x30>
+      return *p1 - *p2;
+     bd2:	40e7853b          	subw	a0,a5,a4
+}
+     bd6:	6422                	ld	s0,8(sp)
+     bd8:	0141                	addi	sp,sp,16
+     bda:	8082                	ret
+  return 0;
+     bdc:	4501                	li	a0,0
+     bde:	bfe5                	j	bd6 <memcmp+0x30>
+
+0000000000000be0 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+     be0:	1141                	addi	sp,sp,-16
+     be2:	e406                	sd	ra,8(sp)
+     be4:	e022                	sd	s0,0(sp)
+     be6:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+     be8:	f67ff0ef          	jal	b4e <memmove>
+}
+     bec:	60a2                	ld	ra,8(sp)
+     bee:	6402                	ld	s0,0(sp)
+     bf0:	0141                	addi	sp,sp,16
+     bf2:	8082                	ret
+
+0000000000000bf4 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+     bf4:	4885                	li	a7,1
+ ecall
+     bf6:	00000073          	ecall
+ ret
+     bfa:	8082                	ret
+
+0000000000000bfc <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+     bfc:	4889                	li	a7,2
+ ecall
+     bfe:	00000073          	ecall
+ ret
+     c02:	8082                	ret
+
+0000000000000c04 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+     c04:	488d                	li	a7,3
+ ecall
+     c06:	00000073          	ecall
+ ret
+     c0a:	8082                	ret
+
+0000000000000c0c <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+     c0c:	4891                	li	a7,4
+ ecall
+     c0e:	00000073          	ecall
+ ret
+     c12:	8082                	ret
+
+0000000000000c14 <read>:
+.global read
+read:
+ li a7, SYS_read
+     c14:	4895                	li	a7,5
+ ecall
+     c16:	00000073          	ecall
+ ret
+     c1a:	8082                	ret
+
+0000000000000c1c <write>:
+.global write
+write:
+ li a7, SYS_write
+     c1c:	48c1                	li	a7,16
+ ecall
+     c1e:	00000073          	ecall
+ ret
+     c22:	8082                	ret
+
+0000000000000c24 <close>:
+.global close
+close:
+ li a7, SYS_close
+     c24:	48d5                	li	a7,21
+ ecall
+     c26:	00000073          	ecall
+ ret
+     c2a:	8082                	ret
+
+0000000000000c2c <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+     c2c:	4899                	li	a7,6
+ ecall
+     c2e:	00000073          	ecall
+ ret
+     c32:	8082                	ret
+
+0000000000000c34 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+     c34:	489d                	li	a7,7
+ ecall
+     c36:	00000073          	ecall
+ ret
+     c3a:	8082                	ret
+
+0000000000000c3c <open>:
+.global open
+open:
+ li a7, SYS_open
+     c3c:	48bd                	li	a7,15
+ ecall
+     c3e:	00000073          	ecall
+ ret
+     c42:	8082                	ret
+
+0000000000000c44 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+     c44:	48c5                	li	a7,17
+ ecall
+     c46:	00000073          	ecall
+ ret
+     c4a:	8082                	ret
+
+0000000000000c4c <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+     c4c:	48c9                	li	a7,18
+ ecall
+     c4e:	00000073          	ecall
+ ret
+     c52:	8082                	ret
+
+0000000000000c54 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+     c54:	48a1                	li	a7,8
+ ecall
+     c56:	00000073          	ecall
+ ret
+     c5a:	8082                	ret
+
+0000000000000c5c <link>:
+.global link
+link:
+ li a7, SYS_link
+     c5c:	48cd                	li	a7,19
+ ecall
+     c5e:	00000073          	ecall
+ ret
+     c62:	8082                	ret
+
+0000000000000c64 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+     c64:	48d1                	li	a7,20
+ ecall
+     c66:	00000073          	ecall
+ ret
+     c6a:	8082                	ret
+
+0000000000000c6c <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+     c6c:	48a5                	li	a7,9
+ ecall
+     c6e:	00000073          	ecall
+ ret
+     c72:	8082                	ret
+
+0000000000000c74 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+     c74:	48a9                	li	a7,10
+ ecall
+     c76:	00000073          	ecall
+ ret
+     c7a:	8082                	ret
+
+0000000000000c7c <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+     c7c:	48ad                	li	a7,11
+ ecall
+     c7e:	00000073          	ecall
+ ret
+     c82:	8082                	ret
+
+0000000000000c84 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+     c84:	48b1                	li	a7,12
+ ecall
+     c86:	00000073          	ecall
+ ret
+     c8a:	8082                	ret
+
+0000000000000c8c <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+     c8c:	48b5                	li	a7,13
+ ecall
+     c8e:	00000073          	ecall
+ ret
+     c92:	8082                	ret
+
+0000000000000c94 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+     c94:	48b9                	li	a7,14
+ ecall
+     c96:	00000073          	ecall
+ ret
+     c9a:	8082                	ret
+
+0000000000000c9c <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+     c9c:	48d9                	li	a7,22
+ ecall
+     c9e:	00000073          	ecall
+ ret
+     ca2:	8082                	ret
+
+0000000000000ca4 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+     ca4:	48dd                	li	a7,23
+ ecall
+     ca6:	00000073          	ecall
+ ret
+     caa:	8082                	ret
+
+0000000000000cac <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+     cac:	48e1                	li	a7,24
+ ecall
+     cae:	00000073          	ecall
+ ret
+     cb2:	8082                	ret
+
+0000000000000cb4 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+     cb4:	1101                	addi	sp,sp,-32
+     cb6:	ec06                	sd	ra,24(sp)
+     cb8:	e822                	sd	s0,16(sp)
+     cba:	1000                	addi	s0,sp,32
+     cbc:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+     cc0:	4605                	li	a2,1
+     cc2:	fef40593          	addi	a1,s0,-17
+     cc6:	f57ff0ef          	jal	c1c <write>
+}
+     cca:	60e2                	ld	ra,24(sp)
+     ccc:	6442                	ld	s0,16(sp)
+     cce:	6105                	addi	sp,sp,32
+     cd0:	8082                	ret
+
+0000000000000cd2 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     cd2:	7139                	addi	sp,sp,-64
+     cd4:	fc06                	sd	ra,56(sp)
+     cd6:	f822                	sd	s0,48(sp)
+     cd8:	f426                	sd	s1,40(sp)
+     cda:	0080                	addi	s0,sp,64
+     cdc:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+     cde:	c299                	beqz	a3,ce4 <printint+0x12>
+     ce0:	0805c963          	bltz	a1,d72 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+     ce4:	2581                	sext.w	a1,a1
+  neg = 0;
+     ce6:	4881                	li	a7,0
+     ce8:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+     cec:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+     cee:	2601                	sext.w	a2,a2
+     cf0:	00000517          	auipc	a0,0x0
+     cf4:	63850513          	addi	a0,a0,1592 # 1328 <digits>
+     cf8:	883a                	mv	a6,a4
+     cfa:	2705                	addiw	a4,a4,1
+     cfc:	02c5f7bb          	remuw	a5,a1,a2
+     d00:	1782                	slli	a5,a5,0x20
+     d02:	9381                	srli	a5,a5,0x20
+     d04:	97aa                	add	a5,a5,a0
+     d06:	0007c783          	lbu	a5,0(a5)
+     d0a:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+     d0e:	0005879b          	sext.w	a5,a1
+     d12:	02c5d5bb          	divuw	a1,a1,a2
+     d16:	0685                	addi	a3,a3,1
+     d18:	fec7f0e3          	bgeu	a5,a2,cf8 <printint+0x26>
+  if(neg)
+     d1c:	00088c63          	beqz	a7,d34 <printint+0x62>
+    buf[i++] = '-';
+     d20:	fd070793          	addi	a5,a4,-48
+     d24:	00878733          	add	a4,a5,s0
+     d28:	02d00793          	li	a5,45
+     d2c:	fef70823          	sb	a5,-16(a4)
+     d30:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+     d34:	02e05a63          	blez	a4,d68 <printint+0x96>
+     d38:	f04a                	sd	s2,32(sp)
+     d3a:	ec4e                	sd	s3,24(sp)
+     d3c:	fc040793          	addi	a5,s0,-64
+     d40:	00e78933          	add	s2,a5,a4
+     d44:	fff78993          	addi	s3,a5,-1
+     d48:	99ba                	add	s3,s3,a4
+     d4a:	377d                	addiw	a4,a4,-1
+     d4c:	1702                	slli	a4,a4,0x20
+     d4e:	9301                	srli	a4,a4,0x20
+     d50:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+     d54:	fff94583          	lbu	a1,-1(s2)
+     d58:	8526                	mv	a0,s1
+     d5a:	f5bff0ef          	jal	cb4 <putc>
+  while(--i >= 0)
+     d5e:	197d                	addi	s2,s2,-1
+     d60:	ff391ae3          	bne	s2,s3,d54 <printint+0x82>
+     d64:	7902                	ld	s2,32(sp)
+     d66:	69e2                	ld	s3,24(sp)
+}
+     d68:	70e2                	ld	ra,56(sp)
+     d6a:	7442                	ld	s0,48(sp)
+     d6c:	74a2                	ld	s1,40(sp)
+     d6e:	6121                	addi	sp,sp,64
+     d70:	8082                	ret
+    x = -xx;
+     d72:	40b005bb          	negw	a1,a1
+    neg = 1;
+     d76:	4885                	li	a7,1
+    x = -xx;
+     d78:	bf85                	j	ce8 <printint+0x16>
+
+0000000000000d7a <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+     d7a:	711d                	addi	sp,sp,-96
+     d7c:	ec86                	sd	ra,88(sp)
+     d7e:	e8a2                	sd	s0,80(sp)
+     d80:	e0ca                	sd	s2,64(sp)
+     d82:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+     d84:	0005c903          	lbu	s2,0(a1)
+     d88:	26090863          	beqz	s2,ff8 <vprintf+0x27e>
+     d8c:	e4a6                	sd	s1,72(sp)
+     d8e:	fc4e                	sd	s3,56(sp)
+     d90:	f852                	sd	s4,48(sp)
+     d92:	f456                	sd	s5,40(sp)
+     d94:	f05a                	sd	s6,32(sp)
+     d96:	ec5e                	sd	s7,24(sp)
+     d98:	e862                	sd	s8,16(sp)
+     d9a:	e466                	sd	s9,8(sp)
+     d9c:	8b2a                	mv	s6,a0
+     d9e:	8a2e                	mv	s4,a1
+     da0:	8bb2                	mv	s7,a2
+  state = 0;
+     da2:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+     da4:	4481                	li	s1,0
+     da6:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+     da8:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+     dac:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+     db0:	06c00c93          	li	s9,108
+     db4:	a005                	j	dd4 <vprintf+0x5a>
+        putc(fd, c0);
+     db6:	85ca                	mv	a1,s2
+     db8:	855a                	mv	a0,s6
+     dba:	efbff0ef          	jal	cb4 <putc>
+     dbe:	a019                	j	dc4 <vprintf+0x4a>
+    } else if(state == '%'){
+     dc0:	03598263          	beq	s3,s5,de4 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+     dc4:	2485                	addiw	s1,s1,1
+     dc6:	8726                	mv	a4,s1
+     dc8:	009a07b3          	add	a5,s4,s1
+     dcc:	0007c903          	lbu	s2,0(a5)
+     dd0:	20090c63          	beqz	s2,fe8 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+     dd4:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+     dd8:	fe0994e3          	bnez	s3,dc0 <vprintf+0x46>
+      if(c0 == '%'){
+     ddc:	fd579de3          	bne	a5,s5,db6 <vprintf+0x3c>
+        state = '%';
+     de0:	89be                	mv	s3,a5
+     de2:	b7cd                	j	dc4 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+     de4:	00ea06b3          	add	a3,s4,a4
+     de8:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+     dec:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+     dee:	c681                	beqz	a3,df6 <vprintf+0x7c>
+     df0:	9752                	add	a4,a4,s4
+     df2:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+     df6:	03878f63          	beq	a5,s8,e34 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+     dfa:	05978963          	beq	a5,s9,e4c <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+     dfe:	07500713          	li	a4,117
+     e02:	0ee78363          	beq	a5,a4,ee8 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+     e06:	07800713          	li	a4,120
+     e0a:	12e78563          	beq	a5,a4,f34 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+     e0e:	07000713          	li	a4,112
+     e12:	14e78a63          	beq	a5,a4,f66 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+     e16:	07300713          	li	a4,115
+     e1a:	18e78a63          	beq	a5,a4,fae <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+     e1e:	02500713          	li	a4,37
+     e22:	04e79563          	bne	a5,a4,e6c <vprintf+0xf2>
+        putc(fd, '%');
+     e26:	02500593          	li	a1,37
+     e2a:	855a                	mv	a0,s6
+     e2c:	e89ff0ef          	jal	cb4 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+     e30:	4981                	li	s3,0
+     e32:	bf49                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+     e34:	008b8913          	addi	s2,s7,8
+     e38:	4685                	li	a3,1
+     e3a:	4629                	li	a2,10
+     e3c:	000ba583          	lw	a1,0(s7)
+     e40:	855a                	mv	a0,s6
+     e42:	e91ff0ef          	jal	cd2 <printint>
+     e46:	8bca                	mv	s7,s2
+      state = 0;
+     e48:	4981                	li	s3,0
+     e4a:	bfad                	j	dc4 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+     e4c:	06400793          	li	a5,100
+     e50:	02f68963          	beq	a3,a5,e82 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+     e54:	06c00793          	li	a5,108
+     e58:	04f68263          	beq	a3,a5,e9c <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+     e5c:	07500793          	li	a5,117
+     e60:	0af68063          	beq	a3,a5,f00 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+     e64:	07800793          	li	a5,120
+     e68:	0ef68263          	beq	a3,a5,f4c <vprintf+0x1d2>
+        putc(fd, '%');
+     e6c:	02500593          	li	a1,37
+     e70:	855a                	mv	a0,s6
+     e72:	e43ff0ef          	jal	cb4 <putc>
+        putc(fd, c0);
+     e76:	85ca                	mv	a1,s2
+     e78:	855a                	mv	a0,s6
+     e7a:	e3bff0ef          	jal	cb4 <putc>
+      state = 0;
+     e7e:	4981                	li	s3,0
+     e80:	b791                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     e82:	008b8913          	addi	s2,s7,8
+     e86:	4685                	li	a3,1
+     e88:	4629                	li	a2,10
+     e8a:	000ba583          	lw	a1,0(s7)
+     e8e:	855a                	mv	a0,s6
+     e90:	e43ff0ef          	jal	cd2 <printint>
+        i += 1;
+     e94:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     e96:	8bca                	mv	s7,s2
+      state = 0;
+     e98:	4981                	li	s3,0
+        i += 1;
+     e9a:	b72d                	j	dc4 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+     e9c:	06400793          	li	a5,100
+     ea0:	02f60763          	beq	a2,a5,ece <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+     ea4:	07500793          	li	a5,117
+     ea8:	06f60963          	beq	a2,a5,f1a <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+     eac:	07800793          	li	a5,120
+     eb0:	faf61ee3          	bne	a2,a5,e6c <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     eb4:	008b8913          	addi	s2,s7,8
+     eb8:	4681                	li	a3,0
+     eba:	4641                	li	a2,16
+     ebc:	000ba583          	lw	a1,0(s7)
+     ec0:	855a                	mv	a0,s6
+     ec2:	e11ff0ef          	jal	cd2 <printint>
+        i += 2;
+     ec6:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     ec8:	8bca                	mv	s7,s2
+      state = 0;
+     eca:	4981                	li	s3,0
+        i += 2;
+     ecc:	bde5                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     ece:	008b8913          	addi	s2,s7,8
+     ed2:	4685                	li	a3,1
+     ed4:	4629                	li	a2,10
+     ed6:	000ba583          	lw	a1,0(s7)
+     eda:	855a                	mv	a0,s6
+     edc:	df7ff0ef          	jal	cd2 <printint>
+        i += 2;
+     ee0:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+     ee2:	8bca                	mv	s7,s2
+      state = 0;
+     ee4:	4981                	li	s3,0
+        i += 2;
+     ee6:	bdf9                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+     ee8:	008b8913          	addi	s2,s7,8
+     eec:	4681                	li	a3,0
+     eee:	4629                	li	a2,10
+     ef0:	000ba583          	lw	a1,0(s7)
+     ef4:	855a                	mv	a0,s6
+     ef6:	dddff0ef          	jal	cd2 <printint>
+     efa:	8bca                	mv	s7,s2
+      state = 0;
+     efc:	4981                	li	s3,0
+     efe:	b5d9                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     f00:	008b8913          	addi	s2,s7,8
+     f04:	4681                	li	a3,0
+     f06:	4629                	li	a2,10
+     f08:	000ba583          	lw	a1,0(s7)
+     f0c:	855a                	mv	a0,s6
+     f0e:	dc5ff0ef          	jal	cd2 <printint>
+        i += 1;
+     f12:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     f14:	8bca                	mv	s7,s2
+      state = 0;
+     f16:	4981                	li	s3,0
+        i += 1;
+     f18:	b575                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     f1a:	008b8913          	addi	s2,s7,8
+     f1e:	4681                	li	a3,0
+     f20:	4629                	li	a2,10
+     f22:	000ba583          	lw	a1,0(s7)
+     f26:	855a                	mv	a0,s6
+     f28:	dabff0ef          	jal	cd2 <printint>
+        i += 2;
+     f2c:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+     f2e:	8bca                	mv	s7,s2
+      state = 0;
+     f30:	4981                	li	s3,0
+        i += 2;
+     f32:	bd49                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+     f34:	008b8913          	addi	s2,s7,8
+     f38:	4681                	li	a3,0
+     f3a:	4641                	li	a2,16
+     f3c:	000ba583          	lw	a1,0(s7)
+     f40:	855a                	mv	a0,s6
+     f42:	d91ff0ef          	jal	cd2 <printint>
+     f46:	8bca                	mv	s7,s2
+      state = 0;
+     f48:	4981                	li	s3,0
+     f4a:	bdad                	j	dc4 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     f4c:	008b8913          	addi	s2,s7,8
+     f50:	4681                	li	a3,0
+     f52:	4641                	li	a2,16
+     f54:	000ba583          	lw	a1,0(s7)
+     f58:	855a                	mv	a0,s6
+     f5a:	d79ff0ef          	jal	cd2 <printint>
+        i += 1;
+     f5e:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+     f60:	8bca                	mv	s7,s2
+      state = 0;
+     f62:	4981                	li	s3,0
+        i += 1;
+     f64:	b585                	j	dc4 <vprintf+0x4a>
+     f66:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+     f68:	008b8d13          	addi	s10,s7,8
+     f6c:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+     f70:	03000593          	li	a1,48
+     f74:	855a                	mv	a0,s6
+     f76:	d3fff0ef          	jal	cb4 <putc>
+  putc(fd, 'x');
+     f7a:	07800593          	li	a1,120
+     f7e:	855a                	mv	a0,s6
+     f80:	d35ff0ef          	jal	cb4 <putc>
+     f84:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+     f86:	00000b97          	auipc	s7,0x0
+     f8a:	3a2b8b93          	addi	s7,s7,930 # 1328 <digits>
+     f8e:	03c9d793          	srli	a5,s3,0x3c
+     f92:	97de                	add	a5,a5,s7
+     f94:	0007c583          	lbu	a1,0(a5)
+     f98:	855a                	mv	a0,s6
+     f9a:	d1bff0ef          	jal	cb4 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+     f9e:	0992                	slli	s3,s3,0x4
+     fa0:	397d                	addiw	s2,s2,-1
+     fa2:	fe0916e3          	bnez	s2,f8e <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+     fa6:	8bea                	mv	s7,s10
+      state = 0;
+     fa8:	4981                	li	s3,0
+     faa:	6d02                	ld	s10,0(sp)
+     fac:	bd21                	j	dc4 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+     fae:	008b8993          	addi	s3,s7,8
+     fb2:	000bb903          	ld	s2,0(s7)
+     fb6:	00090f63          	beqz	s2,fd4 <vprintf+0x25a>
+        for(; *s; s++)
+     fba:	00094583          	lbu	a1,0(s2)
+     fbe:	c195                	beqz	a1,fe2 <vprintf+0x268>
+          putc(fd, *s);
+     fc0:	855a                	mv	a0,s6
+     fc2:	cf3ff0ef          	jal	cb4 <putc>
+        for(; *s; s++)
+     fc6:	0905                	addi	s2,s2,1
+     fc8:	00094583          	lbu	a1,0(s2)
+     fcc:	f9f5                	bnez	a1,fc0 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+     fce:	8bce                	mv	s7,s3
+      state = 0;
+     fd0:	4981                	li	s3,0
+     fd2:	bbcd                	j	dc4 <vprintf+0x4a>
+          s = "(null)";
+     fd4:	00000917          	auipc	s2,0x0
+     fd8:	31c90913          	addi	s2,s2,796 # 12f0 <malloc+0x210>
+        for(; *s; s++)
+     fdc:	02800593          	li	a1,40
+     fe0:	b7c5                	j	fc0 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+     fe2:	8bce                	mv	s7,s3
+      state = 0;
+     fe4:	4981                	li	s3,0
+     fe6:	bbf9                	j	dc4 <vprintf+0x4a>
+     fe8:	64a6                	ld	s1,72(sp)
+     fea:	79e2                	ld	s3,56(sp)
+     fec:	7a42                	ld	s4,48(sp)
+     fee:	7aa2                	ld	s5,40(sp)
+     ff0:	7b02                	ld	s6,32(sp)
+     ff2:	6be2                	ld	s7,24(sp)
+     ff4:	6c42                	ld	s8,16(sp)
+     ff6:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+     ff8:	60e6                	ld	ra,88(sp)
+     ffa:	6446                	ld	s0,80(sp)
+     ffc:	6906                	ld	s2,64(sp)
+     ffe:	6125                	addi	sp,sp,96
+    1000:	8082                	ret
+
+0000000000001002 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+    1002:	715d                	addi	sp,sp,-80
+    1004:	ec06                	sd	ra,24(sp)
+    1006:	e822                	sd	s0,16(sp)
+    1008:	1000                	addi	s0,sp,32
+    100a:	e010                	sd	a2,0(s0)
+    100c:	e414                	sd	a3,8(s0)
+    100e:	e818                	sd	a4,16(s0)
+    1010:	ec1c                	sd	a5,24(s0)
+    1012:	03043023          	sd	a6,32(s0)
+    1016:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    101a:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+    101e:	8622                	mv	a2,s0
+    1020:	d5bff0ef          	jal	d7a <vprintf>
+}
+    1024:	60e2                	ld	ra,24(sp)
+    1026:	6442                	ld	s0,16(sp)
+    1028:	6161                	addi	sp,sp,80
+    102a:	8082                	ret
+
+000000000000102c <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+    102c:	711d                	addi	sp,sp,-96
+    102e:	ec06                	sd	ra,24(sp)
+    1030:	e822                	sd	s0,16(sp)
+    1032:	1000                	addi	s0,sp,32
+    1034:	e40c                	sd	a1,8(s0)
+    1036:	e810                	sd	a2,16(s0)
+    1038:	ec14                	sd	a3,24(s0)
+    103a:	f018                	sd	a4,32(s0)
+    103c:	f41c                	sd	a5,40(s0)
+    103e:	03043823          	sd	a6,48(s0)
+    1042:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    1046:	00840613          	addi	a2,s0,8
+    104a:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+    104e:	85aa                	mv	a1,a0
+    1050:	4505                	li	a0,1
+    1052:	d29ff0ef          	jal	d7a <vprintf>
+}
+    1056:	60e2                	ld	ra,24(sp)
+    1058:	6442                	ld	s0,16(sp)
+    105a:	6125                	addi	sp,sp,96
+    105c:	8082                	ret
+
+000000000000105e <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    105e:	1141                	addi	sp,sp,-16
+    1060:	e422                	sd	s0,8(sp)
+    1062:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    1064:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1068:	00001797          	auipc	a5,0x1
+    106c:	fa87b783          	ld	a5,-88(a5) # 2010 <freep>
+    1070:	a02d                	j	109a <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    1072:	4618                	lw	a4,8(a2)
+    1074:	9f2d                	addw	a4,a4,a1
+    1076:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    107a:	6398                	ld	a4,0(a5)
+    107c:	6310                	ld	a2,0(a4)
+    107e:	a83d                	j	10bc <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    1080:	ff852703          	lw	a4,-8(a0)
+    1084:	9f31                	addw	a4,a4,a2
+    1086:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+    1088:	ff053683          	ld	a3,-16(a0)
+    108c:	a091                	j	10d0 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    108e:	6398                	ld	a4,0(a5)
+    1090:	00e7e463          	bltu	a5,a4,1098 <free+0x3a>
+    1094:	00e6ea63          	bltu	a3,a4,10a8 <free+0x4a>
+{
+    1098:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    109a:	fed7fae3          	bgeu	a5,a3,108e <free+0x30>
+    109e:	6398                	ld	a4,0(a5)
+    10a0:	00e6e463          	bltu	a3,a4,10a8 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    10a4:	fee7eae3          	bltu	a5,a4,1098 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+    10a8:	ff852583          	lw	a1,-8(a0)
+    10ac:	6390                	ld	a2,0(a5)
+    10ae:	02059813          	slli	a6,a1,0x20
+    10b2:	01c85713          	srli	a4,a6,0x1c
+    10b6:	9736                	add	a4,a4,a3
+    10b8:	fae60de3          	beq	a2,a4,1072 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    10bc:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    10c0:	4790                	lw	a2,8(a5)
+    10c2:	02061593          	slli	a1,a2,0x20
+    10c6:	01c5d713          	srli	a4,a1,0x1c
+    10ca:	973e                	add	a4,a4,a5
+    10cc:	fae68ae3          	beq	a3,a4,1080 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    10d0:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    10d2:	00001717          	auipc	a4,0x1
+    10d6:	f2f73f23          	sd	a5,-194(a4) # 2010 <freep>
+}
+    10da:	6422                	ld	s0,8(sp)
+    10dc:	0141                	addi	sp,sp,16
+    10de:	8082                	ret
+
+00000000000010e0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    10e0:	7139                	addi	sp,sp,-64
+    10e2:	fc06                	sd	ra,56(sp)
+    10e4:	f822                	sd	s0,48(sp)
+    10e6:	f426                	sd	s1,40(sp)
+    10e8:	ec4e                	sd	s3,24(sp)
+    10ea:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    10ec:	02051493          	slli	s1,a0,0x20
+    10f0:	9081                	srli	s1,s1,0x20
+    10f2:	04bd                	addi	s1,s1,15
+    10f4:	8091                	srli	s1,s1,0x4
+    10f6:	0014899b          	addiw	s3,s1,1
+    10fa:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    10fc:	00001517          	auipc	a0,0x1
+    1100:	f1453503          	ld	a0,-236(a0) # 2010 <freep>
+    1104:	c915                	beqz	a0,1138 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1106:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    1108:	4798                	lw	a4,8(a5)
+    110a:	08977a63          	bgeu	a4,s1,119e <malloc+0xbe>
+    110e:	f04a                	sd	s2,32(sp)
+    1110:	e852                	sd	s4,16(sp)
+    1112:	e456                	sd	s5,8(sp)
+    1114:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+    1116:	8a4e                	mv	s4,s3
+    1118:	0009871b          	sext.w	a4,s3
+    111c:	6685                	lui	a3,0x1
+    111e:	00d77363          	bgeu	a4,a3,1124 <malloc+0x44>
+    1122:	6a05                	lui	s4,0x1
+    1124:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    1128:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    112c:	00001917          	auipc	s2,0x1
+    1130:	ee490913          	addi	s2,s2,-284 # 2010 <freep>
+  if(p == (char*)-1)
+    1134:	5afd                	li	s5,-1
+    1136:	a081                	j	1176 <malloc+0x96>
+    1138:	f04a                	sd	s2,32(sp)
+    113a:	e852                	sd	s4,16(sp)
+    113c:	e456                	sd	s5,8(sp)
+    113e:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+    1140:	00001797          	auipc	a5,0x1
+    1144:	f4878793          	addi	a5,a5,-184 # 2088 <base>
+    1148:	00001717          	auipc	a4,0x1
+    114c:	ecf73423          	sd	a5,-312(a4) # 2010 <freep>
+    1150:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    1152:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    1156:	b7c1                	j	1116 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+    1158:	6398                	ld	a4,0(a5)
+    115a:	e118                	sd	a4,0(a0)
+    115c:	a8a9                	j	11b6 <malloc+0xd6>
+  hp->s.size = nu;
+    115e:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    1162:	0541                	addi	a0,a0,16
+    1164:	efbff0ef          	jal	105e <free>
+  return freep;
+    1168:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    116c:	c12d                	beqz	a0,11ce <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    116e:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    1170:	4798                	lw	a4,8(a5)
+    1172:	02977263          	bgeu	a4,s1,1196 <malloc+0xb6>
+    if(p == freep)
+    1176:	00093703          	ld	a4,0(s2)
+    117a:	853e                	mv	a0,a5
+    117c:	fef719e3          	bne	a4,a5,116e <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+    1180:	8552                	mv	a0,s4
+    1182:	b03ff0ef          	jal	c84 <sbrk>
+  if(p == (char*)-1)
+    1186:	fd551ce3          	bne	a0,s5,115e <malloc+0x7e>
+        return 0;
+    118a:	4501                	li	a0,0
+    118c:	7902                	ld	s2,32(sp)
+    118e:	6a42                	ld	s4,16(sp)
+    1190:	6aa2                	ld	s5,8(sp)
+    1192:	6b02                	ld	s6,0(sp)
+    1194:	a03d                	j	11c2 <malloc+0xe2>
+    1196:	7902                	ld	s2,32(sp)
+    1198:	6a42                	ld	s4,16(sp)
+    119a:	6aa2                	ld	s5,8(sp)
+    119c:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+    119e:	fae48de3          	beq	s1,a4,1158 <malloc+0x78>
+        p->s.size -= nunits;
+    11a2:	4137073b          	subw	a4,a4,s3
+    11a6:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    11a8:	02071693          	slli	a3,a4,0x20
+    11ac:	01c6d713          	srli	a4,a3,0x1c
+    11b0:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    11b2:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    11b6:	00001717          	auipc	a4,0x1
+    11ba:	e4a73d23          	sd	a0,-422(a4) # 2010 <freep>
+      return (void*)(p + 1);
+    11be:	01078513          	addi	a0,a5,16
+  }
+}
+    11c2:	70e2                	ld	ra,56(sp)
+    11c4:	7442                	ld	s0,48(sp)
+    11c6:	74a2                	ld	s1,40(sp)
+    11c8:	69e2                	ld	s3,24(sp)
+    11ca:	6121                	addi	sp,sp,64
+    11cc:	8082                	ret
+    11ce:	7902                	ld	s2,32(sp)
+    11d0:	6a42                	ld	s4,16(sp)
+    11d2:	6aa2                	ld	s5,8(sp)
+    11d4:	6b02                	ld	s6,0(sp)
+    11d6:	b7f5                	j	11c2 <malloc+0xe2>
diff --git a/user/sh.c b/user/sh.c
new file mode 100644
index 0000000..836ebcb
--- /dev/null
+++ b/user/sh.c
@@ -0,0 +1,494 @@
+// Shell.
+
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/fcntl.h"
+
+// Parsed command representation
+#define EXEC  1
+#define REDIR 2
+#define PIPE  3
+#define LIST  4
+#define BACK  5
+
+#define MAXARGS 10
+
+struct cmd {
+  int type;
+};
+
+struct execcmd {
+  int type;
+  char *argv[MAXARGS];
+  char *eargv[MAXARGS];
+};
+
+struct redircmd {
+  int type;
+  struct cmd *cmd;
+  char *file;
+  char *efile;
+  int mode;
+  int fd;
+};
+
+struct pipecmd {
+  int type;
+  struct cmd *left;
+  struct cmd *right;
+};
+
+struct listcmd {
+  int type;
+  struct cmd *left;
+  struct cmd *right;
+};
+
+struct backcmd {
+  int type;
+  struct cmd *cmd;
+};
+
+int fork1(void);  // Fork but panics on failure.
+void panic(char*);
+struct cmd *parsecmd(char*);
+void runcmd(struct cmd*) __attribute__((noreturn));
+
+// Execute cmd.  Never returns.
+void
+runcmd(struct cmd *cmd)
+{
+  int p[2];
+  struct backcmd *bcmd;
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    exit(1);
+
+  switch(cmd->type){
+  default:
+    panic("runcmd");
+
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    if(ecmd->argv[0] == 0)
+      exit(1);
+    exec(ecmd->argv[0], ecmd->argv);
+    fprintf(2, "exec %s failed\n", ecmd->argv[0]);
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    close(rcmd->fd);
+    if(open(rcmd->file, rcmd->mode) < 0){
+      fprintf(2, "open %s failed\n", rcmd->file);
+      exit(1);
+    }
+    runcmd(rcmd->cmd);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    if(fork1() == 0)
+      runcmd(lcmd->left);
+    wait(0);
+    runcmd(lcmd->right);
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    if(pipe(p) < 0)
+      panic("pipe");
+    if(fork1() == 0){
+      close(1);
+      dup(p[1]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->left);
+    }
+    if(fork1() == 0){
+      close(0);
+      dup(p[0]);
+      close(p[0]);
+      close(p[1]);
+      runcmd(pcmd->right);
+    }
+    close(p[0]);
+    close(p[1]);
+    wait(0);
+    wait(0);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    if(fork1() == 0)
+      runcmd(bcmd->cmd);
+    break;
+  }
+  exit(0);
+}
+
+int
+getcmd(char *buf, int nbuf)
+{
+  write(2, "$ ", 2);
+  memset(buf, 0, nbuf);
+  gets(buf, nbuf);
+  if(buf[0] == 0) // EOF
+    return -1;
+  return 0;
+}
+
+int
+main(void)
+{
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+    if(fd >= 3){
+      close(fd);
+      break;
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      // Chdir must be called by the parent, not the child.
+      buf[strlen(buf)-1] = 0;  // chop \n
+      if(chdir(buf+3) < 0)
+        fprintf(2, "cannot cd %s\n", buf+3);
+      continue;
+    }
+    if(fork1() == 0)
+      runcmd(parsecmd(buf));
+    wait(0);
+  }
+  exit(0);
+}
+
+void
+panic(char *s)
+{
+  fprintf(2, "%s\n", s);
+  exit(1);
+}
+
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+  if(pid == -1)
+    panic("fork");
+  return pid;
+}
+
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = EXEC;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+  cmd->file = file;
+  cmd->efile = efile;
+  cmd->mode = mode;
+  cmd->fd = fd;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = PIPE;
+  cmd->left = left;
+  cmd->right = right;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = LIST;
+  cmd->left = left;
+  cmd->right = right;
+  return (struct cmd*)cmd;
+}
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+  memset(cmd, 0, sizeof(*cmd));
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+  return (struct cmd*)cmd;
+}
+//PAGEBREAK!
+// Parsing
+
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+  char *s;
+  int ret;
+
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  if(q)
+    *q = s;
+  ret = *s;
+  switch(*s){
+  case 0:
+    break;
+  case '|':
+  case '(':
+  case ')':
+  case ';':
+  case '&':
+  case '<':
+    s++;
+    break;
+  case '>':
+    s++;
+    if(*s == '>'){
+      ret = '+';
+      s++;
+    }
+    break;
+  default:
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+    *eq = s;
+
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  *ps = s;
+  return ret;
+}
+
+int
+peek(char **ps, char *es, char *toks)
+{
+  char *s;
+
+  s = *ps;
+  while(s < es && strchr(whitespace, *s))
+    s++;
+  *ps = s;
+  return *s && strchr(toks, *s);
+}
+
+struct cmd *parseline(char**, char*);
+struct cmd *parsepipe(char**, char*);
+struct cmd *parseexec(char**, char*);
+struct cmd *nulterminate(struct cmd*);
+
+struct cmd*
+parsecmd(char *s)
+{
+  char *es;
+  struct cmd *cmd;
+
+  es = s + strlen(s);
+  cmd = parseline(&s, es);
+  peek(&s, es, "");
+  if(s != es){
+    fprintf(2, "leftovers: %s\n", s);
+    panic("syntax");
+  }
+  nulterminate(cmd);
+  return cmd;
+}
+
+struct cmd*
+parseline(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parsepipe(ps, es);
+  while(peek(ps, es, "&")){
+    gettoken(ps, es, 0, 0);
+    cmd = backcmd(cmd);
+  }
+  if(peek(ps, es, ";")){
+    gettoken(ps, es, 0, 0);
+    cmd = listcmd(cmd, parseline(ps, es));
+  }
+  return cmd;
+}
+
+struct cmd*
+parsepipe(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  cmd = parseexec(ps, es);
+  if(peek(ps, es, "|")){
+    gettoken(ps, es, 0, 0);
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+  }
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+    tok = gettoken(ps, es, 0, 0);
+    if(gettoken(ps, es, &q, &eq) != 'a')
+      panic("missing file for redirection");
+    switch(tok){
+    case '<':
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE|O_TRUNC, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    }
+  }
+  return cmd;
+}
+
+struct cmd*
+parseblock(char **ps, char *es)
+{
+  struct cmd *cmd;
+
+  if(!peek(ps, es, "("))
+    panic("parseblock");
+  gettoken(ps, es, 0, 0);
+  cmd = parseline(ps, es);
+  if(!peek(ps, es, ")"))
+    panic("syntax - missing )");
+  gettoken(ps, es, 0, 0);
+  cmd = parseredirs(cmd, ps, es);
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+    return parseblock(ps, es);
+
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+  while(!peek(ps, es, "|)&;")){
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+      break;
+    if(tok != 'a')
+      panic("syntax");
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+  int i;
+  struct backcmd *bcmd;
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+    return 0;
+
+  switch(cmd->type){
+  case EXEC:
+    ecmd = (struct execcmd*)cmd;
+    for(i=0; ecmd->argv[i]; i++)
+      *ecmd->eargv[i] = 0;
+    break;
+
+  case REDIR:
+    rcmd = (struct redircmd*)cmd;
+    nulterminate(rcmd->cmd);
+    *rcmd->efile = 0;
+    break;
+
+  case PIPE:
+    pcmd = (struct pipecmd*)cmd;
+    nulterminate(pcmd->left);
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+    nulterminate(lcmd->right);
+    break;
+
+  case BACK:
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
diff --git a/user/sh.d b/user/sh.d
new file mode 100644
index 0000000..d2c3f5e
--- /dev/null
+++ b/user/sh.d
@@ -0,0 +1 @@
+user/sh.o: user/sh.c kernel/types.h user/user.h kernel/fcntl.h
diff --git a/user/sh.o b/user/sh.o
new file mode 100644
index 0000000..a0cab5b
Binary files /dev/null and b/user/sh.o differ
diff --git a/user/sh.sym b/user/sh.sym
new file mode 100644
index 0000000..a397a2e
--- /dev/null
+++ b/user/sh.sym
@@ -0,0 +1,87 @@
+0000000000000000 .text
+00000000000011d8 .rodata
+0000000000002000 .data
+0000000000002010 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 sh.c
+0000000000002020 buf.0
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000cb4 putc
+0000000000000cd2 printint
+0000000000001328 digits
+0000000000000000 umalloc.c
+0000000000002010 freep
+0000000000002088 base
+00000000000009a4 strcpy
+000000000000102c printf
+0000000000000b4e memmove
+0000000000000c44 mknod
+00000000000001d2 execcmd
+0000000000000ca4 trace
+0000000000000a5c gets
+0000000000000c7c getpid
+000000000000066c parsepipe
+0000000000000852 parsecmd
+0000000000000c9c hello
+0000000000000be0 memcpy
+00000000000002dc backcmd
+000000000000044c peek
+00000000000004b0 parseredirs
+0000000000000310 gettoken
+00000000000010e0 malloc
+0000000000000c8c sleep
+0000000000000cac sysinfo
+0000000000002008 whitespace
+0000000000000068 fork1
+00000000000007d2 nulterminate
+0000000000000c0c pipe
+0000000000000000 getcmd
+0000000000000c1c write
+0000000000000c54 fstat
+0000000000001002 fprintf
+0000000000000c2c kill
+0000000000000d7a vprintf
+0000000000000c6c chdir
+00000000000006c6 parseline
+000000000000008e runcmd
+000000000000074e parseblock
+0000000000000c34 exec
+0000000000000c04 wait
+0000000000002000 symbols
+0000000000000c14 read
+0000000000000588 parseexec
+0000000000000c4c unlink
+000000000000004a panic
+0000000000000ba6 memcmp
+0000000000000bf4 fork
+0000000000000c84 sbrk
+0000000000000c94 uptime
+0000000000000a16 memset
+00000000000008c2 main
+00000000000009c0 strcmp
+0000000000000c74 dup
+0000000000000260 pipecmd
+0000000000000200 redircmd
+0000000000000acc stat
+0000000000000c5c link
+0000000000000bfc exit
+0000000000000992 start
+0000000000000b06 atoi
+00000000000009ec strlen
+0000000000000c3c open
+0000000000000a38 strchr
+0000000000000c64 mkdir
+0000000000000c24 close
+000000000000029e listcmd
+000000000000105e free
diff --git a/user/stressfs.asm b/user/stressfs.asm
new file mode 100644
index 0000000..f223e5d
--- /dev/null
+++ b/user/stressfs.asm
@@ -0,0 +1,1542 @@
+
+user/_stressfs:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	dd010113          	addi	sp,sp,-560
+   4:	22113423          	sd	ra,552(sp)
+   8:	22813023          	sd	s0,544(sp)
+   c:	20913c23          	sd	s1,536(sp)
+  10:	21213823          	sd	s2,528(sp)
+  14:	1c00                	addi	s0,sp,560
+  int fd, i;
+  char path[] = "stressfs0";
+  16:	00001797          	auipc	a5,0x1
+  1a:	93a78793          	addi	a5,a5,-1734 # 950 <malloc+0x12a>
+  1e:	6398                	ld	a4,0(a5)
+  20:	fce43823          	sd	a4,-48(s0)
+  24:	0087d783          	lhu	a5,8(a5)
+  28:	fcf41c23          	sh	a5,-40(s0)
+  char data[512];
+
+  printf("stressfs starting\n");
+  2c:	00001517          	auipc	a0,0x1
+  30:	8f450513          	addi	a0,a0,-1804 # 920 <malloc+0xfa>
+  34:	73e000ef          	jal	772 <printf>
+  memset(data, 'a', sizeof(data));
+  38:	20000613          	li	a2,512
+  3c:	06100593          	li	a1,97
+  40:	dd040513          	addi	a0,s0,-560
+  44:	118000ef          	jal	15c <memset>
+
+  for(i = 0; i < 4; i++)
+  48:	4481                	li	s1,0
+  4a:	4911                	li	s2,4
+    if(fork() > 0)
+  4c:	2ee000ef          	jal	33a <fork>
+  50:	00a04563          	bgtz	a0,5a <main+0x5a>
+  for(i = 0; i < 4; i++)
+  54:	2485                	addiw	s1,s1,1
+  56:	ff249be3          	bne	s1,s2,4c <main+0x4c>
+      break;
+
+  printf("write %d\n", i);
+  5a:	85a6                	mv	a1,s1
+  5c:	00001517          	auipc	a0,0x1
+  60:	8dc50513          	addi	a0,a0,-1828 # 938 <malloc+0x112>
+  64:	70e000ef          	jal	772 <printf>
+
+  path[8] += i;
+  68:	fd844783          	lbu	a5,-40(s0)
+  6c:	9fa5                	addw	a5,a5,s1
+  6e:	fcf40c23          	sb	a5,-40(s0)
+  fd = open(path, O_CREATE | O_RDWR);
+  72:	20200593          	li	a1,514
+  76:	fd040513          	addi	a0,s0,-48
+  7a:	308000ef          	jal	382 <open>
+  7e:	892a                	mv	s2,a0
+  80:	44d1                	li	s1,20
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  82:	20000613          	li	a2,512
+  86:	dd040593          	addi	a1,s0,-560
+  8a:	854a                	mv	a0,s2
+  8c:	2d6000ef          	jal	362 <write>
+  for(i = 0; i < 20; i++)
+  90:	34fd                	addiw	s1,s1,-1
+  92:	f8e5                	bnez	s1,82 <main+0x82>
+  close(fd);
+  94:	854a                	mv	a0,s2
+  96:	2d4000ef          	jal	36a <close>
+
+  printf("read\n");
+  9a:	00001517          	auipc	a0,0x1
+  9e:	8ae50513          	addi	a0,a0,-1874 # 948 <malloc+0x122>
+  a2:	6d0000ef          	jal	772 <printf>
+
+  fd = open(path, O_RDONLY);
+  a6:	4581                	li	a1,0
+  a8:	fd040513          	addi	a0,s0,-48
+  ac:	2d6000ef          	jal	382 <open>
+  b0:	892a                	mv	s2,a0
+  b2:	44d1                	li	s1,20
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+  b4:	20000613          	li	a2,512
+  b8:	dd040593          	addi	a1,s0,-560
+  bc:	854a                	mv	a0,s2
+  be:	29c000ef          	jal	35a <read>
+  for (i = 0; i < 20; i++)
+  c2:	34fd                	addiw	s1,s1,-1
+  c4:	f8e5                	bnez	s1,b4 <main+0xb4>
+  close(fd);
+  c6:	854a                	mv	a0,s2
+  c8:	2a2000ef          	jal	36a <close>
+
+  wait(0);
+  cc:	4501                	li	a0,0
+  ce:	27c000ef          	jal	34a <wait>
+
+  exit(0);
+  d2:	4501                	li	a0,0
+  d4:	26e000ef          	jal	342 <exit>
+
+00000000000000d8 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  d8:	1141                	addi	sp,sp,-16
+  da:	e406                	sd	ra,8(sp)
+  dc:	e022                	sd	s0,0(sp)
+  de:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  e0:	f21ff0ef          	jal	0 <main>
+  exit(0);
+  e4:	4501                	li	a0,0
+  e6:	25c000ef          	jal	342 <exit>
+
+00000000000000ea <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  ea:	1141                	addi	sp,sp,-16
+  ec:	e422                	sd	s0,8(sp)
+  ee:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f0:	87aa                	mv	a5,a0
+  f2:	0585                	addi	a1,a1,1
+  f4:	0785                	addi	a5,a5,1
+  f6:	fff5c703          	lbu	a4,-1(a1)
+  fa:	fee78fa3          	sb	a4,-1(a5)
+  fe:	fb75                	bnez	a4,f2 <strcpy+0x8>
+    ;
+  return os;
+}
+ 100:	6422                	ld	s0,8(sp)
+ 102:	0141                	addi	sp,sp,16
+ 104:	8082                	ret
+
+0000000000000106 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 106:	1141                	addi	sp,sp,-16
+ 108:	e422                	sd	s0,8(sp)
+ 10a:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 10c:	00054783          	lbu	a5,0(a0)
+ 110:	cb91                	beqz	a5,124 <strcmp+0x1e>
+ 112:	0005c703          	lbu	a4,0(a1)
+ 116:	00f71763          	bne	a4,a5,124 <strcmp+0x1e>
+    p++, q++;
+ 11a:	0505                	addi	a0,a0,1
+ 11c:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 11e:	00054783          	lbu	a5,0(a0)
+ 122:	fbe5                	bnez	a5,112 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 124:	0005c503          	lbu	a0,0(a1)
+}
+ 128:	40a7853b          	subw	a0,a5,a0
+ 12c:	6422                	ld	s0,8(sp)
+ 12e:	0141                	addi	sp,sp,16
+ 130:	8082                	ret
+
+0000000000000132 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 132:	1141                	addi	sp,sp,-16
+ 134:	e422                	sd	s0,8(sp)
+ 136:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 138:	00054783          	lbu	a5,0(a0)
+ 13c:	cf91                	beqz	a5,158 <strlen+0x26>
+ 13e:	0505                	addi	a0,a0,1
+ 140:	87aa                	mv	a5,a0
+ 142:	86be                	mv	a3,a5
+ 144:	0785                	addi	a5,a5,1
+ 146:	fff7c703          	lbu	a4,-1(a5)
+ 14a:	ff65                	bnez	a4,142 <strlen+0x10>
+ 14c:	40a6853b          	subw	a0,a3,a0
+ 150:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 152:	6422                	ld	s0,8(sp)
+ 154:	0141                	addi	sp,sp,16
+ 156:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 158:	4501                	li	a0,0
+ 15a:	bfe5                	j	152 <strlen+0x20>
+
+000000000000015c <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 15c:	1141                	addi	sp,sp,-16
+ 15e:	e422                	sd	s0,8(sp)
+ 160:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 162:	ca19                	beqz	a2,178 <memset+0x1c>
+ 164:	87aa                	mv	a5,a0
+ 166:	1602                	slli	a2,a2,0x20
+ 168:	9201                	srli	a2,a2,0x20
+ 16a:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 16e:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 172:	0785                	addi	a5,a5,1
+ 174:	fee79de3          	bne	a5,a4,16e <memset+0x12>
+  }
+  return dst;
+}
+ 178:	6422                	ld	s0,8(sp)
+ 17a:	0141                	addi	sp,sp,16
+ 17c:	8082                	ret
+
+000000000000017e <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 17e:	1141                	addi	sp,sp,-16
+ 180:	e422                	sd	s0,8(sp)
+ 182:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 184:	00054783          	lbu	a5,0(a0)
+ 188:	cb99                	beqz	a5,19e <strchr+0x20>
+    if(*s == c)
+ 18a:	00f58763          	beq	a1,a5,198 <strchr+0x1a>
+  for(; *s; s++)
+ 18e:	0505                	addi	a0,a0,1
+ 190:	00054783          	lbu	a5,0(a0)
+ 194:	fbfd                	bnez	a5,18a <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 196:	4501                	li	a0,0
+}
+ 198:	6422                	ld	s0,8(sp)
+ 19a:	0141                	addi	sp,sp,16
+ 19c:	8082                	ret
+  return 0;
+ 19e:	4501                	li	a0,0
+ 1a0:	bfe5                	j	198 <strchr+0x1a>
+
+00000000000001a2 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a2:	711d                	addi	sp,sp,-96
+ 1a4:	ec86                	sd	ra,88(sp)
+ 1a6:	e8a2                	sd	s0,80(sp)
+ 1a8:	e4a6                	sd	s1,72(sp)
+ 1aa:	e0ca                	sd	s2,64(sp)
+ 1ac:	fc4e                	sd	s3,56(sp)
+ 1ae:	f852                	sd	s4,48(sp)
+ 1b0:	f456                	sd	s5,40(sp)
+ 1b2:	f05a                	sd	s6,32(sp)
+ 1b4:	ec5e                	sd	s7,24(sp)
+ 1b6:	1080                	addi	s0,sp,96
+ 1b8:	8baa                	mv	s7,a0
+ 1ba:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 1bc:	892a                	mv	s2,a0
+ 1be:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 1c0:	4aa9                	li	s5,10
+ 1c2:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 1c4:	89a6                	mv	s3,s1
+ 1c6:	2485                	addiw	s1,s1,1
+ 1c8:	0344d663          	bge	s1,s4,1f4 <gets+0x52>
+    cc = read(0, &c, 1);
+ 1cc:	4605                	li	a2,1
+ 1ce:	faf40593          	addi	a1,s0,-81
+ 1d2:	4501                	li	a0,0
+ 1d4:	186000ef          	jal	35a <read>
+    if(cc < 1)
+ 1d8:	00a05e63          	blez	a0,1f4 <gets+0x52>
+    buf[i++] = c;
+ 1dc:	faf44783          	lbu	a5,-81(s0)
+ 1e0:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 1e4:	01578763          	beq	a5,s5,1f2 <gets+0x50>
+ 1e8:	0905                	addi	s2,s2,1
+ 1ea:	fd679de3          	bne	a5,s6,1c4 <gets+0x22>
+    buf[i++] = c;
+ 1ee:	89a6                	mv	s3,s1
+ 1f0:	a011                	j	1f4 <gets+0x52>
+ 1f2:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 1f4:	99de                	add	s3,s3,s7
+ 1f6:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 1fa:	855e                	mv	a0,s7
+ 1fc:	60e6                	ld	ra,88(sp)
+ 1fe:	6446                	ld	s0,80(sp)
+ 200:	64a6                	ld	s1,72(sp)
+ 202:	6906                	ld	s2,64(sp)
+ 204:	79e2                	ld	s3,56(sp)
+ 206:	7a42                	ld	s4,48(sp)
+ 208:	7aa2                	ld	s5,40(sp)
+ 20a:	7b02                	ld	s6,32(sp)
+ 20c:	6be2                	ld	s7,24(sp)
+ 20e:	6125                	addi	sp,sp,96
+ 210:	8082                	ret
+
+0000000000000212 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 212:	1101                	addi	sp,sp,-32
+ 214:	ec06                	sd	ra,24(sp)
+ 216:	e822                	sd	s0,16(sp)
+ 218:	e04a                	sd	s2,0(sp)
+ 21a:	1000                	addi	s0,sp,32
+ 21c:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 21e:	4581                	li	a1,0
+ 220:	162000ef          	jal	382 <open>
+  if(fd < 0)
+ 224:	02054263          	bltz	a0,248 <stat+0x36>
+ 228:	e426                	sd	s1,8(sp)
+ 22a:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 22c:	85ca                	mv	a1,s2
+ 22e:	16c000ef          	jal	39a <fstat>
+ 232:	892a                	mv	s2,a0
+  close(fd);
+ 234:	8526                	mv	a0,s1
+ 236:	134000ef          	jal	36a <close>
+  return r;
+ 23a:	64a2                	ld	s1,8(sp)
+}
+ 23c:	854a                	mv	a0,s2
+ 23e:	60e2                	ld	ra,24(sp)
+ 240:	6442                	ld	s0,16(sp)
+ 242:	6902                	ld	s2,0(sp)
+ 244:	6105                	addi	sp,sp,32
+ 246:	8082                	ret
+    return -1;
+ 248:	597d                	li	s2,-1
+ 24a:	bfcd                	j	23c <stat+0x2a>
+
+000000000000024c <atoi>:
+
+int
+atoi(const char *s)
+{
+ 24c:	1141                	addi	sp,sp,-16
+ 24e:	e422                	sd	s0,8(sp)
+ 250:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 252:	00054683          	lbu	a3,0(a0)
+ 256:	fd06879b          	addiw	a5,a3,-48
+ 25a:	0ff7f793          	zext.b	a5,a5
+ 25e:	4625                	li	a2,9
+ 260:	02f66863          	bltu	a2,a5,290 <atoi+0x44>
+ 264:	872a                	mv	a4,a0
+  n = 0;
+ 266:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 268:	0705                	addi	a4,a4,1
+ 26a:	0025179b          	slliw	a5,a0,0x2
+ 26e:	9fa9                	addw	a5,a5,a0
+ 270:	0017979b          	slliw	a5,a5,0x1
+ 274:	9fb5                	addw	a5,a5,a3
+ 276:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 27a:	00074683          	lbu	a3,0(a4)
+ 27e:	fd06879b          	addiw	a5,a3,-48
+ 282:	0ff7f793          	zext.b	a5,a5
+ 286:	fef671e3          	bgeu	a2,a5,268 <atoi+0x1c>
+  return n;
+}
+ 28a:	6422                	ld	s0,8(sp)
+ 28c:	0141                	addi	sp,sp,16
+ 28e:	8082                	ret
+  n = 0;
+ 290:	4501                	li	a0,0
+ 292:	bfe5                	j	28a <atoi+0x3e>
+
+0000000000000294 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 294:	1141                	addi	sp,sp,-16
+ 296:	e422                	sd	s0,8(sp)
+ 298:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 29a:	02b57463          	bgeu	a0,a1,2c2 <memmove+0x2e>
+    while(n-- > 0)
+ 29e:	00c05f63          	blez	a2,2bc <memmove+0x28>
+ 2a2:	1602                	slli	a2,a2,0x20
+ 2a4:	9201                	srli	a2,a2,0x20
+ 2a6:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 2aa:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 2ac:	0585                	addi	a1,a1,1
+ 2ae:	0705                	addi	a4,a4,1
+ 2b0:	fff5c683          	lbu	a3,-1(a1)
+ 2b4:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 2b8:	fef71ae3          	bne	a4,a5,2ac <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 2bc:	6422                	ld	s0,8(sp)
+ 2be:	0141                	addi	sp,sp,16
+ 2c0:	8082                	ret
+    dst += n;
+ 2c2:	00c50733          	add	a4,a0,a2
+    src += n;
+ 2c6:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 2c8:	fec05ae3          	blez	a2,2bc <memmove+0x28>
+ 2cc:	fff6079b          	addiw	a5,a2,-1
+ 2d0:	1782                	slli	a5,a5,0x20
+ 2d2:	9381                	srli	a5,a5,0x20
+ 2d4:	fff7c793          	not	a5,a5
+ 2d8:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 2da:	15fd                	addi	a1,a1,-1
+ 2dc:	177d                	addi	a4,a4,-1
+ 2de:	0005c683          	lbu	a3,0(a1)
+ 2e2:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 2e6:	fee79ae3          	bne	a5,a4,2da <memmove+0x46>
+ 2ea:	bfc9                	j	2bc <memmove+0x28>
+
+00000000000002ec <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 2ec:	1141                	addi	sp,sp,-16
+ 2ee:	e422                	sd	s0,8(sp)
+ 2f0:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 2f2:	ca05                	beqz	a2,322 <memcmp+0x36>
+ 2f4:	fff6069b          	addiw	a3,a2,-1
+ 2f8:	1682                	slli	a3,a3,0x20
+ 2fa:	9281                	srli	a3,a3,0x20
+ 2fc:	0685                	addi	a3,a3,1
+ 2fe:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 300:	00054783          	lbu	a5,0(a0)
+ 304:	0005c703          	lbu	a4,0(a1)
+ 308:	00e79863          	bne	a5,a4,318 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 30c:	0505                	addi	a0,a0,1
+    p2++;
+ 30e:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 310:	fed518e3          	bne	a0,a3,300 <memcmp+0x14>
+  }
+  return 0;
+ 314:	4501                	li	a0,0
+ 316:	a019                	j	31c <memcmp+0x30>
+      return *p1 - *p2;
+ 318:	40e7853b          	subw	a0,a5,a4
+}
+ 31c:	6422                	ld	s0,8(sp)
+ 31e:	0141                	addi	sp,sp,16
+ 320:	8082                	ret
+  return 0;
+ 322:	4501                	li	a0,0
+ 324:	bfe5                	j	31c <memcmp+0x30>
+
+0000000000000326 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 326:	1141                	addi	sp,sp,-16
+ 328:	e406                	sd	ra,8(sp)
+ 32a:	e022                	sd	s0,0(sp)
+ 32c:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 32e:	f67ff0ef          	jal	294 <memmove>
+}
+ 332:	60a2                	ld	ra,8(sp)
+ 334:	6402                	ld	s0,0(sp)
+ 336:	0141                	addi	sp,sp,16
+ 338:	8082                	ret
+
+000000000000033a <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 33a:	4885                	li	a7,1
+ ecall
+ 33c:	00000073          	ecall
+ ret
+ 340:	8082                	ret
+
+0000000000000342 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 342:	4889                	li	a7,2
+ ecall
+ 344:	00000073          	ecall
+ ret
+ 348:	8082                	ret
+
+000000000000034a <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 34a:	488d                	li	a7,3
+ ecall
+ 34c:	00000073          	ecall
+ ret
+ 350:	8082                	ret
+
+0000000000000352 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 352:	4891                	li	a7,4
+ ecall
+ 354:	00000073          	ecall
+ ret
+ 358:	8082                	ret
+
+000000000000035a <read>:
+.global read
+read:
+ li a7, SYS_read
+ 35a:	4895                	li	a7,5
+ ecall
+ 35c:	00000073          	ecall
+ ret
+ 360:	8082                	ret
+
+0000000000000362 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 362:	48c1                	li	a7,16
+ ecall
+ 364:	00000073          	ecall
+ ret
+ 368:	8082                	ret
+
+000000000000036a <close>:
+.global close
+close:
+ li a7, SYS_close
+ 36a:	48d5                	li	a7,21
+ ecall
+ 36c:	00000073          	ecall
+ ret
+ 370:	8082                	ret
+
+0000000000000372 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 372:	4899                	li	a7,6
+ ecall
+ 374:	00000073          	ecall
+ ret
+ 378:	8082                	ret
+
+000000000000037a <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 37a:	489d                	li	a7,7
+ ecall
+ 37c:	00000073          	ecall
+ ret
+ 380:	8082                	ret
+
+0000000000000382 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 382:	48bd                	li	a7,15
+ ecall
+ 384:	00000073          	ecall
+ ret
+ 388:	8082                	ret
+
+000000000000038a <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 38a:	48c5                	li	a7,17
+ ecall
+ 38c:	00000073          	ecall
+ ret
+ 390:	8082                	ret
+
+0000000000000392 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 392:	48c9                	li	a7,18
+ ecall
+ 394:	00000073          	ecall
+ ret
+ 398:	8082                	ret
+
+000000000000039a <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 39a:	48a1                	li	a7,8
+ ecall
+ 39c:	00000073          	ecall
+ ret
+ 3a0:	8082                	ret
+
+00000000000003a2 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 3a2:	48cd                	li	a7,19
+ ecall
+ 3a4:	00000073          	ecall
+ ret
+ 3a8:	8082                	ret
+
+00000000000003aa <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 3aa:	48d1                	li	a7,20
+ ecall
+ 3ac:	00000073          	ecall
+ ret
+ 3b0:	8082                	ret
+
+00000000000003b2 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 3b2:	48a5                	li	a7,9
+ ecall
+ 3b4:	00000073          	ecall
+ ret
+ 3b8:	8082                	ret
+
+00000000000003ba <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 3ba:	48a9                	li	a7,10
+ ecall
+ 3bc:	00000073          	ecall
+ ret
+ 3c0:	8082                	ret
+
+00000000000003c2 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 3c2:	48ad                	li	a7,11
+ ecall
+ 3c4:	00000073          	ecall
+ ret
+ 3c8:	8082                	ret
+
+00000000000003ca <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 3ca:	48b1                	li	a7,12
+ ecall
+ 3cc:	00000073          	ecall
+ ret
+ 3d0:	8082                	ret
+
+00000000000003d2 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 3d2:	48b5                	li	a7,13
+ ecall
+ 3d4:	00000073          	ecall
+ ret
+ 3d8:	8082                	ret
+
+00000000000003da <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 3da:	48b9                	li	a7,14
+ ecall
+ 3dc:	00000073          	ecall
+ ret
+ 3e0:	8082                	ret
+
+00000000000003e2 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 3e2:	48d9                	li	a7,22
+ ecall
+ 3e4:	00000073          	ecall
+ ret
+ 3e8:	8082                	ret
+
+00000000000003ea <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 3ea:	48dd                	li	a7,23
+ ecall
+ 3ec:	00000073          	ecall
+ ret
+ 3f0:	8082                	ret
+
+00000000000003f2 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 3f2:	48e1                	li	a7,24
+ ecall
+ 3f4:	00000073          	ecall
+ ret
+ 3f8:	8082                	ret
+
+00000000000003fa <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 3fa:	1101                	addi	sp,sp,-32
+ 3fc:	ec06                	sd	ra,24(sp)
+ 3fe:	e822                	sd	s0,16(sp)
+ 400:	1000                	addi	s0,sp,32
+ 402:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 406:	4605                	li	a2,1
+ 408:	fef40593          	addi	a1,s0,-17
+ 40c:	f57ff0ef          	jal	362 <write>
+}
+ 410:	60e2                	ld	ra,24(sp)
+ 412:	6442                	ld	s0,16(sp)
+ 414:	6105                	addi	sp,sp,32
+ 416:	8082                	ret
+
+0000000000000418 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 418:	7139                	addi	sp,sp,-64
+ 41a:	fc06                	sd	ra,56(sp)
+ 41c:	f822                	sd	s0,48(sp)
+ 41e:	f426                	sd	s1,40(sp)
+ 420:	0080                	addi	s0,sp,64
+ 422:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 424:	c299                	beqz	a3,42a <printint+0x12>
+ 426:	0805c963          	bltz	a1,4b8 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 42a:	2581                	sext.w	a1,a1
+  neg = 0;
+ 42c:	4881                	li	a7,0
+ 42e:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 432:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 434:	2601                	sext.w	a2,a2
+ 436:	00000517          	auipc	a0,0x0
+ 43a:	53250513          	addi	a0,a0,1330 # 968 <digits>
+ 43e:	883a                	mv	a6,a4
+ 440:	2705                	addiw	a4,a4,1
+ 442:	02c5f7bb          	remuw	a5,a1,a2
+ 446:	1782                	slli	a5,a5,0x20
+ 448:	9381                	srli	a5,a5,0x20
+ 44a:	97aa                	add	a5,a5,a0
+ 44c:	0007c783          	lbu	a5,0(a5)
+ 450:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 454:	0005879b          	sext.w	a5,a1
+ 458:	02c5d5bb          	divuw	a1,a1,a2
+ 45c:	0685                	addi	a3,a3,1
+ 45e:	fec7f0e3          	bgeu	a5,a2,43e <printint+0x26>
+  if(neg)
+ 462:	00088c63          	beqz	a7,47a <printint+0x62>
+    buf[i++] = '-';
+ 466:	fd070793          	addi	a5,a4,-48
+ 46a:	00878733          	add	a4,a5,s0
+ 46e:	02d00793          	li	a5,45
+ 472:	fef70823          	sb	a5,-16(a4)
+ 476:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 47a:	02e05a63          	blez	a4,4ae <printint+0x96>
+ 47e:	f04a                	sd	s2,32(sp)
+ 480:	ec4e                	sd	s3,24(sp)
+ 482:	fc040793          	addi	a5,s0,-64
+ 486:	00e78933          	add	s2,a5,a4
+ 48a:	fff78993          	addi	s3,a5,-1
+ 48e:	99ba                	add	s3,s3,a4
+ 490:	377d                	addiw	a4,a4,-1
+ 492:	1702                	slli	a4,a4,0x20
+ 494:	9301                	srli	a4,a4,0x20
+ 496:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 49a:	fff94583          	lbu	a1,-1(s2)
+ 49e:	8526                	mv	a0,s1
+ 4a0:	f5bff0ef          	jal	3fa <putc>
+  while(--i >= 0)
+ 4a4:	197d                	addi	s2,s2,-1
+ 4a6:	ff391ae3          	bne	s2,s3,49a <printint+0x82>
+ 4aa:	7902                	ld	s2,32(sp)
+ 4ac:	69e2                	ld	s3,24(sp)
+}
+ 4ae:	70e2                	ld	ra,56(sp)
+ 4b0:	7442                	ld	s0,48(sp)
+ 4b2:	74a2                	ld	s1,40(sp)
+ 4b4:	6121                	addi	sp,sp,64
+ 4b6:	8082                	ret
+    x = -xx;
+ 4b8:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 4bc:	4885                	li	a7,1
+    x = -xx;
+ 4be:	bf85                	j	42e <printint+0x16>
+
+00000000000004c0 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 4c0:	711d                	addi	sp,sp,-96
+ 4c2:	ec86                	sd	ra,88(sp)
+ 4c4:	e8a2                	sd	s0,80(sp)
+ 4c6:	e0ca                	sd	s2,64(sp)
+ 4c8:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 4ca:	0005c903          	lbu	s2,0(a1)
+ 4ce:	26090863          	beqz	s2,73e <vprintf+0x27e>
+ 4d2:	e4a6                	sd	s1,72(sp)
+ 4d4:	fc4e                	sd	s3,56(sp)
+ 4d6:	f852                	sd	s4,48(sp)
+ 4d8:	f456                	sd	s5,40(sp)
+ 4da:	f05a                	sd	s6,32(sp)
+ 4dc:	ec5e                	sd	s7,24(sp)
+ 4de:	e862                	sd	s8,16(sp)
+ 4e0:	e466                	sd	s9,8(sp)
+ 4e2:	8b2a                	mv	s6,a0
+ 4e4:	8a2e                	mv	s4,a1
+ 4e6:	8bb2                	mv	s7,a2
+  state = 0;
+ 4e8:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 4ea:	4481                	li	s1,0
+ 4ec:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 4ee:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 4f2:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4f6:	06c00c93          	li	s9,108
+ 4fa:	a005                	j	51a <vprintf+0x5a>
+        putc(fd, c0);
+ 4fc:	85ca                	mv	a1,s2
+ 4fe:	855a                	mv	a0,s6
+ 500:	efbff0ef          	jal	3fa <putc>
+ 504:	a019                	j	50a <vprintf+0x4a>
+    } else if(state == '%'){
+ 506:	03598263          	beq	s3,s5,52a <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 50a:	2485                	addiw	s1,s1,1
+ 50c:	8726                	mv	a4,s1
+ 50e:	009a07b3          	add	a5,s4,s1
+ 512:	0007c903          	lbu	s2,0(a5)
+ 516:	20090c63          	beqz	s2,72e <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 51a:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 51e:	fe0994e3          	bnez	s3,506 <vprintf+0x46>
+      if(c0 == '%'){
+ 522:	fd579de3          	bne	a5,s5,4fc <vprintf+0x3c>
+        state = '%';
+ 526:	89be                	mv	s3,a5
+ 528:	b7cd                	j	50a <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 52a:	00ea06b3          	add	a3,s4,a4
+ 52e:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 532:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 534:	c681                	beqz	a3,53c <vprintf+0x7c>
+ 536:	9752                	add	a4,a4,s4
+ 538:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 53c:	03878f63          	beq	a5,s8,57a <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 540:	05978963          	beq	a5,s9,592 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 544:	07500713          	li	a4,117
+ 548:	0ee78363          	beq	a5,a4,62e <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 54c:	07800713          	li	a4,120
+ 550:	12e78563          	beq	a5,a4,67a <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 554:	07000713          	li	a4,112
+ 558:	14e78a63          	beq	a5,a4,6ac <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 55c:	07300713          	li	a4,115
+ 560:	18e78a63          	beq	a5,a4,6f4 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 564:	02500713          	li	a4,37
+ 568:	04e79563          	bne	a5,a4,5b2 <vprintf+0xf2>
+        putc(fd, '%');
+ 56c:	02500593          	li	a1,37
+ 570:	855a                	mv	a0,s6
+ 572:	e89ff0ef          	jal	3fa <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 576:	4981                	li	s3,0
+ 578:	bf49                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 57a:	008b8913          	addi	s2,s7,8
+ 57e:	4685                	li	a3,1
+ 580:	4629                	li	a2,10
+ 582:	000ba583          	lw	a1,0(s7)
+ 586:	855a                	mv	a0,s6
+ 588:	e91ff0ef          	jal	418 <printint>
+ 58c:	8bca                	mv	s7,s2
+      state = 0;
+ 58e:	4981                	li	s3,0
+ 590:	bfad                	j	50a <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 592:	06400793          	li	a5,100
+ 596:	02f68963          	beq	a3,a5,5c8 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 59a:	06c00793          	li	a5,108
+ 59e:	04f68263          	beq	a3,a5,5e2 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 5a2:	07500793          	li	a5,117
+ 5a6:	0af68063          	beq	a3,a5,646 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 5aa:	07800793          	li	a5,120
+ 5ae:	0ef68263          	beq	a3,a5,692 <vprintf+0x1d2>
+        putc(fd, '%');
+ 5b2:	02500593          	li	a1,37
+ 5b6:	855a                	mv	a0,s6
+ 5b8:	e43ff0ef          	jal	3fa <putc>
+        putc(fd, c0);
+ 5bc:	85ca                	mv	a1,s2
+ 5be:	855a                	mv	a0,s6
+ 5c0:	e3bff0ef          	jal	3fa <putc>
+      state = 0;
+ 5c4:	4981                	li	s3,0
+ 5c6:	b791                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5c8:	008b8913          	addi	s2,s7,8
+ 5cc:	4685                	li	a3,1
+ 5ce:	4629                	li	a2,10
+ 5d0:	000ba583          	lw	a1,0(s7)
+ 5d4:	855a                	mv	a0,s6
+ 5d6:	e43ff0ef          	jal	418 <printint>
+        i += 1;
+ 5da:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 5dc:	8bca                	mv	s7,s2
+      state = 0;
+ 5de:	4981                	li	s3,0
+        i += 1;
+ 5e0:	b72d                	j	50a <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 5e2:	06400793          	li	a5,100
+ 5e6:	02f60763          	beq	a2,a5,614 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 5ea:	07500793          	li	a5,117
+ 5ee:	06f60963          	beq	a2,a5,660 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 5f2:	07800793          	li	a5,120
+ 5f6:	faf61ee3          	bne	a2,a5,5b2 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5fa:	008b8913          	addi	s2,s7,8
+ 5fe:	4681                	li	a3,0
+ 600:	4641                	li	a2,16
+ 602:	000ba583          	lw	a1,0(s7)
+ 606:	855a                	mv	a0,s6
+ 608:	e11ff0ef          	jal	418 <printint>
+        i += 2;
+ 60c:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 60e:	8bca                	mv	s7,s2
+      state = 0;
+ 610:	4981                	li	s3,0
+        i += 2;
+ 612:	bde5                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 614:	008b8913          	addi	s2,s7,8
+ 618:	4685                	li	a3,1
+ 61a:	4629                	li	a2,10
+ 61c:	000ba583          	lw	a1,0(s7)
+ 620:	855a                	mv	a0,s6
+ 622:	df7ff0ef          	jal	418 <printint>
+        i += 2;
+ 626:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 628:	8bca                	mv	s7,s2
+      state = 0;
+ 62a:	4981                	li	s3,0
+        i += 2;
+ 62c:	bdf9                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 62e:	008b8913          	addi	s2,s7,8
+ 632:	4681                	li	a3,0
+ 634:	4629                	li	a2,10
+ 636:	000ba583          	lw	a1,0(s7)
+ 63a:	855a                	mv	a0,s6
+ 63c:	dddff0ef          	jal	418 <printint>
+ 640:	8bca                	mv	s7,s2
+      state = 0;
+ 642:	4981                	li	s3,0
+ 644:	b5d9                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 646:	008b8913          	addi	s2,s7,8
+ 64a:	4681                	li	a3,0
+ 64c:	4629                	li	a2,10
+ 64e:	000ba583          	lw	a1,0(s7)
+ 652:	855a                	mv	a0,s6
+ 654:	dc5ff0ef          	jal	418 <printint>
+        i += 1;
+ 658:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 65a:	8bca                	mv	s7,s2
+      state = 0;
+ 65c:	4981                	li	s3,0
+        i += 1;
+ 65e:	b575                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 660:	008b8913          	addi	s2,s7,8
+ 664:	4681                	li	a3,0
+ 666:	4629                	li	a2,10
+ 668:	000ba583          	lw	a1,0(s7)
+ 66c:	855a                	mv	a0,s6
+ 66e:	dabff0ef          	jal	418 <printint>
+        i += 2;
+ 672:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 674:	8bca                	mv	s7,s2
+      state = 0;
+ 676:	4981                	li	s3,0
+        i += 2;
+ 678:	bd49                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 67a:	008b8913          	addi	s2,s7,8
+ 67e:	4681                	li	a3,0
+ 680:	4641                	li	a2,16
+ 682:	000ba583          	lw	a1,0(s7)
+ 686:	855a                	mv	a0,s6
+ 688:	d91ff0ef          	jal	418 <printint>
+ 68c:	8bca                	mv	s7,s2
+      state = 0;
+ 68e:	4981                	li	s3,0
+ 690:	bdad                	j	50a <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 692:	008b8913          	addi	s2,s7,8
+ 696:	4681                	li	a3,0
+ 698:	4641                	li	a2,16
+ 69a:	000ba583          	lw	a1,0(s7)
+ 69e:	855a                	mv	a0,s6
+ 6a0:	d79ff0ef          	jal	418 <printint>
+        i += 1;
+ 6a4:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 6a6:	8bca                	mv	s7,s2
+      state = 0;
+ 6a8:	4981                	li	s3,0
+        i += 1;
+ 6aa:	b585                	j	50a <vprintf+0x4a>
+ 6ac:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 6ae:	008b8d13          	addi	s10,s7,8
+ 6b2:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 6b6:	03000593          	li	a1,48
+ 6ba:	855a                	mv	a0,s6
+ 6bc:	d3fff0ef          	jal	3fa <putc>
+  putc(fd, 'x');
+ 6c0:	07800593          	li	a1,120
+ 6c4:	855a                	mv	a0,s6
+ 6c6:	d35ff0ef          	jal	3fa <putc>
+ 6ca:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 6cc:	00000b97          	auipc	s7,0x0
+ 6d0:	29cb8b93          	addi	s7,s7,668 # 968 <digits>
+ 6d4:	03c9d793          	srli	a5,s3,0x3c
+ 6d8:	97de                	add	a5,a5,s7
+ 6da:	0007c583          	lbu	a1,0(a5)
+ 6de:	855a                	mv	a0,s6
+ 6e0:	d1bff0ef          	jal	3fa <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 6e4:	0992                	slli	s3,s3,0x4
+ 6e6:	397d                	addiw	s2,s2,-1
+ 6e8:	fe0916e3          	bnez	s2,6d4 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 6ec:	8bea                	mv	s7,s10
+      state = 0;
+ 6ee:	4981                	li	s3,0
+ 6f0:	6d02                	ld	s10,0(sp)
+ 6f2:	bd21                	j	50a <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 6f4:	008b8993          	addi	s3,s7,8
+ 6f8:	000bb903          	ld	s2,0(s7)
+ 6fc:	00090f63          	beqz	s2,71a <vprintf+0x25a>
+        for(; *s; s++)
+ 700:	00094583          	lbu	a1,0(s2)
+ 704:	c195                	beqz	a1,728 <vprintf+0x268>
+          putc(fd, *s);
+ 706:	855a                	mv	a0,s6
+ 708:	cf3ff0ef          	jal	3fa <putc>
+        for(; *s; s++)
+ 70c:	0905                	addi	s2,s2,1
+ 70e:	00094583          	lbu	a1,0(s2)
+ 712:	f9f5                	bnez	a1,706 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 714:	8bce                	mv	s7,s3
+      state = 0;
+ 716:	4981                	li	s3,0
+ 718:	bbcd                	j	50a <vprintf+0x4a>
+          s = "(null)";
+ 71a:	00000917          	auipc	s2,0x0
+ 71e:	24690913          	addi	s2,s2,582 # 960 <malloc+0x13a>
+        for(; *s; s++)
+ 722:	02800593          	li	a1,40
+ 726:	b7c5                	j	706 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 728:	8bce                	mv	s7,s3
+      state = 0;
+ 72a:	4981                	li	s3,0
+ 72c:	bbf9                	j	50a <vprintf+0x4a>
+ 72e:	64a6                	ld	s1,72(sp)
+ 730:	79e2                	ld	s3,56(sp)
+ 732:	7a42                	ld	s4,48(sp)
+ 734:	7aa2                	ld	s5,40(sp)
+ 736:	7b02                	ld	s6,32(sp)
+ 738:	6be2                	ld	s7,24(sp)
+ 73a:	6c42                	ld	s8,16(sp)
+ 73c:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 73e:	60e6                	ld	ra,88(sp)
+ 740:	6446                	ld	s0,80(sp)
+ 742:	6906                	ld	s2,64(sp)
+ 744:	6125                	addi	sp,sp,96
+ 746:	8082                	ret
+
+0000000000000748 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 748:	715d                	addi	sp,sp,-80
+ 74a:	ec06                	sd	ra,24(sp)
+ 74c:	e822                	sd	s0,16(sp)
+ 74e:	1000                	addi	s0,sp,32
+ 750:	e010                	sd	a2,0(s0)
+ 752:	e414                	sd	a3,8(s0)
+ 754:	e818                	sd	a4,16(s0)
+ 756:	ec1c                	sd	a5,24(s0)
+ 758:	03043023          	sd	a6,32(s0)
+ 75c:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 760:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 764:	8622                	mv	a2,s0
+ 766:	d5bff0ef          	jal	4c0 <vprintf>
+}
+ 76a:	60e2                	ld	ra,24(sp)
+ 76c:	6442                	ld	s0,16(sp)
+ 76e:	6161                	addi	sp,sp,80
+ 770:	8082                	ret
+
+0000000000000772 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 772:	711d                	addi	sp,sp,-96
+ 774:	ec06                	sd	ra,24(sp)
+ 776:	e822                	sd	s0,16(sp)
+ 778:	1000                	addi	s0,sp,32
+ 77a:	e40c                	sd	a1,8(s0)
+ 77c:	e810                	sd	a2,16(s0)
+ 77e:	ec14                	sd	a3,24(s0)
+ 780:	f018                	sd	a4,32(s0)
+ 782:	f41c                	sd	a5,40(s0)
+ 784:	03043823          	sd	a6,48(s0)
+ 788:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 78c:	00840613          	addi	a2,s0,8
+ 790:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 794:	85aa                	mv	a1,a0
+ 796:	4505                	li	a0,1
+ 798:	d29ff0ef          	jal	4c0 <vprintf>
+}
+ 79c:	60e2                	ld	ra,24(sp)
+ 79e:	6442                	ld	s0,16(sp)
+ 7a0:	6125                	addi	sp,sp,96
+ 7a2:	8082                	ret
+
+00000000000007a4 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 7a4:	1141                	addi	sp,sp,-16
+ 7a6:	e422                	sd	s0,8(sp)
+ 7a8:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 7aa:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7ae:	00001797          	auipc	a5,0x1
+ 7b2:	8527b783          	ld	a5,-1966(a5) # 1000 <freep>
+ 7b6:	a02d                	j	7e0 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 7b8:	4618                	lw	a4,8(a2)
+ 7ba:	9f2d                	addw	a4,a4,a1
+ 7bc:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 7c0:	6398                	ld	a4,0(a5)
+ 7c2:	6310                	ld	a2,0(a4)
+ 7c4:	a83d                	j	802 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 7c6:	ff852703          	lw	a4,-8(a0)
+ 7ca:	9f31                	addw	a4,a4,a2
+ 7cc:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 7ce:	ff053683          	ld	a3,-16(a0)
+ 7d2:	a091                	j	816 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7d4:	6398                	ld	a4,0(a5)
+ 7d6:	00e7e463          	bltu	a5,a4,7de <free+0x3a>
+ 7da:	00e6ea63          	bltu	a3,a4,7ee <free+0x4a>
+{
+ 7de:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 7e0:	fed7fae3          	bgeu	a5,a3,7d4 <free+0x30>
+ 7e4:	6398                	ld	a4,0(a5)
+ 7e6:	00e6e463          	bltu	a3,a4,7ee <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 7ea:	fee7eae3          	bltu	a5,a4,7de <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 7ee:	ff852583          	lw	a1,-8(a0)
+ 7f2:	6390                	ld	a2,0(a5)
+ 7f4:	02059813          	slli	a6,a1,0x20
+ 7f8:	01c85713          	srli	a4,a6,0x1c
+ 7fc:	9736                	add	a4,a4,a3
+ 7fe:	fae60de3          	beq	a2,a4,7b8 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 802:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 806:	4790                	lw	a2,8(a5)
+ 808:	02061593          	slli	a1,a2,0x20
+ 80c:	01c5d713          	srli	a4,a1,0x1c
+ 810:	973e                	add	a4,a4,a5
+ 812:	fae68ae3          	beq	a3,a4,7c6 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 816:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 818:	00000717          	auipc	a4,0x0
+ 81c:	7ef73423          	sd	a5,2024(a4) # 1000 <freep>
+}
+ 820:	6422                	ld	s0,8(sp)
+ 822:	0141                	addi	sp,sp,16
+ 824:	8082                	ret
+
+0000000000000826 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 826:	7139                	addi	sp,sp,-64
+ 828:	fc06                	sd	ra,56(sp)
+ 82a:	f822                	sd	s0,48(sp)
+ 82c:	f426                	sd	s1,40(sp)
+ 82e:	ec4e                	sd	s3,24(sp)
+ 830:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 832:	02051493          	slli	s1,a0,0x20
+ 836:	9081                	srli	s1,s1,0x20
+ 838:	04bd                	addi	s1,s1,15
+ 83a:	8091                	srli	s1,s1,0x4
+ 83c:	0014899b          	addiw	s3,s1,1
+ 840:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 842:	00000517          	auipc	a0,0x0
+ 846:	7be53503          	ld	a0,1982(a0) # 1000 <freep>
+ 84a:	c915                	beqz	a0,87e <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 84c:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 84e:	4798                	lw	a4,8(a5)
+ 850:	08977a63          	bgeu	a4,s1,8e4 <malloc+0xbe>
+ 854:	f04a                	sd	s2,32(sp)
+ 856:	e852                	sd	s4,16(sp)
+ 858:	e456                	sd	s5,8(sp)
+ 85a:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 85c:	8a4e                	mv	s4,s3
+ 85e:	0009871b          	sext.w	a4,s3
+ 862:	6685                	lui	a3,0x1
+ 864:	00d77363          	bgeu	a4,a3,86a <malloc+0x44>
+ 868:	6a05                	lui	s4,0x1
+ 86a:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 86e:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 872:	00000917          	auipc	s2,0x0
+ 876:	78e90913          	addi	s2,s2,1934 # 1000 <freep>
+  if(p == (char*)-1)
+ 87a:	5afd                	li	s5,-1
+ 87c:	a081                	j	8bc <malloc+0x96>
+ 87e:	f04a                	sd	s2,32(sp)
+ 880:	e852                	sd	s4,16(sp)
+ 882:	e456                	sd	s5,8(sp)
+ 884:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 886:	00000797          	auipc	a5,0x0
+ 88a:	78a78793          	addi	a5,a5,1930 # 1010 <base>
+ 88e:	00000717          	auipc	a4,0x0
+ 892:	76f73923          	sd	a5,1906(a4) # 1000 <freep>
+ 896:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 898:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 89c:	b7c1                	j	85c <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 89e:	6398                	ld	a4,0(a5)
+ 8a0:	e118                	sd	a4,0(a0)
+ 8a2:	a8a9                	j	8fc <malloc+0xd6>
+  hp->s.size = nu;
+ 8a4:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 8a8:	0541                	addi	a0,a0,16
+ 8aa:	efbff0ef          	jal	7a4 <free>
+  return freep;
+ 8ae:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 8b2:	c12d                	beqz	a0,914 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8b4:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 8b6:	4798                	lw	a4,8(a5)
+ 8b8:	02977263          	bgeu	a4,s1,8dc <malloc+0xb6>
+    if(p == freep)
+ 8bc:	00093703          	ld	a4,0(s2)
+ 8c0:	853e                	mv	a0,a5
+ 8c2:	fef719e3          	bne	a4,a5,8b4 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 8c6:	8552                	mv	a0,s4
+ 8c8:	b03ff0ef          	jal	3ca <sbrk>
+  if(p == (char*)-1)
+ 8cc:	fd551ce3          	bne	a0,s5,8a4 <malloc+0x7e>
+        return 0;
+ 8d0:	4501                	li	a0,0
+ 8d2:	7902                	ld	s2,32(sp)
+ 8d4:	6a42                	ld	s4,16(sp)
+ 8d6:	6aa2                	ld	s5,8(sp)
+ 8d8:	6b02                	ld	s6,0(sp)
+ 8da:	a03d                	j	908 <malloc+0xe2>
+ 8dc:	7902                	ld	s2,32(sp)
+ 8de:	6a42                	ld	s4,16(sp)
+ 8e0:	6aa2                	ld	s5,8(sp)
+ 8e2:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 8e4:	fae48de3          	beq	s1,a4,89e <malloc+0x78>
+        p->s.size -= nunits;
+ 8e8:	4137073b          	subw	a4,a4,s3
+ 8ec:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 8ee:	02071693          	slli	a3,a4,0x20
+ 8f2:	01c6d713          	srli	a4,a3,0x1c
+ 8f6:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 8f8:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 8fc:	00000717          	auipc	a4,0x0
+ 900:	70a73223          	sd	a0,1796(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 904:	01078513          	addi	a0,a5,16
+  }
+}
+ 908:	70e2                	ld	ra,56(sp)
+ 90a:	7442                	ld	s0,48(sp)
+ 90c:	74a2                	ld	s1,40(sp)
+ 90e:	69e2                	ld	s3,24(sp)
+ 910:	6121                	addi	sp,sp,64
+ 912:	8082                	ret
+ 914:	7902                	ld	s2,32(sp)
+ 916:	6a42                	ld	s4,16(sp)
+ 918:	6aa2                	ld	s5,8(sp)
+ 91a:	6b02                	ld	s6,0(sp)
+ 91c:	b7f5                	j	908 <malloc+0xe2>
diff --git a/user/stressfs.c b/user/stressfs.c
new file mode 100644
index 0000000..247a7a5
--- /dev/null
+++ b/user/stressfs.c
@@ -0,0 +1,49 @@
+// Demonstrate that moving the "acquire" in iderw after the loop that
+// appends to the idequeue results in a race.
+
+// For this to work, you should also add a spin within iderw's
+// idequeue traversal loop.  Adding the following demonstrated a panic
+// after about 5 runs of stressfs in QEMU on a 2.1GHz CPU:
+//    for (i = 0; i < 40000; i++)
+//      asm volatile("");
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+  char path[] = "stressfs0";
+  char data[512];
+
+  printf("stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+
+  for(i = 0; i < 4; i++)
+    if(fork() > 0)
+      break;
+
+  printf("write %d\n", i);
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  for(i = 0; i < 20; i++)
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  close(fd);
+
+  printf("read\n");
+
+  fd = open(path, O_RDONLY);
+  for (i = 0; i < 20; i++)
+    read(fd, data, sizeof(data));
+  close(fd);
+
+  wait(0);
+
+  exit(0);
+}
diff --git a/user/stressfs.d b/user/stressfs.d
new file mode 100644
index 0000000..027fba3
--- /dev/null
+++ b/user/stressfs.d
@@ -0,0 +1,2 @@
+user/stressfs.o: user/stressfs.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/fs.h kernel/fcntl.h
diff --git a/user/stressfs.o b/user/stressfs.o
new file mode 100644
index 0000000..09bc96e
Binary files /dev/null and b/user/stressfs.o differ
diff --git a/user/stressfs.sym b/user/stressfs.sym
new file mode 100644
index 0000000..89438ba
--- /dev/null
+++ b/user/stressfs.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+0000000000000920 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 stressfs.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+00000000000003fa putc
+0000000000000418 printint
+0000000000000968 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+00000000000000ea strcpy
+0000000000000772 printf
+0000000000000294 memmove
+000000000000038a mknod
+00000000000003ea trace
+00000000000001a2 gets
+00000000000003c2 getpid
+00000000000003e2 hello
+0000000000000326 memcpy
+0000000000000826 malloc
+00000000000003d2 sleep
+00000000000003f2 sysinfo
+0000000000000352 pipe
+0000000000000362 write
+000000000000039a fstat
+0000000000000748 fprintf
+0000000000000372 kill
+00000000000004c0 vprintf
+00000000000003b2 chdir
+000000000000037a exec
+000000000000034a wait
+000000000000035a read
+0000000000000392 unlink
+00000000000002ec memcmp
+000000000000033a fork
+00000000000003ca sbrk
+00000000000003da uptime
+000000000000015c memset
+0000000000000000 main
+0000000000000106 strcmp
+00000000000003ba dup
+0000000000000212 stat
+00000000000003a2 link
+0000000000000342 exit
+00000000000000d8 start
+000000000000024c atoi
+0000000000000132 strlen
+0000000000000382 open
+000000000000017e strchr
+00000000000003aa mkdir
+000000000000036a close
+00000000000007a4 free
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..ab8d6d5
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,19 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/sysinfo.h"
+
+int main() {
+    struct sysinfo info;
+    
+    if (sysinfo(&info) < 0) {
+        printf("sysinfotest: sysinfo failed\n");
+        exit(1);
+    }
+
+    printf("Free memory: %ld bytes\n", info.freemem);
+    printf("Processes: %ld\n", info.nproc);
+    printf("Open files: %ld\n", info.nopenfiles);
+    
+    exit(0);
+}
diff --git a/user/testhello.c b/user/testhello.c
new file mode 100644
index 0000000..9b37b84
--- /dev/null
+++ b/user/testhello.c
@@ -0,0 +1,6 @@
+#include "user.h" 
+ 
+int main() { 
+    hello(); 
+    exit(0); 
+} 
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..934653e
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,29 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s mask command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  nargv[argc-2] = 0;
+  exec(nargv[0], nargv);
+  printf("trace: exec failed\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
new file mode 100644
index 0000000..0064846
--- /dev/null
+++ b/user/ulib.c
@@ -0,0 +1,147 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  extern int main();
+  main();
+  exit(0);
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    ;
+  return os;
+}
+
+int
+strcmp(const char *p, const char *q)
+{
+  while(*p && *p == *q)
+    p++, q++;
+  return (uchar)*p - (uchar)*q;
+}
+
+uint
+strlen(const char *s)
+{
+  int n;
+
+  for(n = 0; s[n]; n++)
+    ;
+  return n;
+}
+
+void*
+memset(void *dst, int c, uint n)
+{
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    cdst[i] = c;
+  }
+  return dst;
+}
+
+char*
+strchr(const char *s, char c)
+{
+  for(; *s; s++)
+    if(*s == c)
+      return (char*)s;
+  return 0;
+}
+
+char*
+gets(char *buf, int max)
+{
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+      break;
+  }
+  buf[i] = '\0';
+  return buf;
+}
+
+int
+stat(const char *n, struct stat *st)
+{
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+  if(fd < 0)
+    return -1;
+  r = fstat(fd, st);
+  close(fd);
+  return r;
+}
+
+int
+atoi(const char *s)
+{
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    n = n*10 + *s++ - '0';
+  return n;
+}
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+    while(n-- > 0)
+      *dst++ = *src++;
+  } else {
+    dst += n;
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+    if (*p1 != *p2) {
+      return *p1 - *p2;
+    }
+    p1++;
+    p2++;
+  }
+  return 0;
+}
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+  return memmove(dst, src, n);
+}
diff --git a/user/ulib.d b/user/ulib.d
new file mode 100644
index 0000000..66a6059
--- /dev/null
+++ b/user/ulib.d
@@ -0,0 +1,2 @@
+user/ulib.o: user/ulib.c kernel/types.h kernel/stat.h kernel/fcntl.h \
+ user/user.h
diff --git a/user/ulib.o b/user/ulib.o
new file mode 100644
index 0000000..f3e08c6
Binary files /dev/null and b/user/ulib.o differ
diff --git a/user/umalloc.c b/user/umalloc.c
new file mode 100644
index 0000000..2092a32
--- /dev/null
+++ b/user/umalloc.c
@@ -0,0 +1,90 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+// Memory allocator by Kernighan and Ritchie,
+// The C programming Language, 2nd ed.  Section 8.7.
+
+typedef long Align;
+
+union header {
+  struct {
+    union header *ptr;
+    uint size;
+  } s;
+  Align x;
+};
+
+typedef union header Header;
+
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+
+static Header*
+morecore(uint nu)
+{
+  char *p;
+  Header *hp;
+
+  if(nu < 4096)
+    nu = 4096;
+  p = sbrk(nu * sizeof(Header));
+  if(p == (char*)-1)
+    return 0;
+  hp = (Header*)p;
+  hp->s.size = nu;
+  free((void*)(hp + 1));
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+  if((prevp = freep) == 0){
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    if(p->s.size >= nunits){
+      if(p->s.size == nunits)
+        prevp->s.ptr = p->s.ptr;
+      else {
+        p->s.size -= nunits;
+        p += p->s.size;
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+      if((p = morecore(nunits)) == 0)
+        return 0;
+  }
+}
diff --git a/user/umalloc.d b/user/umalloc.d
new file mode 100644
index 0000000..b03b5c2
--- /dev/null
+++ b/user/umalloc.d
@@ -0,0 +1,2 @@
+user/umalloc.o: user/umalloc.c kernel/types.h kernel/stat.h user/user.h \
+ kernel/param.h
diff --git a/user/umalloc.o b/user/umalloc.o
new file mode 100644
index 0000000..0cef5d8
Binary files /dev/null and b/user/umalloc.o differ
diff --git a/user/user.h b/user/user.h
new file mode 100644
index 0000000..38d5b0c
--- /dev/null
+++ b/user/user.h
@@ -0,0 +1,49 @@
+#include "kernel/types.h"
+struct stat;
+
+// system calls
+int fork(void);
+int exit(int) __attribute__((noreturn));
+int wait(int*);
+int pipe(int*);
+int write(int, const void*, int);
+int read(int, void*, int);
+int close(int);
+int kill(int);
+int exec(const char*, char**);
+int open(const char*, int);
+int mknod(const char*, short, short);
+int unlink(const char*);
+int fstat(int fd, struct stat*);
+int link(const char*, const char*);
+int mkdir(const char*);
+int chdir(const char*);
+int dup(int);
+int getpid(void);
+char* sbrk(int);
+int sleep(int);
+int uptime(void);
+int hello(void);
+int trace(int);
+
+// ulib.c
+int stat(const char*, struct stat*);
+char* strcpy(char*, const char*);
+void *memmove(void*, const void*, int);
+char* strchr(const char*, char c);
+int strcmp(const char*, const char*);
+void fprintf(int, const char*, ...) __attribute__ ((format (printf, 2, 3)));
+void printf(const char*, ...) __attribute__ ((format (printf, 1, 2)));
+char* gets(char*, int max);
+uint strlen(const char*);
+void* memset(void*, int, uint);
+int atoi(const char*);
+int memcmp(const void *, const void *, uint);
+void *memcpy(void *, const void *, uint);
+
+// umalloc.c
+void* malloc(uint);
+void free(void*);
+
+struct sysinfo;  // Forward declaration
+int sysinfo(struct sysinfo *);  // Declare the system call
diff --git a/user/user.ld b/user/user.ld
new file mode 100644
index 0000000..3da93e0
--- /dev/null
+++ b/user/user.ld
@@ -0,0 +1,39 @@
+OUTPUT_ARCH( "riscv" )
+
+SECTIONS
+{
+ . = 0x0;
+ 
+  .text : {
+    *(.text .text.*)
+  }
+
+  .rodata : {
+    . = ALIGN(16);
+    *(.srodata .srodata.*) /* do not need to distinguish this from .rodata */
+    . = ALIGN(16);
+    *(.rodata .rodata.*)
+  }
+
+  .eh_frame : {
+       *(.eh_frame)
+       *(.eh_frame.*)
+   }
+
+  . = ALIGN(0x1000);
+  .data : {
+    . = ALIGN(16);
+    *(.sdata .sdata.*) /* do not need to distinguish this from .data */
+    . = ALIGN(16);
+    *(.data .data.*)
+  }
+
+  .bss : {
+    . = ALIGN(16);
+    *(.sbss .sbss.*) /* do not need to distinguish this from .bss */
+    . = ALIGN(16);
+    *(.bss .bss.*)
+  }
+
+  PROVIDE(end = .);
+}
diff --git a/user/usertests.asm b/user/usertests.asm
new file mode 100644
index 0000000..8ee3885
--- /dev/null
+++ b/user/usertests.asm
@@ -0,0 +1,9604 @@
+
+user/_usertests:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <copyinstr1>:
+}
+
+// what if you pass ridiculous string pointers to system calls?
+void
+copyinstr1(char *s)
+{
+       0:	711d                	addi	sp,sp,-96
+       2:	ec86                	sd	ra,88(sp)
+       4:	e8a2                	sd	s0,80(sp)
+       6:	e4a6                	sd	s1,72(sp)
+       8:	e0ca                	sd	s2,64(sp)
+       a:	fc4e                	sd	s3,56(sp)
+       c:	1080                	addi	s0,sp,96
+  uint64 addrs[] = { 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+       e:	00007797          	auipc	a5,0x7
+      12:	3ea78793          	addi	a5,a5,1002 # 73f8 <malloc+0x2494>
+      16:	638c                	ld	a1,0(a5)
+      18:	6790                	ld	a2,8(a5)
+      1a:	6b94                	ld	a3,16(a5)
+      1c:	6f98                	ld	a4,24(a5)
+      1e:	739c                	ld	a5,32(a5)
+      20:	fab43423          	sd	a1,-88(s0)
+      24:	fac43823          	sd	a2,-80(s0)
+      28:	fad43c23          	sd	a3,-72(s0)
+      2c:	fce43023          	sd	a4,-64(s0)
+      30:	fcf43423          	sd	a5,-56(s0)
+                     0xffffffffffffffff };
+
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+      34:	fa840493          	addi	s1,s0,-88
+      38:	fd040993          	addi	s3,s0,-48
+    uint64 addr = addrs[ai];
+
+    int fd = open((char *)addr, O_CREATE|O_WRONLY);
+      3c:	0004b903          	ld	s2,0(s1)
+      40:	20100593          	li	a1,513
+      44:	854a                	mv	a0,s2
+      46:	27b040ef          	jal	4ac0 <open>
+    if(fd >= 0){
+      4a:	00055c63          	bgez	a0,62 <copyinstr1+0x62>
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+      4e:	04a1                	addi	s1,s1,8
+      50:	ff3496e3          	bne	s1,s3,3c <copyinstr1+0x3c>
+      printf("open(%p) returned %d, not -1\n", (void*)addr, fd);
+      exit(1);
+    }
+  }
+}
+      54:	60e6                	ld	ra,88(sp)
+      56:	6446                	ld	s0,80(sp)
+      58:	64a6                	ld	s1,72(sp)
+      5a:	6906                	ld	s2,64(sp)
+      5c:	79e2                	ld	s3,56(sp)
+      5e:	6125                	addi	sp,sp,96
+      60:	8082                	ret
+      printf("open(%p) returned %d, not -1\n", (void*)addr, fd);
+      62:	862a                	mv	a2,a0
+      64:	85ca                	mv	a1,s2
+      66:	00005517          	auipc	a0,0x5
+      6a:	ffa50513          	addi	a0,a0,-6 # 5060 <malloc+0xfc>
+      6e:	643040ef          	jal	4eb0 <printf>
+      exit(1);
+      72:	4505                	li	a0,1
+      74:	20d040ef          	jal	4a80 <exit>
+
+0000000000000078 <bsstest>:
+void
+bsstest(char *s)
+{
+  int i;
+
+  for(i = 0; i < sizeof(uninit); i++){
+      78:	00009797          	auipc	a5,0x9
+      7c:	4f078793          	addi	a5,a5,1264 # 9568 <uninit>
+      80:	0000c697          	auipc	a3,0xc
+      84:	bf868693          	addi	a3,a3,-1032 # bc78 <buf>
+    if(uninit[i] != '\0'){
+      88:	0007c703          	lbu	a4,0(a5)
+      8c:	e709                	bnez	a4,96 <bsstest+0x1e>
+  for(i = 0; i < sizeof(uninit); i++){
+      8e:	0785                	addi	a5,a5,1
+      90:	fed79ce3          	bne	a5,a3,88 <bsstest+0x10>
+      94:	8082                	ret
+{
+      96:	1141                	addi	sp,sp,-16
+      98:	e406                	sd	ra,8(sp)
+      9a:	e022                	sd	s0,0(sp)
+      9c:	0800                	addi	s0,sp,16
+      printf("%s: bss test failed\n", s);
+      9e:	85aa                	mv	a1,a0
+      a0:	00005517          	auipc	a0,0x5
+      a4:	fe050513          	addi	a0,a0,-32 # 5080 <malloc+0x11c>
+      a8:	609040ef          	jal	4eb0 <printf>
+      exit(1);
+      ac:	4505                	li	a0,1
+      ae:	1d3040ef          	jal	4a80 <exit>
+
+00000000000000b2 <opentest>:
+{
+      b2:	1101                	addi	sp,sp,-32
+      b4:	ec06                	sd	ra,24(sp)
+      b6:	e822                	sd	s0,16(sp)
+      b8:	e426                	sd	s1,8(sp)
+      ba:	1000                	addi	s0,sp,32
+      bc:	84aa                	mv	s1,a0
+  fd = open("echo", 0);
+      be:	4581                	li	a1,0
+      c0:	00005517          	auipc	a0,0x5
+      c4:	fd850513          	addi	a0,a0,-40 # 5098 <malloc+0x134>
+      c8:	1f9040ef          	jal	4ac0 <open>
+  if(fd < 0){
+      cc:	02054263          	bltz	a0,f0 <opentest+0x3e>
+  close(fd);
+      d0:	1d9040ef          	jal	4aa8 <close>
+  fd = open("doesnotexist", 0);
+      d4:	4581                	li	a1,0
+      d6:	00005517          	auipc	a0,0x5
+      da:	fe250513          	addi	a0,a0,-30 # 50b8 <malloc+0x154>
+      de:	1e3040ef          	jal	4ac0 <open>
+  if(fd >= 0){
+      e2:	02055163          	bgez	a0,104 <opentest+0x52>
+}
+      e6:	60e2                	ld	ra,24(sp)
+      e8:	6442                	ld	s0,16(sp)
+      ea:	64a2                	ld	s1,8(sp)
+      ec:	6105                	addi	sp,sp,32
+      ee:	8082                	ret
+    printf("%s: open echo failed!\n", s);
+      f0:	85a6                	mv	a1,s1
+      f2:	00005517          	auipc	a0,0x5
+      f6:	fae50513          	addi	a0,a0,-82 # 50a0 <malloc+0x13c>
+      fa:	5b7040ef          	jal	4eb0 <printf>
+    exit(1);
+      fe:	4505                	li	a0,1
+     100:	181040ef          	jal	4a80 <exit>
+    printf("%s: open doesnotexist succeeded!\n", s);
+     104:	85a6                	mv	a1,s1
+     106:	00005517          	auipc	a0,0x5
+     10a:	fc250513          	addi	a0,a0,-62 # 50c8 <malloc+0x164>
+     10e:	5a3040ef          	jal	4eb0 <printf>
+    exit(1);
+     112:	4505                	li	a0,1
+     114:	16d040ef          	jal	4a80 <exit>
+
+0000000000000118 <truncate2>:
+{
+     118:	7179                	addi	sp,sp,-48
+     11a:	f406                	sd	ra,40(sp)
+     11c:	f022                	sd	s0,32(sp)
+     11e:	ec26                	sd	s1,24(sp)
+     120:	e84a                	sd	s2,16(sp)
+     122:	e44e                	sd	s3,8(sp)
+     124:	1800                	addi	s0,sp,48
+     126:	89aa                	mv	s3,a0
+  unlink("truncfile");
+     128:	00005517          	auipc	a0,0x5
+     12c:	fc850513          	addi	a0,a0,-56 # 50f0 <malloc+0x18c>
+     130:	1a1040ef          	jal	4ad0 <unlink>
+  int fd1 = open("truncfile", O_CREATE|O_TRUNC|O_WRONLY);
+     134:	60100593          	li	a1,1537
+     138:	00005517          	auipc	a0,0x5
+     13c:	fb850513          	addi	a0,a0,-72 # 50f0 <malloc+0x18c>
+     140:	181040ef          	jal	4ac0 <open>
+     144:	84aa                	mv	s1,a0
+  write(fd1, "abcd", 4);
+     146:	4611                	li	a2,4
+     148:	00005597          	auipc	a1,0x5
+     14c:	fb858593          	addi	a1,a1,-72 # 5100 <malloc+0x19c>
+     150:	151040ef          	jal	4aa0 <write>
+  int fd2 = open("truncfile", O_TRUNC|O_WRONLY);
+     154:	40100593          	li	a1,1025
+     158:	00005517          	auipc	a0,0x5
+     15c:	f9850513          	addi	a0,a0,-104 # 50f0 <malloc+0x18c>
+     160:	161040ef          	jal	4ac0 <open>
+     164:	892a                	mv	s2,a0
+  int n = write(fd1, "x", 1);
+     166:	4605                	li	a2,1
+     168:	00005597          	auipc	a1,0x5
+     16c:	fa058593          	addi	a1,a1,-96 # 5108 <malloc+0x1a4>
+     170:	8526                	mv	a0,s1
+     172:	12f040ef          	jal	4aa0 <write>
+  if(n != -1){
+     176:	57fd                	li	a5,-1
+     178:	02f51563          	bne	a0,a5,1a2 <truncate2+0x8a>
+  unlink("truncfile");
+     17c:	00005517          	auipc	a0,0x5
+     180:	f7450513          	addi	a0,a0,-140 # 50f0 <malloc+0x18c>
+     184:	14d040ef          	jal	4ad0 <unlink>
+  close(fd1);
+     188:	8526                	mv	a0,s1
+     18a:	11f040ef          	jal	4aa8 <close>
+  close(fd2);
+     18e:	854a                	mv	a0,s2
+     190:	119040ef          	jal	4aa8 <close>
+}
+     194:	70a2                	ld	ra,40(sp)
+     196:	7402                	ld	s0,32(sp)
+     198:	64e2                	ld	s1,24(sp)
+     19a:	6942                	ld	s2,16(sp)
+     19c:	69a2                	ld	s3,8(sp)
+     19e:	6145                	addi	sp,sp,48
+     1a0:	8082                	ret
+    printf("%s: write returned %d, expected -1\n", s, n);
+     1a2:	862a                	mv	a2,a0
+     1a4:	85ce                	mv	a1,s3
+     1a6:	00005517          	auipc	a0,0x5
+     1aa:	f6a50513          	addi	a0,a0,-150 # 5110 <malloc+0x1ac>
+     1ae:	503040ef          	jal	4eb0 <printf>
+    exit(1);
+     1b2:	4505                	li	a0,1
+     1b4:	0cd040ef          	jal	4a80 <exit>
+
+00000000000001b8 <createtest>:
+{
+     1b8:	7179                	addi	sp,sp,-48
+     1ba:	f406                	sd	ra,40(sp)
+     1bc:	f022                	sd	s0,32(sp)
+     1be:	ec26                	sd	s1,24(sp)
+     1c0:	e84a                	sd	s2,16(sp)
+     1c2:	1800                	addi	s0,sp,48
+  name[0] = 'a';
+     1c4:	06100793          	li	a5,97
+     1c8:	fcf40c23          	sb	a5,-40(s0)
+  name[2] = '\0';
+     1cc:	fc040d23          	sb	zero,-38(s0)
+     1d0:	03000493          	li	s1,48
+  for(i = 0; i < N; i++){
+     1d4:	06400913          	li	s2,100
+    name[1] = '0' + i;
+     1d8:	fc940ca3          	sb	s1,-39(s0)
+    fd = open(name, O_CREATE|O_RDWR);
+     1dc:	20200593          	li	a1,514
+     1e0:	fd840513          	addi	a0,s0,-40
+     1e4:	0dd040ef          	jal	4ac0 <open>
+    close(fd);
+     1e8:	0c1040ef          	jal	4aa8 <close>
+  for(i = 0; i < N; i++){
+     1ec:	2485                	addiw	s1,s1,1
+     1ee:	0ff4f493          	zext.b	s1,s1
+     1f2:	ff2493e3          	bne	s1,s2,1d8 <createtest+0x20>
+  name[0] = 'a';
+     1f6:	06100793          	li	a5,97
+     1fa:	fcf40c23          	sb	a5,-40(s0)
+  name[2] = '\0';
+     1fe:	fc040d23          	sb	zero,-38(s0)
+     202:	03000493          	li	s1,48
+  for(i = 0; i < N; i++){
+     206:	06400913          	li	s2,100
+    name[1] = '0' + i;
+     20a:	fc940ca3          	sb	s1,-39(s0)
+    unlink(name);
+     20e:	fd840513          	addi	a0,s0,-40
+     212:	0bf040ef          	jal	4ad0 <unlink>
+  for(i = 0; i < N; i++){
+     216:	2485                	addiw	s1,s1,1
+     218:	0ff4f493          	zext.b	s1,s1
+     21c:	ff2497e3          	bne	s1,s2,20a <createtest+0x52>
+}
+     220:	70a2                	ld	ra,40(sp)
+     222:	7402                	ld	s0,32(sp)
+     224:	64e2                	ld	s1,24(sp)
+     226:	6942                	ld	s2,16(sp)
+     228:	6145                	addi	sp,sp,48
+     22a:	8082                	ret
+
+000000000000022c <bigwrite>:
+{
+     22c:	715d                	addi	sp,sp,-80
+     22e:	e486                	sd	ra,72(sp)
+     230:	e0a2                	sd	s0,64(sp)
+     232:	fc26                	sd	s1,56(sp)
+     234:	f84a                	sd	s2,48(sp)
+     236:	f44e                	sd	s3,40(sp)
+     238:	f052                	sd	s4,32(sp)
+     23a:	ec56                	sd	s5,24(sp)
+     23c:	e85a                	sd	s6,16(sp)
+     23e:	e45e                	sd	s7,8(sp)
+     240:	0880                	addi	s0,sp,80
+     242:	8baa                	mv	s7,a0
+  unlink("bigwrite");
+     244:	00005517          	auipc	a0,0x5
+     248:	ef450513          	addi	a0,a0,-268 # 5138 <malloc+0x1d4>
+     24c:	085040ef          	jal	4ad0 <unlink>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     250:	1f300493          	li	s1,499
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+     254:	00005a97          	auipc	s5,0x5
+     258:	ee4a8a93          	addi	s5,s5,-284 # 5138 <malloc+0x1d4>
+      int cc = write(fd, buf, sz);
+     25c:	0000ca17          	auipc	s4,0xc
+     260:	a1ca0a13          	addi	s4,s4,-1508 # bc78 <buf>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     264:	6b0d                	lui	s6,0x3
+     266:	1c9b0b13          	addi	s6,s6,457 # 31c9 <subdir+0x5ed>
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+     26a:	20200593          	li	a1,514
+     26e:	8556                	mv	a0,s5
+     270:	051040ef          	jal	4ac0 <open>
+     274:	892a                	mv	s2,a0
+    if(fd < 0){
+     276:	04054563          	bltz	a0,2c0 <bigwrite+0x94>
+      int cc = write(fd, buf, sz);
+     27a:	8626                	mv	a2,s1
+     27c:	85d2                	mv	a1,s4
+     27e:	023040ef          	jal	4aa0 <write>
+     282:	89aa                	mv	s3,a0
+      if(cc != sz){
+     284:	04a49863          	bne	s1,a0,2d4 <bigwrite+0xa8>
+      int cc = write(fd, buf, sz);
+     288:	8626                	mv	a2,s1
+     28a:	85d2                	mv	a1,s4
+     28c:	854a                	mv	a0,s2
+     28e:	013040ef          	jal	4aa0 <write>
+      if(cc != sz){
+     292:	04951263          	bne	a0,s1,2d6 <bigwrite+0xaa>
+    close(fd);
+     296:	854a                	mv	a0,s2
+     298:	011040ef          	jal	4aa8 <close>
+    unlink("bigwrite");
+     29c:	8556                	mv	a0,s5
+     29e:	033040ef          	jal	4ad0 <unlink>
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+     2a2:	1d74849b          	addiw	s1,s1,471
+     2a6:	fd6492e3          	bne	s1,s6,26a <bigwrite+0x3e>
+}
+     2aa:	60a6                	ld	ra,72(sp)
+     2ac:	6406                	ld	s0,64(sp)
+     2ae:	74e2                	ld	s1,56(sp)
+     2b0:	7942                	ld	s2,48(sp)
+     2b2:	79a2                	ld	s3,40(sp)
+     2b4:	7a02                	ld	s4,32(sp)
+     2b6:	6ae2                	ld	s5,24(sp)
+     2b8:	6b42                	ld	s6,16(sp)
+     2ba:	6ba2                	ld	s7,8(sp)
+     2bc:	6161                	addi	sp,sp,80
+     2be:	8082                	ret
+      printf("%s: cannot create bigwrite\n", s);
+     2c0:	85de                	mv	a1,s7
+     2c2:	00005517          	auipc	a0,0x5
+     2c6:	e8650513          	addi	a0,a0,-378 # 5148 <malloc+0x1e4>
+     2ca:	3e7040ef          	jal	4eb0 <printf>
+      exit(1);
+     2ce:	4505                	li	a0,1
+     2d0:	7b0040ef          	jal	4a80 <exit>
+      if(cc != sz){
+     2d4:	89a6                	mv	s3,s1
+        printf("%s: write(%d) ret %d\n", s, sz, cc);
+     2d6:	86aa                	mv	a3,a0
+     2d8:	864e                	mv	a2,s3
+     2da:	85de                	mv	a1,s7
+     2dc:	00005517          	auipc	a0,0x5
+     2e0:	e8c50513          	addi	a0,a0,-372 # 5168 <malloc+0x204>
+     2e4:	3cd040ef          	jal	4eb0 <printf>
+        exit(1);
+     2e8:	4505                	li	a0,1
+     2ea:	796040ef          	jal	4a80 <exit>
+
+00000000000002ee <badwrite>:
+// file is deleted? if the kernel has this bug, it will panic: balloc:
+// out of blocks. assumed_free may need to be raised to be more than
+// the number of free blocks. this test takes a long time.
+void
+badwrite(char *s)
+{
+     2ee:	7179                	addi	sp,sp,-48
+     2f0:	f406                	sd	ra,40(sp)
+     2f2:	f022                	sd	s0,32(sp)
+     2f4:	ec26                	sd	s1,24(sp)
+     2f6:	e84a                	sd	s2,16(sp)
+     2f8:	e44e                	sd	s3,8(sp)
+     2fa:	e052                	sd	s4,0(sp)
+     2fc:	1800                	addi	s0,sp,48
+  int assumed_free = 600;
+  
+  unlink("junk");
+     2fe:	00005517          	auipc	a0,0x5
+     302:	e8250513          	addi	a0,a0,-382 # 5180 <malloc+0x21c>
+     306:	7ca040ef          	jal	4ad0 <unlink>
+     30a:	25800913          	li	s2,600
+  for(int i = 0; i < assumed_free; i++){
+    int fd = open("junk", O_CREATE|O_WRONLY);
+     30e:	00005997          	auipc	s3,0x5
+     312:	e7298993          	addi	s3,s3,-398 # 5180 <malloc+0x21c>
+    if(fd < 0){
+      printf("open junk failed\n");
+      exit(1);
+    }
+    write(fd, (char*)0xffffffffffL, 1);
+     316:	5a7d                	li	s4,-1
+     318:	018a5a13          	srli	s4,s4,0x18
+    int fd = open("junk", O_CREATE|O_WRONLY);
+     31c:	20100593          	li	a1,513
+     320:	854e                	mv	a0,s3
+     322:	79e040ef          	jal	4ac0 <open>
+     326:	84aa                	mv	s1,a0
+    if(fd < 0){
+     328:	04054d63          	bltz	a0,382 <badwrite+0x94>
+    write(fd, (char*)0xffffffffffL, 1);
+     32c:	4605                	li	a2,1
+     32e:	85d2                	mv	a1,s4
+     330:	770040ef          	jal	4aa0 <write>
+    close(fd);
+     334:	8526                	mv	a0,s1
+     336:	772040ef          	jal	4aa8 <close>
+    unlink("junk");
+     33a:	854e                	mv	a0,s3
+     33c:	794040ef          	jal	4ad0 <unlink>
+  for(int i = 0; i < assumed_free; i++){
+     340:	397d                	addiw	s2,s2,-1
+     342:	fc091de3          	bnez	s2,31c <badwrite+0x2e>
+  }
+
+  int fd = open("junk", O_CREATE|O_WRONLY);
+     346:	20100593          	li	a1,513
+     34a:	00005517          	auipc	a0,0x5
+     34e:	e3650513          	addi	a0,a0,-458 # 5180 <malloc+0x21c>
+     352:	76e040ef          	jal	4ac0 <open>
+     356:	84aa                	mv	s1,a0
+  if(fd < 0){
+     358:	02054e63          	bltz	a0,394 <badwrite+0xa6>
+    printf("open junk failed\n");
+    exit(1);
+  }
+  if(write(fd, "x", 1) != 1){
+     35c:	4605                	li	a2,1
+     35e:	00005597          	auipc	a1,0x5
+     362:	daa58593          	addi	a1,a1,-598 # 5108 <malloc+0x1a4>
+     366:	73a040ef          	jal	4aa0 <write>
+     36a:	4785                	li	a5,1
+     36c:	02f50d63          	beq	a0,a5,3a6 <badwrite+0xb8>
+    printf("write failed\n");
+     370:	00005517          	auipc	a0,0x5
+     374:	e3050513          	addi	a0,a0,-464 # 51a0 <malloc+0x23c>
+     378:	339040ef          	jal	4eb0 <printf>
+    exit(1);
+     37c:	4505                	li	a0,1
+     37e:	702040ef          	jal	4a80 <exit>
+      printf("open junk failed\n");
+     382:	00005517          	auipc	a0,0x5
+     386:	e0650513          	addi	a0,a0,-506 # 5188 <malloc+0x224>
+     38a:	327040ef          	jal	4eb0 <printf>
+      exit(1);
+     38e:	4505                	li	a0,1
+     390:	6f0040ef          	jal	4a80 <exit>
+    printf("open junk failed\n");
+     394:	00005517          	auipc	a0,0x5
+     398:	df450513          	addi	a0,a0,-524 # 5188 <malloc+0x224>
+     39c:	315040ef          	jal	4eb0 <printf>
+    exit(1);
+     3a0:	4505                	li	a0,1
+     3a2:	6de040ef          	jal	4a80 <exit>
+  }
+  close(fd);
+     3a6:	8526                	mv	a0,s1
+     3a8:	700040ef          	jal	4aa8 <close>
+  unlink("junk");
+     3ac:	00005517          	auipc	a0,0x5
+     3b0:	dd450513          	addi	a0,a0,-556 # 5180 <malloc+0x21c>
+     3b4:	71c040ef          	jal	4ad0 <unlink>
+
+  exit(0);
+     3b8:	4501                	li	a0,0
+     3ba:	6c6040ef          	jal	4a80 <exit>
+
+00000000000003be <outofinodes>:
+  }
+}
+
+void
+outofinodes(char *s)
+{
+     3be:	715d                	addi	sp,sp,-80
+     3c0:	e486                	sd	ra,72(sp)
+     3c2:	e0a2                	sd	s0,64(sp)
+     3c4:	fc26                	sd	s1,56(sp)
+     3c6:	f84a                	sd	s2,48(sp)
+     3c8:	f44e                	sd	s3,40(sp)
+     3ca:	0880                	addi	s0,sp,80
+  int nzz = 32*32;
+  for(int i = 0; i < nzz; i++){
+     3cc:	4481                	li	s1,0
+    char name[32];
+    name[0] = 'z';
+     3ce:	07a00913          	li	s2,122
+  for(int i = 0; i < nzz; i++){
+     3d2:	40000993          	li	s3,1024
+    name[0] = 'z';
+     3d6:	fb240823          	sb	s2,-80(s0)
+    name[1] = 'z';
+     3da:	fb2408a3          	sb	s2,-79(s0)
+    name[2] = '0' + (i / 32);
+     3de:	41f4d71b          	sraiw	a4,s1,0x1f
+     3e2:	01b7571b          	srliw	a4,a4,0x1b
+     3e6:	009707bb          	addw	a5,a4,s1
+     3ea:	4057d69b          	sraiw	a3,a5,0x5
+     3ee:	0306869b          	addiw	a3,a3,48
+     3f2:	fad40923          	sb	a3,-78(s0)
+    name[3] = '0' + (i % 32);
+     3f6:	8bfd                	andi	a5,a5,31
+     3f8:	9f99                	subw	a5,a5,a4
+     3fa:	0307879b          	addiw	a5,a5,48
+     3fe:	faf409a3          	sb	a5,-77(s0)
+    name[4] = '\0';
+     402:	fa040a23          	sb	zero,-76(s0)
+    unlink(name);
+     406:	fb040513          	addi	a0,s0,-80
+     40a:	6c6040ef          	jal	4ad0 <unlink>
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+     40e:	60200593          	li	a1,1538
+     412:	fb040513          	addi	a0,s0,-80
+     416:	6aa040ef          	jal	4ac0 <open>
+    if(fd < 0){
+     41a:	00054763          	bltz	a0,428 <outofinodes+0x6a>
+      // failure is eventually expected.
+      break;
+    }
+    close(fd);
+     41e:	68a040ef          	jal	4aa8 <close>
+  for(int i = 0; i < nzz; i++){
+     422:	2485                	addiw	s1,s1,1
+     424:	fb3499e3          	bne	s1,s3,3d6 <outofinodes+0x18>
+     428:	4481                	li	s1,0
+  }
+
+  for(int i = 0; i < nzz; i++){
+    char name[32];
+    name[0] = 'z';
+     42a:	07a00913          	li	s2,122
+  for(int i = 0; i < nzz; i++){
+     42e:	40000993          	li	s3,1024
+    name[0] = 'z';
+     432:	fb240823          	sb	s2,-80(s0)
+    name[1] = 'z';
+     436:	fb2408a3          	sb	s2,-79(s0)
+    name[2] = '0' + (i / 32);
+     43a:	41f4d71b          	sraiw	a4,s1,0x1f
+     43e:	01b7571b          	srliw	a4,a4,0x1b
+     442:	009707bb          	addw	a5,a4,s1
+     446:	4057d69b          	sraiw	a3,a5,0x5
+     44a:	0306869b          	addiw	a3,a3,48
+     44e:	fad40923          	sb	a3,-78(s0)
+    name[3] = '0' + (i % 32);
+     452:	8bfd                	andi	a5,a5,31
+     454:	9f99                	subw	a5,a5,a4
+     456:	0307879b          	addiw	a5,a5,48
+     45a:	faf409a3          	sb	a5,-77(s0)
+    name[4] = '\0';
+     45e:	fa040a23          	sb	zero,-76(s0)
+    unlink(name);
+     462:	fb040513          	addi	a0,s0,-80
+     466:	66a040ef          	jal	4ad0 <unlink>
+  for(int i = 0; i < nzz; i++){
+     46a:	2485                	addiw	s1,s1,1
+     46c:	fd3493e3          	bne	s1,s3,432 <outofinodes+0x74>
+  }
+}
+     470:	60a6                	ld	ra,72(sp)
+     472:	6406                	ld	s0,64(sp)
+     474:	74e2                	ld	s1,56(sp)
+     476:	7942                	ld	s2,48(sp)
+     478:	79a2                	ld	s3,40(sp)
+     47a:	6161                	addi	sp,sp,80
+     47c:	8082                	ret
+
+000000000000047e <copyin>:
+{
+     47e:	7159                	addi	sp,sp,-112
+     480:	f486                	sd	ra,104(sp)
+     482:	f0a2                	sd	s0,96(sp)
+     484:	eca6                	sd	s1,88(sp)
+     486:	e8ca                	sd	s2,80(sp)
+     488:	e4ce                	sd	s3,72(sp)
+     48a:	e0d2                	sd	s4,64(sp)
+     48c:	fc56                	sd	s5,56(sp)
+     48e:	1880                	addi	s0,sp,112
+  uint64 addrs[] = { 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+     490:	00007797          	auipc	a5,0x7
+     494:	f6878793          	addi	a5,a5,-152 # 73f8 <malloc+0x2494>
+     498:	638c                	ld	a1,0(a5)
+     49a:	6790                	ld	a2,8(a5)
+     49c:	6b94                	ld	a3,16(a5)
+     49e:	6f98                	ld	a4,24(a5)
+     4a0:	739c                	ld	a5,32(a5)
+     4a2:	f8b43c23          	sd	a1,-104(s0)
+     4a6:	fac43023          	sd	a2,-96(s0)
+     4aa:	fad43423          	sd	a3,-88(s0)
+     4ae:	fae43823          	sd	a4,-80(s0)
+     4b2:	faf43c23          	sd	a5,-72(s0)
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+     4b6:	f9840913          	addi	s2,s0,-104
+     4ba:	fc040a93          	addi	s5,s0,-64
+    int fd = open("copyin1", O_CREATE|O_WRONLY);
+     4be:	00005a17          	auipc	s4,0x5
+     4c2:	cf2a0a13          	addi	s4,s4,-782 # 51b0 <malloc+0x24c>
+    uint64 addr = addrs[ai];
+     4c6:	00093983          	ld	s3,0(s2)
+    int fd = open("copyin1", O_CREATE|O_WRONLY);
+     4ca:	20100593          	li	a1,513
+     4ce:	8552                	mv	a0,s4
+     4d0:	5f0040ef          	jal	4ac0 <open>
+     4d4:	84aa                	mv	s1,a0
+    if(fd < 0){
+     4d6:	06054763          	bltz	a0,544 <copyin+0xc6>
+    int n = write(fd, (void*)addr, 8192);
+     4da:	6609                	lui	a2,0x2
+     4dc:	85ce                	mv	a1,s3
+     4de:	5c2040ef          	jal	4aa0 <write>
+    if(n >= 0){
+     4e2:	06055a63          	bgez	a0,556 <copyin+0xd8>
+    close(fd);
+     4e6:	8526                	mv	a0,s1
+     4e8:	5c0040ef          	jal	4aa8 <close>
+    unlink("copyin1");
+     4ec:	8552                	mv	a0,s4
+     4ee:	5e2040ef          	jal	4ad0 <unlink>
+    n = write(1, (char*)addr, 8192);
+     4f2:	6609                	lui	a2,0x2
+     4f4:	85ce                	mv	a1,s3
+     4f6:	4505                	li	a0,1
+     4f8:	5a8040ef          	jal	4aa0 <write>
+    if(n > 0){
+     4fc:	06a04863          	bgtz	a0,56c <copyin+0xee>
+    if(pipe(fds) < 0){
+     500:	f9040513          	addi	a0,s0,-112
+     504:	58c040ef          	jal	4a90 <pipe>
+     508:	06054d63          	bltz	a0,582 <copyin+0x104>
+    n = write(fds[1], (char*)addr, 8192);
+     50c:	6609                	lui	a2,0x2
+     50e:	85ce                	mv	a1,s3
+     510:	f9442503          	lw	a0,-108(s0)
+     514:	58c040ef          	jal	4aa0 <write>
+    if(n > 0){
+     518:	06a04e63          	bgtz	a0,594 <copyin+0x116>
+    close(fds[0]);
+     51c:	f9042503          	lw	a0,-112(s0)
+     520:	588040ef          	jal	4aa8 <close>
+    close(fds[1]);
+     524:	f9442503          	lw	a0,-108(s0)
+     528:	580040ef          	jal	4aa8 <close>
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+     52c:	0921                	addi	s2,s2,8
+     52e:	f9591ce3          	bne	s2,s5,4c6 <copyin+0x48>
+}
+     532:	70a6                	ld	ra,104(sp)
+     534:	7406                	ld	s0,96(sp)
+     536:	64e6                	ld	s1,88(sp)
+     538:	6946                	ld	s2,80(sp)
+     53a:	69a6                	ld	s3,72(sp)
+     53c:	6a06                	ld	s4,64(sp)
+     53e:	7ae2                	ld	s5,56(sp)
+     540:	6165                	addi	sp,sp,112
+     542:	8082                	ret
+      printf("open(copyin1) failed\n");
+     544:	00005517          	auipc	a0,0x5
+     548:	c7450513          	addi	a0,a0,-908 # 51b8 <malloc+0x254>
+     54c:	165040ef          	jal	4eb0 <printf>
+      exit(1);
+     550:	4505                	li	a0,1
+     552:	52e040ef          	jal	4a80 <exit>
+      printf("write(fd, %p, 8192) returned %d, not -1\n", (void*)addr, n);
+     556:	862a                	mv	a2,a0
+     558:	85ce                	mv	a1,s3
+     55a:	00005517          	auipc	a0,0x5
+     55e:	c7650513          	addi	a0,a0,-906 # 51d0 <malloc+0x26c>
+     562:	14f040ef          	jal	4eb0 <printf>
+      exit(1);
+     566:	4505                	li	a0,1
+     568:	518040ef          	jal	4a80 <exit>
+      printf("write(1, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+     56c:	862a                	mv	a2,a0
+     56e:	85ce                	mv	a1,s3
+     570:	00005517          	auipc	a0,0x5
+     574:	c9050513          	addi	a0,a0,-880 # 5200 <malloc+0x29c>
+     578:	139040ef          	jal	4eb0 <printf>
+      exit(1);
+     57c:	4505                	li	a0,1
+     57e:	502040ef          	jal	4a80 <exit>
+      printf("pipe() failed\n");
+     582:	00005517          	auipc	a0,0x5
+     586:	cae50513          	addi	a0,a0,-850 # 5230 <malloc+0x2cc>
+     58a:	127040ef          	jal	4eb0 <printf>
+      exit(1);
+     58e:	4505                	li	a0,1
+     590:	4f0040ef          	jal	4a80 <exit>
+      printf("write(pipe, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+     594:	862a                	mv	a2,a0
+     596:	85ce                	mv	a1,s3
+     598:	00005517          	auipc	a0,0x5
+     59c:	ca850513          	addi	a0,a0,-856 # 5240 <malloc+0x2dc>
+     5a0:	111040ef          	jal	4eb0 <printf>
+      exit(1);
+     5a4:	4505                	li	a0,1
+     5a6:	4da040ef          	jal	4a80 <exit>
+
+00000000000005aa <copyout>:
+{
+     5aa:	7119                	addi	sp,sp,-128
+     5ac:	fc86                	sd	ra,120(sp)
+     5ae:	f8a2                	sd	s0,112(sp)
+     5b0:	f4a6                	sd	s1,104(sp)
+     5b2:	f0ca                	sd	s2,96(sp)
+     5b4:	ecce                	sd	s3,88(sp)
+     5b6:	e8d2                	sd	s4,80(sp)
+     5b8:	e4d6                	sd	s5,72(sp)
+     5ba:	e0da                	sd	s6,64(sp)
+     5bc:	0100                	addi	s0,sp,128
+  uint64 addrs[] = { 0LL, 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+     5be:	00007797          	auipc	a5,0x7
+     5c2:	e3a78793          	addi	a5,a5,-454 # 73f8 <malloc+0x2494>
+     5c6:	7788                	ld	a0,40(a5)
+     5c8:	7b8c                	ld	a1,48(a5)
+     5ca:	7f90                	ld	a2,56(a5)
+     5cc:	63b4                	ld	a3,64(a5)
+     5ce:	67b8                	ld	a4,72(a5)
+     5d0:	6bbc                	ld	a5,80(a5)
+     5d2:	f8a43823          	sd	a0,-112(s0)
+     5d6:	f8b43c23          	sd	a1,-104(s0)
+     5da:	fac43023          	sd	a2,-96(s0)
+     5de:	fad43423          	sd	a3,-88(s0)
+     5e2:	fae43823          	sd	a4,-80(s0)
+     5e6:	faf43c23          	sd	a5,-72(s0)
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+     5ea:	f9040913          	addi	s2,s0,-112
+     5ee:	fc040b13          	addi	s6,s0,-64
+    int fd = open("README", 0);
+     5f2:	00005a17          	auipc	s4,0x5
+     5f6:	c7ea0a13          	addi	s4,s4,-898 # 5270 <malloc+0x30c>
+    n = write(fds[1], "x", 1);
+     5fa:	00005a97          	auipc	s5,0x5
+     5fe:	b0ea8a93          	addi	s5,s5,-1266 # 5108 <malloc+0x1a4>
+    uint64 addr = addrs[ai];
+     602:	00093983          	ld	s3,0(s2)
+    int fd = open("README", 0);
+     606:	4581                	li	a1,0
+     608:	8552                	mv	a0,s4
+     60a:	4b6040ef          	jal	4ac0 <open>
+     60e:	84aa                	mv	s1,a0
+    if(fd < 0){
+     610:	06054763          	bltz	a0,67e <copyout+0xd4>
+    int n = read(fd, (void*)addr, 8192);
+     614:	6609                	lui	a2,0x2
+     616:	85ce                	mv	a1,s3
+     618:	480040ef          	jal	4a98 <read>
+    if(n > 0){
+     61c:	06a04a63          	bgtz	a0,690 <copyout+0xe6>
+    close(fd);
+     620:	8526                	mv	a0,s1
+     622:	486040ef          	jal	4aa8 <close>
+    if(pipe(fds) < 0){
+     626:	f8840513          	addi	a0,s0,-120
+     62a:	466040ef          	jal	4a90 <pipe>
+     62e:	06054c63          	bltz	a0,6a6 <copyout+0xfc>
+    n = write(fds[1], "x", 1);
+     632:	4605                	li	a2,1
+     634:	85d6                	mv	a1,s5
+     636:	f8c42503          	lw	a0,-116(s0)
+     63a:	466040ef          	jal	4aa0 <write>
+    if(n != 1){
+     63e:	4785                	li	a5,1
+     640:	06f51c63          	bne	a0,a5,6b8 <copyout+0x10e>
+    n = read(fds[0], (void*)addr, 8192);
+     644:	6609                	lui	a2,0x2
+     646:	85ce                	mv	a1,s3
+     648:	f8842503          	lw	a0,-120(s0)
+     64c:	44c040ef          	jal	4a98 <read>
+    if(n > 0){
+     650:	06a04d63          	bgtz	a0,6ca <copyout+0x120>
+    close(fds[0]);
+     654:	f8842503          	lw	a0,-120(s0)
+     658:	450040ef          	jal	4aa8 <close>
+    close(fds[1]);
+     65c:	f8c42503          	lw	a0,-116(s0)
+     660:	448040ef          	jal	4aa8 <close>
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+     664:	0921                	addi	s2,s2,8
+     666:	f9691ee3          	bne	s2,s6,602 <copyout+0x58>
+}
+     66a:	70e6                	ld	ra,120(sp)
+     66c:	7446                	ld	s0,112(sp)
+     66e:	74a6                	ld	s1,104(sp)
+     670:	7906                	ld	s2,96(sp)
+     672:	69e6                	ld	s3,88(sp)
+     674:	6a46                	ld	s4,80(sp)
+     676:	6aa6                	ld	s5,72(sp)
+     678:	6b06                	ld	s6,64(sp)
+     67a:	6109                	addi	sp,sp,128
+     67c:	8082                	ret
+      printf("open(README) failed\n");
+     67e:	00005517          	auipc	a0,0x5
+     682:	bfa50513          	addi	a0,a0,-1030 # 5278 <malloc+0x314>
+     686:	02b040ef          	jal	4eb0 <printf>
+      exit(1);
+     68a:	4505                	li	a0,1
+     68c:	3f4040ef          	jal	4a80 <exit>
+      printf("read(fd, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+     690:	862a                	mv	a2,a0
+     692:	85ce                	mv	a1,s3
+     694:	00005517          	auipc	a0,0x5
+     698:	bfc50513          	addi	a0,a0,-1028 # 5290 <malloc+0x32c>
+     69c:	015040ef          	jal	4eb0 <printf>
+      exit(1);
+     6a0:	4505                	li	a0,1
+     6a2:	3de040ef          	jal	4a80 <exit>
+      printf("pipe() failed\n");
+     6a6:	00005517          	auipc	a0,0x5
+     6aa:	b8a50513          	addi	a0,a0,-1142 # 5230 <malloc+0x2cc>
+     6ae:	003040ef          	jal	4eb0 <printf>
+      exit(1);
+     6b2:	4505                	li	a0,1
+     6b4:	3cc040ef          	jal	4a80 <exit>
+      printf("pipe write failed\n");
+     6b8:	00005517          	auipc	a0,0x5
+     6bc:	c0850513          	addi	a0,a0,-1016 # 52c0 <malloc+0x35c>
+     6c0:	7f0040ef          	jal	4eb0 <printf>
+      exit(1);
+     6c4:	4505                	li	a0,1
+     6c6:	3ba040ef          	jal	4a80 <exit>
+      printf("read(pipe, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+     6ca:	862a                	mv	a2,a0
+     6cc:	85ce                	mv	a1,s3
+     6ce:	00005517          	auipc	a0,0x5
+     6d2:	c0a50513          	addi	a0,a0,-1014 # 52d8 <malloc+0x374>
+     6d6:	7da040ef          	jal	4eb0 <printf>
+      exit(1);
+     6da:	4505                	li	a0,1
+     6dc:	3a4040ef          	jal	4a80 <exit>
+
+00000000000006e0 <truncate1>:
+{
+     6e0:	711d                	addi	sp,sp,-96
+     6e2:	ec86                	sd	ra,88(sp)
+     6e4:	e8a2                	sd	s0,80(sp)
+     6e6:	e4a6                	sd	s1,72(sp)
+     6e8:	e0ca                	sd	s2,64(sp)
+     6ea:	fc4e                	sd	s3,56(sp)
+     6ec:	f852                	sd	s4,48(sp)
+     6ee:	f456                	sd	s5,40(sp)
+     6f0:	1080                	addi	s0,sp,96
+     6f2:	8aaa                	mv	s5,a0
+  unlink("truncfile");
+     6f4:	00005517          	auipc	a0,0x5
+     6f8:	9fc50513          	addi	a0,a0,-1540 # 50f0 <malloc+0x18c>
+     6fc:	3d4040ef          	jal	4ad0 <unlink>
+  int fd1 = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+     700:	60100593          	li	a1,1537
+     704:	00005517          	auipc	a0,0x5
+     708:	9ec50513          	addi	a0,a0,-1556 # 50f0 <malloc+0x18c>
+     70c:	3b4040ef          	jal	4ac0 <open>
+     710:	84aa                	mv	s1,a0
+  write(fd1, "abcd", 4);
+     712:	4611                	li	a2,4
+     714:	00005597          	auipc	a1,0x5
+     718:	9ec58593          	addi	a1,a1,-1556 # 5100 <malloc+0x19c>
+     71c:	384040ef          	jal	4aa0 <write>
+  close(fd1);
+     720:	8526                	mv	a0,s1
+     722:	386040ef          	jal	4aa8 <close>
+  int fd2 = open("truncfile", O_RDONLY);
+     726:	4581                	li	a1,0
+     728:	00005517          	auipc	a0,0x5
+     72c:	9c850513          	addi	a0,a0,-1592 # 50f0 <malloc+0x18c>
+     730:	390040ef          	jal	4ac0 <open>
+     734:	84aa                	mv	s1,a0
+  int n = read(fd2, buf, sizeof(buf));
+     736:	02000613          	li	a2,32
+     73a:	fa040593          	addi	a1,s0,-96
+     73e:	35a040ef          	jal	4a98 <read>
+  if(n != 4){
+     742:	4791                	li	a5,4
+     744:	0af51863          	bne	a0,a5,7f4 <truncate1+0x114>
+  fd1 = open("truncfile", O_WRONLY|O_TRUNC);
+     748:	40100593          	li	a1,1025
+     74c:	00005517          	auipc	a0,0x5
+     750:	9a450513          	addi	a0,a0,-1628 # 50f0 <malloc+0x18c>
+     754:	36c040ef          	jal	4ac0 <open>
+     758:	89aa                	mv	s3,a0
+  int fd3 = open("truncfile", O_RDONLY);
+     75a:	4581                	li	a1,0
+     75c:	00005517          	auipc	a0,0x5
+     760:	99450513          	addi	a0,a0,-1644 # 50f0 <malloc+0x18c>
+     764:	35c040ef          	jal	4ac0 <open>
+     768:	892a                	mv	s2,a0
+  n = read(fd3, buf, sizeof(buf));
+     76a:	02000613          	li	a2,32
+     76e:	fa040593          	addi	a1,s0,-96
+     772:	326040ef          	jal	4a98 <read>
+     776:	8a2a                	mv	s4,a0
+  if(n != 0){
+     778:	e949                	bnez	a0,80a <truncate1+0x12a>
+  n = read(fd2, buf, sizeof(buf));
+     77a:	02000613          	li	a2,32
+     77e:	fa040593          	addi	a1,s0,-96
+     782:	8526                	mv	a0,s1
+     784:	314040ef          	jal	4a98 <read>
+     788:	8a2a                	mv	s4,a0
+  if(n != 0){
+     78a:	e155                	bnez	a0,82e <truncate1+0x14e>
+  write(fd1, "abcdef", 6);
+     78c:	4619                	li	a2,6
+     78e:	00005597          	auipc	a1,0x5
+     792:	bda58593          	addi	a1,a1,-1062 # 5368 <malloc+0x404>
+     796:	854e                	mv	a0,s3
+     798:	308040ef          	jal	4aa0 <write>
+  n = read(fd3, buf, sizeof(buf));
+     79c:	02000613          	li	a2,32
+     7a0:	fa040593          	addi	a1,s0,-96
+     7a4:	854a                	mv	a0,s2
+     7a6:	2f2040ef          	jal	4a98 <read>
+  if(n != 6){
+     7aa:	4799                	li	a5,6
+     7ac:	0af51363          	bne	a0,a5,852 <truncate1+0x172>
+  n = read(fd2, buf, sizeof(buf));
+     7b0:	02000613          	li	a2,32
+     7b4:	fa040593          	addi	a1,s0,-96
+     7b8:	8526                	mv	a0,s1
+     7ba:	2de040ef          	jal	4a98 <read>
+  if(n != 2){
+     7be:	4789                	li	a5,2
+     7c0:	0af51463          	bne	a0,a5,868 <truncate1+0x188>
+  unlink("truncfile");
+     7c4:	00005517          	auipc	a0,0x5
+     7c8:	92c50513          	addi	a0,a0,-1748 # 50f0 <malloc+0x18c>
+     7cc:	304040ef          	jal	4ad0 <unlink>
+  close(fd1);
+     7d0:	854e                	mv	a0,s3
+     7d2:	2d6040ef          	jal	4aa8 <close>
+  close(fd2);
+     7d6:	8526                	mv	a0,s1
+     7d8:	2d0040ef          	jal	4aa8 <close>
+  close(fd3);
+     7dc:	854a                	mv	a0,s2
+     7de:	2ca040ef          	jal	4aa8 <close>
+}
+     7e2:	60e6                	ld	ra,88(sp)
+     7e4:	6446                	ld	s0,80(sp)
+     7e6:	64a6                	ld	s1,72(sp)
+     7e8:	6906                	ld	s2,64(sp)
+     7ea:	79e2                	ld	s3,56(sp)
+     7ec:	7a42                	ld	s4,48(sp)
+     7ee:	7aa2                	ld	s5,40(sp)
+     7f0:	6125                	addi	sp,sp,96
+     7f2:	8082                	ret
+    printf("%s: read %d bytes, wanted 4\n", s, n);
+     7f4:	862a                	mv	a2,a0
+     7f6:	85d6                	mv	a1,s5
+     7f8:	00005517          	auipc	a0,0x5
+     7fc:	b1050513          	addi	a0,a0,-1264 # 5308 <malloc+0x3a4>
+     800:	6b0040ef          	jal	4eb0 <printf>
+    exit(1);
+     804:	4505                	li	a0,1
+     806:	27a040ef          	jal	4a80 <exit>
+    printf("aaa fd3=%d\n", fd3);
+     80a:	85ca                	mv	a1,s2
+     80c:	00005517          	auipc	a0,0x5
+     810:	b1c50513          	addi	a0,a0,-1252 # 5328 <malloc+0x3c4>
+     814:	69c040ef          	jal	4eb0 <printf>
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+     818:	8652                	mv	a2,s4
+     81a:	85d6                	mv	a1,s5
+     81c:	00005517          	auipc	a0,0x5
+     820:	b1c50513          	addi	a0,a0,-1252 # 5338 <malloc+0x3d4>
+     824:	68c040ef          	jal	4eb0 <printf>
+    exit(1);
+     828:	4505                	li	a0,1
+     82a:	256040ef          	jal	4a80 <exit>
+    printf("bbb fd2=%d\n", fd2);
+     82e:	85a6                	mv	a1,s1
+     830:	00005517          	auipc	a0,0x5
+     834:	b2850513          	addi	a0,a0,-1240 # 5358 <malloc+0x3f4>
+     838:	678040ef          	jal	4eb0 <printf>
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+     83c:	8652                	mv	a2,s4
+     83e:	85d6                	mv	a1,s5
+     840:	00005517          	auipc	a0,0x5
+     844:	af850513          	addi	a0,a0,-1288 # 5338 <malloc+0x3d4>
+     848:	668040ef          	jal	4eb0 <printf>
+    exit(1);
+     84c:	4505                	li	a0,1
+     84e:	232040ef          	jal	4a80 <exit>
+    printf("%s: read %d bytes, wanted 6\n", s, n);
+     852:	862a                	mv	a2,a0
+     854:	85d6                	mv	a1,s5
+     856:	00005517          	auipc	a0,0x5
+     85a:	b1a50513          	addi	a0,a0,-1254 # 5370 <malloc+0x40c>
+     85e:	652040ef          	jal	4eb0 <printf>
+    exit(1);
+     862:	4505                	li	a0,1
+     864:	21c040ef          	jal	4a80 <exit>
+    printf("%s: read %d bytes, wanted 2\n", s, n);
+     868:	862a                	mv	a2,a0
+     86a:	85d6                	mv	a1,s5
+     86c:	00005517          	auipc	a0,0x5
+     870:	b2450513          	addi	a0,a0,-1244 # 5390 <malloc+0x42c>
+     874:	63c040ef          	jal	4eb0 <printf>
+    exit(1);
+     878:	4505                	li	a0,1
+     87a:	206040ef          	jal	4a80 <exit>
+
+000000000000087e <writetest>:
+{
+     87e:	7139                	addi	sp,sp,-64
+     880:	fc06                	sd	ra,56(sp)
+     882:	f822                	sd	s0,48(sp)
+     884:	f426                	sd	s1,40(sp)
+     886:	f04a                	sd	s2,32(sp)
+     888:	ec4e                	sd	s3,24(sp)
+     88a:	e852                	sd	s4,16(sp)
+     88c:	e456                	sd	s5,8(sp)
+     88e:	e05a                	sd	s6,0(sp)
+     890:	0080                	addi	s0,sp,64
+     892:	8b2a                	mv	s6,a0
+  fd = open("small", O_CREATE|O_RDWR);
+     894:	20200593          	li	a1,514
+     898:	00005517          	auipc	a0,0x5
+     89c:	b1850513          	addi	a0,a0,-1256 # 53b0 <malloc+0x44c>
+     8a0:	220040ef          	jal	4ac0 <open>
+  if(fd < 0){
+     8a4:	08054f63          	bltz	a0,942 <writetest+0xc4>
+     8a8:	892a                	mv	s2,a0
+     8aa:	4481                	li	s1,0
+    if(write(fd, "aaaaaaaaaa", SZ) != SZ){
+     8ac:	00005997          	auipc	s3,0x5
+     8b0:	b2c98993          	addi	s3,s3,-1236 # 53d8 <malloc+0x474>
+    if(write(fd, "bbbbbbbbbb", SZ) != SZ){
+     8b4:	00005a97          	auipc	s5,0x5
+     8b8:	b5ca8a93          	addi	s5,s5,-1188 # 5410 <malloc+0x4ac>
+  for(i = 0; i < N; i++){
+     8bc:	06400a13          	li	s4,100
+    if(write(fd, "aaaaaaaaaa", SZ) != SZ){
+     8c0:	4629                	li	a2,10
+     8c2:	85ce                	mv	a1,s3
+     8c4:	854a                	mv	a0,s2
+     8c6:	1da040ef          	jal	4aa0 <write>
+     8ca:	47a9                	li	a5,10
+     8cc:	08f51563          	bne	a0,a5,956 <writetest+0xd8>
+    if(write(fd, "bbbbbbbbbb", SZ) != SZ){
+     8d0:	4629                	li	a2,10
+     8d2:	85d6                	mv	a1,s5
+     8d4:	854a                	mv	a0,s2
+     8d6:	1ca040ef          	jal	4aa0 <write>
+     8da:	47a9                	li	a5,10
+     8dc:	08f51863          	bne	a0,a5,96c <writetest+0xee>
+  for(i = 0; i < N; i++){
+     8e0:	2485                	addiw	s1,s1,1
+     8e2:	fd449fe3          	bne	s1,s4,8c0 <writetest+0x42>
+  close(fd);
+     8e6:	854a                	mv	a0,s2
+     8e8:	1c0040ef          	jal	4aa8 <close>
+  fd = open("small", O_RDONLY);
+     8ec:	4581                	li	a1,0
+     8ee:	00005517          	auipc	a0,0x5
+     8f2:	ac250513          	addi	a0,a0,-1342 # 53b0 <malloc+0x44c>
+     8f6:	1ca040ef          	jal	4ac0 <open>
+     8fa:	84aa                	mv	s1,a0
+  if(fd < 0){
+     8fc:	08054363          	bltz	a0,982 <writetest+0x104>
+  i = read(fd, buf, N*SZ*2);
+     900:	7d000613          	li	a2,2000
+     904:	0000b597          	auipc	a1,0xb
+     908:	37458593          	addi	a1,a1,884 # bc78 <buf>
+     90c:	18c040ef          	jal	4a98 <read>
+  if(i != N*SZ*2){
+     910:	7d000793          	li	a5,2000
+     914:	08f51163          	bne	a0,a5,996 <writetest+0x118>
+  close(fd);
+     918:	8526                	mv	a0,s1
+     91a:	18e040ef          	jal	4aa8 <close>
+  if(unlink("small") < 0){
+     91e:	00005517          	auipc	a0,0x5
+     922:	a9250513          	addi	a0,a0,-1390 # 53b0 <malloc+0x44c>
+     926:	1aa040ef          	jal	4ad0 <unlink>
+     92a:	08054063          	bltz	a0,9aa <writetest+0x12c>
+}
+     92e:	70e2                	ld	ra,56(sp)
+     930:	7442                	ld	s0,48(sp)
+     932:	74a2                	ld	s1,40(sp)
+     934:	7902                	ld	s2,32(sp)
+     936:	69e2                	ld	s3,24(sp)
+     938:	6a42                	ld	s4,16(sp)
+     93a:	6aa2                	ld	s5,8(sp)
+     93c:	6b02                	ld	s6,0(sp)
+     93e:	6121                	addi	sp,sp,64
+     940:	8082                	ret
+    printf("%s: error: creat small failed!\n", s);
+     942:	85da                	mv	a1,s6
+     944:	00005517          	auipc	a0,0x5
+     948:	a7450513          	addi	a0,a0,-1420 # 53b8 <malloc+0x454>
+     94c:	564040ef          	jal	4eb0 <printf>
+    exit(1);
+     950:	4505                	li	a0,1
+     952:	12e040ef          	jal	4a80 <exit>
+      printf("%s: error: write aa %d new file failed\n", s, i);
+     956:	8626                	mv	a2,s1
+     958:	85da                	mv	a1,s6
+     95a:	00005517          	auipc	a0,0x5
+     95e:	a8e50513          	addi	a0,a0,-1394 # 53e8 <malloc+0x484>
+     962:	54e040ef          	jal	4eb0 <printf>
+      exit(1);
+     966:	4505                	li	a0,1
+     968:	118040ef          	jal	4a80 <exit>
+      printf("%s: error: write bb %d new file failed\n", s, i);
+     96c:	8626                	mv	a2,s1
+     96e:	85da                	mv	a1,s6
+     970:	00005517          	auipc	a0,0x5
+     974:	ab050513          	addi	a0,a0,-1360 # 5420 <malloc+0x4bc>
+     978:	538040ef          	jal	4eb0 <printf>
+      exit(1);
+     97c:	4505                	li	a0,1
+     97e:	102040ef          	jal	4a80 <exit>
+    printf("%s: error: open small failed!\n", s);
+     982:	85da                	mv	a1,s6
+     984:	00005517          	auipc	a0,0x5
+     988:	ac450513          	addi	a0,a0,-1340 # 5448 <malloc+0x4e4>
+     98c:	524040ef          	jal	4eb0 <printf>
+    exit(1);
+     990:	4505                	li	a0,1
+     992:	0ee040ef          	jal	4a80 <exit>
+    printf("%s: read failed\n", s);
+     996:	85da                	mv	a1,s6
+     998:	00005517          	auipc	a0,0x5
+     99c:	ad050513          	addi	a0,a0,-1328 # 5468 <malloc+0x504>
+     9a0:	510040ef          	jal	4eb0 <printf>
+    exit(1);
+     9a4:	4505                	li	a0,1
+     9a6:	0da040ef          	jal	4a80 <exit>
+    printf("%s: unlink small failed\n", s);
+     9aa:	85da                	mv	a1,s6
+     9ac:	00005517          	auipc	a0,0x5
+     9b0:	ad450513          	addi	a0,a0,-1324 # 5480 <malloc+0x51c>
+     9b4:	4fc040ef          	jal	4eb0 <printf>
+    exit(1);
+     9b8:	4505                	li	a0,1
+     9ba:	0c6040ef          	jal	4a80 <exit>
+
+00000000000009be <writebig>:
+{
+     9be:	7139                	addi	sp,sp,-64
+     9c0:	fc06                	sd	ra,56(sp)
+     9c2:	f822                	sd	s0,48(sp)
+     9c4:	f426                	sd	s1,40(sp)
+     9c6:	f04a                	sd	s2,32(sp)
+     9c8:	ec4e                	sd	s3,24(sp)
+     9ca:	e852                	sd	s4,16(sp)
+     9cc:	e456                	sd	s5,8(sp)
+     9ce:	0080                	addi	s0,sp,64
+     9d0:	8aaa                	mv	s5,a0
+  fd = open("big", O_CREATE|O_RDWR);
+     9d2:	20200593          	li	a1,514
+     9d6:	00005517          	auipc	a0,0x5
+     9da:	aca50513          	addi	a0,a0,-1334 # 54a0 <malloc+0x53c>
+     9de:	0e2040ef          	jal	4ac0 <open>
+     9e2:	89aa                	mv	s3,a0
+  for(i = 0; i < MAXFILE; i++){
+     9e4:	4481                	li	s1,0
+    ((int*)buf)[0] = i;
+     9e6:	0000b917          	auipc	s2,0xb
+     9ea:	29290913          	addi	s2,s2,658 # bc78 <buf>
+  for(i = 0; i < MAXFILE; i++){
+     9ee:	10c00a13          	li	s4,268
+  if(fd < 0){
+     9f2:	06054463          	bltz	a0,a5a <writebig+0x9c>
+    ((int*)buf)[0] = i;
+     9f6:	00992023          	sw	s1,0(s2)
+    if(write(fd, buf, BSIZE) != BSIZE){
+     9fa:	40000613          	li	a2,1024
+     9fe:	85ca                	mv	a1,s2
+     a00:	854e                	mv	a0,s3
+     a02:	09e040ef          	jal	4aa0 <write>
+     a06:	40000793          	li	a5,1024
+     a0a:	06f51263          	bne	a0,a5,a6e <writebig+0xb0>
+  for(i = 0; i < MAXFILE; i++){
+     a0e:	2485                	addiw	s1,s1,1
+     a10:	ff4493e3          	bne	s1,s4,9f6 <writebig+0x38>
+  close(fd);
+     a14:	854e                	mv	a0,s3
+     a16:	092040ef          	jal	4aa8 <close>
+  fd = open("big", O_RDONLY);
+     a1a:	4581                	li	a1,0
+     a1c:	00005517          	auipc	a0,0x5
+     a20:	a8450513          	addi	a0,a0,-1404 # 54a0 <malloc+0x53c>
+     a24:	09c040ef          	jal	4ac0 <open>
+     a28:	89aa                	mv	s3,a0
+  n = 0;
+     a2a:	4481                	li	s1,0
+    i = read(fd, buf, BSIZE);
+     a2c:	0000b917          	auipc	s2,0xb
+     a30:	24c90913          	addi	s2,s2,588 # bc78 <buf>
+  if(fd < 0){
+     a34:	04054863          	bltz	a0,a84 <writebig+0xc6>
+    i = read(fd, buf, BSIZE);
+     a38:	40000613          	li	a2,1024
+     a3c:	85ca                	mv	a1,s2
+     a3e:	854e                	mv	a0,s3
+     a40:	058040ef          	jal	4a98 <read>
+    if(i == 0){
+     a44:	c931                	beqz	a0,a98 <writebig+0xda>
+    } else if(i != BSIZE){
+     a46:	40000793          	li	a5,1024
+     a4a:	08f51a63          	bne	a0,a5,ade <writebig+0x120>
+    if(((int*)buf)[0] != n){
+     a4e:	00092683          	lw	a3,0(s2)
+     a52:	0a969163          	bne	a3,s1,af4 <writebig+0x136>
+    n++;
+     a56:	2485                	addiw	s1,s1,1
+    i = read(fd, buf, BSIZE);
+     a58:	b7c5                	j	a38 <writebig+0x7a>
+    printf("%s: error: creat big failed!\n", s);
+     a5a:	85d6                	mv	a1,s5
+     a5c:	00005517          	auipc	a0,0x5
+     a60:	a4c50513          	addi	a0,a0,-1460 # 54a8 <malloc+0x544>
+     a64:	44c040ef          	jal	4eb0 <printf>
+    exit(1);
+     a68:	4505                	li	a0,1
+     a6a:	016040ef          	jal	4a80 <exit>
+      printf("%s: error: write big file failed i=%d\n", s, i);
+     a6e:	8626                	mv	a2,s1
+     a70:	85d6                	mv	a1,s5
+     a72:	00005517          	auipc	a0,0x5
+     a76:	a5650513          	addi	a0,a0,-1450 # 54c8 <malloc+0x564>
+     a7a:	436040ef          	jal	4eb0 <printf>
+      exit(1);
+     a7e:	4505                	li	a0,1
+     a80:	000040ef          	jal	4a80 <exit>
+    printf("%s: error: open big failed!\n", s);
+     a84:	85d6                	mv	a1,s5
+     a86:	00005517          	auipc	a0,0x5
+     a8a:	a6a50513          	addi	a0,a0,-1430 # 54f0 <malloc+0x58c>
+     a8e:	422040ef          	jal	4eb0 <printf>
+    exit(1);
+     a92:	4505                	li	a0,1
+     a94:	7ed030ef          	jal	4a80 <exit>
+      if(n != MAXFILE){
+     a98:	10c00793          	li	a5,268
+     a9c:	02f49663          	bne	s1,a5,ac8 <writebig+0x10a>
+  close(fd);
+     aa0:	854e                	mv	a0,s3
+     aa2:	006040ef          	jal	4aa8 <close>
+  if(unlink("big") < 0){
+     aa6:	00005517          	auipc	a0,0x5
+     aaa:	9fa50513          	addi	a0,a0,-1542 # 54a0 <malloc+0x53c>
+     aae:	022040ef          	jal	4ad0 <unlink>
+     ab2:	04054c63          	bltz	a0,b0a <writebig+0x14c>
+}
+     ab6:	70e2                	ld	ra,56(sp)
+     ab8:	7442                	ld	s0,48(sp)
+     aba:	74a2                	ld	s1,40(sp)
+     abc:	7902                	ld	s2,32(sp)
+     abe:	69e2                	ld	s3,24(sp)
+     ac0:	6a42                	ld	s4,16(sp)
+     ac2:	6aa2                	ld	s5,8(sp)
+     ac4:	6121                	addi	sp,sp,64
+     ac6:	8082                	ret
+        printf("%s: read only %d blocks from big", s, n);
+     ac8:	8626                	mv	a2,s1
+     aca:	85d6                	mv	a1,s5
+     acc:	00005517          	auipc	a0,0x5
+     ad0:	a4450513          	addi	a0,a0,-1468 # 5510 <malloc+0x5ac>
+     ad4:	3dc040ef          	jal	4eb0 <printf>
+        exit(1);
+     ad8:	4505                	li	a0,1
+     ada:	7a7030ef          	jal	4a80 <exit>
+      printf("%s: read failed %d\n", s, i);
+     ade:	862a                	mv	a2,a0
+     ae0:	85d6                	mv	a1,s5
+     ae2:	00005517          	auipc	a0,0x5
+     ae6:	a5650513          	addi	a0,a0,-1450 # 5538 <malloc+0x5d4>
+     aea:	3c6040ef          	jal	4eb0 <printf>
+      exit(1);
+     aee:	4505                	li	a0,1
+     af0:	791030ef          	jal	4a80 <exit>
+      printf("%s: read content of block %d is %d\n", s,
+     af4:	8626                	mv	a2,s1
+     af6:	85d6                	mv	a1,s5
+     af8:	00005517          	auipc	a0,0x5
+     afc:	a5850513          	addi	a0,a0,-1448 # 5550 <malloc+0x5ec>
+     b00:	3b0040ef          	jal	4eb0 <printf>
+      exit(1);
+     b04:	4505                	li	a0,1
+     b06:	77b030ef          	jal	4a80 <exit>
+    printf("%s: unlink big failed\n", s);
+     b0a:	85d6                	mv	a1,s5
+     b0c:	00005517          	auipc	a0,0x5
+     b10:	a6c50513          	addi	a0,a0,-1428 # 5578 <malloc+0x614>
+     b14:	39c040ef          	jal	4eb0 <printf>
+    exit(1);
+     b18:	4505                	li	a0,1
+     b1a:	767030ef          	jal	4a80 <exit>
+
+0000000000000b1e <unlinkread>:
+{
+     b1e:	7179                	addi	sp,sp,-48
+     b20:	f406                	sd	ra,40(sp)
+     b22:	f022                	sd	s0,32(sp)
+     b24:	ec26                	sd	s1,24(sp)
+     b26:	e84a                	sd	s2,16(sp)
+     b28:	e44e                	sd	s3,8(sp)
+     b2a:	1800                	addi	s0,sp,48
+     b2c:	89aa                	mv	s3,a0
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+     b2e:	20200593          	li	a1,514
+     b32:	00005517          	auipc	a0,0x5
+     b36:	a5e50513          	addi	a0,a0,-1442 # 5590 <malloc+0x62c>
+     b3a:	787030ef          	jal	4ac0 <open>
+  if(fd < 0){
+     b3e:	0a054f63          	bltz	a0,bfc <unlinkread+0xde>
+     b42:	84aa                	mv	s1,a0
+  write(fd, "hello", SZ);
+     b44:	4615                	li	a2,5
+     b46:	00005597          	auipc	a1,0x5
+     b4a:	a7a58593          	addi	a1,a1,-1414 # 55c0 <malloc+0x65c>
+     b4e:	753030ef          	jal	4aa0 <write>
+  close(fd);
+     b52:	8526                	mv	a0,s1
+     b54:	755030ef          	jal	4aa8 <close>
+  fd = open("unlinkread", O_RDWR);
+     b58:	4589                	li	a1,2
+     b5a:	00005517          	auipc	a0,0x5
+     b5e:	a3650513          	addi	a0,a0,-1482 # 5590 <malloc+0x62c>
+     b62:	75f030ef          	jal	4ac0 <open>
+     b66:	84aa                	mv	s1,a0
+  if(fd < 0){
+     b68:	0a054463          	bltz	a0,c10 <unlinkread+0xf2>
+  if(unlink("unlinkread") != 0){
+     b6c:	00005517          	auipc	a0,0x5
+     b70:	a2450513          	addi	a0,a0,-1500 # 5590 <malloc+0x62c>
+     b74:	75d030ef          	jal	4ad0 <unlink>
+     b78:	e555                	bnez	a0,c24 <unlinkread+0x106>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+     b7a:	20200593          	li	a1,514
+     b7e:	00005517          	auipc	a0,0x5
+     b82:	a1250513          	addi	a0,a0,-1518 # 5590 <malloc+0x62c>
+     b86:	73b030ef          	jal	4ac0 <open>
+     b8a:	892a                	mv	s2,a0
+  write(fd1, "yyy", 3);
+     b8c:	460d                	li	a2,3
+     b8e:	00005597          	auipc	a1,0x5
+     b92:	a7a58593          	addi	a1,a1,-1414 # 5608 <malloc+0x6a4>
+     b96:	70b030ef          	jal	4aa0 <write>
+  close(fd1);
+     b9a:	854a                	mv	a0,s2
+     b9c:	70d030ef          	jal	4aa8 <close>
+  if(read(fd, buf, sizeof(buf)) != SZ){
+     ba0:	660d                	lui	a2,0x3
+     ba2:	0000b597          	auipc	a1,0xb
+     ba6:	0d658593          	addi	a1,a1,214 # bc78 <buf>
+     baa:	8526                	mv	a0,s1
+     bac:	6ed030ef          	jal	4a98 <read>
+     bb0:	4795                	li	a5,5
+     bb2:	08f51363          	bne	a0,a5,c38 <unlinkread+0x11a>
+  if(buf[0] != 'h'){
+     bb6:	0000b717          	auipc	a4,0xb
+     bba:	0c274703          	lbu	a4,194(a4) # bc78 <buf>
+     bbe:	06800793          	li	a5,104
+     bc2:	08f71563          	bne	a4,a5,c4c <unlinkread+0x12e>
+  if(write(fd, buf, 10) != 10){
+     bc6:	4629                	li	a2,10
+     bc8:	0000b597          	auipc	a1,0xb
+     bcc:	0b058593          	addi	a1,a1,176 # bc78 <buf>
+     bd0:	8526                	mv	a0,s1
+     bd2:	6cf030ef          	jal	4aa0 <write>
+     bd6:	47a9                	li	a5,10
+     bd8:	08f51463          	bne	a0,a5,c60 <unlinkread+0x142>
+  close(fd);
+     bdc:	8526                	mv	a0,s1
+     bde:	6cb030ef          	jal	4aa8 <close>
+  unlink("unlinkread");
+     be2:	00005517          	auipc	a0,0x5
+     be6:	9ae50513          	addi	a0,a0,-1618 # 5590 <malloc+0x62c>
+     bea:	6e7030ef          	jal	4ad0 <unlink>
+}
+     bee:	70a2                	ld	ra,40(sp)
+     bf0:	7402                	ld	s0,32(sp)
+     bf2:	64e2                	ld	s1,24(sp)
+     bf4:	6942                	ld	s2,16(sp)
+     bf6:	69a2                	ld	s3,8(sp)
+     bf8:	6145                	addi	sp,sp,48
+     bfa:	8082                	ret
+    printf("%s: create unlinkread failed\n", s);
+     bfc:	85ce                	mv	a1,s3
+     bfe:	00005517          	auipc	a0,0x5
+     c02:	9a250513          	addi	a0,a0,-1630 # 55a0 <malloc+0x63c>
+     c06:	2aa040ef          	jal	4eb0 <printf>
+    exit(1);
+     c0a:	4505                	li	a0,1
+     c0c:	675030ef          	jal	4a80 <exit>
+    printf("%s: open unlinkread failed\n", s);
+     c10:	85ce                	mv	a1,s3
+     c12:	00005517          	auipc	a0,0x5
+     c16:	9b650513          	addi	a0,a0,-1610 # 55c8 <malloc+0x664>
+     c1a:	296040ef          	jal	4eb0 <printf>
+    exit(1);
+     c1e:	4505                	li	a0,1
+     c20:	661030ef          	jal	4a80 <exit>
+    printf("%s: unlink unlinkread failed\n", s);
+     c24:	85ce                	mv	a1,s3
+     c26:	00005517          	auipc	a0,0x5
+     c2a:	9c250513          	addi	a0,a0,-1598 # 55e8 <malloc+0x684>
+     c2e:	282040ef          	jal	4eb0 <printf>
+    exit(1);
+     c32:	4505                	li	a0,1
+     c34:	64d030ef          	jal	4a80 <exit>
+    printf("%s: unlinkread read failed", s);
+     c38:	85ce                	mv	a1,s3
+     c3a:	00005517          	auipc	a0,0x5
+     c3e:	9d650513          	addi	a0,a0,-1578 # 5610 <malloc+0x6ac>
+     c42:	26e040ef          	jal	4eb0 <printf>
+    exit(1);
+     c46:	4505                	li	a0,1
+     c48:	639030ef          	jal	4a80 <exit>
+    printf("%s: unlinkread wrong data\n", s);
+     c4c:	85ce                	mv	a1,s3
+     c4e:	00005517          	auipc	a0,0x5
+     c52:	9e250513          	addi	a0,a0,-1566 # 5630 <malloc+0x6cc>
+     c56:	25a040ef          	jal	4eb0 <printf>
+    exit(1);
+     c5a:	4505                	li	a0,1
+     c5c:	625030ef          	jal	4a80 <exit>
+    printf("%s: unlinkread write failed\n", s);
+     c60:	85ce                	mv	a1,s3
+     c62:	00005517          	auipc	a0,0x5
+     c66:	9ee50513          	addi	a0,a0,-1554 # 5650 <malloc+0x6ec>
+     c6a:	246040ef          	jal	4eb0 <printf>
+    exit(1);
+     c6e:	4505                	li	a0,1
+     c70:	611030ef          	jal	4a80 <exit>
+
+0000000000000c74 <linktest>:
+{
+     c74:	1101                	addi	sp,sp,-32
+     c76:	ec06                	sd	ra,24(sp)
+     c78:	e822                	sd	s0,16(sp)
+     c7a:	e426                	sd	s1,8(sp)
+     c7c:	e04a                	sd	s2,0(sp)
+     c7e:	1000                	addi	s0,sp,32
+     c80:	892a                	mv	s2,a0
+  unlink("lf1");
+     c82:	00005517          	auipc	a0,0x5
+     c86:	9ee50513          	addi	a0,a0,-1554 # 5670 <malloc+0x70c>
+     c8a:	647030ef          	jal	4ad0 <unlink>
+  unlink("lf2");
+     c8e:	00005517          	auipc	a0,0x5
+     c92:	9ea50513          	addi	a0,a0,-1558 # 5678 <malloc+0x714>
+     c96:	63b030ef          	jal	4ad0 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+     c9a:	20200593          	li	a1,514
+     c9e:	00005517          	auipc	a0,0x5
+     ca2:	9d250513          	addi	a0,a0,-1582 # 5670 <malloc+0x70c>
+     ca6:	61b030ef          	jal	4ac0 <open>
+  if(fd < 0){
+     caa:	0c054f63          	bltz	a0,d88 <linktest+0x114>
+     cae:	84aa                	mv	s1,a0
+  if(write(fd, "hello", SZ) != SZ){
+     cb0:	4615                	li	a2,5
+     cb2:	00005597          	auipc	a1,0x5
+     cb6:	90e58593          	addi	a1,a1,-1778 # 55c0 <malloc+0x65c>
+     cba:	5e7030ef          	jal	4aa0 <write>
+     cbe:	4795                	li	a5,5
+     cc0:	0cf51e63          	bne	a0,a5,d9c <linktest+0x128>
+  close(fd);
+     cc4:	8526                	mv	a0,s1
+     cc6:	5e3030ef          	jal	4aa8 <close>
+  if(link("lf1", "lf2") < 0){
+     cca:	00005597          	auipc	a1,0x5
+     cce:	9ae58593          	addi	a1,a1,-1618 # 5678 <malloc+0x714>
+     cd2:	00005517          	auipc	a0,0x5
+     cd6:	99e50513          	addi	a0,a0,-1634 # 5670 <malloc+0x70c>
+     cda:	607030ef          	jal	4ae0 <link>
+     cde:	0c054963          	bltz	a0,db0 <linktest+0x13c>
+  unlink("lf1");
+     ce2:	00005517          	auipc	a0,0x5
+     ce6:	98e50513          	addi	a0,a0,-1650 # 5670 <malloc+0x70c>
+     cea:	5e7030ef          	jal	4ad0 <unlink>
+  if(open("lf1", 0) >= 0){
+     cee:	4581                	li	a1,0
+     cf0:	00005517          	auipc	a0,0x5
+     cf4:	98050513          	addi	a0,a0,-1664 # 5670 <malloc+0x70c>
+     cf8:	5c9030ef          	jal	4ac0 <open>
+     cfc:	0c055463          	bgez	a0,dc4 <linktest+0x150>
+  fd = open("lf2", 0);
+     d00:	4581                	li	a1,0
+     d02:	00005517          	auipc	a0,0x5
+     d06:	97650513          	addi	a0,a0,-1674 # 5678 <malloc+0x714>
+     d0a:	5b7030ef          	jal	4ac0 <open>
+     d0e:	84aa                	mv	s1,a0
+  if(fd < 0){
+     d10:	0c054463          	bltz	a0,dd8 <linktest+0x164>
+  if(read(fd, buf, sizeof(buf)) != SZ){
+     d14:	660d                	lui	a2,0x3
+     d16:	0000b597          	auipc	a1,0xb
+     d1a:	f6258593          	addi	a1,a1,-158 # bc78 <buf>
+     d1e:	57b030ef          	jal	4a98 <read>
+     d22:	4795                	li	a5,5
+     d24:	0cf51463          	bne	a0,a5,dec <linktest+0x178>
+  close(fd);
+     d28:	8526                	mv	a0,s1
+     d2a:	57f030ef          	jal	4aa8 <close>
+  if(link("lf2", "lf2") >= 0){
+     d2e:	00005597          	auipc	a1,0x5
+     d32:	94a58593          	addi	a1,a1,-1718 # 5678 <malloc+0x714>
+     d36:	852e                	mv	a0,a1
+     d38:	5a9030ef          	jal	4ae0 <link>
+     d3c:	0c055263          	bgez	a0,e00 <linktest+0x18c>
+  unlink("lf2");
+     d40:	00005517          	auipc	a0,0x5
+     d44:	93850513          	addi	a0,a0,-1736 # 5678 <malloc+0x714>
+     d48:	589030ef          	jal	4ad0 <unlink>
+  if(link("lf2", "lf1") >= 0){
+     d4c:	00005597          	auipc	a1,0x5
+     d50:	92458593          	addi	a1,a1,-1756 # 5670 <malloc+0x70c>
+     d54:	00005517          	auipc	a0,0x5
+     d58:	92450513          	addi	a0,a0,-1756 # 5678 <malloc+0x714>
+     d5c:	585030ef          	jal	4ae0 <link>
+     d60:	0a055a63          	bgez	a0,e14 <linktest+0x1a0>
+  if(link(".", "lf1") >= 0){
+     d64:	00005597          	auipc	a1,0x5
+     d68:	90c58593          	addi	a1,a1,-1780 # 5670 <malloc+0x70c>
+     d6c:	00005517          	auipc	a0,0x5
+     d70:	a1450513          	addi	a0,a0,-1516 # 5780 <malloc+0x81c>
+     d74:	56d030ef          	jal	4ae0 <link>
+     d78:	0a055863          	bgez	a0,e28 <linktest+0x1b4>
+}
+     d7c:	60e2                	ld	ra,24(sp)
+     d7e:	6442                	ld	s0,16(sp)
+     d80:	64a2                	ld	s1,8(sp)
+     d82:	6902                	ld	s2,0(sp)
+     d84:	6105                	addi	sp,sp,32
+     d86:	8082                	ret
+    printf("%s: create lf1 failed\n", s);
+     d88:	85ca                	mv	a1,s2
+     d8a:	00005517          	auipc	a0,0x5
+     d8e:	8f650513          	addi	a0,a0,-1802 # 5680 <malloc+0x71c>
+     d92:	11e040ef          	jal	4eb0 <printf>
+    exit(1);
+     d96:	4505                	li	a0,1
+     d98:	4e9030ef          	jal	4a80 <exit>
+    printf("%s: write lf1 failed\n", s);
+     d9c:	85ca                	mv	a1,s2
+     d9e:	00005517          	auipc	a0,0x5
+     da2:	8fa50513          	addi	a0,a0,-1798 # 5698 <malloc+0x734>
+     da6:	10a040ef          	jal	4eb0 <printf>
+    exit(1);
+     daa:	4505                	li	a0,1
+     dac:	4d5030ef          	jal	4a80 <exit>
+    printf("%s: link lf1 lf2 failed\n", s);
+     db0:	85ca                	mv	a1,s2
+     db2:	00005517          	auipc	a0,0x5
+     db6:	8fe50513          	addi	a0,a0,-1794 # 56b0 <malloc+0x74c>
+     dba:	0f6040ef          	jal	4eb0 <printf>
+    exit(1);
+     dbe:	4505                	li	a0,1
+     dc0:	4c1030ef          	jal	4a80 <exit>
+    printf("%s: unlinked lf1 but it is still there!\n", s);
+     dc4:	85ca                	mv	a1,s2
+     dc6:	00005517          	auipc	a0,0x5
+     dca:	90a50513          	addi	a0,a0,-1782 # 56d0 <malloc+0x76c>
+     dce:	0e2040ef          	jal	4eb0 <printf>
+    exit(1);
+     dd2:	4505                	li	a0,1
+     dd4:	4ad030ef          	jal	4a80 <exit>
+    printf("%s: open lf2 failed\n", s);
+     dd8:	85ca                	mv	a1,s2
+     dda:	00005517          	auipc	a0,0x5
+     dde:	92650513          	addi	a0,a0,-1754 # 5700 <malloc+0x79c>
+     de2:	0ce040ef          	jal	4eb0 <printf>
+    exit(1);
+     de6:	4505                	li	a0,1
+     de8:	499030ef          	jal	4a80 <exit>
+    printf("%s: read lf2 failed\n", s);
+     dec:	85ca                	mv	a1,s2
+     dee:	00005517          	auipc	a0,0x5
+     df2:	92a50513          	addi	a0,a0,-1750 # 5718 <malloc+0x7b4>
+     df6:	0ba040ef          	jal	4eb0 <printf>
+    exit(1);
+     dfa:	4505                	li	a0,1
+     dfc:	485030ef          	jal	4a80 <exit>
+    printf("%s: link lf2 lf2 succeeded! oops\n", s);
+     e00:	85ca                	mv	a1,s2
+     e02:	00005517          	auipc	a0,0x5
+     e06:	92e50513          	addi	a0,a0,-1746 # 5730 <malloc+0x7cc>
+     e0a:	0a6040ef          	jal	4eb0 <printf>
+    exit(1);
+     e0e:	4505                	li	a0,1
+     e10:	471030ef          	jal	4a80 <exit>
+    printf("%s: link non-existent succeeded! oops\n", s);
+     e14:	85ca                	mv	a1,s2
+     e16:	00005517          	auipc	a0,0x5
+     e1a:	94250513          	addi	a0,a0,-1726 # 5758 <malloc+0x7f4>
+     e1e:	092040ef          	jal	4eb0 <printf>
+    exit(1);
+     e22:	4505                	li	a0,1
+     e24:	45d030ef          	jal	4a80 <exit>
+    printf("%s: link . lf1 succeeded! oops\n", s);
+     e28:	85ca                	mv	a1,s2
+     e2a:	00005517          	auipc	a0,0x5
+     e2e:	95e50513          	addi	a0,a0,-1698 # 5788 <malloc+0x824>
+     e32:	07e040ef          	jal	4eb0 <printf>
+    exit(1);
+     e36:	4505                	li	a0,1
+     e38:	449030ef          	jal	4a80 <exit>
+
+0000000000000e3c <validatetest>:
+{
+     e3c:	7139                	addi	sp,sp,-64
+     e3e:	fc06                	sd	ra,56(sp)
+     e40:	f822                	sd	s0,48(sp)
+     e42:	f426                	sd	s1,40(sp)
+     e44:	f04a                	sd	s2,32(sp)
+     e46:	ec4e                	sd	s3,24(sp)
+     e48:	e852                	sd	s4,16(sp)
+     e4a:	e456                	sd	s5,8(sp)
+     e4c:	e05a                	sd	s6,0(sp)
+     e4e:	0080                	addi	s0,sp,64
+     e50:	8b2a                	mv	s6,a0
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+     e52:	4481                	li	s1,0
+    if(link("nosuchfile", (char*)p) != -1){
+     e54:	00005997          	auipc	s3,0x5
+     e58:	95498993          	addi	s3,s3,-1708 # 57a8 <malloc+0x844>
+     e5c:	597d                	li	s2,-1
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+     e5e:	6a85                	lui	s5,0x1
+     e60:	00114a37          	lui	s4,0x114
+    if(link("nosuchfile", (char*)p) != -1){
+     e64:	85a6                	mv	a1,s1
+     e66:	854e                	mv	a0,s3
+     e68:	479030ef          	jal	4ae0 <link>
+     e6c:	01251f63          	bne	a0,s2,e8a <validatetest+0x4e>
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+     e70:	94d6                	add	s1,s1,s5
+     e72:	ff4499e3          	bne	s1,s4,e64 <validatetest+0x28>
+}
+     e76:	70e2                	ld	ra,56(sp)
+     e78:	7442                	ld	s0,48(sp)
+     e7a:	74a2                	ld	s1,40(sp)
+     e7c:	7902                	ld	s2,32(sp)
+     e7e:	69e2                	ld	s3,24(sp)
+     e80:	6a42                	ld	s4,16(sp)
+     e82:	6aa2                	ld	s5,8(sp)
+     e84:	6b02                	ld	s6,0(sp)
+     e86:	6121                	addi	sp,sp,64
+     e88:	8082                	ret
+      printf("%s: link should not succeed\n", s);
+     e8a:	85da                	mv	a1,s6
+     e8c:	00005517          	auipc	a0,0x5
+     e90:	92c50513          	addi	a0,a0,-1748 # 57b8 <malloc+0x854>
+     e94:	01c040ef          	jal	4eb0 <printf>
+      exit(1);
+     e98:	4505                	li	a0,1
+     e9a:	3e7030ef          	jal	4a80 <exit>
+
+0000000000000e9e <bigdir>:
+{
+     e9e:	715d                	addi	sp,sp,-80
+     ea0:	e486                	sd	ra,72(sp)
+     ea2:	e0a2                	sd	s0,64(sp)
+     ea4:	fc26                	sd	s1,56(sp)
+     ea6:	f84a                	sd	s2,48(sp)
+     ea8:	f44e                	sd	s3,40(sp)
+     eaa:	f052                	sd	s4,32(sp)
+     eac:	ec56                	sd	s5,24(sp)
+     eae:	e85a                	sd	s6,16(sp)
+     eb0:	0880                	addi	s0,sp,80
+     eb2:	89aa                	mv	s3,a0
+  unlink("bd");
+     eb4:	00005517          	auipc	a0,0x5
+     eb8:	92450513          	addi	a0,a0,-1756 # 57d8 <malloc+0x874>
+     ebc:	415030ef          	jal	4ad0 <unlink>
+  fd = open("bd", O_CREATE);
+     ec0:	20000593          	li	a1,512
+     ec4:	00005517          	auipc	a0,0x5
+     ec8:	91450513          	addi	a0,a0,-1772 # 57d8 <malloc+0x874>
+     ecc:	3f5030ef          	jal	4ac0 <open>
+  if(fd < 0){
+     ed0:	0c054163          	bltz	a0,f92 <bigdir+0xf4>
+  close(fd);
+     ed4:	3d5030ef          	jal	4aa8 <close>
+  for(i = 0; i < N; i++){
+     ed8:	4901                	li	s2,0
+    name[0] = 'x';
+     eda:	07800a93          	li	s5,120
+    if(link("bd", name) != 0){
+     ede:	00005a17          	auipc	s4,0x5
+     ee2:	8faa0a13          	addi	s4,s4,-1798 # 57d8 <malloc+0x874>
+  for(i = 0; i < N; i++){
+     ee6:	1f400b13          	li	s6,500
+    name[0] = 'x';
+     eea:	fb540823          	sb	s5,-80(s0)
+    name[1] = '0' + (i / 64);
+     eee:	41f9571b          	sraiw	a4,s2,0x1f
+     ef2:	01a7571b          	srliw	a4,a4,0x1a
+     ef6:	012707bb          	addw	a5,a4,s2
+     efa:	4067d69b          	sraiw	a3,a5,0x6
+     efe:	0306869b          	addiw	a3,a3,48
+     f02:	fad408a3          	sb	a3,-79(s0)
+    name[2] = '0' + (i % 64);
+     f06:	03f7f793          	andi	a5,a5,63
+     f0a:	9f99                	subw	a5,a5,a4
+     f0c:	0307879b          	addiw	a5,a5,48
+     f10:	faf40923          	sb	a5,-78(s0)
+    name[3] = '\0';
+     f14:	fa0409a3          	sb	zero,-77(s0)
+    if(link("bd", name) != 0){
+     f18:	fb040593          	addi	a1,s0,-80
+     f1c:	8552                	mv	a0,s4
+     f1e:	3c3030ef          	jal	4ae0 <link>
+     f22:	84aa                	mv	s1,a0
+     f24:	e149                	bnez	a0,fa6 <bigdir+0x108>
+  for(i = 0; i < N; i++){
+     f26:	2905                	addiw	s2,s2,1
+     f28:	fd6911e3          	bne	s2,s6,eea <bigdir+0x4c>
+  unlink("bd");
+     f2c:	00005517          	auipc	a0,0x5
+     f30:	8ac50513          	addi	a0,a0,-1876 # 57d8 <malloc+0x874>
+     f34:	39d030ef          	jal	4ad0 <unlink>
+    name[0] = 'x';
+     f38:	07800913          	li	s2,120
+  for(i = 0; i < N; i++){
+     f3c:	1f400a13          	li	s4,500
+    name[0] = 'x';
+     f40:	fb240823          	sb	s2,-80(s0)
+    name[1] = '0' + (i / 64);
+     f44:	41f4d71b          	sraiw	a4,s1,0x1f
+     f48:	01a7571b          	srliw	a4,a4,0x1a
+     f4c:	009707bb          	addw	a5,a4,s1
+     f50:	4067d69b          	sraiw	a3,a5,0x6
+     f54:	0306869b          	addiw	a3,a3,48
+     f58:	fad408a3          	sb	a3,-79(s0)
+    name[2] = '0' + (i % 64);
+     f5c:	03f7f793          	andi	a5,a5,63
+     f60:	9f99                	subw	a5,a5,a4
+     f62:	0307879b          	addiw	a5,a5,48
+     f66:	faf40923          	sb	a5,-78(s0)
+    name[3] = '\0';
+     f6a:	fa0409a3          	sb	zero,-77(s0)
+    if(unlink(name) != 0){
+     f6e:	fb040513          	addi	a0,s0,-80
+     f72:	35f030ef          	jal	4ad0 <unlink>
+     f76:	e529                	bnez	a0,fc0 <bigdir+0x122>
+  for(i = 0; i < N; i++){
+     f78:	2485                	addiw	s1,s1,1
+     f7a:	fd4493e3          	bne	s1,s4,f40 <bigdir+0xa2>
+}
+     f7e:	60a6                	ld	ra,72(sp)
+     f80:	6406                	ld	s0,64(sp)
+     f82:	74e2                	ld	s1,56(sp)
+     f84:	7942                	ld	s2,48(sp)
+     f86:	79a2                	ld	s3,40(sp)
+     f88:	7a02                	ld	s4,32(sp)
+     f8a:	6ae2                	ld	s5,24(sp)
+     f8c:	6b42                	ld	s6,16(sp)
+     f8e:	6161                	addi	sp,sp,80
+     f90:	8082                	ret
+    printf("%s: bigdir create failed\n", s);
+     f92:	85ce                	mv	a1,s3
+     f94:	00005517          	auipc	a0,0x5
+     f98:	84c50513          	addi	a0,a0,-1972 # 57e0 <malloc+0x87c>
+     f9c:	715030ef          	jal	4eb0 <printf>
+    exit(1);
+     fa0:	4505                	li	a0,1
+     fa2:	2df030ef          	jal	4a80 <exit>
+      printf("%s: bigdir i=%d link(bd, %s) failed\n", s, i, name);
+     fa6:	fb040693          	addi	a3,s0,-80
+     faa:	864a                	mv	a2,s2
+     fac:	85ce                	mv	a1,s3
+     fae:	00005517          	auipc	a0,0x5
+     fb2:	85250513          	addi	a0,a0,-1966 # 5800 <malloc+0x89c>
+     fb6:	6fb030ef          	jal	4eb0 <printf>
+      exit(1);
+     fba:	4505                	li	a0,1
+     fbc:	2c5030ef          	jal	4a80 <exit>
+      printf("%s: bigdir unlink failed", s);
+     fc0:	85ce                	mv	a1,s3
+     fc2:	00005517          	auipc	a0,0x5
+     fc6:	86650513          	addi	a0,a0,-1946 # 5828 <malloc+0x8c4>
+     fca:	6e7030ef          	jal	4eb0 <printf>
+      exit(1);
+     fce:	4505                	li	a0,1
+     fd0:	2b1030ef          	jal	4a80 <exit>
+
+0000000000000fd4 <pgbug>:
+{
+     fd4:	7179                	addi	sp,sp,-48
+     fd6:	f406                	sd	ra,40(sp)
+     fd8:	f022                	sd	s0,32(sp)
+     fda:	ec26                	sd	s1,24(sp)
+     fdc:	1800                	addi	s0,sp,48
+  argv[0] = 0;
+     fde:	fc043c23          	sd	zero,-40(s0)
+  exec(big, argv);
+     fe2:	00007497          	auipc	s1,0x7
+     fe6:	01e48493          	addi	s1,s1,30 # 8000 <big>
+     fea:	fd840593          	addi	a1,s0,-40
+     fee:	6088                	ld	a0,0(s1)
+     ff0:	2c9030ef          	jal	4ab8 <exec>
+  pipe(big);
+     ff4:	6088                	ld	a0,0(s1)
+     ff6:	29b030ef          	jal	4a90 <pipe>
+  exit(0);
+     ffa:	4501                	li	a0,0
+     ffc:	285030ef          	jal	4a80 <exit>
+
+0000000000001000 <badarg>:
+{
+    1000:	7139                	addi	sp,sp,-64
+    1002:	fc06                	sd	ra,56(sp)
+    1004:	f822                	sd	s0,48(sp)
+    1006:	f426                	sd	s1,40(sp)
+    1008:	f04a                	sd	s2,32(sp)
+    100a:	ec4e                	sd	s3,24(sp)
+    100c:	0080                	addi	s0,sp,64
+    100e:	64b1                	lui	s1,0xc
+    1010:	35048493          	addi	s1,s1,848 # c350 <buf+0x6d8>
+    argv[0] = (char*)0xffffffff;
+    1014:	597d                	li	s2,-1
+    1016:	02095913          	srli	s2,s2,0x20
+    exec("echo", argv);
+    101a:	00004997          	auipc	s3,0x4
+    101e:	07e98993          	addi	s3,s3,126 # 5098 <malloc+0x134>
+    argv[0] = (char*)0xffffffff;
+    1022:	fd243023          	sd	s2,-64(s0)
+    argv[1] = 0;
+    1026:	fc043423          	sd	zero,-56(s0)
+    exec("echo", argv);
+    102a:	fc040593          	addi	a1,s0,-64
+    102e:	854e                	mv	a0,s3
+    1030:	289030ef          	jal	4ab8 <exec>
+  for(int i = 0; i < 50000; i++){
+    1034:	34fd                	addiw	s1,s1,-1
+    1036:	f4f5                	bnez	s1,1022 <badarg+0x22>
+  exit(0);
+    1038:	4501                	li	a0,0
+    103a:	247030ef          	jal	4a80 <exit>
+
+000000000000103e <copyinstr2>:
+{
+    103e:	7155                	addi	sp,sp,-208
+    1040:	e586                	sd	ra,200(sp)
+    1042:	e1a2                	sd	s0,192(sp)
+    1044:	0980                	addi	s0,sp,208
+  for(int i = 0; i < MAXPATH; i++)
+    1046:	f6840793          	addi	a5,s0,-152
+    104a:	fe840693          	addi	a3,s0,-24
+    b[i] = 'x';
+    104e:	07800713          	li	a4,120
+    1052:	00e78023          	sb	a4,0(a5)
+  for(int i = 0; i < MAXPATH; i++)
+    1056:	0785                	addi	a5,a5,1
+    1058:	fed79de3          	bne	a5,a3,1052 <copyinstr2+0x14>
+  b[MAXPATH] = '\0';
+    105c:	fe040423          	sb	zero,-24(s0)
+  int ret = unlink(b);
+    1060:	f6840513          	addi	a0,s0,-152
+    1064:	26d030ef          	jal	4ad0 <unlink>
+  if(ret != -1){
+    1068:	57fd                	li	a5,-1
+    106a:	0cf51263          	bne	a0,a5,112e <copyinstr2+0xf0>
+  int fd = open(b, O_CREATE | O_WRONLY);
+    106e:	20100593          	li	a1,513
+    1072:	f6840513          	addi	a0,s0,-152
+    1076:	24b030ef          	jal	4ac0 <open>
+  if(fd != -1){
+    107a:	57fd                	li	a5,-1
+    107c:	0cf51563          	bne	a0,a5,1146 <copyinstr2+0x108>
+  ret = link(b, b);
+    1080:	f6840593          	addi	a1,s0,-152
+    1084:	852e                	mv	a0,a1
+    1086:	25b030ef          	jal	4ae0 <link>
+  if(ret != -1){
+    108a:	57fd                	li	a5,-1
+    108c:	0cf51963          	bne	a0,a5,115e <copyinstr2+0x120>
+  char *args[] = { "xx", 0 };
+    1090:	00006797          	auipc	a5,0x6
+    1094:	8e878793          	addi	a5,a5,-1816 # 6978 <malloc+0x1a14>
+    1098:	f4f43c23          	sd	a5,-168(s0)
+    109c:	f6043023          	sd	zero,-160(s0)
+  ret = exec(b, args);
+    10a0:	f5840593          	addi	a1,s0,-168
+    10a4:	f6840513          	addi	a0,s0,-152
+    10a8:	211030ef          	jal	4ab8 <exec>
+  if(ret != -1){
+    10ac:	57fd                	li	a5,-1
+    10ae:	0cf51563          	bne	a0,a5,1178 <copyinstr2+0x13a>
+  int pid = fork();
+    10b2:	1c7030ef          	jal	4a78 <fork>
+  if(pid < 0){
+    10b6:	0c054d63          	bltz	a0,1190 <copyinstr2+0x152>
+  if(pid == 0){
+    10ba:	0e051863          	bnez	a0,11aa <copyinstr2+0x16c>
+    10be:	00007797          	auipc	a5,0x7
+    10c2:	4a278793          	addi	a5,a5,1186 # 8560 <big.0>
+    10c6:	00008697          	auipc	a3,0x8
+    10ca:	49a68693          	addi	a3,a3,1178 # 9560 <big.0+0x1000>
+      big[i] = 'x';
+    10ce:	07800713          	li	a4,120
+    10d2:	00e78023          	sb	a4,0(a5)
+    for(int i = 0; i < PGSIZE; i++)
+    10d6:	0785                	addi	a5,a5,1
+    10d8:	fed79de3          	bne	a5,a3,10d2 <copyinstr2+0x94>
+    big[PGSIZE] = '\0';
+    10dc:	00008797          	auipc	a5,0x8
+    10e0:	48078223          	sb	zero,1156(a5) # 9560 <big.0+0x1000>
+    char *args2[] = { big, big, big, 0 };
+    10e4:	00006797          	auipc	a5,0x6
+    10e8:	31478793          	addi	a5,a5,788 # 73f8 <malloc+0x2494>
+    10ec:	6fb0                	ld	a2,88(a5)
+    10ee:	73b4                	ld	a3,96(a5)
+    10f0:	77b8                	ld	a4,104(a5)
+    10f2:	7bbc                	ld	a5,112(a5)
+    10f4:	f2c43823          	sd	a2,-208(s0)
+    10f8:	f2d43c23          	sd	a3,-200(s0)
+    10fc:	f4e43023          	sd	a4,-192(s0)
+    1100:	f4f43423          	sd	a5,-184(s0)
+    ret = exec("echo", args2);
+    1104:	f3040593          	addi	a1,s0,-208
+    1108:	00004517          	auipc	a0,0x4
+    110c:	f9050513          	addi	a0,a0,-112 # 5098 <malloc+0x134>
+    1110:	1a9030ef          	jal	4ab8 <exec>
+    if(ret != -1){
+    1114:	57fd                	li	a5,-1
+    1116:	08f50663          	beq	a0,a5,11a2 <copyinstr2+0x164>
+      printf("exec(echo, BIG) returned %d, not -1\n", fd);
+    111a:	55fd                	li	a1,-1
+    111c:	00004517          	auipc	a0,0x4
+    1120:	7b450513          	addi	a0,a0,1972 # 58d0 <malloc+0x96c>
+    1124:	58d030ef          	jal	4eb0 <printf>
+      exit(1);
+    1128:	4505                	li	a0,1
+    112a:	157030ef          	jal	4a80 <exit>
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    112e:	862a                	mv	a2,a0
+    1130:	f6840593          	addi	a1,s0,-152
+    1134:	00004517          	auipc	a0,0x4
+    1138:	71450513          	addi	a0,a0,1812 # 5848 <malloc+0x8e4>
+    113c:	575030ef          	jal	4eb0 <printf>
+    exit(1);
+    1140:	4505                	li	a0,1
+    1142:	13f030ef          	jal	4a80 <exit>
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    1146:	862a                	mv	a2,a0
+    1148:	f6840593          	addi	a1,s0,-152
+    114c:	00004517          	auipc	a0,0x4
+    1150:	71c50513          	addi	a0,a0,1820 # 5868 <malloc+0x904>
+    1154:	55d030ef          	jal	4eb0 <printf>
+    exit(1);
+    1158:	4505                	li	a0,1
+    115a:	127030ef          	jal	4a80 <exit>
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    115e:	86aa                	mv	a3,a0
+    1160:	f6840613          	addi	a2,s0,-152
+    1164:	85b2                	mv	a1,a2
+    1166:	00004517          	auipc	a0,0x4
+    116a:	72250513          	addi	a0,a0,1826 # 5888 <malloc+0x924>
+    116e:	543030ef          	jal	4eb0 <printf>
+    exit(1);
+    1172:	4505                	li	a0,1
+    1174:	10d030ef          	jal	4a80 <exit>
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    1178:	567d                	li	a2,-1
+    117a:	f6840593          	addi	a1,s0,-152
+    117e:	00004517          	auipc	a0,0x4
+    1182:	73250513          	addi	a0,a0,1842 # 58b0 <malloc+0x94c>
+    1186:	52b030ef          	jal	4eb0 <printf>
+    exit(1);
+    118a:	4505                	li	a0,1
+    118c:	0f5030ef          	jal	4a80 <exit>
+    printf("fork failed\n");
+    1190:	00006517          	auipc	a0,0x6
+    1194:	d0850513          	addi	a0,a0,-760 # 6e98 <malloc+0x1f34>
+    1198:	519030ef          	jal	4eb0 <printf>
+    exit(1);
+    119c:	4505                	li	a0,1
+    119e:	0e3030ef          	jal	4a80 <exit>
+    exit(747); // OK
+    11a2:	2eb00513          	li	a0,747
+    11a6:	0db030ef          	jal	4a80 <exit>
+  int st = 0;
+    11aa:	f4042a23          	sw	zero,-172(s0)
+  wait(&st);
+    11ae:	f5440513          	addi	a0,s0,-172
+    11b2:	0d7030ef          	jal	4a88 <wait>
+  if(st != 747){
+    11b6:	f5442703          	lw	a4,-172(s0)
+    11ba:	2eb00793          	li	a5,747
+    11be:	00f71663          	bne	a4,a5,11ca <copyinstr2+0x18c>
+}
+    11c2:	60ae                	ld	ra,200(sp)
+    11c4:	640e                	ld	s0,192(sp)
+    11c6:	6169                	addi	sp,sp,208
+    11c8:	8082                	ret
+    printf("exec(echo, BIG) succeeded, should have failed\n");
+    11ca:	00004517          	auipc	a0,0x4
+    11ce:	72e50513          	addi	a0,a0,1838 # 58f8 <malloc+0x994>
+    11d2:	4df030ef          	jal	4eb0 <printf>
+    exit(1);
+    11d6:	4505                	li	a0,1
+    11d8:	0a9030ef          	jal	4a80 <exit>
+
+00000000000011dc <truncate3>:
+{
+    11dc:	7159                	addi	sp,sp,-112
+    11de:	f486                	sd	ra,104(sp)
+    11e0:	f0a2                	sd	s0,96(sp)
+    11e2:	e8ca                	sd	s2,80(sp)
+    11e4:	1880                	addi	s0,sp,112
+    11e6:	892a                	mv	s2,a0
+  close(open("truncfile", O_CREATE|O_TRUNC|O_WRONLY));
+    11e8:	60100593          	li	a1,1537
+    11ec:	00004517          	auipc	a0,0x4
+    11f0:	f0450513          	addi	a0,a0,-252 # 50f0 <malloc+0x18c>
+    11f4:	0cd030ef          	jal	4ac0 <open>
+    11f8:	0b1030ef          	jal	4aa8 <close>
+  pid = fork();
+    11fc:	07d030ef          	jal	4a78 <fork>
+  if(pid < 0){
+    1200:	06054663          	bltz	a0,126c <truncate3+0x90>
+  if(pid == 0){
+    1204:	e55d                	bnez	a0,12b2 <truncate3+0xd6>
+    1206:	eca6                	sd	s1,88(sp)
+    1208:	e4ce                	sd	s3,72(sp)
+    120a:	e0d2                	sd	s4,64(sp)
+    120c:	fc56                	sd	s5,56(sp)
+    120e:	06400993          	li	s3,100
+      int fd = open("truncfile", O_WRONLY);
+    1212:	00004a17          	auipc	s4,0x4
+    1216:	edea0a13          	addi	s4,s4,-290 # 50f0 <malloc+0x18c>
+      int n = write(fd, "1234567890", 10);
+    121a:	00004a97          	auipc	s5,0x4
+    121e:	73ea8a93          	addi	s5,s5,1854 # 5958 <malloc+0x9f4>
+      int fd = open("truncfile", O_WRONLY);
+    1222:	4585                	li	a1,1
+    1224:	8552                	mv	a0,s4
+    1226:	09b030ef          	jal	4ac0 <open>
+    122a:	84aa                	mv	s1,a0
+      if(fd < 0){
+    122c:	04054e63          	bltz	a0,1288 <truncate3+0xac>
+      int n = write(fd, "1234567890", 10);
+    1230:	4629                	li	a2,10
+    1232:	85d6                	mv	a1,s5
+    1234:	06d030ef          	jal	4aa0 <write>
+      if(n != 10){
+    1238:	47a9                	li	a5,10
+    123a:	06f51163          	bne	a0,a5,129c <truncate3+0xc0>
+      close(fd);
+    123e:	8526                	mv	a0,s1
+    1240:	069030ef          	jal	4aa8 <close>
+      fd = open("truncfile", O_RDONLY);
+    1244:	4581                	li	a1,0
+    1246:	8552                	mv	a0,s4
+    1248:	079030ef          	jal	4ac0 <open>
+    124c:	84aa                	mv	s1,a0
+      read(fd, buf, sizeof(buf));
+    124e:	02000613          	li	a2,32
+    1252:	f9840593          	addi	a1,s0,-104
+    1256:	043030ef          	jal	4a98 <read>
+      close(fd);
+    125a:	8526                	mv	a0,s1
+    125c:	04d030ef          	jal	4aa8 <close>
+    for(int i = 0; i < 100; i++){
+    1260:	39fd                	addiw	s3,s3,-1
+    1262:	fc0990e3          	bnez	s3,1222 <truncate3+0x46>
+    exit(0);
+    1266:	4501                	li	a0,0
+    1268:	019030ef          	jal	4a80 <exit>
+    126c:	eca6                	sd	s1,88(sp)
+    126e:	e4ce                	sd	s3,72(sp)
+    1270:	e0d2                	sd	s4,64(sp)
+    1272:	fc56                	sd	s5,56(sp)
+    printf("%s: fork failed\n", s);
+    1274:	85ca                	mv	a1,s2
+    1276:	00004517          	auipc	a0,0x4
+    127a:	6b250513          	addi	a0,a0,1714 # 5928 <malloc+0x9c4>
+    127e:	433030ef          	jal	4eb0 <printf>
+    exit(1);
+    1282:	4505                	li	a0,1
+    1284:	7fc030ef          	jal	4a80 <exit>
+        printf("%s: open failed\n", s);
+    1288:	85ca                	mv	a1,s2
+    128a:	00004517          	auipc	a0,0x4
+    128e:	6b650513          	addi	a0,a0,1718 # 5940 <malloc+0x9dc>
+    1292:	41f030ef          	jal	4eb0 <printf>
+        exit(1);
+    1296:	4505                	li	a0,1
+    1298:	7e8030ef          	jal	4a80 <exit>
+        printf("%s: write got %d, expected 10\n", s, n);
+    129c:	862a                	mv	a2,a0
+    129e:	85ca                	mv	a1,s2
+    12a0:	00004517          	auipc	a0,0x4
+    12a4:	6c850513          	addi	a0,a0,1736 # 5968 <malloc+0xa04>
+    12a8:	409030ef          	jal	4eb0 <printf>
+        exit(1);
+    12ac:	4505                	li	a0,1
+    12ae:	7d2030ef          	jal	4a80 <exit>
+    12b2:	eca6                	sd	s1,88(sp)
+    12b4:	e4ce                	sd	s3,72(sp)
+    12b6:	e0d2                	sd	s4,64(sp)
+    12b8:	fc56                	sd	s5,56(sp)
+    12ba:	09600993          	li	s3,150
+    int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+    12be:	00004a17          	auipc	s4,0x4
+    12c2:	e32a0a13          	addi	s4,s4,-462 # 50f0 <malloc+0x18c>
+    int n = write(fd, "xxx", 3);
+    12c6:	00004a97          	auipc	s5,0x4
+    12ca:	6c2a8a93          	addi	s5,s5,1730 # 5988 <malloc+0xa24>
+    int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+    12ce:	60100593          	li	a1,1537
+    12d2:	8552                	mv	a0,s4
+    12d4:	7ec030ef          	jal	4ac0 <open>
+    12d8:	84aa                	mv	s1,a0
+    if(fd < 0){
+    12da:	02054d63          	bltz	a0,1314 <truncate3+0x138>
+    int n = write(fd, "xxx", 3);
+    12de:	460d                	li	a2,3
+    12e0:	85d6                	mv	a1,s5
+    12e2:	7be030ef          	jal	4aa0 <write>
+    if(n != 3){
+    12e6:	478d                	li	a5,3
+    12e8:	04f51063          	bne	a0,a5,1328 <truncate3+0x14c>
+    close(fd);
+    12ec:	8526                	mv	a0,s1
+    12ee:	7ba030ef          	jal	4aa8 <close>
+  for(int i = 0; i < 150; i++){
+    12f2:	39fd                	addiw	s3,s3,-1
+    12f4:	fc099de3          	bnez	s3,12ce <truncate3+0xf2>
+  wait(&xstatus);
+    12f8:	fbc40513          	addi	a0,s0,-68
+    12fc:	78c030ef          	jal	4a88 <wait>
+  unlink("truncfile");
+    1300:	00004517          	auipc	a0,0x4
+    1304:	df050513          	addi	a0,a0,-528 # 50f0 <malloc+0x18c>
+    1308:	7c8030ef          	jal	4ad0 <unlink>
+  exit(xstatus);
+    130c:	fbc42503          	lw	a0,-68(s0)
+    1310:	770030ef          	jal	4a80 <exit>
+      printf("%s: open failed\n", s);
+    1314:	85ca                	mv	a1,s2
+    1316:	00004517          	auipc	a0,0x4
+    131a:	62a50513          	addi	a0,a0,1578 # 5940 <malloc+0x9dc>
+    131e:	393030ef          	jal	4eb0 <printf>
+      exit(1);
+    1322:	4505                	li	a0,1
+    1324:	75c030ef          	jal	4a80 <exit>
+      printf("%s: write got %d, expected 3\n", s, n);
+    1328:	862a                	mv	a2,a0
+    132a:	85ca                	mv	a1,s2
+    132c:	00004517          	auipc	a0,0x4
+    1330:	66450513          	addi	a0,a0,1636 # 5990 <malloc+0xa2c>
+    1334:	37d030ef          	jal	4eb0 <printf>
+      exit(1);
+    1338:	4505                	li	a0,1
+    133a:	746030ef          	jal	4a80 <exit>
+
+000000000000133e <exectest>:
+{
+    133e:	715d                	addi	sp,sp,-80
+    1340:	e486                	sd	ra,72(sp)
+    1342:	e0a2                	sd	s0,64(sp)
+    1344:	f84a                	sd	s2,48(sp)
+    1346:	0880                	addi	s0,sp,80
+    1348:	892a                	mv	s2,a0
+  char *echoargv[] = { "echo", "OK", 0 };
+    134a:	00004797          	auipc	a5,0x4
+    134e:	d4e78793          	addi	a5,a5,-690 # 5098 <malloc+0x134>
+    1352:	fcf43023          	sd	a5,-64(s0)
+    1356:	00004797          	auipc	a5,0x4
+    135a:	65a78793          	addi	a5,a5,1626 # 59b0 <malloc+0xa4c>
+    135e:	fcf43423          	sd	a5,-56(s0)
+    1362:	fc043823          	sd	zero,-48(s0)
+  unlink("echo-ok");
+    1366:	00004517          	auipc	a0,0x4
+    136a:	65250513          	addi	a0,a0,1618 # 59b8 <malloc+0xa54>
+    136e:	762030ef          	jal	4ad0 <unlink>
+  pid = fork();
+    1372:	706030ef          	jal	4a78 <fork>
+  if(pid < 0) {
+    1376:	02054f63          	bltz	a0,13b4 <exectest+0x76>
+    137a:	fc26                	sd	s1,56(sp)
+    137c:	84aa                	mv	s1,a0
+  if(pid == 0) {
+    137e:	e935                	bnez	a0,13f2 <exectest+0xb4>
+    close(1);
+    1380:	4505                	li	a0,1
+    1382:	726030ef          	jal	4aa8 <close>
+    fd = open("echo-ok", O_CREATE|O_WRONLY);
+    1386:	20100593          	li	a1,513
+    138a:	00004517          	auipc	a0,0x4
+    138e:	62e50513          	addi	a0,a0,1582 # 59b8 <malloc+0xa54>
+    1392:	72e030ef          	jal	4ac0 <open>
+    if(fd < 0) {
+    1396:	02054a63          	bltz	a0,13ca <exectest+0x8c>
+    if(fd != 1) {
+    139a:	4785                	li	a5,1
+    139c:	04f50163          	beq	a0,a5,13de <exectest+0xa0>
+      printf("%s: wrong fd\n", s);
+    13a0:	85ca                	mv	a1,s2
+    13a2:	00004517          	auipc	a0,0x4
+    13a6:	63650513          	addi	a0,a0,1590 # 59d8 <malloc+0xa74>
+    13aa:	307030ef          	jal	4eb0 <printf>
+      exit(1);
+    13ae:	4505                	li	a0,1
+    13b0:	6d0030ef          	jal	4a80 <exit>
+    13b4:	fc26                	sd	s1,56(sp)
+     printf("%s: fork failed\n", s);
+    13b6:	85ca                	mv	a1,s2
+    13b8:	00004517          	auipc	a0,0x4
+    13bc:	57050513          	addi	a0,a0,1392 # 5928 <malloc+0x9c4>
+    13c0:	2f1030ef          	jal	4eb0 <printf>
+     exit(1);
+    13c4:	4505                	li	a0,1
+    13c6:	6ba030ef          	jal	4a80 <exit>
+      printf("%s: create failed\n", s);
+    13ca:	85ca                	mv	a1,s2
+    13cc:	00004517          	auipc	a0,0x4
+    13d0:	5f450513          	addi	a0,a0,1524 # 59c0 <malloc+0xa5c>
+    13d4:	2dd030ef          	jal	4eb0 <printf>
+      exit(1);
+    13d8:	4505                	li	a0,1
+    13da:	6a6030ef          	jal	4a80 <exit>
+    if(exec("echo", echoargv) < 0){
+    13de:	fc040593          	addi	a1,s0,-64
+    13e2:	00004517          	auipc	a0,0x4
+    13e6:	cb650513          	addi	a0,a0,-842 # 5098 <malloc+0x134>
+    13ea:	6ce030ef          	jal	4ab8 <exec>
+    13ee:	00054d63          	bltz	a0,1408 <exectest+0xca>
+  if (wait(&xstatus) != pid) {
+    13f2:	fdc40513          	addi	a0,s0,-36
+    13f6:	692030ef          	jal	4a88 <wait>
+    13fa:	02951163          	bne	a0,s1,141c <exectest+0xde>
+  if(xstatus != 0)
+    13fe:	fdc42503          	lw	a0,-36(s0)
+    1402:	c50d                	beqz	a0,142c <exectest+0xee>
+    exit(xstatus);
+    1404:	67c030ef          	jal	4a80 <exit>
+      printf("%s: exec echo failed\n", s);
+    1408:	85ca                	mv	a1,s2
+    140a:	00004517          	auipc	a0,0x4
+    140e:	5de50513          	addi	a0,a0,1502 # 59e8 <malloc+0xa84>
+    1412:	29f030ef          	jal	4eb0 <printf>
+      exit(1);
+    1416:	4505                	li	a0,1
+    1418:	668030ef          	jal	4a80 <exit>
+    printf("%s: wait failed!\n", s);
+    141c:	85ca                	mv	a1,s2
+    141e:	00004517          	auipc	a0,0x4
+    1422:	5e250513          	addi	a0,a0,1506 # 5a00 <malloc+0xa9c>
+    1426:	28b030ef          	jal	4eb0 <printf>
+    142a:	bfd1                	j	13fe <exectest+0xc0>
+  fd = open("echo-ok", O_RDONLY);
+    142c:	4581                	li	a1,0
+    142e:	00004517          	auipc	a0,0x4
+    1432:	58a50513          	addi	a0,a0,1418 # 59b8 <malloc+0xa54>
+    1436:	68a030ef          	jal	4ac0 <open>
+  if(fd < 0) {
+    143a:	02054463          	bltz	a0,1462 <exectest+0x124>
+  if (read(fd, buf, 2) != 2) {
+    143e:	4609                	li	a2,2
+    1440:	fb840593          	addi	a1,s0,-72
+    1444:	654030ef          	jal	4a98 <read>
+    1448:	4789                	li	a5,2
+    144a:	02f50663          	beq	a0,a5,1476 <exectest+0x138>
+    printf("%s: read failed\n", s);
+    144e:	85ca                	mv	a1,s2
+    1450:	00004517          	auipc	a0,0x4
+    1454:	01850513          	addi	a0,a0,24 # 5468 <malloc+0x504>
+    1458:	259030ef          	jal	4eb0 <printf>
+    exit(1);
+    145c:	4505                	li	a0,1
+    145e:	622030ef          	jal	4a80 <exit>
+    printf("%s: open failed\n", s);
+    1462:	85ca                	mv	a1,s2
+    1464:	00004517          	auipc	a0,0x4
+    1468:	4dc50513          	addi	a0,a0,1244 # 5940 <malloc+0x9dc>
+    146c:	245030ef          	jal	4eb0 <printf>
+    exit(1);
+    1470:	4505                	li	a0,1
+    1472:	60e030ef          	jal	4a80 <exit>
+  unlink("echo-ok");
+    1476:	00004517          	auipc	a0,0x4
+    147a:	54250513          	addi	a0,a0,1346 # 59b8 <malloc+0xa54>
+    147e:	652030ef          	jal	4ad0 <unlink>
+  if(buf[0] == 'O' && buf[1] == 'K')
+    1482:	fb844703          	lbu	a4,-72(s0)
+    1486:	04f00793          	li	a5,79
+    148a:	00f71863          	bne	a4,a5,149a <exectest+0x15c>
+    148e:	fb944703          	lbu	a4,-71(s0)
+    1492:	04b00793          	li	a5,75
+    1496:	00f70c63          	beq	a4,a5,14ae <exectest+0x170>
+    printf("%s: wrong output\n", s);
+    149a:	85ca                	mv	a1,s2
+    149c:	00004517          	auipc	a0,0x4
+    14a0:	57c50513          	addi	a0,a0,1404 # 5a18 <malloc+0xab4>
+    14a4:	20d030ef          	jal	4eb0 <printf>
+    exit(1);
+    14a8:	4505                	li	a0,1
+    14aa:	5d6030ef          	jal	4a80 <exit>
+    exit(0);
+    14ae:	4501                	li	a0,0
+    14b0:	5d0030ef          	jal	4a80 <exit>
+
+00000000000014b4 <pipe1>:
+{
+    14b4:	711d                	addi	sp,sp,-96
+    14b6:	ec86                	sd	ra,88(sp)
+    14b8:	e8a2                	sd	s0,80(sp)
+    14ba:	fc4e                	sd	s3,56(sp)
+    14bc:	1080                	addi	s0,sp,96
+    14be:	89aa                	mv	s3,a0
+  if(pipe(fds) != 0){
+    14c0:	fa840513          	addi	a0,s0,-88
+    14c4:	5cc030ef          	jal	4a90 <pipe>
+    14c8:	e92d                	bnez	a0,153a <pipe1+0x86>
+    14ca:	e4a6                	sd	s1,72(sp)
+    14cc:	f852                	sd	s4,48(sp)
+    14ce:	84aa                	mv	s1,a0
+  pid = fork();
+    14d0:	5a8030ef          	jal	4a78 <fork>
+    14d4:	8a2a                	mv	s4,a0
+  if(pid == 0){
+    14d6:	c151                	beqz	a0,155a <pipe1+0xa6>
+  } else if(pid > 0){
+    14d8:	14a05e63          	blez	a0,1634 <pipe1+0x180>
+    14dc:	e0ca                	sd	s2,64(sp)
+    14de:	f456                	sd	s5,40(sp)
+    close(fds[1]);
+    14e0:	fac42503          	lw	a0,-84(s0)
+    14e4:	5c4030ef          	jal	4aa8 <close>
+    total = 0;
+    14e8:	8a26                	mv	s4,s1
+    cc = 1;
+    14ea:	4905                	li	s2,1
+    while((n = read(fds[0], buf, cc)) > 0){
+    14ec:	0000aa97          	auipc	s5,0xa
+    14f0:	78ca8a93          	addi	s5,s5,1932 # bc78 <buf>
+    14f4:	864a                	mv	a2,s2
+    14f6:	85d6                	mv	a1,s5
+    14f8:	fa842503          	lw	a0,-88(s0)
+    14fc:	59c030ef          	jal	4a98 <read>
+    1500:	0ea05a63          	blez	a0,15f4 <pipe1+0x140>
+      for(i = 0; i < n; i++){
+    1504:	0000a717          	auipc	a4,0xa
+    1508:	77470713          	addi	a4,a4,1908 # bc78 <buf>
+    150c:	00a4863b          	addw	a2,s1,a0
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+    1510:	00074683          	lbu	a3,0(a4)
+    1514:	0ff4f793          	zext.b	a5,s1
+    1518:	2485                	addiw	s1,s1,1
+    151a:	0af69d63          	bne	a3,a5,15d4 <pipe1+0x120>
+      for(i = 0; i < n; i++){
+    151e:	0705                	addi	a4,a4,1
+    1520:	fec498e3          	bne	s1,a2,1510 <pipe1+0x5c>
+      total += n;
+    1524:	00aa0a3b          	addw	s4,s4,a0
+      cc = cc * 2;
+    1528:	0019179b          	slliw	a5,s2,0x1
+    152c:	0007891b          	sext.w	s2,a5
+      if(cc > sizeof(buf))
+    1530:	670d                	lui	a4,0x3
+    1532:	fd2771e3          	bgeu	a4,s2,14f4 <pipe1+0x40>
+        cc = sizeof(buf);
+    1536:	690d                	lui	s2,0x3
+    1538:	bf75                	j	14f4 <pipe1+0x40>
+    153a:	e4a6                	sd	s1,72(sp)
+    153c:	e0ca                	sd	s2,64(sp)
+    153e:	f852                	sd	s4,48(sp)
+    1540:	f456                	sd	s5,40(sp)
+    1542:	f05a                	sd	s6,32(sp)
+    1544:	ec5e                	sd	s7,24(sp)
+    printf("%s: pipe() failed\n", s);
+    1546:	85ce                	mv	a1,s3
+    1548:	00004517          	auipc	a0,0x4
+    154c:	4e850513          	addi	a0,a0,1256 # 5a30 <malloc+0xacc>
+    1550:	161030ef          	jal	4eb0 <printf>
+    exit(1);
+    1554:	4505                	li	a0,1
+    1556:	52a030ef          	jal	4a80 <exit>
+    155a:	e0ca                	sd	s2,64(sp)
+    155c:	f456                	sd	s5,40(sp)
+    155e:	f05a                	sd	s6,32(sp)
+    1560:	ec5e                	sd	s7,24(sp)
+    close(fds[0]);
+    1562:	fa842503          	lw	a0,-88(s0)
+    1566:	542030ef          	jal	4aa8 <close>
+    for(n = 0; n < N; n++){
+    156a:	0000ab17          	auipc	s6,0xa
+    156e:	70eb0b13          	addi	s6,s6,1806 # bc78 <buf>
+    1572:	416004bb          	negw	s1,s6
+    1576:	0ff4f493          	zext.b	s1,s1
+    157a:	409b0913          	addi	s2,s6,1033
+      if(write(fds[1], buf, SZ) != SZ){
+    157e:	8bda                	mv	s7,s6
+    for(n = 0; n < N; n++){
+    1580:	6a85                	lui	s5,0x1
+    1582:	42da8a93          	addi	s5,s5,1069 # 142d <exectest+0xef>
+{
+    1586:	87da                	mv	a5,s6
+        buf[i] = seq++;
+    1588:	0097873b          	addw	a4,a5,s1
+    158c:	00e78023          	sb	a4,0(a5)
+      for(i = 0; i < SZ; i++)
+    1590:	0785                	addi	a5,a5,1
+    1592:	ff279be3          	bne	a5,s2,1588 <pipe1+0xd4>
+    1596:	409a0a1b          	addiw	s4,s4,1033
+      if(write(fds[1], buf, SZ) != SZ){
+    159a:	40900613          	li	a2,1033
+    159e:	85de                	mv	a1,s7
+    15a0:	fac42503          	lw	a0,-84(s0)
+    15a4:	4fc030ef          	jal	4aa0 <write>
+    15a8:	40900793          	li	a5,1033
+    15ac:	00f51a63          	bne	a0,a5,15c0 <pipe1+0x10c>
+    for(n = 0; n < N; n++){
+    15b0:	24a5                	addiw	s1,s1,9
+    15b2:	0ff4f493          	zext.b	s1,s1
+    15b6:	fd5a18e3          	bne	s4,s5,1586 <pipe1+0xd2>
+    exit(0);
+    15ba:	4501                	li	a0,0
+    15bc:	4c4030ef          	jal	4a80 <exit>
+        printf("%s: pipe1 oops 1\n", s);
+    15c0:	85ce                	mv	a1,s3
+    15c2:	00004517          	auipc	a0,0x4
+    15c6:	48650513          	addi	a0,a0,1158 # 5a48 <malloc+0xae4>
+    15ca:	0e7030ef          	jal	4eb0 <printf>
+        exit(1);
+    15ce:	4505                	li	a0,1
+    15d0:	4b0030ef          	jal	4a80 <exit>
+          printf("%s: pipe1 oops 2\n", s);
+    15d4:	85ce                	mv	a1,s3
+    15d6:	00004517          	auipc	a0,0x4
+    15da:	48a50513          	addi	a0,a0,1162 # 5a60 <malloc+0xafc>
+    15de:	0d3030ef          	jal	4eb0 <printf>
+          return;
+    15e2:	64a6                	ld	s1,72(sp)
+    15e4:	6906                	ld	s2,64(sp)
+    15e6:	7a42                	ld	s4,48(sp)
+    15e8:	7aa2                	ld	s5,40(sp)
+}
+    15ea:	60e6                	ld	ra,88(sp)
+    15ec:	6446                	ld	s0,80(sp)
+    15ee:	79e2                	ld	s3,56(sp)
+    15f0:	6125                	addi	sp,sp,96
+    15f2:	8082                	ret
+    if(total != N * SZ){
+    15f4:	6785                	lui	a5,0x1
+    15f6:	42d78793          	addi	a5,a5,1069 # 142d <exectest+0xef>
+    15fa:	00fa0f63          	beq	s4,a5,1618 <pipe1+0x164>
+    15fe:	f05a                	sd	s6,32(sp)
+    1600:	ec5e                	sd	s7,24(sp)
+      printf("%s: pipe1 oops 3 total %d\n", s, total);
+    1602:	8652                	mv	a2,s4
+    1604:	85ce                	mv	a1,s3
+    1606:	00004517          	auipc	a0,0x4
+    160a:	47250513          	addi	a0,a0,1138 # 5a78 <malloc+0xb14>
+    160e:	0a3030ef          	jal	4eb0 <printf>
+      exit(1);
+    1612:	4505                	li	a0,1
+    1614:	46c030ef          	jal	4a80 <exit>
+    1618:	f05a                	sd	s6,32(sp)
+    161a:	ec5e                	sd	s7,24(sp)
+    close(fds[0]);
+    161c:	fa842503          	lw	a0,-88(s0)
+    1620:	488030ef          	jal	4aa8 <close>
+    wait(&xstatus);
+    1624:	fa440513          	addi	a0,s0,-92
+    1628:	460030ef          	jal	4a88 <wait>
+    exit(xstatus);
+    162c:	fa442503          	lw	a0,-92(s0)
+    1630:	450030ef          	jal	4a80 <exit>
+    1634:	e0ca                	sd	s2,64(sp)
+    1636:	f456                	sd	s5,40(sp)
+    1638:	f05a                	sd	s6,32(sp)
+    163a:	ec5e                	sd	s7,24(sp)
+    printf("%s: fork() failed\n", s);
+    163c:	85ce                	mv	a1,s3
+    163e:	00004517          	auipc	a0,0x4
+    1642:	45a50513          	addi	a0,a0,1114 # 5a98 <malloc+0xb34>
+    1646:	06b030ef          	jal	4eb0 <printf>
+    exit(1);
+    164a:	4505                	li	a0,1
+    164c:	434030ef          	jal	4a80 <exit>
+
+0000000000001650 <exitwait>:
+{
+    1650:	7139                	addi	sp,sp,-64
+    1652:	fc06                	sd	ra,56(sp)
+    1654:	f822                	sd	s0,48(sp)
+    1656:	f426                	sd	s1,40(sp)
+    1658:	f04a                	sd	s2,32(sp)
+    165a:	ec4e                	sd	s3,24(sp)
+    165c:	e852                	sd	s4,16(sp)
+    165e:	0080                	addi	s0,sp,64
+    1660:	8a2a                	mv	s4,a0
+  for(i = 0; i < 100; i++){
+    1662:	4901                	li	s2,0
+    1664:	06400993          	li	s3,100
+    pid = fork();
+    1668:	410030ef          	jal	4a78 <fork>
+    166c:	84aa                	mv	s1,a0
+    if(pid < 0){
+    166e:	02054863          	bltz	a0,169e <exitwait+0x4e>
+    if(pid){
+    1672:	c525                	beqz	a0,16da <exitwait+0x8a>
+      if(wait(&xstate) != pid){
+    1674:	fcc40513          	addi	a0,s0,-52
+    1678:	410030ef          	jal	4a88 <wait>
+    167c:	02951b63          	bne	a0,s1,16b2 <exitwait+0x62>
+      if(i != xstate) {
+    1680:	fcc42783          	lw	a5,-52(s0)
+    1684:	05279163          	bne	a5,s2,16c6 <exitwait+0x76>
+  for(i = 0; i < 100; i++){
+    1688:	2905                	addiw	s2,s2,1 # 3001 <subdir+0x425>
+    168a:	fd391fe3          	bne	s2,s3,1668 <exitwait+0x18>
+}
+    168e:	70e2                	ld	ra,56(sp)
+    1690:	7442                	ld	s0,48(sp)
+    1692:	74a2                	ld	s1,40(sp)
+    1694:	7902                	ld	s2,32(sp)
+    1696:	69e2                	ld	s3,24(sp)
+    1698:	6a42                	ld	s4,16(sp)
+    169a:	6121                	addi	sp,sp,64
+    169c:	8082                	ret
+      printf("%s: fork failed\n", s);
+    169e:	85d2                	mv	a1,s4
+    16a0:	00004517          	auipc	a0,0x4
+    16a4:	28850513          	addi	a0,a0,648 # 5928 <malloc+0x9c4>
+    16a8:	009030ef          	jal	4eb0 <printf>
+      exit(1);
+    16ac:	4505                	li	a0,1
+    16ae:	3d2030ef          	jal	4a80 <exit>
+        printf("%s: wait wrong pid\n", s);
+    16b2:	85d2                	mv	a1,s4
+    16b4:	00004517          	auipc	a0,0x4
+    16b8:	3fc50513          	addi	a0,a0,1020 # 5ab0 <malloc+0xb4c>
+    16bc:	7f4030ef          	jal	4eb0 <printf>
+        exit(1);
+    16c0:	4505                	li	a0,1
+    16c2:	3be030ef          	jal	4a80 <exit>
+        printf("%s: wait wrong exit status\n", s);
+    16c6:	85d2                	mv	a1,s4
+    16c8:	00004517          	auipc	a0,0x4
+    16cc:	40050513          	addi	a0,a0,1024 # 5ac8 <malloc+0xb64>
+    16d0:	7e0030ef          	jal	4eb0 <printf>
+        exit(1);
+    16d4:	4505                	li	a0,1
+    16d6:	3aa030ef          	jal	4a80 <exit>
+      exit(i);
+    16da:	854a                	mv	a0,s2
+    16dc:	3a4030ef          	jal	4a80 <exit>
+
+00000000000016e0 <twochildren>:
+{
+    16e0:	1101                	addi	sp,sp,-32
+    16e2:	ec06                	sd	ra,24(sp)
+    16e4:	e822                	sd	s0,16(sp)
+    16e6:	e426                	sd	s1,8(sp)
+    16e8:	e04a                	sd	s2,0(sp)
+    16ea:	1000                	addi	s0,sp,32
+    16ec:	892a                	mv	s2,a0
+    16ee:	3e800493          	li	s1,1000
+    int pid1 = fork();
+    16f2:	386030ef          	jal	4a78 <fork>
+    if(pid1 < 0){
+    16f6:	02054663          	bltz	a0,1722 <twochildren+0x42>
+    if(pid1 == 0){
+    16fa:	cd15                	beqz	a0,1736 <twochildren+0x56>
+      int pid2 = fork();
+    16fc:	37c030ef          	jal	4a78 <fork>
+      if(pid2 < 0){
+    1700:	02054d63          	bltz	a0,173a <twochildren+0x5a>
+      if(pid2 == 0){
+    1704:	c529                	beqz	a0,174e <twochildren+0x6e>
+        wait(0);
+    1706:	4501                	li	a0,0
+    1708:	380030ef          	jal	4a88 <wait>
+        wait(0);
+    170c:	4501                	li	a0,0
+    170e:	37a030ef          	jal	4a88 <wait>
+  for(int i = 0; i < 1000; i++){
+    1712:	34fd                	addiw	s1,s1,-1
+    1714:	fcf9                	bnez	s1,16f2 <twochildren+0x12>
+}
+    1716:	60e2                	ld	ra,24(sp)
+    1718:	6442                	ld	s0,16(sp)
+    171a:	64a2                	ld	s1,8(sp)
+    171c:	6902                	ld	s2,0(sp)
+    171e:	6105                	addi	sp,sp,32
+    1720:	8082                	ret
+      printf("%s: fork failed\n", s);
+    1722:	85ca                	mv	a1,s2
+    1724:	00004517          	auipc	a0,0x4
+    1728:	20450513          	addi	a0,a0,516 # 5928 <malloc+0x9c4>
+    172c:	784030ef          	jal	4eb0 <printf>
+      exit(1);
+    1730:	4505                	li	a0,1
+    1732:	34e030ef          	jal	4a80 <exit>
+      exit(0);
+    1736:	34a030ef          	jal	4a80 <exit>
+        printf("%s: fork failed\n", s);
+    173a:	85ca                	mv	a1,s2
+    173c:	00004517          	auipc	a0,0x4
+    1740:	1ec50513          	addi	a0,a0,492 # 5928 <malloc+0x9c4>
+    1744:	76c030ef          	jal	4eb0 <printf>
+        exit(1);
+    1748:	4505                	li	a0,1
+    174a:	336030ef          	jal	4a80 <exit>
+        exit(0);
+    174e:	332030ef          	jal	4a80 <exit>
+
+0000000000001752 <forkfork>:
+{
+    1752:	7179                	addi	sp,sp,-48
+    1754:	f406                	sd	ra,40(sp)
+    1756:	f022                	sd	s0,32(sp)
+    1758:	ec26                	sd	s1,24(sp)
+    175a:	1800                	addi	s0,sp,48
+    175c:	84aa                	mv	s1,a0
+    int pid = fork();
+    175e:	31a030ef          	jal	4a78 <fork>
+    if(pid < 0){
+    1762:	02054b63          	bltz	a0,1798 <forkfork+0x46>
+    if(pid == 0){
+    1766:	c139                	beqz	a0,17ac <forkfork+0x5a>
+    int pid = fork();
+    1768:	310030ef          	jal	4a78 <fork>
+    if(pid < 0){
+    176c:	02054663          	bltz	a0,1798 <forkfork+0x46>
+    if(pid == 0){
+    1770:	cd15                	beqz	a0,17ac <forkfork+0x5a>
+    wait(&xstatus);
+    1772:	fdc40513          	addi	a0,s0,-36
+    1776:	312030ef          	jal	4a88 <wait>
+    if(xstatus != 0) {
+    177a:	fdc42783          	lw	a5,-36(s0)
+    177e:	ebb9                	bnez	a5,17d4 <forkfork+0x82>
+    wait(&xstatus);
+    1780:	fdc40513          	addi	a0,s0,-36
+    1784:	304030ef          	jal	4a88 <wait>
+    if(xstatus != 0) {
+    1788:	fdc42783          	lw	a5,-36(s0)
+    178c:	e7a1                	bnez	a5,17d4 <forkfork+0x82>
+}
+    178e:	70a2                	ld	ra,40(sp)
+    1790:	7402                	ld	s0,32(sp)
+    1792:	64e2                	ld	s1,24(sp)
+    1794:	6145                	addi	sp,sp,48
+    1796:	8082                	ret
+      printf("%s: fork failed", s);
+    1798:	85a6                	mv	a1,s1
+    179a:	00004517          	auipc	a0,0x4
+    179e:	34e50513          	addi	a0,a0,846 # 5ae8 <malloc+0xb84>
+    17a2:	70e030ef          	jal	4eb0 <printf>
+      exit(1);
+    17a6:	4505                	li	a0,1
+    17a8:	2d8030ef          	jal	4a80 <exit>
+{
+    17ac:	0c800493          	li	s1,200
+        int pid1 = fork();
+    17b0:	2c8030ef          	jal	4a78 <fork>
+        if(pid1 < 0){
+    17b4:	00054b63          	bltz	a0,17ca <forkfork+0x78>
+        if(pid1 == 0){
+    17b8:	cd01                	beqz	a0,17d0 <forkfork+0x7e>
+        wait(0);
+    17ba:	4501                	li	a0,0
+    17bc:	2cc030ef          	jal	4a88 <wait>
+      for(int j = 0; j < 200; j++){
+    17c0:	34fd                	addiw	s1,s1,-1
+    17c2:	f4fd                	bnez	s1,17b0 <forkfork+0x5e>
+      exit(0);
+    17c4:	4501                	li	a0,0
+    17c6:	2ba030ef          	jal	4a80 <exit>
+          exit(1);
+    17ca:	4505                	li	a0,1
+    17cc:	2b4030ef          	jal	4a80 <exit>
+          exit(0);
+    17d0:	2b0030ef          	jal	4a80 <exit>
+      printf("%s: fork in child failed", s);
+    17d4:	85a6                	mv	a1,s1
+    17d6:	00004517          	auipc	a0,0x4
+    17da:	32250513          	addi	a0,a0,802 # 5af8 <malloc+0xb94>
+    17de:	6d2030ef          	jal	4eb0 <printf>
+      exit(1);
+    17e2:	4505                	li	a0,1
+    17e4:	29c030ef          	jal	4a80 <exit>
+
+00000000000017e8 <reparent2>:
+{
+    17e8:	1101                	addi	sp,sp,-32
+    17ea:	ec06                	sd	ra,24(sp)
+    17ec:	e822                	sd	s0,16(sp)
+    17ee:	e426                	sd	s1,8(sp)
+    17f0:	1000                	addi	s0,sp,32
+    17f2:	32000493          	li	s1,800
+    int pid1 = fork();
+    17f6:	282030ef          	jal	4a78 <fork>
+    if(pid1 < 0){
+    17fa:	00054b63          	bltz	a0,1810 <reparent2+0x28>
+    if(pid1 == 0){
+    17fe:	c115                	beqz	a0,1822 <reparent2+0x3a>
+    wait(0);
+    1800:	4501                	li	a0,0
+    1802:	286030ef          	jal	4a88 <wait>
+  for(int i = 0; i < 800; i++){
+    1806:	34fd                	addiw	s1,s1,-1
+    1808:	f4fd                	bnez	s1,17f6 <reparent2+0xe>
+  exit(0);
+    180a:	4501                	li	a0,0
+    180c:	274030ef          	jal	4a80 <exit>
+      printf("fork failed\n");
+    1810:	00005517          	auipc	a0,0x5
+    1814:	68850513          	addi	a0,a0,1672 # 6e98 <malloc+0x1f34>
+    1818:	698030ef          	jal	4eb0 <printf>
+      exit(1);
+    181c:	4505                	li	a0,1
+    181e:	262030ef          	jal	4a80 <exit>
+      fork();
+    1822:	256030ef          	jal	4a78 <fork>
+      fork();
+    1826:	252030ef          	jal	4a78 <fork>
+      exit(0);
+    182a:	4501                	li	a0,0
+    182c:	254030ef          	jal	4a80 <exit>
+
+0000000000001830 <createdelete>:
+{
+    1830:	7175                	addi	sp,sp,-144
+    1832:	e506                	sd	ra,136(sp)
+    1834:	e122                	sd	s0,128(sp)
+    1836:	fca6                	sd	s1,120(sp)
+    1838:	f8ca                	sd	s2,112(sp)
+    183a:	f4ce                	sd	s3,104(sp)
+    183c:	f0d2                	sd	s4,96(sp)
+    183e:	ecd6                	sd	s5,88(sp)
+    1840:	e8da                	sd	s6,80(sp)
+    1842:	e4de                	sd	s7,72(sp)
+    1844:	e0e2                	sd	s8,64(sp)
+    1846:	fc66                	sd	s9,56(sp)
+    1848:	0900                	addi	s0,sp,144
+    184a:	8caa                	mv	s9,a0
+  for(pi = 0; pi < NCHILD; pi++){
+    184c:	4901                	li	s2,0
+    184e:	4991                	li	s3,4
+    pid = fork();
+    1850:	228030ef          	jal	4a78 <fork>
+    1854:	84aa                	mv	s1,a0
+    if(pid < 0){
+    1856:	02054d63          	bltz	a0,1890 <createdelete+0x60>
+    if(pid == 0){
+    185a:	c529                	beqz	a0,18a4 <createdelete+0x74>
+  for(pi = 0; pi < NCHILD; pi++){
+    185c:	2905                	addiw	s2,s2,1
+    185e:	ff3919e3          	bne	s2,s3,1850 <createdelete+0x20>
+    1862:	4491                	li	s1,4
+    wait(&xstatus);
+    1864:	f7c40513          	addi	a0,s0,-132
+    1868:	220030ef          	jal	4a88 <wait>
+    if(xstatus != 0)
+    186c:	f7c42903          	lw	s2,-132(s0)
+    1870:	0a091e63          	bnez	s2,192c <createdelete+0xfc>
+  for(pi = 0; pi < NCHILD; pi++){
+    1874:	34fd                	addiw	s1,s1,-1
+    1876:	f4fd                	bnez	s1,1864 <createdelete+0x34>
+  name[0] = name[1] = name[2] = 0;
+    1878:	f8040123          	sb	zero,-126(s0)
+    187c:	03000993          	li	s3,48
+    1880:	5a7d                	li	s4,-1
+    1882:	07000c13          	li	s8,112
+      if((i == 0 || i >= N/2) && fd < 0){
+    1886:	4b25                	li	s6,9
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1888:	4ba1                	li	s7,8
+    for(pi = 0; pi < NCHILD; pi++){
+    188a:	07400a93          	li	s5,116
+    188e:	aa39                	j	19ac <createdelete+0x17c>
+      printf("%s: fork failed\n", s);
+    1890:	85e6                	mv	a1,s9
+    1892:	00004517          	auipc	a0,0x4
+    1896:	09650513          	addi	a0,a0,150 # 5928 <malloc+0x9c4>
+    189a:	616030ef          	jal	4eb0 <printf>
+      exit(1);
+    189e:	4505                	li	a0,1
+    18a0:	1e0030ef          	jal	4a80 <exit>
+      name[0] = 'p' + pi;
+    18a4:	0709091b          	addiw	s2,s2,112
+    18a8:	f9240023          	sb	s2,-128(s0)
+      name[2] = '\0';
+    18ac:	f8040123          	sb	zero,-126(s0)
+      for(i = 0; i < N; i++){
+    18b0:	4951                	li	s2,20
+    18b2:	a831                	j	18ce <createdelete+0x9e>
+          printf("%s: create failed\n", s);
+    18b4:	85e6                	mv	a1,s9
+    18b6:	00004517          	auipc	a0,0x4
+    18ba:	10a50513          	addi	a0,a0,266 # 59c0 <malloc+0xa5c>
+    18be:	5f2030ef          	jal	4eb0 <printf>
+          exit(1);
+    18c2:	4505                	li	a0,1
+    18c4:	1bc030ef          	jal	4a80 <exit>
+      for(i = 0; i < N; i++){
+    18c8:	2485                	addiw	s1,s1,1
+    18ca:	05248e63          	beq	s1,s2,1926 <createdelete+0xf6>
+        name[1] = '0' + i;
+    18ce:	0304879b          	addiw	a5,s1,48
+    18d2:	f8f400a3          	sb	a5,-127(s0)
+        fd = open(name, O_CREATE | O_RDWR);
+    18d6:	20200593          	li	a1,514
+    18da:	f8040513          	addi	a0,s0,-128
+    18de:	1e2030ef          	jal	4ac0 <open>
+        if(fd < 0){
+    18e2:	fc0549e3          	bltz	a0,18b4 <createdelete+0x84>
+        close(fd);
+    18e6:	1c2030ef          	jal	4aa8 <close>
+        if(i > 0 && (i % 2 ) == 0){
+    18ea:	10905063          	blez	s1,19ea <createdelete+0x1ba>
+    18ee:	0014f793          	andi	a5,s1,1
+    18f2:	fbf9                	bnez	a5,18c8 <createdelete+0x98>
+          name[1] = '0' + (i / 2);
+    18f4:	01f4d79b          	srliw	a5,s1,0x1f
+    18f8:	9fa5                	addw	a5,a5,s1
+    18fa:	4017d79b          	sraiw	a5,a5,0x1
+    18fe:	0307879b          	addiw	a5,a5,48
+    1902:	f8f400a3          	sb	a5,-127(s0)
+          if(unlink(name) < 0){
+    1906:	f8040513          	addi	a0,s0,-128
+    190a:	1c6030ef          	jal	4ad0 <unlink>
+    190e:	fa055de3          	bgez	a0,18c8 <createdelete+0x98>
+            printf("%s: unlink failed\n", s);
+    1912:	85e6                	mv	a1,s9
+    1914:	00004517          	auipc	a0,0x4
+    1918:	20450513          	addi	a0,a0,516 # 5b18 <malloc+0xbb4>
+    191c:	594030ef          	jal	4eb0 <printf>
+            exit(1);
+    1920:	4505                	li	a0,1
+    1922:	15e030ef          	jal	4a80 <exit>
+      exit(0);
+    1926:	4501                	li	a0,0
+    1928:	158030ef          	jal	4a80 <exit>
+      exit(1);
+    192c:	4505                	li	a0,1
+    192e:	152030ef          	jal	4a80 <exit>
+        printf("%s: oops createdelete %s didn't exist\n", s, name);
+    1932:	f8040613          	addi	a2,s0,-128
+    1936:	85e6                	mv	a1,s9
+    1938:	00004517          	auipc	a0,0x4
+    193c:	1f850513          	addi	a0,a0,504 # 5b30 <malloc+0xbcc>
+    1940:	570030ef          	jal	4eb0 <printf>
+        exit(1);
+    1944:	4505                	li	a0,1
+    1946:	13a030ef          	jal	4a80 <exit>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    194a:	034bfb63          	bgeu	s7,s4,1980 <createdelete+0x150>
+      if(fd >= 0)
+    194e:	02055663          	bgez	a0,197a <createdelete+0x14a>
+    for(pi = 0; pi < NCHILD; pi++){
+    1952:	2485                	addiw	s1,s1,1
+    1954:	0ff4f493          	zext.b	s1,s1
+    1958:	05548263          	beq	s1,s5,199c <createdelete+0x16c>
+      name[0] = 'p' + pi;
+    195c:	f8940023          	sb	s1,-128(s0)
+      name[1] = '0' + i;
+    1960:	f93400a3          	sb	s3,-127(s0)
+      fd = open(name, 0);
+    1964:	4581                	li	a1,0
+    1966:	f8040513          	addi	a0,s0,-128
+    196a:	156030ef          	jal	4ac0 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    196e:	00090463          	beqz	s2,1976 <createdelete+0x146>
+    1972:	fd2b5ce3          	bge	s6,s2,194a <createdelete+0x11a>
+    1976:	fa054ee3          	bltz	a0,1932 <createdelete+0x102>
+        close(fd);
+    197a:	12e030ef          	jal	4aa8 <close>
+    197e:	bfd1                	j	1952 <createdelete+0x122>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1980:	fc0549e3          	bltz	a0,1952 <createdelete+0x122>
+        printf("%s: oops createdelete %s did exist\n", s, name);
+    1984:	f8040613          	addi	a2,s0,-128
+    1988:	85e6                	mv	a1,s9
+    198a:	00004517          	auipc	a0,0x4
+    198e:	1ce50513          	addi	a0,a0,462 # 5b58 <malloc+0xbf4>
+    1992:	51e030ef          	jal	4eb0 <printf>
+        exit(1);
+    1996:	4505                	li	a0,1
+    1998:	0e8030ef          	jal	4a80 <exit>
+  for(i = 0; i < N; i++){
+    199c:	2905                	addiw	s2,s2,1
+    199e:	2a05                	addiw	s4,s4,1
+    19a0:	2985                	addiw	s3,s3,1
+    19a2:	0ff9f993          	zext.b	s3,s3
+    19a6:	47d1                	li	a5,20
+    19a8:	02f90863          	beq	s2,a5,19d8 <createdelete+0x1a8>
+    for(pi = 0; pi < NCHILD; pi++){
+    19ac:	84e2                	mv	s1,s8
+    19ae:	b77d                	j	195c <createdelete+0x12c>
+  for(i = 0; i < N; i++){
+    19b0:	2905                	addiw	s2,s2,1
+    19b2:	0ff97913          	zext.b	s2,s2
+    19b6:	03490c63          	beq	s2,s4,19ee <createdelete+0x1be>
+  name[0] = name[1] = name[2] = 0;
+    19ba:	84d6                	mv	s1,s5
+      name[0] = 'p' + pi;
+    19bc:	f8940023          	sb	s1,-128(s0)
+      name[1] = '0' + i;
+    19c0:	f92400a3          	sb	s2,-127(s0)
+      unlink(name);
+    19c4:	f8040513          	addi	a0,s0,-128
+    19c8:	108030ef          	jal	4ad0 <unlink>
+    for(pi = 0; pi < NCHILD; pi++){
+    19cc:	2485                	addiw	s1,s1,1
+    19ce:	0ff4f493          	zext.b	s1,s1
+    19d2:	ff3495e3          	bne	s1,s3,19bc <createdelete+0x18c>
+    19d6:	bfe9                	j	19b0 <createdelete+0x180>
+    19d8:	03000913          	li	s2,48
+  name[0] = name[1] = name[2] = 0;
+    19dc:	07000a93          	li	s5,112
+    for(pi = 0; pi < NCHILD; pi++){
+    19e0:	07400993          	li	s3,116
+  for(i = 0; i < N; i++){
+    19e4:	04400a13          	li	s4,68
+    19e8:	bfc9                	j	19ba <createdelete+0x18a>
+      for(i = 0; i < N; i++){
+    19ea:	2485                	addiw	s1,s1,1
+    19ec:	b5cd                	j	18ce <createdelete+0x9e>
+}
+    19ee:	60aa                	ld	ra,136(sp)
+    19f0:	640a                	ld	s0,128(sp)
+    19f2:	74e6                	ld	s1,120(sp)
+    19f4:	7946                	ld	s2,112(sp)
+    19f6:	79a6                	ld	s3,104(sp)
+    19f8:	7a06                	ld	s4,96(sp)
+    19fa:	6ae6                	ld	s5,88(sp)
+    19fc:	6b46                	ld	s6,80(sp)
+    19fe:	6ba6                	ld	s7,72(sp)
+    1a00:	6c06                	ld	s8,64(sp)
+    1a02:	7ce2                	ld	s9,56(sp)
+    1a04:	6149                	addi	sp,sp,144
+    1a06:	8082                	ret
+
+0000000000001a08 <linkunlink>:
+{
+    1a08:	711d                	addi	sp,sp,-96
+    1a0a:	ec86                	sd	ra,88(sp)
+    1a0c:	e8a2                	sd	s0,80(sp)
+    1a0e:	e4a6                	sd	s1,72(sp)
+    1a10:	e0ca                	sd	s2,64(sp)
+    1a12:	fc4e                	sd	s3,56(sp)
+    1a14:	f852                	sd	s4,48(sp)
+    1a16:	f456                	sd	s5,40(sp)
+    1a18:	f05a                	sd	s6,32(sp)
+    1a1a:	ec5e                	sd	s7,24(sp)
+    1a1c:	e862                	sd	s8,16(sp)
+    1a1e:	e466                	sd	s9,8(sp)
+    1a20:	1080                	addi	s0,sp,96
+    1a22:	84aa                	mv	s1,a0
+  unlink("x");
+    1a24:	00003517          	auipc	a0,0x3
+    1a28:	6e450513          	addi	a0,a0,1764 # 5108 <malloc+0x1a4>
+    1a2c:	0a4030ef          	jal	4ad0 <unlink>
+  pid = fork();
+    1a30:	048030ef          	jal	4a78 <fork>
+  if(pid < 0){
+    1a34:	02054b63          	bltz	a0,1a6a <linkunlink+0x62>
+    1a38:	8caa                	mv	s9,a0
+  unsigned int x = (pid ? 1 : 97);
+    1a3a:	06100913          	li	s2,97
+    1a3e:	c111                	beqz	a0,1a42 <linkunlink+0x3a>
+    1a40:	4905                	li	s2,1
+    1a42:	06400493          	li	s1,100
+    x = x * 1103515245 + 12345;
+    1a46:	41c65a37          	lui	s4,0x41c65
+    1a4a:	e6da0a1b          	addiw	s4,s4,-403 # 41c64e6d <base+0x41c561f5>
+    1a4e:	698d                	lui	s3,0x3
+    1a50:	0399899b          	addiw	s3,s3,57 # 3039 <subdir+0x45d>
+    if((x % 3) == 0){
+    1a54:	4a8d                	li	s5,3
+    } else if((x % 3) == 1){
+    1a56:	4b85                	li	s7,1
+      unlink("x");
+    1a58:	00003b17          	auipc	s6,0x3
+    1a5c:	6b0b0b13          	addi	s6,s6,1712 # 5108 <malloc+0x1a4>
+      link("cat", "x");
+    1a60:	00004c17          	auipc	s8,0x4
+    1a64:	120c0c13          	addi	s8,s8,288 # 5b80 <malloc+0xc1c>
+    1a68:	a025                	j	1a90 <linkunlink+0x88>
+    printf("%s: fork failed\n", s);
+    1a6a:	85a6                	mv	a1,s1
+    1a6c:	00004517          	auipc	a0,0x4
+    1a70:	ebc50513          	addi	a0,a0,-324 # 5928 <malloc+0x9c4>
+    1a74:	43c030ef          	jal	4eb0 <printf>
+    exit(1);
+    1a78:	4505                	li	a0,1
+    1a7a:	006030ef          	jal	4a80 <exit>
+      close(open("x", O_RDWR | O_CREATE));
+    1a7e:	20200593          	li	a1,514
+    1a82:	855a                	mv	a0,s6
+    1a84:	03c030ef          	jal	4ac0 <open>
+    1a88:	020030ef          	jal	4aa8 <close>
+  for(i = 0; i < 100; i++){
+    1a8c:	34fd                	addiw	s1,s1,-1
+    1a8e:	c495                	beqz	s1,1aba <linkunlink+0xb2>
+    x = x * 1103515245 + 12345;
+    1a90:	034907bb          	mulw	a5,s2,s4
+    1a94:	013787bb          	addw	a5,a5,s3
+    1a98:	0007891b          	sext.w	s2,a5
+    if((x % 3) == 0){
+    1a9c:	0357f7bb          	remuw	a5,a5,s5
+    1aa0:	2781                	sext.w	a5,a5
+    1aa2:	dff1                	beqz	a5,1a7e <linkunlink+0x76>
+    } else if((x % 3) == 1){
+    1aa4:	01778663          	beq	a5,s7,1ab0 <linkunlink+0xa8>
+      unlink("x");
+    1aa8:	855a                	mv	a0,s6
+    1aaa:	026030ef          	jal	4ad0 <unlink>
+    1aae:	bff9                	j	1a8c <linkunlink+0x84>
+      link("cat", "x");
+    1ab0:	85da                	mv	a1,s6
+    1ab2:	8562                	mv	a0,s8
+    1ab4:	02c030ef          	jal	4ae0 <link>
+    1ab8:	bfd1                	j	1a8c <linkunlink+0x84>
+  if(pid)
+    1aba:	020c8263          	beqz	s9,1ade <linkunlink+0xd6>
+    wait(0);
+    1abe:	4501                	li	a0,0
+    1ac0:	7c9020ef          	jal	4a88 <wait>
+}
+    1ac4:	60e6                	ld	ra,88(sp)
+    1ac6:	6446                	ld	s0,80(sp)
+    1ac8:	64a6                	ld	s1,72(sp)
+    1aca:	6906                	ld	s2,64(sp)
+    1acc:	79e2                	ld	s3,56(sp)
+    1ace:	7a42                	ld	s4,48(sp)
+    1ad0:	7aa2                	ld	s5,40(sp)
+    1ad2:	7b02                	ld	s6,32(sp)
+    1ad4:	6be2                	ld	s7,24(sp)
+    1ad6:	6c42                	ld	s8,16(sp)
+    1ad8:	6ca2                	ld	s9,8(sp)
+    1ada:	6125                	addi	sp,sp,96
+    1adc:	8082                	ret
+    exit(0);
+    1ade:	4501                	li	a0,0
+    1ae0:	7a1020ef          	jal	4a80 <exit>
+
+0000000000001ae4 <forktest>:
+{
+    1ae4:	7179                	addi	sp,sp,-48
+    1ae6:	f406                	sd	ra,40(sp)
+    1ae8:	f022                	sd	s0,32(sp)
+    1aea:	ec26                	sd	s1,24(sp)
+    1aec:	e84a                	sd	s2,16(sp)
+    1aee:	e44e                	sd	s3,8(sp)
+    1af0:	1800                	addi	s0,sp,48
+    1af2:	89aa                	mv	s3,a0
+  for(n=0; n<N; n++){
+    1af4:	4481                	li	s1,0
+    1af6:	3e800913          	li	s2,1000
+    pid = fork();
+    1afa:	77f020ef          	jal	4a78 <fork>
+    if(pid < 0)
+    1afe:	06054063          	bltz	a0,1b5e <forktest+0x7a>
+    if(pid == 0)
+    1b02:	cd11                	beqz	a0,1b1e <forktest+0x3a>
+  for(n=0; n<N; n++){
+    1b04:	2485                	addiw	s1,s1,1
+    1b06:	ff249ae3          	bne	s1,s2,1afa <forktest+0x16>
+    printf("%s: fork claimed to work 1000 times!\n", s);
+    1b0a:	85ce                	mv	a1,s3
+    1b0c:	00004517          	auipc	a0,0x4
+    1b10:	0c450513          	addi	a0,a0,196 # 5bd0 <malloc+0xc6c>
+    1b14:	39c030ef          	jal	4eb0 <printf>
+    exit(1);
+    1b18:	4505                	li	a0,1
+    1b1a:	767020ef          	jal	4a80 <exit>
+      exit(0);
+    1b1e:	763020ef          	jal	4a80 <exit>
+    printf("%s: no fork at all!\n", s);
+    1b22:	85ce                	mv	a1,s3
+    1b24:	00004517          	auipc	a0,0x4
+    1b28:	06450513          	addi	a0,a0,100 # 5b88 <malloc+0xc24>
+    1b2c:	384030ef          	jal	4eb0 <printf>
+    exit(1);
+    1b30:	4505                	li	a0,1
+    1b32:	74f020ef          	jal	4a80 <exit>
+      printf("%s: wait stopped early\n", s);
+    1b36:	85ce                	mv	a1,s3
+    1b38:	00004517          	auipc	a0,0x4
+    1b3c:	06850513          	addi	a0,a0,104 # 5ba0 <malloc+0xc3c>
+    1b40:	370030ef          	jal	4eb0 <printf>
+      exit(1);
+    1b44:	4505                	li	a0,1
+    1b46:	73b020ef          	jal	4a80 <exit>
+    printf("%s: wait got too many\n", s);
+    1b4a:	85ce                	mv	a1,s3
+    1b4c:	00004517          	auipc	a0,0x4
+    1b50:	06c50513          	addi	a0,a0,108 # 5bb8 <malloc+0xc54>
+    1b54:	35c030ef          	jal	4eb0 <printf>
+    exit(1);
+    1b58:	4505                	li	a0,1
+    1b5a:	727020ef          	jal	4a80 <exit>
+  if (n == 0) {
+    1b5e:	d0f1                	beqz	s1,1b22 <forktest+0x3e>
+  for(; n > 0; n--){
+    1b60:	00905963          	blez	s1,1b72 <forktest+0x8e>
+    if(wait(0) < 0){
+    1b64:	4501                	li	a0,0
+    1b66:	723020ef          	jal	4a88 <wait>
+    1b6a:	fc0546e3          	bltz	a0,1b36 <forktest+0x52>
+  for(; n > 0; n--){
+    1b6e:	34fd                	addiw	s1,s1,-1
+    1b70:	f8f5                	bnez	s1,1b64 <forktest+0x80>
+  if(wait(0) != -1){
+    1b72:	4501                	li	a0,0
+    1b74:	715020ef          	jal	4a88 <wait>
+    1b78:	57fd                	li	a5,-1
+    1b7a:	fcf518e3          	bne	a0,a5,1b4a <forktest+0x66>
+}
+    1b7e:	70a2                	ld	ra,40(sp)
+    1b80:	7402                	ld	s0,32(sp)
+    1b82:	64e2                	ld	s1,24(sp)
+    1b84:	6942                	ld	s2,16(sp)
+    1b86:	69a2                	ld	s3,8(sp)
+    1b88:	6145                	addi	sp,sp,48
+    1b8a:	8082                	ret
+
+0000000000001b8c <kernmem>:
+{
+    1b8c:	715d                	addi	sp,sp,-80
+    1b8e:	e486                	sd	ra,72(sp)
+    1b90:	e0a2                	sd	s0,64(sp)
+    1b92:	fc26                	sd	s1,56(sp)
+    1b94:	f84a                	sd	s2,48(sp)
+    1b96:	f44e                	sd	s3,40(sp)
+    1b98:	f052                	sd	s4,32(sp)
+    1b9a:	ec56                	sd	s5,24(sp)
+    1b9c:	0880                	addi	s0,sp,80
+    1b9e:	8aaa                	mv	s5,a0
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    1ba0:	4485                	li	s1,1
+    1ba2:	04fe                	slli	s1,s1,0x1f
+    if(xstatus != -1)  // did kernel kill child?
+    1ba4:	5a7d                	li	s4,-1
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    1ba6:	69b1                	lui	s3,0xc
+    1ba8:	35098993          	addi	s3,s3,848 # c350 <buf+0x6d8>
+    1bac:	1003d937          	lui	s2,0x1003d
+    1bb0:	090e                	slli	s2,s2,0x3
+    1bb2:	48090913          	addi	s2,s2,1152 # 1003d480 <base+0x1002e808>
+    pid = fork();
+    1bb6:	6c3020ef          	jal	4a78 <fork>
+    if(pid < 0){
+    1bba:	02054763          	bltz	a0,1be8 <kernmem+0x5c>
+    if(pid == 0){
+    1bbe:	cd1d                	beqz	a0,1bfc <kernmem+0x70>
+    wait(&xstatus);
+    1bc0:	fbc40513          	addi	a0,s0,-68
+    1bc4:	6c5020ef          	jal	4a88 <wait>
+    if(xstatus != -1)  // did kernel kill child?
+    1bc8:	fbc42783          	lw	a5,-68(s0)
+    1bcc:	05479563          	bne	a5,s4,1c16 <kernmem+0x8a>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    1bd0:	94ce                	add	s1,s1,s3
+    1bd2:	ff2492e3          	bne	s1,s2,1bb6 <kernmem+0x2a>
+}
+    1bd6:	60a6                	ld	ra,72(sp)
+    1bd8:	6406                	ld	s0,64(sp)
+    1bda:	74e2                	ld	s1,56(sp)
+    1bdc:	7942                	ld	s2,48(sp)
+    1bde:	79a2                	ld	s3,40(sp)
+    1be0:	7a02                	ld	s4,32(sp)
+    1be2:	6ae2                	ld	s5,24(sp)
+    1be4:	6161                	addi	sp,sp,80
+    1be6:	8082                	ret
+      printf("%s: fork failed\n", s);
+    1be8:	85d6                	mv	a1,s5
+    1bea:	00004517          	auipc	a0,0x4
+    1bee:	d3e50513          	addi	a0,a0,-706 # 5928 <malloc+0x9c4>
+    1bf2:	2be030ef          	jal	4eb0 <printf>
+      exit(1);
+    1bf6:	4505                	li	a0,1
+    1bf8:	689020ef          	jal	4a80 <exit>
+      printf("%s: oops could read %p = %x\n", s, a, *a);
+    1bfc:	0004c683          	lbu	a3,0(s1)
+    1c00:	8626                	mv	a2,s1
+    1c02:	85d6                	mv	a1,s5
+    1c04:	00004517          	auipc	a0,0x4
+    1c08:	ff450513          	addi	a0,a0,-12 # 5bf8 <malloc+0xc94>
+    1c0c:	2a4030ef          	jal	4eb0 <printf>
+      exit(1);
+    1c10:	4505                	li	a0,1
+    1c12:	66f020ef          	jal	4a80 <exit>
+      exit(1);
+    1c16:	4505                	li	a0,1
+    1c18:	669020ef          	jal	4a80 <exit>
+
+0000000000001c1c <MAXVAplus>:
+{
+    1c1c:	7179                	addi	sp,sp,-48
+    1c1e:	f406                	sd	ra,40(sp)
+    1c20:	f022                	sd	s0,32(sp)
+    1c22:	1800                	addi	s0,sp,48
+  volatile uint64 a = MAXVA;
+    1c24:	4785                	li	a5,1
+    1c26:	179a                	slli	a5,a5,0x26
+    1c28:	fcf43c23          	sd	a5,-40(s0)
+  for( ; a != 0; a <<= 1){
+    1c2c:	fd843783          	ld	a5,-40(s0)
+    1c30:	cf85                	beqz	a5,1c68 <MAXVAplus+0x4c>
+    1c32:	ec26                	sd	s1,24(sp)
+    1c34:	e84a                	sd	s2,16(sp)
+    1c36:	892a                	mv	s2,a0
+    if(xstatus != -1)  // did kernel kill child?
+    1c38:	54fd                	li	s1,-1
+    pid = fork();
+    1c3a:	63f020ef          	jal	4a78 <fork>
+    if(pid < 0){
+    1c3e:	02054963          	bltz	a0,1c70 <MAXVAplus+0x54>
+    if(pid == 0){
+    1c42:	c129                	beqz	a0,1c84 <MAXVAplus+0x68>
+    wait(&xstatus);
+    1c44:	fd440513          	addi	a0,s0,-44
+    1c48:	641020ef          	jal	4a88 <wait>
+    if(xstatus != -1)  // did kernel kill child?
+    1c4c:	fd442783          	lw	a5,-44(s0)
+    1c50:	04979c63          	bne	a5,s1,1ca8 <MAXVAplus+0x8c>
+  for( ; a != 0; a <<= 1){
+    1c54:	fd843783          	ld	a5,-40(s0)
+    1c58:	0786                	slli	a5,a5,0x1
+    1c5a:	fcf43c23          	sd	a5,-40(s0)
+    1c5e:	fd843783          	ld	a5,-40(s0)
+    1c62:	ffe1                	bnez	a5,1c3a <MAXVAplus+0x1e>
+    1c64:	64e2                	ld	s1,24(sp)
+    1c66:	6942                	ld	s2,16(sp)
+}
+    1c68:	70a2                	ld	ra,40(sp)
+    1c6a:	7402                	ld	s0,32(sp)
+    1c6c:	6145                	addi	sp,sp,48
+    1c6e:	8082                	ret
+      printf("%s: fork failed\n", s);
+    1c70:	85ca                	mv	a1,s2
+    1c72:	00004517          	auipc	a0,0x4
+    1c76:	cb650513          	addi	a0,a0,-842 # 5928 <malloc+0x9c4>
+    1c7a:	236030ef          	jal	4eb0 <printf>
+      exit(1);
+    1c7e:	4505                	li	a0,1
+    1c80:	601020ef          	jal	4a80 <exit>
+      *(char*)a = 99;
+    1c84:	fd843783          	ld	a5,-40(s0)
+    1c88:	06300713          	li	a4,99
+    1c8c:	00e78023          	sb	a4,0(a5)
+      printf("%s: oops wrote %p\n", s, (void*)a);
+    1c90:	fd843603          	ld	a2,-40(s0)
+    1c94:	85ca                	mv	a1,s2
+    1c96:	00004517          	auipc	a0,0x4
+    1c9a:	f8250513          	addi	a0,a0,-126 # 5c18 <malloc+0xcb4>
+    1c9e:	212030ef          	jal	4eb0 <printf>
+      exit(1);
+    1ca2:	4505                	li	a0,1
+    1ca4:	5dd020ef          	jal	4a80 <exit>
+      exit(1);
+    1ca8:	4505                	li	a0,1
+    1caa:	5d7020ef          	jal	4a80 <exit>
+
+0000000000001cae <stacktest>:
+{
+    1cae:	7179                	addi	sp,sp,-48
+    1cb0:	f406                	sd	ra,40(sp)
+    1cb2:	f022                	sd	s0,32(sp)
+    1cb4:	ec26                	sd	s1,24(sp)
+    1cb6:	1800                	addi	s0,sp,48
+    1cb8:	84aa                	mv	s1,a0
+  pid = fork();
+    1cba:	5bf020ef          	jal	4a78 <fork>
+  if(pid == 0) {
+    1cbe:	cd11                	beqz	a0,1cda <stacktest+0x2c>
+  } else if(pid < 0){
+    1cc0:	02054c63          	bltz	a0,1cf8 <stacktest+0x4a>
+  wait(&xstatus);
+    1cc4:	fdc40513          	addi	a0,s0,-36
+    1cc8:	5c1020ef          	jal	4a88 <wait>
+  if(xstatus == -1)  // kernel killed child?
+    1ccc:	fdc42503          	lw	a0,-36(s0)
+    1cd0:	57fd                	li	a5,-1
+    1cd2:	02f50d63          	beq	a0,a5,1d0c <stacktest+0x5e>
+    exit(xstatus);
+    1cd6:	5ab020ef          	jal	4a80 <exit>
+
+static inline uint64
+r_sp()
+{
+  uint64 x;
+  asm volatile("mv %0, sp" : "=r" (x) );
+    1cda:	870a                	mv	a4,sp
+    printf("%s: stacktest: read below stack %d\n", s, *sp);
+    1cdc:	77f9                	lui	a5,0xffffe
+    1cde:	97ba                	add	a5,a5,a4
+    1ce0:	0007c603          	lbu	a2,0(a5) # ffffffffffffe000 <base+0xfffffffffffef388>
+    1ce4:	85a6                	mv	a1,s1
+    1ce6:	00004517          	auipc	a0,0x4
+    1cea:	f4a50513          	addi	a0,a0,-182 # 5c30 <malloc+0xccc>
+    1cee:	1c2030ef          	jal	4eb0 <printf>
+    exit(1);
+    1cf2:	4505                	li	a0,1
+    1cf4:	58d020ef          	jal	4a80 <exit>
+    printf("%s: fork failed\n", s);
+    1cf8:	85a6                	mv	a1,s1
+    1cfa:	00004517          	auipc	a0,0x4
+    1cfe:	c2e50513          	addi	a0,a0,-978 # 5928 <malloc+0x9c4>
+    1d02:	1ae030ef          	jal	4eb0 <printf>
+    exit(1);
+    1d06:	4505                	li	a0,1
+    1d08:	579020ef          	jal	4a80 <exit>
+    exit(0);
+    1d0c:	4501                	li	a0,0
+    1d0e:	573020ef          	jal	4a80 <exit>
+
+0000000000001d12 <nowrite>:
+{
+    1d12:	7159                	addi	sp,sp,-112
+    1d14:	f486                	sd	ra,104(sp)
+    1d16:	f0a2                	sd	s0,96(sp)
+    1d18:	eca6                	sd	s1,88(sp)
+    1d1a:	e8ca                	sd	s2,80(sp)
+    1d1c:	e4ce                	sd	s3,72(sp)
+    1d1e:	1880                	addi	s0,sp,112
+    1d20:	89aa                	mv	s3,a0
+  uint64 addrs[] = { 0, 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+    1d22:	00005797          	auipc	a5,0x5
+    1d26:	6d678793          	addi	a5,a5,1750 # 73f8 <malloc+0x2494>
+    1d2a:	7788                	ld	a0,40(a5)
+    1d2c:	7b8c                	ld	a1,48(a5)
+    1d2e:	7f90                	ld	a2,56(a5)
+    1d30:	63b4                	ld	a3,64(a5)
+    1d32:	67b8                	ld	a4,72(a5)
+    1d34:	6bbc                	ld	a5,80(a5)
+    1d36:	f8a43c23          	sd	a0,-104(s0)
+    1d3a:	fab43023          	sd	a1,-96(s0)
+    1d3e:	fac43423          	sd	a2,-88(s0)
+    1d42:	fad43823          	sd	a3,-80(s0)
+    1d46:	fae43c23          	sd	a4,-72(s0)
+    1d4a:	fcf43023          	sd	a5,-64(s0)
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    1d4e:	4481                	li	s1,0
+    1d50:	4919                	li	s2,6
+    pid = fork();
+    1d52:	527020ef          	jal	4a78 <fork>
+    if(pid == 0) {
+    1d56:	c105                	beqz	a0,1d76 <nowrite+0x64>
+    } else if(pid < 0){
+    1d58:	04054263          	bltz	a0,1d9c <nowrite+0x8a>
+    wait(&xstatus);
+    1d5c:	fcc40513          	addi	a0,s0,-52
+    1d60:	529020ef          	jal	4a88 <wait>
+    if(xstatus == 0){
+    1d64:	fcc42783          	lw	a5,-52(s0)
+    1d68:	c7a1                	beqz	a5,1db0 <nowrite+0x9e>
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    1d6a:	2485                	addiw	s1,s1,1
+    1d6c:	ff2493e3          	bne	s1,s2,1d52 <nowrite+0x40>
+  exit(0);
+    1d70:	4501                	li	a0,0
+    1d72:	50f020ef          	jal	4a80 <exit>
+      volatile int *addr = (int *) addrs[ai];
+    1d76:	048e                	slli	s1,s1,0x3
+    1d78:	fd048793          	addi	a5,s1,-48
+    1d7c:	008784b3          	add	s1,a5,s0
+    1d80:	fc84b603          	ld	a2,-56(s1)
+      *addr = 10;
+    1d84:	47a9                	li	a5,10
+    1d86:	c21c                	sw	a5,0(a2)
+      printf("%s: write to %p did not fail!\n", s, addr);
+    1d88:	85ce                	mv	a1,s3
+    1d8a:	00004517          	auipc	a0,0x4
+    1d8e:	ece50513          	addi	a0,a0,-306 # 5c58 <malloc+0xcf4>
+    1d92:	11e030ef          	jal	4eb0 <printf>
+      exit(0);
+    1d96:	4501                	li	a0,0
+    1d98:	4e9020ef          	jal	4a80 <exit>
+      printf("%s: fork failed\n", s);
+    1d9c:	85ce                	mv	a1,s3
+    1d9e:	00004517          	auipc	a0,0x4
+    1da2:	b8a50513          	addi	a0,a0,-1142 # 5928 <malloc+0x9c4>
+    1da6:	10a030ef          	jal	4eb0 <printf>
+      exit(1);
+    1daa:	4505                	li	a0,1
+    1dac:	4d5020ef          	jal	4a80 <exit>
+      exit(1);
+    1db0:	4505                	li	a0,1
+    1db2:	4cf020ef          	jal	4a80 <exit>
+
+0000000000001db6 <manywrites>:
+{
+    1db6:	711d                	addi	sp,sp,-96
+    1db8:	ec86                	sd	ra,88(sp)
+    1dba:	e8a2                	sd	s0,80(sp)
+    1dbc:	e4a6                	sd	s1,72(sp)
+    1dbe:	e0ca                	sd	s2,64(sp)
+    1dc0:	fc4e                	sd	s3,56(sp)
+    1dc2:	f456                	sd	s5,40(sp)
+    1dc4:	1080                	addi	s0,sp,96
+    1dc6:	8aaa                	mv	s5,a0
+  for(int ci = 0; ci < nchildren; ci++){
+    1dc8:	4981                	li	s3,0
+    1dca:	4911                	li	s2,4
+    int pid = fork();
+    1dcc:	4ad020ef          	jal	4a78 <fork>
+    1dd0:	84aa                	mv	s1,a0
+    if(pid < 0){
+    1dd2:	02054963          	bltz	a0,1e04 <manywrites+0x4e>
+    if(pid == 0){
+    1dd6:	c139                	beqz	a0,1e1c <manywrites+0x66>
+  for(int ci = 0; ci < nchildren; ci++){
+    1dd8:	2985                	addiw	s3,s3,1
+    1dda:	ff2999e3          	bne	s3,s2,1dcc <manywrites+0x16>
+    1dde:	f852                	sd	s4,48(sp)
+    1de0:	f05a                	sd	s6,32(sp)
+    1de2:	ec5e                	sd	s7,24(sp)
+    1de4:	4491                	li	s1,4
+    int st = 0;
+    1de6:	fa042423          	sw	zero,-88(s0)
+    wait(&st);
+    1dea:	fa840513          	addi	a0,s0,-88
+    1dee:	49b020ef          	jal	4a88 <wait>
+    if(st != 0)
+    1df2:	fa842503          	lw	a0,-88(s0)
+    1df6:	0c051863          	bnez	a0,1ec6 <manywrites+0x110>
+  for(int ci = 0; ci < nchildren; ci++){
+    1dfa:	34fd                	addiw	s1,s1,-1
+    1dfc:	f4ed                	bnez	s1,1de6 <manywrites+0x30>
+  exit(0);
+    1dfe:	4501                	li	a0,0
+    1e00:	481020ef          	jal	4a80 <exit>
+    1e04:	f852                	sd	s4,48(sp)
+    1e06:	f05a                	sd	s6,32(sp)
+    1e08:	ec5e                	sd	s7,24(sp)
+      printf("fork failed\n");
+    1e0a:	00005517          	auipc	a0,0x5
+    1e0e:	08e50513          	addi	a0,a0,142 # 6e98 <malloc+0x1f34>
+    1e12:	09e030ef          	jal	4eb0 <printf>
+      exit(1);
+    1e16:	4505                	li	a0,1
+    1e18:	469020ef          	jal	4a80 <exit>
+    1e1c:	f852                	sd	s4,48(sp)
+    1e1e:	f05a                	sd	s6,32(sp)
+    1e20:	ec5e                	sd	s7,24(sp)
+      name[0] = 'b';
+    1e22:	06200793          	li	a5,98
+    1e26:	faf40423          	sb	a5,-88(s0)
+      name[1] = 'a' + ci;
+    1e2a:	0619879b          	addiw	a5,s3,97
+    1e2e:	faf404a3          	sb	a5,-87(s0)
+      name[2] = '\0';
+    1e32:	fa040523          	sb	zero,-86(s0)
+      unlink(name);
+    1e36:	fa840513          	addi	a0,s0,-88
+    1e3a:	497020ef          	jal	4ad0 <unlink>
+    1e3e:	4bf9                	li	s7,30
+          int cc = write(fd, buf, sz);
+    1e40:	0000ab17          	auipc	s6,0xa
+    1e44:	e38b0b13          	addi	s6,s6,-456 # bc78 <buf>
+        for(int i = 0; i < ci+1; i++){
+    1e48:	8a26                	mv	s4,s1
+    1e4a:	0209c863          	bltz	s3,1e7a <manywrites+0xc4>
+          int fd = open(name, O_CREATE | O_RDWR);
+    1e4e:	20200593          	li	a1,514
+    1e52:	fa840513          	addi	a0,s0,-88
+    1e56:	46b020ef          	jal	4ac0 <open>
+    1e5a:	892a                	mv	s2,a0
+          if(fd < 0){
+    1e5c:	02054d63          	bltz	a0,1e96 <manywrites+0xe0>
+          int cc = write(fd, buf, sz);
+    1e60:	660d                	lui	a2,0x3
+    1e62:	85da                	mv	a1,s6
+    1e64:	43d020ef          	jal	4aa0 <write>
+          if(cc != sz){
+    1e68:	678d                	lui	a5,0x3
+    1e6a:	04f51263          	bne	a0,a5,1eae <manywrites+0xf8>
+          close(fd);
+    1e6e:	854a                	mv	a0,s2
+    1e70:	439020ef          	jal	4aa8 <close>
+        for(int i = 0; i < ci+1; i++){
+    1e74:	2a05                	addiw	s4,s4,1
+    1e76:	fd49dce3          	bge	s3,s4,1e4e <manywrites+0x98>
+        unlink(name);
+    1e7a:	fa840513          	addi	a0,s0,-88
+    1e7e:	453020ef          	jal	4ad0 <unlink>
+      for(int iters = 0; iters < howmany; iters++){
+    1e82:	3bfd                	addiw	s7,s7,-1
+    1e84:	fc0b92e3          	bnez	s7,1e48 <manywrites+0x92>
+      unlink(name);
+    1e88:	fa840513          	addi	a0,s0,-88
+    1e8c:	445020ef          	jal	4ad0 <unlink>
+      exit(0);
+    1e90:	4501                	li	a0,0
+    1e92:	3ef020ef          	jal	4a80 <exit>
+            printf("%s: cannot create %s\n", s, name);
+    1e96:	fa840613          	addi	a2,s0,-88
+    1e9a:	85d6                	mv	a1,s5
+    1e9c:	00004517          	auipc	a0,0x4
+    1ea0:	ddc50513          	addi	a0,a0,-548 # 5c78 <malloc+0xd14>
+    1ea4:	00c030ef          	jal	4eb0 <printf>
+            exit(1);
+    1ea8:	4505                	li	a0,1
+    1eaa:	3d7020ef          	jal	4a80 <exit>
+            printf("%s: write(%d) ret %d\n", s, sz, cc);
+    1eae:	86aa                	mv	a3,a0
+    1eb0:	660d                	lui	a2,0x3
+    1eb2:	85d6                	mv	a1,s5
+    1eb4:	00003517          	auipc	a0,0x3
+    1eb8:	2b450513          	addi	a0,a0,692 # 5168 <malloc+0x204>
+    1ebc:	7f5020ef          	jal	4eb0 <printf>
+            exit(1);
+    1ec0:	4505                	li	a0,1
+    1ec2:	3bf020ef          	jal	4a80 <exit>
+      exit(st);
+    1ec6:	3bb020ef          	jal	4a80 <exit>
+
+0000000000001eca <copyinstr3>:
+{
+    1eca:	7179                	addi	sp,sp,-48
+    1ecc:	f406                	sd	ra,40(sp)
+    1ece:	f022                	sd	s0,32(sp)
+    1ed0:	ec26                	sd	s1,24(sp)
+    1ed2:	1800                	addi	s0,sp,48
+  sbrk(8192);
+    1ed4:	6509                	lui	a0,0x2
+    1ed6:	433020ef          	jal	4b08 <sbrk>
+  uint64 top = (uint64) sbrk(0);
+    1eda:	4501                	li	a0,0
+    1edc:	42d020ef          	jal	4b08 <sbrk>
+  if((top % PGSIZE) != 0){
+    1ee0:	03451793          	slli	a5,a0,0x34
+    1ee4:	e7bd                	bnez	a5,1f52 <copyinstr3+0x88>
+  top = (uint64) sbrk(0);
+    1ee6:	4501                	li	a0,0
+    1ee8:	421020ef          	jal	4b08 <sbrk>
+  if(top % PGSIZE){
+    1eec:	03451793          	slli	a5,a0,0x34
+    1ef0:	ebad                	bnez	a5,1f62 <copyinstr3+0x98>
+  char *b = (char *) (top - 1);
+    1ef2:	fff50493          	addi	s1,a0,-1 # 1fff <rwsbrk+0x31>
+  *b = 'x';
+    1ef6:	07800793          	li	a5,120
+    1efa:	fef50fa3          	sb	a5,-1(a0)
+  int ret = unlink(b);
+    1efe:	8526                	mv	a0,s1
+    1f00:	3d1020ef          	jal	4ad0 <unlink>
+  if(ret != -1){
+    1f04:	57fd                	li	a5,-1
+    1f06:	06f51763          	bne	a0,a5,1f74 <copyinstr3+0xaa>
+  int fd = open(b, O_CREATE | O_WRONLY);
+    1f0a:	20100593          	li	a1,513
+    1f0e:	8526                	mv	a0,s1
+    1f10:	3b1020ef          	jal	4ac0 <open>
+  if(fd != -1){
+    1f14:	57fd                	li	a5,-1
+    1f16:	06f51a63          	bne	a0,a5,1f8a <copyinstr3+0xc0>
+  ret = link(b, b);
+    1f1a:	85a6                	mv	a1,s1
+    1f1c:	8526                	mv	a0,s1
+    1f1e:	3c3020ef          	jal	4ae0 <link>
+  if(ret != -1){
+    1f22:	57fd                	li	a5,-1
+    1f24:	06f51e63          	bne	a0,a5,1fa0 <copyinstr3+0xd6>
+  char *args[] = { "xx", 0 };
+    1f28:	00005797          	auipc	a5,0x5
+    1f2c:	a5078793          	addi	a5,a5,-1456 # 6978 <malloc+0x1a14>
+    1f30:	fcf43823          	sd	a5,-48(s0)
+    1f34:	fc043c23          	sd	zero,-40(s0)
+  ret = exec(b, args);
+    1f38:	fd040593          	addi	a1,s0,-48
+    1f3c:	8526                	mv	a0,s1
+    1f3e:	37b020ef          	jal	4ab8 <exec>
+  if(ret != -1){
+    1f42:	57fd                	li	a5,-1
+    1f44:	06f51a63          	bne	a0,a5,1fb8 <copyinstr3+0xee>
+}
+    1f48:	70a2                	ld	ra,40(sp)
+    1f4a:	7402                	ld	s0,32(sp)
+    1f4c:	64e2                	ld	s1,24(sp)
+    1f4e:	6145                	addi	sp,sp,48
+    1f50:	8082                	ret
+    sbrk(PGSIZE - (top % PGSIZE));
+    1f52:	0347d513          	srli	a0,a5,0x34
+    1f56:	6785                	lui	a5,0x1
+    1f58:	40a7853b          	subw	a0,a5,a0
+    1f5c:	3ad020ef          	jal	4b08 <sbrk>
+    1f60:	b759                	j	1ee6 <copyinstr3+0x1c>
+    printf("oops\n");
+    1f62:	00004517          	auipc	a0,0x4
+    1f66:	d2e50513          	addi	a0,a0,-722 # 5c90 <malloc+0xd2c>
+    1f6a:	747020ef          	jal	4eb0 <printf>
+    exit(1);
+    1f6e:	4505                	li	a0,1
+    1f70:	311020ef          	jal	4a80 <exit>
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    1f74:	862a                	mv	a2,a0
+    1f76:	85a6                	mv	a1,s1
+    1f78:	00004517          	auipc	a0,0x4
+    1f7c:	8d050513          	addi	a0,a0,-1840 # 5848 <malloc+0x8e4>
+    1f80:	731020ef          	jal	4eb0 <printf>
+    exit(1);
+    1f84:	4505                	li	a0,1
+    1f86:	2fb020ef          	jal	4a80 <exit>
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    1f8a:	862a                	mv	a2,a0
+    1f8c:	85a6                	mv	a1,s1
+    1f8e:	00004517          	auipc	a0,0x4
+    1f92:	8da50513          	addi	a0,a0,-1830 # 5868 <malloc+0x904>
+    1f96:	71b020ef          	jal	4eb0 <printf>
+    exit(1);
+    1f9a:	4505                	li	a0,1
+    1f9c:	2e5020ef          	jal	4a80 <exit>
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    1fa0:	86aa                	mv	a3,a0
+    1fa2:	8626                	mv	a2,s1
+    1fa4:	85a6                	mv	a1,s1
+    1fa6:	00004517          	auipc	a0,0x4
+    1faa:	8e250513          	addi	a0,a0,-1822 # 5888 <malloc+0x924>
+    1fae:	703020ef          	jal	4eb0 <printf>
+    exit(1);
+    1fb2:	4505                	li	a0,1
+    1fb4:	2cd020ef          	jal	4a80 <exit>
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    1fb8:	567d                	li	a2,-1
+    1fba:	85a6                	mv	a1,s1
+    1fbc:	00004517          	auipc	a0,0x4
+    1fc0:	8f450513          	addi	a0,a0,-1804 # 58b0 <malloc+0x94c>
+    1fc4:	6ed020ef          	jal	4eb0 <printf>
+    exit(1);
+    1fc8:	4505                	li	a0,1
+    1fca:	2b7020ef          	jal	4a80 <exit>
+
+0000000000001fce <rwsbrk>:
+{
+    1fce:	1101                	addi	sp,sp,-32
+    1fd0:	ec06                	sd	ra,24(sp)
+    1fd2:	e822                	sd	s0,16(sp)
+    1fd4:	1000                	addi	s0,sp,32
+  uint64 a = (uint64) sbrk(8192);
+    1fd6:	6509                	lui	a0,0x2
+    1fd8:	331020ef          	jal	4b08 <sbrk>
+  if(a == 0xffffffffffffffffLL) {
+    1fdc:	57fd                	li	a5,-1
+    1fde:	04f50a63          	beq	a0,a5,2032 <rwsbrk+0x64>
+    1fe2:	e426                	sd	s1,8(sp)
+    1fe4:	84aa                	mv	s1,a0
+  if ((uint64) sbrk(-8192) ==  0xffffffffffffffffLL) {
+    1fe6:	7579                	lui	a0,0xffffe
+    1fe8:	321020ef          	jal	4b08 <sbrk>
+    1fec:	57fd                	li	a5,-1
+    1fee:	04f50d63          	beq	a0,a5,2048 <rwsbrk+0x7a>
+    1ff2:	e04a                	sd	s2,0(sp)
+  fd = open("rwsbrk", O_CREATE|O_WRONLY);
+    1ff4:	20100593          	li	a1,513
+    1ff8:	00004517          	auipc	a0,0x4
+    1ffc:	cd850513          	addi	a0,a0,-808 # 5cd0 <malloc+0xd6c>
+    2000:	2c1020ef          	jal	4ac0 <open>
+    2004:	892a                	mv	s2,a0
+  if(fd < 0){
+    2006:	04054b63          	bltz	a0,205c <rwsbrk+0x8e>
+  n = write(fd, (void*)(a+4096), 1024);
+    200a:	6785                	lui	a5,0x1
+    200c:	94be                	add	s1,s1,a5
+    200e:	40000613          	li	a2,1024
+    2012:	85a6                	mv	a1,s1
+    2014:	28d020ef          	jal	4aa0 <write>
+    2018:	862a                	mv	a2,a0
+  if(n >= 0){
+    201a:	04054a63          	bltz	a0,206e <rwsbrk+0xa0>
+    printf("write(fd, %p, 1024) returned %d, not -1\n", (void*)a+4096, n);
+    201e:	85a6                	mv	a1,s1
+    2020:	00004517          	auipc	a0,0x4
+    2024:	cd050513          	addi	a0,a0,-816 # 5cf0 <malloc+0xd8c>
+    2028:	689020ef          	jal	4eb0 <printf>
+    exit(1);
+    202c:	4505                	li	a0,1
+    202e:	253020ef          	jal	4a80 <exit>
+    2032:	e426                	sd	s1,8(sp)
+    2034:	e04a                	sd	s2,0(sp)
+    printf("sbrk(rwsbrk) failed\n");
+    2036:	00004517          	auipc	a0,0x4
+    203a:	c6250513          	addi	a0,a0,-926 # 5c98 <malloc+0xd34>
+    203e:	673020ef          	jal	4eb0 <printf>
+    exit(1);
+    2042:	4505                	li	a0,1
+    2044:	23d020ef          	jal	4a80 <exit>
+    2048:	e04a                	sd	s2,0(sp)
+    printf("sbrk(rwsbrk) shrink failed\n");
+    204a:	00004517          	auipc	a0,0x4
+    204e:	c6650513          	addi	a0,a0,-922 # 5cb0 <malloc+0xd4c>
+    2052:	65f020ef          	jal	4eb0 <printf>
+    exit(1);
+    2056:	4505                	li	a0,1
+    2058:	229020ef          	jal	4a80 <exit>
+    printf("open(rwsbrk) failed\n");
+    205c:	00004517          	auipc	a0,0x4
+    2060:	c7c50513          	addi	a0,a0,-900 # 5cd8 <malloc+0xd74>
+    2064:	64d020ef          	jal	4eb0 <printf>
+    exit(1);
+    2068:	4505                	li	a0,1
+    206a:	217020ef          	jal	4a80 <exit>
+  close(fd);
+    206e:	854a                	mv	a0,s2
+    2070:	239020ef          	jal	4aa8 <close>
+  unlink("rwsbrk");
+    2074:	00004517          	auipc	a0,0x4
+    2078:	c5c50513          	addi	a0,a0,-932 # 5cd0 <malloc+0xd6c>
+    207c:	255020ef          	jal	4ad0 <unlink>
+  fd = open("README", O_RDONLY);
+    2080:	4581                	li	a1,0
+    2082:	00003517          	auipc	a0,0x3
+    2086:	1ee50513          	addi	a0,a0,494 # 5270 <malloc+0x30c>
+    208a:	237020ef          	jal	4ac0 <open>
+    208e:	892a                	mv	s2,a0
+  if(fd < 0){
+    2090:	02054363          	bltz	a0,20b6 <rwsbrk+0xe8>
+  n = read(fd, (void*)(a+4096), 10);
+    2094:	4629                	li	a2,10
+    2096:	85a6                	mv	a1,s1
+    2098:	201020ef          	jal	4a98 <read>
+    209c:	862a                	mv	a2,a0
+  if(n >= 0){
+    209e:	02054563          	bltz	a0,20c8 <rwsbrk+0xfa>
+    printf("read(fd, %p, 10) returned %d, not -1\n", (void*)a+4096, n);
+    20a2:	85a6                	mv	a1,s1
+    20a4:	00004517          	auipc	a0,0x4
+    20a8:	c7c50513          	addi	a0,a0,-900 # 5d20 <malloc+0xdbc>
+    20ac:	605020ef          	jal	4eb0 <printf>
+    exit(1);
+    20b0:	4505                	li	a0,1
+    20b2:	1cf020ef          	jal	4a80 <exit>
+    printf("open(rwsbrk) failed\n");
+    20b6:	00004517          	auipc	a0,0x4
+    20ba:	c2250513          	addi	a0,a0,-990 # 5cd8 <malloc+0xd74>
+    20be:	5f3020ef          	jal	4eb0 <printf>
+    exit(1);
+    20c2:	4505                	li	a0,1
+    20c4:	1bd020ef          	jal	4a80 <exit>
+  close(fd);
+    20c8:	854a                	mv	a0,s2
+    20ca:	1df020ef          	jal	4aa8 <close>
+  exit(0);
+    20ce:	4501                	li	a0,0
+    20d0:	1b1020ef          	jal	4a80 <exit>
+
+00000000000020d4 <sbrkbasic>:
+{
+    20d4:	7139                	addi	sp,sp,-64
+    20d6:	fc06                	sd	ra,56(sp)
+    20d8:	f822                	sd	s0,48(sp)
+    20da:	ec4e                	sd	s3,24(sp)
+    20dc:	0080                	addi	s0,sp,64
+    20de:	89aa                	mv	s3,a0
+  pid = fork();
+    20e0:	199020ef          	jal	4a78 <fork>
+  if(pid < 0){
+    20e4:	02054b63          	bltz	a0,211a <sbrkbasic+0x46>
+  if(pid == 0){
+    20e8:	e939                	bnez	a0,213e <sbrkbasic+0x6a>
+    a = sbrk(TOOMUCH);
+    20ea:	40000537          	lui	a0,0x40000
+    20ee:	21b020ef          	jal	4b08 <sbrk>
+    if(a == (char*)0xffffffffffffffffL){
+    20f2:	57fd                	li	a5,-1
+    20f4:	02f50f63          	beq	a0,a5,2132 <sbrkbasic+0x5e>
+    20f8:	f426                	sd	s1,40(sp)
+    20fa:	f04a                	sd	s2,32(sp)
+    20fc:	e852                	sd	s4,16(sp)
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    20fe:	400007b7          	lui	a5,0x40000
+    2102:	97aa                	add	a5,a5,a0
+      *b = 99;
+    2104:	06300693          	li	a3,99
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    2108:	6705                	lui	a4,0x1
+      *b = 99;
+    210a:	00d50023          	sb	a3,0(a0) # 40000000 <base+0x3fff1388>
+    for(b = a; b < a+TOOMUCH; b += 4096){
+    210e:	953a                	add	a0,a0,a4
+    2110:	fef51de3          	bne	a0,a5,210a <sbrkbasic+0x36>
+    exit(1);
+    2114:	4505                	li	a0,1
+    2116:	16b020ef          	jal	4a80 <exit>
+    211a:	f426                	sd	s1,40(sp)
+    211c:	f04a                	sd	s2,32(sp)
+    211e:	e852                	sd	s4,16(sp)
+    printf("fork failed in sbrkbasic\n");
+    2120:	00004517          	auipc	a0,0x4
+    2124:	c2850513          	addi	a0,a0,-984 # 5d48 <malloc+0xde4>
+    2128:	589020ef          	jal	4eb0 <printf>
+    exit(1);
+    212c:	4505                	li	a0,1
+    212e:	153020ef          	jal	4a80 <exit>
+    2132:	f426                	sd	s1,40(sp)
+    2134:	f04a                	sd	s2,32(sp)
+    2136:	e852                	sd	s4,16(sp)
+      exit(0);
+    2138:	4501                	li	a0,0
+    213a:	147020ef          	jal	4a80 <exit>
+  wait(&xstatus);
+    213e:	fcc40513          	addi	a0,s0,-52
+    2142:	147020ef          	jal	4a88 <wait>
+  if(xstatus == 1){
+    2146:	fcc42703          	lw	a4,-52(s0)
+    214a:	4785                	li	a5,1
+    214c:	00f70e63          	beq	a4,a5,2168 <sbrkbasic+0x94>
+    2150:	f426                	sd	s1,40(sp)
+    2152:	f04a                	sd	s2,32(sp)
+    2154:	e852                	sd	s4,16(sp)
+  a = sbrk(0);
+    2156:	4501                	li	a0,0
+    2158:	1b1020ef          	jal	4b08 <sbrk>
+    215c:	84aa                	mv	s1,a0
+  for(i = 0; i < 5000; i++){
+    215e:	4901                	li	s2,0
+    2160:	6a05                	lui	s4,0x1
+    2162:	388a0a13          	addi	s4,s4,904 # 1388 <exectest+0x4a>
+    2166:	a839                	j	2184 <sbrkbasic+0xb0>
+    2168:	f426                	sd	s1,40(sp)
+    216a:	f04a                	sd	s2,32(sp)
+    216c:	e852                	sd	s4,16(sp)
+    printf("%s: too much memory allocated!\n", s);
+    216e:	85ce                	mv	a1,s3
+    2170:	00004517          	auipc	a0,0x4
+    2174:	bf850513          	addi	a0,a0,-1032 # 5d68 <malloc+0xe04>
+    2178:	539020ef          	jal	4eb0 <printf>
+    exit(1);
+    217c:	4505                	li	a0,1
+    217e:	103020ef          	jal	4a80 <exit>
+    2182:	84be                	mv	s1,a5
+    b = sbrk(1);
+    2184:	4505                	li	a0,1
+    2186:	183020ef          	jal	4b08 <sbrk>
+    if(b != a){
+    218a:	04951263          	bne	a0,s1,21ce <sbrkbasic+0xfa>
+    *b = 1;
+    218e:	4785                	li	a5,1
+    2190:	00f48023          	sb	a5,0(s1)
+    a = b + 1;
+    2194:	00148793          	addi	a5,s1,1
+  for(i = 0; i < 5000; i++){
+    2198:	2905                	addiw	s2,s2,1
+    219a:	ff4914e3          	bne	s2,s4,2182 <sbrkbasic+0xae>
+  pid = fork();
+    219e:	0db020ef          	jal	4a78 <fork>
+    21a2:	892a                	mv	s2,a0
+  if(pid < 0){
+    21a4:	04054263          	bltz	a0,21e8 <sbrkbasic+0x114>
+  c = sbrk(1);
+    21a8:	4505                	li	a0,1
+    21aa:	15f020ef          	jal	4b08 <sbrk>
+  c = sbrk(1);
+    21ae:	4505                	li	a0,1
+    21b0:	159020ef          	jal	4b08 <sbrk>
+  if(c != a + 1){
+    21b4:	0489                	addi	s1,s1,2
+    21b6:	04a48363          	beq	s1,a0,21fc <sbrkbasic+0x128>
+    printf("%s: sbrk test failed post-fork\n", s);
+    21ba:	85ce                	mv	a1,s3
+    21bc:	00004517          	auipc	a0,0x4
+    21c0:	c0c50513          	addi	a0,a0,-1012 # 5dc8 <malloc+0xe64>
+    21c4:	4ed020ef          	jal	4eb0 <printf>
+    exit(1);
+    21c8:	4505                	li	a0,1
+    21ca:	0b7020ef          	jal	4a80 <exit>
+      printf("%s: sbrk test failed %d %p %p\n", s, i, a, b);
+    21ce:	872a                	mv	a4,a0
+    21d0:	86a6                	mv	a3,s1
+    21d2:	864a                	mv	a2,s2
+    21d4:	85ce                	mv	a1,s3
+    21d6:	00004517          	auipc	a0,0x4
+    21da:	bb250513          	addi	a0,a0,-1102 # 5d88 <malloc+0xe24>
+    21de:	4d3020ef          	jal	4eb0 <printf>
+      exit(1);
+    21e2:	4505                	li	a0,1
+    21e4:	09d020ef          	jal	4a80 <exit>
+    printf("%s: sbrk test fork failed\n", s);
+    21e8:	85ce                	mv	a1,s3
+    21ea:	00004517          	auipc	a0,0x4
+    21ee:	bbe50513          	addi	a0,a0,-1090 # 5da8 <malloc+0xe44>
+    21f2:	4bf020ef          	jal	4eb0 <printf>
+    exit(1);
+    21f6:	4505                	li	a0,1
+    21f8:	089020ef          	jal	4a80 <exit>
+  if(pid == 0)
+    21fc:	00091563          	bnez	s2,2206 <sbrkbasic+0x132>
+    exit(0);
+    2200:	4501                	li	a0,0
+    2202:	07f020ef          	jal	4a80 <exit>
+  wait(&xstatus);
+    2206:	fcc40513          	addi	a0,s0,-52
+    220a:	07f020ef          	jal	4a88 <wait>
+  exit(xstatus);
+    220e:	fcc42503          	lw	a0,-52(s0)
+    2212:	06f020ef          	jal	4a80 <exit>
+
+0000000000002216 <sbrkmuch>:
+{
+    2216:	7179                	addi	sp,sp,-48
+    2218:	f406                	sd	ra,40(sp)
+    221a:	f022                	sd	s0,32(sp)
+    221c:	ec26                	sd	s1,24(sp)
+    221e:	e84a                	sd	s2,16(sp)
+    2220:	e44e                	sd	s3,8(sp)
+    2222:	e052                	sd	s4,0(sp)
+    2224:	1800                	addi	s0,sp,48
+    2226:	89aa                	mv	s3,a0
+  oldbrk = sbrk(0);
+    2228:	4501                	li	a0,0
+    222a:	0df020ef          	jal	4b08 <sbrk>
+    222e:	892a                	mv	s2,a0
+  a = sbrk(0);
+    2230:	4501                	li	a0,0
+    2232:	0d7020ef          	jal	4b08 <sbrk>
+    2236:	84aa                	mv	s1,a0
+  p = sbrk(amt);
+    2238:	06400537          	lui	a0,0x6400
+    223c:	9d05                	subw	a0,a0,s1
+    223e:	0cb020ef          	jal	4b08 <sbrk>
+  if (p != a) {
+    2242:	0aa49463          	bne	s1,a0,22ea <sbrkmuch+0xd4>
+  char *eee = sbrk(0);
+    2246:	4501                	li	a0,0
+    2248:	0c1020ef          	jal	4b08 <sbrk>
+    224c:	87aa                	mv	a5,a0
+  for(char *pp = a; pp < eee; pp += 4096)
+    224e:	00a4f963          	bgeu	s1,a0,2260 <sbrkmuch+0x4a>
+    *pp = 1;
+    2252:	4685                	li	a3,1
+  for(char *pp = a; pp < eee; pp += 4096)
+    2254:	6705                	lui	a4,0x1
+    *pp = 1;
+    2256:	00d48023          	sb	a3,0(s1)
+  for(char *pp = a; pp < eee; pp += 4096)
+    225a:	94ba                	add	s1,s1,a4
+    225c:	fef4ede3          	bltu	s1,a5,2256 <sbrkmuch+0x40>
+  *lastaddr = 99;
+    2260:	064007b7          	lui	a5,0x6400
+    2264:	06300713          	li	a4,99
+    2268:	fee78fa3          	sb	a4,-1(a5) # 63fffff <base+0x63f1387>
+  a = sbrk(0);
+    226c:	4501                	li	a0,0
+    226e:	09b020ef          	jal	4b08 <sbrk>
+    2272:	84aa                	mv	s1,a0
+  c = sbrk(-PGSIZE);
+    2274:	757d                	lui	a0,0xfffff
+    2276:	093020ef          	jal	4b08 <sbrk>
+  if(c == (char*)0xffffffffffffffffL){
+    227a:	57fd                	li	a5,-1
+    227c:	08f50163          	beq	a0,a5,22fe <sbrkmuch+0xe8>
+  c = sbrk(0);
+    2280:	4501                	li	a0,0
+    2282:	087020ef          	jal	4b08 <sbrk>
+  if(c != a - PGSIZE){
+    2286:	77fd                	lui	a5,0xfffff
+    2288:	97a6                	add	a5,a5,s1
+    228a:	08f51463          	bne	a0,a5,2312 <sbrkmuch+0xfc>
+  a = sbrk(0);
+    228e:	4501                	li	a0,0
+    2290:	079020ef          	jal	4b08 <sbrk>
+    2294:	84aa                	mv	s1,a0
+  c = sbrk(PGSIZE);
+    2296:	6505                	lui	a0,0x1
+    2298:	071020ef          	jal	4b08 <sbrk>
+    229c:	8a2a                	mv	s4,a0
+  if(c != a || sbrk(0) != a + PGSIZE){
+    229e:	08a49663          	bne	s1,a0,232a <sbrkmuch+0x114>
+    22a2:	4501                	li	a0,0
+    22a4:	065020ef          	jal	4b08 <sbrk>
+    22a8:	6785                	lui	a5,0x1
+    22aa:	97a6                	add	a5,a5,s1
+    22ac:	06f51f63          	bne	a0,a5,232a <sbrkmuch+0x114>
+  if(*lastaddr == 99){
+    22b0:	064007b7          	lui	a5,0x6400
+    22b4:	fff7c703          	lbu	a4,-1(a5) # 63fffff <base+0x63f1387>
+    22b8:	06300793          	li	a5,99
+    22bc:	08f70363          	beq	a4,a5,2342 <sbrkmuch+0x12c>
+  a = sbrk(0);
+    22c0:	4501                	li	a0,0
+    22c2:	047020ef          	jal	4b08 <sbrk>
+    22c6:	84aa                	mv	s1,a0
+  c = sbrk(-(sbrk(0) - oldbrk));
+    22c8:	4501                	li	a0,0
+    22ca:	03f020ef          	jal	4b08 <sbrk>
+    22ce:	40a9053b          	subw	a0,s2,a0
+    22d2:	037020ef          	jal	4b08 <sbrk>
+  if(c != a){
+    22d6:	08a49063          	bne	s1,a0,2356 <sbrkmuch+0x140>
+}
+    22da:	70a2                	ld	ra,40(sp)
+    22dc:	7402                	ld	s0,32(sp)
+    22de:	64e2                	ld	s1,24(sp)
+    22e0:	6942                	ld	s2,16(sp)
+    22e2:	69a2                	ld	s3,8(sp)
+    22e4:	6a02                	ld	s4,0(sp)
+    22e6:	6145                	addi	sp,sp,48
+    22e8:	8082                	ret
+    printf("%s: sbrk test failed to grow big address space; enough phys mem?\n", s);
+    22ea:	85ce                	mv	a1,s3
+    22ec:	00004517          	auipc	a0,0x4
+    22f0:	afc50513          	addi	a0,a0,-1284 # 5de8 <malloc+0xe84>
+    22f4:	3bd020ef          	jal	4eb0 <printf>
+    exit(1);
+    22f8:	4505                	li	a0,1
+    22fa:	786020ef          	jal	4a80 <exit>
+    printf("%s: sbrk could not deallocate\n", s);
+    22fe:	85ce                	mv	a1,s3
+    2300:	00004517          	auipc	a0,0x4
+    2304:	b3050513          	addi	a0,a0,-1232 # 5e30 <malloc+0xecc>
+    2308:	3a9020ef          	jal	4eb0 <printf>
+    exit(1);
+    230c:	4505                	li	a0,1
+    230e:	772020ef          	jal	4a80 <exit>
+    printf("%s: sbrk deallocation produced wrong address, a %p c %p\n", s, a, c);
+    2312:	86aa                	mv	a3,a0
+    2314:	8626                	mv	a2,s1
+    2316:	85ce                	mv	a1,s3
+    2318:	00004517          	auipc	a0,0x4
+    231c:	b3850513          	addi	a0,a0,-1224 # 5e50 <malloc+0xeec>
+    2320:	391020ef          	jal	4eb0 <printf>
+    exit(1);
+    2324:	4505                	li	a0,1
+    2326:	75a020ef          	jal	4a80 <exit>
+    printf("%s: sbrk re-allocation failed, a %p c %p\n", s, a, c);
+    232a:	86d2                	mv	a3,s4
+    232c:	8626                	mv	a2,s1
+    232e:	85ce                	mv	a1,s3
+    2330:	00004517          	auipc	a0,0x4
+    2334:	b6050513          	addi	a0,a0,-1184 # 5e90 <malloc+0xf2c>
+    2338:	379020ef          	jal	4eb0 <printf>
+    exit(1);
+    233c:	4505                	li	a0,1
+    233e:	742020ef          	jal	4a80 <exit>
+    printf("%s: sbrk de-allocation didn't really deallocate\n", s);
+    2342:	85ce                	mv	a1,s3
+    2344:	00004517          	auipc	a0,0x4
+    2348:	b7c50513          	addi	a0,a0,-1156 # 5ec0 <malloc+0xf5c>
+    234c:	365020ef          	jal	4eb0 <printf>
+    exit(1);
+    2350:	4505                	li	a0,1
+    2352:	72e020ef          	jal	4a80 <exit>
+    printf("%s: sbrk downsize failed, a %p c %p\n", s, a, c);
+    2356:	86aa                	mv	a3,a0
+    2358:	8626                	mv	a2,s1
+    235a:	85ce                	mv	a1,s3
+    235c:	00004517          	auipc	a0,0x4
+    2360:	b9c50513          	addi	a0,a0,-1124 # 5ef8 <malloc+0xf94>
+    2364:	34d020ef          	jal	4eb0 <printf>
+    exit(1);
+    2368:	4505                	li	a0,1
+    236a:	716020ef          	jal	4a80 <exit>
+
+000000000000236e <sbrkarg>:
+{
+    236e:	7179                	addi	sp,sp,-48
+    2370:	f406                	sd	ra,40(sp)
+    2372:	f022                	sd	s0,32(sp)
+    2374:	ec26                	sd	s1,24(sp)
+    2376:	e84a                	sd	s2,16(sp)
+    2378:	e44e                	sd	s3,8(sp)
+    237a:	1800                	addi	s0,sp,48
+    237c:	89aa                	mv	s3,a0
+  a = sbrk(PGSIZE);
+    237e:	6505                	lui	a0,0x1
+    2380:	788020ef          	jal	4b08 <sbrk>
+    2384:	892a                	mv	s2,a0
+  fd = open("sbrk", O_CREATE|O_WRONLY);
+    2386:	20100593          	li	a1,513
+    238a:	00004517          	auipc	a0,0x4
+    238e:	b9650513          	addi	a0,a0,-1130 # 5f20 <malloc+0xfbc>
+    2392:	72e020ef          	jal	4ac0 <open>
+    2396:	84aa                	mv	s1,a0
+  unlink("sbrk");
+    2398:	00004517          	auipc	a0,0x4
+    239c:	b8850513          	addi	a0,a0,-1144 # 5f20 <malloc+0xfbc>
+    23a0:	730020ef          	jal	4ad0 <unlink>
+  if(fd < 0)  {
+    23a4:	0204c963          	bltz	s1,23d6 <sbrkarg+0x68>
+  if ((n = write(fd, a, PGSIZE)) < 0) {
+    23a8:	6605                	lui	a2,0x1
+    23aa:	85ca                	mv	a1,s2
+    23ac:	8526                	mv	a0,s1
+    23ae:	6f2020ef          	jal	4aa0 <write>
+    23b2:	02054c63          	bltz	a0,23ea <sbrkarg+0x7c>
+  close(fd);
+    23b6:	8526                	mv	a0,s1
+    23b8:	6f0020ef          	jal	4aa8 <close>
+  a = sbrk(PGSIZE);
+    23bc:	6505                	lui	a0,0x1
+    23be:	74a020ef          	jal	4b08 <sbrk>
+  if(pipe((int *) a) != 0){
+    23c2:	6ce020ef          	jal	4a90 <pipe>
+    23c6:	ed05                	bnez	a0,23fe <sbrkarg+0x90>
+}
+    23c8:	70a2                	ld	ra,40(sp)
+    23ca:	7402                	ld	s0,32(sp)
+    23cc:	64e2                	ld	s1,24(sp)
+    23ce:	6942                	ld	s2,16(sp)
+    23d0:	69a2                	ld	s3,8(sp)
+    23d2:	6145                	addi	sp,sp,48
+    23d4:	8082                	ret
+    printf("%s: open sbrk failed\n", s);
+    23d6:	85ce                	mv	a1,s3
+    23d8:	00004517          	auipc	a0,0x4
+    23dc:	b5050513          	addi	a0,a0,-1200 # 5f28 <malloc+0xfc4>
+    23e0:	2d1020ef          	jal	4eb0 <printf>
+    exit(1);
+    23e4:	4505                	li	a0,1
+    23e6:	69a020ef          	jal	4a80 <exit>
+    printf("%s: write sbrk failed\n", s);
+    23ea:	85ce                	mv	a1,s3
+    23ec:	00004517          	auipc	a0,0x4
+    23f0:	b5450513          	addi	a0,a0,-1196 # 5f40 <malloc+0xfdc>
+    23f4:	2bd020ef          	jal	4eb0 <printf>
+    exit(1);
+    23f8:	4505                	li	a0,1
+    23fa:	686020ef          	jal	4a80 <exit>
+    printf("%s: pipe() failed\n", s);
+    23fe:	85ce                	mv	a1,s3
+    2400:	00003517          	auipc	a0,0x3
+    2404:	63050513          	addi	a0,a0,1584 # 5a30 <malloc+0xacc>
+    2408:	2a9020ef          	jal	4eb0 <printf>
+    exit(1);
+    240c:	4505                	li	a0,1
+    240e:	672020ef          	jal	4a80 <exit>
+
+0000000000002412 <argptest>:
+{
+    2412:	1101                	addi	sp,sp,-32
+    2414:	ec06                	sd	ra,24(sp)
+    2416:	e822                	sd	s0,16(sp)
+    2418:	e426                	sd	s1,8(sp)
+    241a:	e04a                	sd	s2,0(sp)
+    241c:	1000                	addi	s0,sp,32
+    241e:	892a                	mv	s2,a0
+  fd = open("init", O_RDONLY);
+    2420:	4581                	li	a1,0
+    2422:	00004517          	auipc	a0,0x4
+    2426:	b3650513          	addi	a0,a0,-1226 # 5f58 <malloc+0xff4>
+    242a:	696020ef          	jal	4ac0 <open>
+  if (fd < 0) {
+    242e:	02054563          	bltz	a0,2458 <argptest+0x46>
+    2432:	84aa                	mv	s1,a0
+  read(fd, sbrk(0) - 1, -1);
+    2434:	4501                	li	a0,0
+    2436:	6d2020ef          	jal	4b08 <sbrk>
+    243a:	567d                	li	a2,-1
+    243c:	fff50593          	addi	a1,a0,-1
+    2440:	8526                	mv	a0,s1
+    2442:	656020ef          	jal	4a98 <read>
+  close(fd);
+    2446:	8526                	mv	a0,s1
+    2448:	660020ef          	jal	4aa8 <close>
+}
+    244c:	60e2                	ld	ra,24(sp)
+    244e:	6442                	ld	s0,16(sp)
+    2450:	64a2                	ld	s1,8(sp)
+    2452:	6902                	ld	s2,0(sp)
+    2454:	6105                	addi	sp,sp,32
+    2456:	8082                	ret
+    printf("%s: open failed\n", s);
+    2458:	85ca                	mv	a1,s2
+    245a:	00003517          	auipc	a0,0x3
+    245e:	4e650513          	addi	a0,a0,1254 # 5940 <malloc+0x9dc>
+    2462:	24f020ef          	jal	4eb0 <printf>
+    exit(1);
+    2466:	4505                	li	a0,1
+    2468:	618020ef          	jal	4a80 <exit>
+
+000000000000246c <sbrkbugs>:
+{
+    246c:	1141                	addi	sp,sp,-16
+    246e:	e406                	sd	ra,8(sp)
+    2470:	e022                	sd	s0,0(sp)
+    2472:	0800                	addi	s0,sp,16
+  int pid = fork();
+    2474:	604020ef          	jal	4a78 <fork>
+  if(pid < 0){
+    2478:	00054c63          	bltz	a0,2490 <sbrkbugs+0x24>
+  if(pid == 0){
+    247c:	e11d                	bnez	a0,24a2 <sbrkbugs+0x36>
+    int sz = (uint64) sbrk(0);
+    247e:	68a020ef          	jal	4b08 <sbrk>
+    sbrk(-sz);
+    2482:	40a0053b          	negw	a0,a0
+    2486:	682020ef          	jal	4b08 <sbrk>
+    exit(0);
+    248a:	4501                	li	a0,0
+    248c:	5f4020ef          	jal	4a80 <exit>
+    printf("fork failed\n");
+    2490:	00005517          	auipc	a0,0x5
+    2494:	a0850513          	addi	a0,a0,-1528 # 6e98 <malloc+0x1f34>
+    2498:	219020ef          	jal	4eb0 <printf>
+    exit(1);
+    249c:	4505                	li	a0,1
+    249e:	5e2020ef          	jal	4a80 <exit>
+  wait(0);
+    24a2:	4501                	li	a0,0
+    24a4:	5e4020ef          	jal	4a88 <wait>
+  pid = fork();
+    24a8:	5d0020ef          	jal	4a78 <fork>
+  if(pid < 0){
+    24ac:	00054f63          	bltz	a0,24ca <sbrkbugs+0x5e>
+  if(pid == 0){
+    24b0:	e515                	bnez	a0,24dc <sbrkbugs+0x70>
+    int sz = (uint64) sbrk(0);
+    24b2:	656020ef          	jal	4b08 <sbrk>
+    sbrk(-(sz - 3500));
+    24b6:	6785                	lui	a5,0x1
+    24b8:	dac7879b          	addiw	a5,a5,-596 # dac <linktest+0x138>
+    24bc:	40a7853b          	subw	a0,a5,a0
+    24c0:	648020ef          	jal	4b08 <sbrk>
+    exit(0);
+    24c4:	4501                	li	a0,0
+    24c6:	5ba020ef          	jal	4a80 <exit>
+    printf("fork failed\n");
+    24ca:	00005517          	auipc	a0,0x5
+    24ce:	9ce50513          	addi	a0,a0,-1586 # 6e98 <malloc+0x1f34>
+    24d2:	1df020ef          	jal	4eb0 <printf>
+    exit(1);
+    24d6:	4505                	li	a0,1
+    24d8:	5a8020ef          	jal	4a80 <exit>
+  wait(0);
+    24dc:	4501                	li	a0,0
+    24de:	5aa020ef          	jal	4a88 <wait>
+  pid = fork();
+    24e2:	596020ef          	jal	4a78 <fork>
+  if(pid < 0){
+    24e6:	02054263          	bltz	a0,250a <sbrkbugs+0x9e>
+  if(pid == 0){
+    24ea:	e90d                	bnez	a0,251c <sbrkbugs+0xb0>
+    sbrk((10*4096 + 2048) - (uint64)sbrk(0));
+    24ec:	61c020ef          	jal	4b08 <sbrk>
+    24f0:	67ad                	lui	a5,0xb
+    24f2:	8007879b          	addiw	a5,a5,-2048 # a800 <uninit+0x1298>
+    24f6:	40a7853b          	subw	a0,a5,a0
+    24fa:	60e020ef          	jal	4b08 <sbrk>
+    sbrk(-10);
+    24fe:	5559                	li	a0,-10
+    2500:	608020ef          	jal	4b08 <sbrk>
+    exit(0);
+    2504:	4501                	li	a0,0
+    2506:	57a020ef          	jal	4a80 <exit>
+    printf("fork failed\n");
+    250a:	00005517          	auipc	a0,0x5
+    250e:	98e50513          	addi	a0,a0,-1650 # 6e98 <malloc+0x1f34>
+    2512:	19f020ef          	jal	4eb0 <printf>
+    exit(1);
+    2516:	4505                	li	a0,1
+    2518:	568020ef          	jal	4a80 <exit>
+  wait(0);
+    251c:	4501                	li	a0,0
+    251e:	56a020ef          	jal	4a88 <wait>
+  exit(0);
+    2522:	4501                	li	a0,0
+    2524:	55c020ef          	jal	4a80 <exit>
+
+0000000000002528 <sbrklast>:
+{
+    2528:	7179                	addi	sp,sp,-48
+    252a:	f406                	sd	ra,40(sp)
+    252c:	f022                	sd	s0,32(sp)
+    252e:	ec26                	sd	s1,24(sp)
+    2530:	e84a                	sd	s2,16(sp)
+    2532:	e44e                	sd	s3,8(sp)
+    2534:	e052                	sd	s4,0(sp)
+    2536:	1800                	addi	s0,sp,48
+  uint64 top = (uint64) sbrk(0);
+    2538:	4501                	li	a0,0
+    253a:	5ce020ef          	jal	4b08 <sbrk>
+  if((top % 4096) != 0)
+    253e:	03451793          	slli	a5,a0,0x34
+    2542:	ebad                	bnez	a5,25b4 <sbrklast+0x8c>
+  sbrk(4096);
+    2544:	6505                	lui	a0,0x1
+    2546:	5c2020ef          	jal	4b08 <sbrk>
+  sbrk(10);
+    254a:	4529                	li	a0,10
+    254c:	5bc020ef          	jal	4b08 <sbrk>
+  sbrk(-20);
+    2550:	5531                	li	a0,-20
+    2552:	5b6020ef          	jal	4b08 <sbrk>
+  top = (uint64) sbrk(0);
+    2556:	4501                	li	a0,0
+    2558:	5b0020ef          	jal	4b08 <sbrk>
+    255c:	84aa                	mv	s1,a0
+  char *p = (char *) (top - 64);
+    255e:	fc050913          	addi	s2,a0,-64 # fc0 <bigdir+0x122>
+  p[0] = 'x';
+    2562:	07800a13          	li	s4,120
+    2566:	fd450023          	sb	s4,-64(a0)
+  p[1] = '\0';
+    256a:	fc0500a3          	sb	zero,-63(a0)
+  int fd = open(p, O_RDWR|O_CREATE);
+    256e:	20200593          	li	a1,514
+    2572:	854a                	mv	a0,s2
+    2574:	54c020ef          	jal	4ac0 <open>
+    2578:	89aa                	mv	s3,a0
+  write(fd, p, 1);
+    257a:	4605                	li	a2,1
+    257c:	85ca                	mv	a1,s2
+    257e:	522020ef          	jal	4aa0 <write>
+  close(fd);
+    2582:	854e                	mv	a0,s3
+    2584:	524020ef          	jal	4aa8 <close>
+  fd = open(p, O_RDWR);
+    2588:	4589                	li	a1,2
+    258a:	854a                	mv	a0,s2
+    258c:	534020ef          	jal	4ac0 <open>
+  p[0] = '\0';
+    2590:	fc048023          	sb	zero,-64(s1)
+  read(fd, p, 1);
+    2594:	4605                	li	a2,1
+    2596:	85ca                	mv	a1,s2
+    2598:	500020ef          	jal	4a98 <read>
+  if(p[0] != 'x')
+    259c:	fc04c783          	lbu	a5,-64(s1)
+    25a0:	03479263          	bne	a5,s4,25c4 <sbrklast+0x9c>
+}
+    25a4:	70a2                	ld	ra,40(sp)
+    25a6:	7402                	ld	s0,32(sp)
+    25a8:	64e2                	ld	s1,24(sp)
+    25aa:	6942                	ld	s2,16(sp)
+    25ac:	69a2                	ld	s3,8(sp)
+    25ae:	6a02                	ld	s4,0(sp)
+    25b0:	6145                	addi	sp,sp,48
+    25b2:	8082                	ret
+    sbrk(4096 - (top % 4096));
+    25b4:	0347d513          	srli	a0,a5,0x34
+    25b8:	6785                	lui	a5,0x1
+    25ba:	40a7853b          	subw	a0,a5,a0
+    25be:	54a020ef          	jal	4b08 <sbrk>
+    25c2:	b749                	j	2544 <sbrklast+0x1c>
+    exit(1);
+    25c4:	4505                	li	a0,1
+    25c6:	4ba020ef          	jal	4a80 <exit>
+
+00000000000025ca <sbrk8000>:
+{
+    25ca:	1141                	addi	sp,sp,-16
+    25cc:	e406                	sd	ra,8(sp)
+    25ce:	e022                	sd	s0,0(sp)
+    25d0:	0800                	addi	s0,sp,16
+  sbrk(0x80000004);
+    25d2:	80000537          	lui	a0,0x80000
+    25d6:	0511                	addi	a0,a0,4 # ffffffff80000004 <base+0xffffffff7fff138c>
+    25d8:	530020ef          	jal	4b08 <sbrk>
+  volatile char *top = sbrk(0);
+    25dc:	4501                	li	a0,0
+    25de:	52a020ef          	jal	4b08 <sbrk>
+  *(top-1) = *(top-1) + 1;
+    25e2:	fff54783          	lbu	a5,-1(a0)
+    25e6:	2785                	addiw	a5,a5,1 # 1001 <badarg+0x1>
+    25e8:	0ff7f793          	zext.b	a5,a5
+    25ec:	fef50fa3          	sb	a5,-1(a0)
+}
+    25f0:	60a2                	ld	ra,8(sp)
+    25f2:	6402                	ld	s0,0(sp)
+    25f4:	0141                	addi	sp,sp,16
+    25f6:	8082                	ret
+
+00000000000025f8 <execout>:
+{
+    25f8:	715d                	addi	sp,sp,-80
+    25fa:	e486                	sd	ra,72(sp)
+    25fc:	e0a2                	sd	s0,64(sp)
+    25fe:	fc26                	sd	s1,56(sp)
+    2600:	f84a                	sd	s2,48(sp)
+    2602:	f44e                	sd	s3,40(sp)
+    2604:	f052                	sd	s4,32(sp)
+    2606:	0880                	addi	s0,sp,80
+  for(int avail = 0; avail < 15; avail++){
+    2608:	4901                	li	s2,0
+    260a:	49bd                	li	s3,15
+    int pid = fork();
+    260c:	46c020ef          	jal	4a78 <fork>
+    2610:	84aa                	mv	s1,a0
+    if(pid < 0){
+    2612:	00054c63          	bltz	a0,262a <execout+0x32>
+    } else if(pid == 0){
+    2616:	c11d                	beqz	a0,263c <execout+0x44>
+      wait((int*)0);
+    2618:	4501                	li	a0,0
+    261a:	46e020ef          	jal	4a88 <wait>
+  for(int avail = 0; avail < 15; avail++){
+    261e:	2905                	addiw	s2,s2,1
+    2620:	ff3916e3          	bne	s2,s3,260c <execout+0x14>
+  exit(0);
+    2624:	4501                	li	a0,0
+    2626:	45a020ef          	jal	4a80 <exit>
+      printf("fork failed\n");
+    262a:	00005517          	auipc	a0,0x5
+    262e:	86e50513          	addi	a0,a0,-1938 # 6e98 <malloc+0x1f34>
+    2632:	07f020ef          	jal	4eb0 <printf>
+      exit(1);
+    2636:	4505                	li	a0,1
+    2638:	448020ef          	jal	4a80 <exit>
+        if(a == 0xffffffffffffffffLL)
+    263c:	59fd                	li	s3,-1
+        *(char*)(a + 4096 - 1) = 1;
+    263e:	4a05                	li	s4,1
+        uint64 a = (uint64) sbrk(4096);
+    2640:	6505                	lui	a0,0x1
+    2642:	4c6020ef          	jal	4b08 <sbrk>
+        if(a == 0xffffffffffffffffLL)
+    2646:	01350763          	beq	a0,s3,2654 <execout+0x5c>
+        *(char*)(a + 4096 - 1) = 1;
+    264a:	6785                	lui	a5,0x1
+    264c:	97aa                	add	a5,a5,a0
+    264e:	ff478fa3          	sb	s4,-1(a5) # fff <pgbug+0x2b>
+      while(1){
+    2652:	b7fd                	j	2640 <execout+0x48>
+      for(int i = 0; i < avail; i++)
+    2654:	01205863          	blez	s2,2664 <execout+0x6c>
+        sbrk(-4096);
+    2658:	757d                	lui	a0,0xfffff
+    265a:	4ae020ef          	jal	4b08 <sbrk>
+      for(int i = 0; i < avail; i++)
+    265e:	2485                	addiw	s1,s1,1
+    2660:	ff249ce3          	bne	s1,s2,2658 <execout+0x60>
+      close(1);
+    2664:	4505                	li	a0,1
+    2666:	442020ef          	jal	4aa8 <close>
+      char *args[] = { "echo", "x", 0 };
+    266a:	00003517          	auipc	a0,0x3
+    266e:	a2e50513          	addi	a0,a0,-1490 # 5098 <malloc+0x134>
+    2672:	faa43c23          	sd	a0,-72(s0)
+    2676:	00003797          	auipc	a5,0x3
+    267a:	a9278793          	addi	a5,a5,-1390 # 5108 <malloc+0x1a4>
+    267e:	fcf43023          	sd	a5,-64(s0)
+    2682:	fc043423          	sd	zero,-56(s0)
+      exec("echo", args);
+    2686:	fb840593          	addi	a1,s0,-72
+    268a:	42e020ef          	jal	4ab8 <exec>
+      exit(0);
+    268e:	4501                	li	a0,0
+    2690:	3f0020ef          	jal	4a80 <exit>
+
+0000000000002694 <fourteen>:
+{
+    2694:	1101                	addi	sp,sp,-32
+    2696:	ec06                	sd	ra,24(sp)
+    2698:	e822                	sd	s0,16(sp)
+    269a:	e426                	sd	s1,8(sp)
+    269c:	1000                	addi	s0,sp,32
+    269e:	84aa                	mv	s1,a0
+  if(mkdir("12345678901234") != 0){
+    26a0:	00004517          	auipc	a0,0x4
+    26a4:	a9050513          	addi	a0,a0,-1392 # 6130 <malloc+0x11cc>
+    26a8:	440020ef          	jal	4ae8 <mkdir>
+    26ac:	e555                	bnez	a0,2758 <fourteen+0xc4>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26ae:	00004517          	auipc	a0,0x4
+    26b2:	8da50513          	addi	a0,a0,-1830 # 5f88 <malloc+0x1024>
+    26b6:	432020ef          	jal	4ae8 <mkdir>
+    26ba:	e94d                	bnez	a0,276c <fourteen+0xd8>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26bc:	20000593          	li	a1,512
+    26c0:	00004517          	auipc	a0,0x4
+    26c4:	92050513          	addi	a0,a0,-1760 # 5fe0 <malloc+0x107c>
+    26c8:	3f8020ef          	jal	4ac0 <open>
+  if(fd < 0){
+    26cc:	0a054a63          	bltz	a0,2780 <fourteen+0xec>
+  close(fd);
+    26d0:	3d8020ef          	jal	4aa8 <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    26d4:	4581                	li	a1,0
+    26d6:	00004517          	auipc	a0,0x4
+    26da:	98250513          	addi	a0,a0,-1662 # 6058 <malloc+0x10f4>
+    26de:	3e2020ef          	jal	4ac0 <open>
+  if(fd < 0){
+    26e2:	0a054963          	bltz	a0,2794 <fourteen+0x100>
+  close(fd);
+    26e6:	3c2020ef          	jal	4aa8 <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    26ea:	00004517          	auipc	a0,0x4
+    26ee:	9de50513          	addi	a0,a0,-1570 # 60c8 <malloc+0x1164>
+    26f2:	3f6020ef          	jal	4ae8 <mkdir>
+    26f6:	c94d                	beqz	a0,27a8 <fourteen+0x114>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    26f8:	00004517          	auipc	a0,0x4
+    26fc:	a2850513          	addi	a0,a0,-1496 # 6120 <malloc+0x11bc>
+    2700:	3e8020ef          	jal	4ae8 <mkdir>
+    2704:	cd45                	beqz	a0,27bc <fourteen+0x128>
+  unlink("123456789012345/12345678901234");
+    2706:	00004517          	auipc	a0,0x4
+    270a:	a1a50513          	addi	a0,a0,-1510 # 6120 <malloc+0x11bc>
+    270e:	3c2020ef          	jal	4ad0 <unlink>
+  unlink("12345678901234/12345678901234");
+    2712:	00004517          	auipc	a0,0x4
+    2716:	9b650513          	addi	a0,a0,-1610 # 60c8 <malloc+0x1164>
+    271a:	3b6020ef          	jal	4ad0 <unlink>
+  unlink("12345678901234/12345678901234/12345678901234");
+    271e:	00004517          	auipc	a0,0x4
+    2722:	93a50513          	addi	a0,a0,-1734 # 6058 <malloc+0x10f4>
+    2726:	3aa020ef          	jal	4ad0 <unlink>
+  unlink("123456789012345/123456789012345/123456789012345");
+    272a:	00004517          	auipc	a0,0x4
+    272e:	8b650513          	addi	a0,a0,-1866 # 5fe0 <malloc+0x107c>
+    2732:	39e020ef          	jal	4ad0 <unlink>
+  unlink("12345678901234/123456789012345");
+    2736:	00004517          	auipc	a0,0x4
+    273a:	85250513          	addi	a0,a0,-1966 # 5f88 <malloc+0x1024>
+    273e:	392020ef          	jal	4ad0 <unlink>
+  unlink("12345678901234");
+    2742:	00004517          	auipc	a0,0x4
+    2746:	9ee50513          	addi	a0,a0,-1554 # 6130 <malloc+0x11cc>
+    274a:	386020ef          	jal	4ad0 <unlink>
+}
+    274e:	60e2                	ld	ra,24(sp)
+    2750:	6442                	ld	s0,16(sp)
+    2752:	64a2                	ld	s1,8(sp)
+    2754:	6105                	addi	sp,sp,32
+    2756:	8082                	ret
+    printf("%s: mkdir 12345678901234 failed\n", s);
+    2758:	85a6                	mv	a1,s1
+    275a:	00004517          	auipc	a0,0x4
+    275e:	80650513          	addi	a0,a0,-2042 # 5f60 <malloc+0xffc>
+    2762:	74e020ef          	jal	4eb0 <printf>
+    exit(1);
+    2766:	4505                	li	a0,1
+    2768:	318020ef          	jal	4a80 <exit>
+    printf("%s: mkdir 12345678901234/123456789012345 failed\n", s);
+    276c:	85a6                	mv	a1,s1
+    276e:	00004517          	auipc	a0,0x4
+    2772:	83a50513          	addi	a0,a0,-1990 # 5fa8 <malloc+0x1044>
+    2776:	73a020ef          	jal	4eb0 <printf>
+    exit(1);
+    277a:	4505                	li	a0,1
+    277c:	304020ef          	jal	4a80 <exit>
+    printf("%s: create 123456789012345/123456789012345/123456789012345 failed\n", s);
+    2780:	85a6                	mv	a1,s1
+    2782:	00004517          	auipc	a0,0x4
+    2786:	88e50513          	addi	a0,a0,-1906 # 6010 <malloc+0x10ac>
+    278a:	726020ef          	jal	4eb0 <printf>
+    exit(1);
+    278e:	4505                	li	a0,1
+    2790:	2f0020ef          	jal	4a80 <exit>
+    printf("%s: open 12345678901234/12345678901234/12345678901234 failed\n", s);
+    2794:	85a6                	mv	a1,s1
+    2796:	00004517          	auipc	a0,0x4
+    279a:	8f250513          	addi	a0,a0,-1806 # 6088 <malloc+0x1124>
+    279e:	712020ef          	jal	4eb0 <printf>
+    exit(1);
+    27a2:	4505                	li	a0,1
+    27a4:	2dc020ef          	jal	4a80 <exit>
+    printf("%s: mkdir 12345678901234/12345678901234 succeeded!\n", s);
+    27a8:	85a6                	mv	a1,s1
+    27aa:	00004517          	auipc	a0,0x4
+    27ae:	93e50513          	addi	a0,a0,-1730 # 60e8 <malloc+0x1184>
+    27b2:	6fe020ef          	jal	4eb0 <printf>
+    exit(1);
+    27b6:	4505                	li	a0,1
+    27b8:	2c8020ef          	jal	4a80 <exit>
+    printf("%s: mkdir 12345678901234/123456789012345 succeeded!\n", s);
+    27bc:	85a6                	mv	a1,s1
+    27be:	00004517          	auipc	a0,0x4
+    27c2:	98250513          	addi	a0,a0,-1662 # 6140 <malloc+0x11dc>
+    27c6:	6ea020ef          	jal	4eb0 <printf>
+    exit(1);
+    27ca:	4505                	li	a0,1
+    27cc:	2b4020ef          	jal	4a80 <exit>
+
+00000000000027d0 <diskfull>:
+{
+    27d0:	b8010113          	addi	sp,sp,-1152
+    27d4:	46113c23          	sd	ra,1144(sp)
+    27d8:	46813823          	sd	s0,1136(sp)
+    27dc:	46913423          	sd	s1,1128(sp)
+    27e0:	47213023          	sd	s2,1120(sp)
+    27e4:	45313c23          	sd	s3,1112(sp)
+    27e8:	45413823          	sd	s4,1104(sp)
+    27ec:	45513423          	sd	s5,1096(sp)
+    27f0:	45613023          	sd	s6,1088(sp)
+    27f4:	43713c23          	sd	s7,1080(sp)
+    27f8:	43813823          	sd	s8,1072(sp)
+    27fc:	43913423          	sd	s9,1064(sp)
+    2800:	48010413          	addi	s0,sp,1152
+    2804:	8caa                	mv	s9,a0
+  unlink("diskfulldir");
+    2806:	00004517          	auipc	a0,0x4
+    280a:	97250513          	addi	a0,a0,-1678 # 6178 <malloc+0x1214>
+    280e:	2c2020ef          	jal	4ad0 <unlink>
+    2812:	03000993          	li	s3,48
+    name[0] = 'b';
+    2816:	06200b13          	li	s6,98
+    name[1] = 'i';
+    281a:	06900a93          	li	s5,105
+    name[2] = 'g';
+    281e:	06700a13          	li	s4,103
+    2822:	10c00b93          	li	s7,268
+  for(fi = 0; done == 0 && '0' + fi < 0177; fi++){
+    2826:	07f00c13          	li	s8,127
+    282a:	aab9                	j	2988 <diskfull+0x1b8>
+      printf("%s: could not create file %s\n", s, name);
+    282c:	b8040613          	addi	a2,s0,-1152
+    2830:	85e6                	mv	a1,s9
+    2832:	00004517          	auipc	a0,0x4
+    2836:	95650513          	addi	a0,a0,-1706 # 6188 <malloc+0x1224>
+    283a:	676020ef          	jal	4eb0 <printf>
+      break;
+    283e:	a039                	j	284c <diskfull+0x7c>
+        close(fd);
+    2840:	854a                	mv	a0,s2
+    2842:	266020ef          	jal	4aa8 <close>
+    close(fd);
+    2846:	854a                	mv	a0,s2
+    2848:	260020ef          	jal	4aa8 <close>
+  for(int i = 0; i < nzz; i++){
+    284c:	4481                	li	s1,0
+    name[0] = 'z';
+    284e:	07a00913          	li	s2,122
+  for(int i = 0; i < nzz; i++){
+    2852:	08000993          	li	s3,128
+    name[0] = 'z';
+    2856:	bb240023          	sb	s2,-1120(s0)
+    name[1] = 'z';
+    285a:	bb2400a3          	sb	s2,-1119(s0)
+    name[2] = '0' + (i / 32);
+    285e:	41f4d71b          	sraiw	a4,s1,0x1f
+    2862:	01b7571b          	srliw	a4,a4,0x1b
+    2866:	009707bb          	addw	a5,a4,s1
+    286a:	4057d69b          	sraiw	a3,a5,0x5
+    286e:	0306869b          	addiw	a3,a3,48
+    2872:	bad40123          	sb	a3,-1118(s0)
+    name[3] = '0' + (i % 32);
+    2876:	8bfd                	andi	a5,a5,31
+    2878:	9f99                	subw	a5,a5,a4
+    287a:	0307879b          	addiw	a5,a5,48
+    287e:	baf401a3          	sb	a5,-1117(s0)
+    name[4] = '\0';
+    2882:	ba040223          	sb	zero,-1116(s0)
+    unlink(name);
+    2886:	ba040513          	addi	a0,s0,-1120
+    288a:	246020ef          	jal	4ad0 <unlink>
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+    288e:	60200593          	li	a1,1538
+    2892:	ba040513          	addi	a0,s0,-1120
+    2896:	22a020ef          	jal	4ac0 <open>
+    if(fd < 0)
+    289a:	00054763          	bltz	a0,28a8 <diskfull+0xd8>
+    close(fd);
+    289e:	20a020ef          	jal	4aa8 <close>
+  for(int i = 0; i < nzz; i++){
+    28a2:	2485                	addiw	s1,s1,1
+    28a4:	fb3499e3          	bne	s1,s3,2856 <diskfull+0x86>
+  if(mkdir("diskfulldir") == 0)
+    28a8:	00004517          	auipc	a0,0x4
+    28ac:	8d050513          	addi	a0,a0,-1840 # 6178 <malloc+0x1214>
+    28b0:	238020ef          	jal	4ae8 <mkdir>
+    28b4:	12050063          	beqz	a0,29d4 <diskfull+0x204>
+  unlink("diskfulldir");
+    28b8:	00004517          	auipc	a0,0x4
+    28bc:	8c050513          	addi	a0,a0,-1856 # 6178 <malloc+0x1214>
+    28c0:	210020ef          	jal	4ad0 <unlink>
+  for(int i = 0; i < nzz; i++){
+    28c4:	4481                	li	s1,0
+    name[0] = 'z';
+    28c6:	07a00913          	li	s2,122
+  for(int i = 0; i < nzz; i++){
+    28ca:	08000993          	li	s3,128
+    name[0] = 'z';
+    28ce:	bb240023          	sb	s2,-1120(s0)
+    name[1] = 'z';
+    28d2:	bb2400a3          	sb	s2,-1119(s0)
+    name[2] = '0' + (i / 32);
+    28d6:	41f4d71b          	sraiw	a4,s1,0x1f
+    28da:	01b7571b          	srliw	a4,a4,0x1b
+    28de:	009707bb          	addw	a5,a4,s1
+    28e2:	4057d69b          	sraiw	a3,a5,0x5
+    28e6:	0306869b          	addiw	a3,a3,48
+    28ea:	bad40123          	sb	a3,-1118(s0)
+    name[3] = '0' + (i % 32);
+    28ee:	8bfd                	andi	a5,a5,31
+    28f0:	9f99                	subw	a5,a5,a4
+    28f2:	0307879b          	addiw	a5,a5,48
+    28f6:	baf401a3          	sb	a5,-1117(s0)
+    name[4] = '\0';
+    28fa:	ba040223          	sb	zero,-1116(s0)
+    unlink(name);
+    28fe:	ba040513          	addi	a0,s0,-1120
+    2902:	1ce020ef          	jal	4ad0 <unlink>
+  for(int i = 0; i < nzz; i++){
+    2906:	2485                	addiw	s1,s1,1
+    2908:	fd3493e3          	bne	s1,s3,28ce <diskfull+0xfe>
+    290c:	03000493          	li	s1,48
+    name[0] = 'b';
+    2910:	06200a93          	li	s5,98
+    name[1] = 'i';
+    2914:	06900a13          	li	s4,105
+    name[2] = 'g';
+    2918:	06700993          	li	s3,103
+  for(int i = 0; '0' + i < 0177; i++){
+    291c:	07f00913          	li	s2,127
+    name[0] = 'b';
+    2920:	bb540023          	sb	s5,-1120(s0)
+    name[1] = 'i';
+    2924:	bb4400a3          	sb	s4,-1119(s0)
+    name[2] = 'g';
+    2928:	bb340123          	sb	s3,-1118(s0)
+    name[3] = '0' + i;
+    292c:	ba9401a3          	sb	s1,-1117(s0)
+    name[4] = '\0';
+    2930:	ba040223          	sb	zero,-1116(s0)
+    unlink(name);
+    2934:	ba040513          	addi	a0,s0,-1120
+    2938:	198020ef          	jal	4ad0 <unlink>
+  for(int i = 0; '0' + i < 0177; i++){
+    293c:	2485                	addiw	s1,s1,1
+    293e:	0ff4f493          	zext.b	s1,s1
+    2942:	fd249fe3          	bne	s1,s2,2920 <diskfull+0x150>
+}
+    2946:	47813083          	ld	ra,1144(sp)
+    294a:	47013403          	ld	s0,1136(sp)
+    294e:	46813483          	ld	s1,1128(sp)
+    2952:	46013903          	ld	s2,1120(sp)
+    2956:	45813983          	ld	s3,1112(sp)
+    295a:	45013a03          	ld	s4,1104(sp)
+    295e:	44813a83          	ld	s5,1096(sp)
+    2962:	44013b03          	ld	s6,1088(sp)
+    2966:	43813b83          	ld	s7,1080(sp)
+    296a:	43013c03          	ld	s8,1072(sp)
+    296e:	42813c83          	ld	s9,1064(sp)
+    2972:	48010113          	addi	sp,sp,1152
+    2976:	8082                	ret
+    close(fd);
+    2978:	854a                	mv	a0,s2
+    297a:	12e020ef          	jal	4aa8 <close>
+  for(fi = 0; done == 0 && '0' + fi < 0177; fi++){
+    297e:	2985                	addiw	s3,s3,1
+    2980:	0ff9f993          	zext.b	s3,s3
+    2984:	ed8984e3          	beq	s3,s8,284c <diskfull+0x7c>
+    name[0] = 'b';
+    2988:	b9640023          	sb	s6,-1152(s0)
+    name[1] = 'i';
+    298c:	b95400a3          	sb	s5,-1151(s0)
+    name[2] = 'g';
+    2990:	b9440123          	sb	s4,-1150(s0)
+    name[3] = '0' + fi;
+    2994:	b93401a3          	sb	s3,-1149(s0)
+    name[4] = '\0';
+    2998:	b8040223          	sb	zero,-1148(s0)
+    unlink(name);
+    299c:	b8040513          	addi	a0,s0,-1152
+    29a0:	130020ef          	jal	4ad0 <unlink>
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+    29a4:	60200593          	li	a1,1538
+    29a8:	b8040513          	addi	a0,s0,-1152
+    29ac:	114020ef          	jal	4ac0 <open>
+    29b0:	892a                	mv	s2,a0
+    if(fd < 0){
+    29b2:	e6054de3          	bltz	a0,282c <diskfull+0x5c>
+    29b6:	84de                	mv	s1,s7
+      if(write(fd, buf, BSIZE) != BSIZE){
+    29b8:	40000613          	li	a2,1024
+    29bc:	ba040593          	addi	a1,s0,-1120
+    29c0:	854a                	mv	a0,s2
+    29c2:	0de020ef          	jal	4aa0 <write>
+    29c6:	40000793          	li	a5,1024
+    29ca:	e6f51be3          	bne	a0,a5,2840 <diskfull+0x70>
+    for(int i = 0; i < MAXFILE; i++){
+    29ce:	34fd                	addiw	s1,s1,-1
+    29d0:	f4e5                	bnez	s1,29b8 <diskfull+0x1e8>
+    29d2:	b75d                	j	2978 <diskfull+0x1a8>
+    printf("%s: mkdir(diskfulldir) unexpectedly succeeded!\n", s);
+    29d4:	85e6                	mv	a1,s9
+    29d6:	00003517          	auipc	a0,0x3
+    29da:	7d250513          	addi	a0,a0,2002 # 61a8 <malloc+0x1244>
+    29de:	4d2020ef          	jal	4eb0 <printf>
+    29e2:	bdd9                	j	28b8 <diskfull+0xe8>
+
+00000000000029e4 <iputtest>:
+{
+    29e4:	1101                	addi	sp,sp,-32
+    29e6:	ec06                	sd	ra,24(sp)
+    29e8:	e822                	sd	s0,16(sp)
+    29ea:	e426                	sd	s1,8(sp)
+    29ec:	1000                	addi	s0,sp,32
+    29ee:	84aa                	mv	s1,a0
+  if(mkdir("iputdir") < 0){
+    29f0:	00003517          	auipc	a0,0x3
+    29f4:	7e850513          	addi	a0,a0,2024 # 61d8 <malloc+0x1274>
+    29f8:	0f0020ef          	jal	4ae8 <mkdir>
+    29fc:	02054f63          	bltz	a0,2a3a <iputtest+0x56>
+  if(chdir("iputdir") < 0){
+    2a00:	00003517          	auipc	a0,0x3
+    2a04:	7d850513          	addi	a0,a0,2008 # 61d8 <malloc+0x1274>
+    2a08:	0e8020ef          	jal	4af0 <chdir>
+    2a0c:	04054163          	bltz	a0,2a4e <iputtest+0x6a>
+  if(unlink("../iputdir") < 0){
+    2a10:	00004517          	auipc	a0,0x4
+    2a14:	80850513          	addi	a0,a0,-2040 # 6218 <malloc+0x12b4>
+    2a18:	0b8020ef          	jal	4ad0 <unlink>
+    2a1c:	04054363          	bltz	a0,2a62 <iputtest+0x7e>
+  if(chdir("/") < 0){
+    2a20:	00004517          	auipc	a0,0x4
+    2a24:	82850513          	addi	a0,a0,-2008 # 6248 <malloc+0x12e4>
+    2a28:	0c8020ef          	jal	4af0 <chdir>
+    2a2c:	04054563          	bltz	a0,2a76 <iputtest+0x92>
+}
+    2a30:	60e2                	ld	ra,24(sp)
+    2a32:	6442                	ld	s0,16(sp)
+    2a34:	64a2                	ld	s1,8(sp)
+    2a36:	6105                	addi	sp,sp,32
+    2a38:	8082                	ret
+    printf("%s: mkdir failed\n", s);
+    2a3a:	85a6                	mv	a1,s1
+    2a3c:	00003517          	auipc	a0,0x3
+    2a40:	7a450513          	addi	a0,a0,1956 # 61e0 <malloc+0x127c>
+    2a44:	46c020ef          	jal	4eb0 <printf>
+    exit(1);
+    2a48:	4505                	li	a0,1
+    2a4a:	036020ef          	jal	4a80 <exit>
+    printf("%s: chdir iputdir failed\n", s);
+    2a4e:	85a6                	mv	a1,s1
+    2a50:	00003517          	auipc	a0,0x3
+    2a54:	7a850513          	addi	a0,a0,1960 # 61f8 <malloc+0x1294>
+    2a58:	458020ef          	jal	4eb0 <printf>
+    exit(1);
+    2a5c:	4505                	li	a0,1
+    2a5e:	022020ef          	jal	4a80 <exit>
+    printf("%s: unlink ../iputdir failed\n", s);
+    2a62:	85a6                	mv	a1,s1
+    2a64:	00003517          	auipc	a0,0x3
+    2a68:	7c450513          	addi	a0,a0,1988 # 6228 <malloc+0x12c4>
+    2a6c:	444020ef          	jal	4eb0 <printf>
+    exit(1);
+    2a70:	4505                	li	a0,1
+    2a72:	00e020ef          	jal	4a80 <exit>
+    printf("%s: chdir / failed\n", s);
+    2a76:	85a6                	mv	a1,s1
+    2a78:	00003517          	auipc	a0,0x3
+    2a7c:	7d850513          	addi	a0,a0,2008 # 6250 <malloc+0x12ec>
+    2a80:	430020ef          	jal	4eb0 <printf>
+    exit(1);
+    2a84:	4505                	li	a0,1
+    2a86:	7fb010ef          	jal	4a80 <exit>
+
+0000000000002a8a <exitiputtest>:
+{
+    2a8a:	7179                	addi	sp,sp,-48
+    2a8c:	f406                	sd	ra,40(sp)
+    2a8e:	f022                	sd	s0,32(sp)
+    2a90:	ec26                	sd	s1,24(sp)
+    2a92:	1800                	addi	s0,sp,48
+    2a94:	84aa                	mv	s1,a0
+  pid = fork();
+    2a96:	7e3010ef          	jal	4a78 <fork>
+  if(pid < 0){
+    2a9a:	02054e63          	bltz	a0,2ad6 <exitiputtest+0x4c>
+  if(pid == 0){
+    2a9e:	e541                	bnez	a0,2b26 <exitiputtest+0x9c>
+    if(mkdir("iputdir") < 0){
+    2aa0:	00003517          	auipc	a0,0x3
+    2aa4:	73850513          	addi	a0,a0,1848 # 61d8 <malloc+0x1274>
+    2aa8:	040020ef          	jal	4ae8 <mkdir>
+    2aac:	02054f63          	bltz	a0,2aea <exitiputtest+0x60>
+    if(chdir("iputdir") < 0){
+    2ab0:	00003517          	auipc	a0,0x3
+    2ab4:	72850513          	addi	a0,a0,1832 # 61d8 <malloc+0x1274>
+    2ab8:	038020ef          	jal	4af0 <chdir>
+    2abc:	04054163          	bltz	a0,2afe <exitiputtest+0x74>
+    if(unlink("../iputdir") < 0){
+    2ac0:	00003517          	auipc	a0,0x3
+    2ac4:	75850513          	addi	a0,a0,1880 # 6218 <malloc+0x12b4>
+    2ac8:	008020ef          	jal	4ad0 <unlink>
+    2acc:	04054363          	bltz	a0,2b12 <exitiputtest+0x88>
+    exit(0);
+    2ad0:	4501                	li	a0,0
+    2ad2:	7af010ef          	jal	4a80 <exit>
+    printf("%s: fork failed\n", s);
+    2ad6:	85a6                	mv	a1,s1
+    2ad8:	00003517          	auipc	a0,0x3
+    2adc:	e5050513          	addi	a0,a0,-432 # 5928 <malloc+0x9c4>
+    2ae0:	3d0020ef          	jal	4eb0 <printf>
+    exit(1);
+    2ae4:	4505                	li	a0,1
+    2ae6:	79b010ef          	jal	4a80 <exit>
+      printf("%s: mkdir failed\n", s);
+    2aea:	85a6                	mv	a1,s1
+    2aec:	00003517          	auipc	a0,0x3
+    2af0:	6f450513          	addi	a0,a0,1780 # 61e0 <malloc+0x127c>
+    2af4:	3bc020ef          	jal	4eb0 <printf>
+      exit(1);
+    2af8:	4505                	li	a0,1
+    2afa:	787010ef          	jal	4a80 <exit>
+      printf("%s: child chdir failed\n", s);
+    2afe:	85a6                	mv	a1,s1
+    2b00:	00003517          	auipc	a0,0x3
+    2b04:	76850513          	addi	a0,a0,1896 # 6268 <malloc+0x1304>
+    2b08:	3a8020ef          	jal	4eb0 <printf>
+      exit(1);
+    2b0c:	4505                	li	a0,1
+    2b0e:	773010ef          	jal	4a80 <exit>
+      printf("%s: unlink ../iputdir failed\n", s);
+    2b12:	85a6                	mv	a1,s1
+    2b14:	00003517          	auipc	a0,0x3
+    2b18:	71450513          	addi	a0,a0,1812 # 6228 <malloc+0x12c4>
+    2b1c:	394020ef          	jal	4eb0 <printf>
+      exit(1);
+    2b20:	4505                	li	a0,1
+    2b22:	75f010ef          	jal	4a80 <exit>
+  wait(&xstatus);
+    2b26:	fdc40513          	addi	a0,s0,-36
+    2b2a:	75f010ef          	jal	4a88 <wait>
+  exit(xstatus);
+    2b2e:	fdc42503          	lw	a0,-36(s0)
+    2b32:	74f010ef          	jal	4a80 <exit>
+
+0000000000002b36 <dirtest>:
+{
+    2b36:	1101                	addi	sp,sp,-32
+    2b38:	ec06                	sd	ra,24(sp)
+    2b3a:	e822                	sd	s0,16(sp)
+    2b3c:	e426                	sd	s1,8(sp)
+    2b3e:	1000                	addi	s0,sp,32
+    2b40:	84aa                	mv	s1,a0
+  if(mkdir("dir0") < 0){
+    2b42:	00003517          	auipc	a0,0x3
+    2b46:	73e50513          	addi	a0,a0,1854 # 6280 <malloc+0x131c>
+    2b4a:	79f010ef          	jal	4ae8 <mkdir>
+    2b4e:	02054f63          	bltz	a0,2b8c <dirtest+0x56>
+  if(chdir("dir0") < 0){
+    2b52:	00003517          	auipc	a0,0x3
+    2b56:	72e50513          	addi	a0,a0,1838 # 6280 <malloc+0x131c>
+    2b5a:	797010ef          	jal	4af0 <chdir>
+    2b5e:	04054163          	bltz	a0,2ba0 <dirtest+0x6a>
+  if(chdir("..") < 0){
+    2b62:	00003517          	auipc	a0,0x3
+    2b66:	73e50513          	addi	a0,a0,1854 # 62a0 <malloc+0x133c>
+    2b6a:	787010ef          	jal	4af0 <chdir>
+    2b6e:	04054363          	bltz	a0,2bb4 <dirtest+0x7e>
+  if(unlink("dir0") < 0){
+    2b72:	00003517          	auipc	a0,0x3
+    2b76:	70e50513          	addi	a0,a0,1806 # 6280 <malloc+0x131c>
+    2b7a:	757010ef          	jal	4ad0 <unlink>
+    2b7e:	04054563          	bltz	a0,2bc8 <dirtest+0x92>
+}
+    2b82:	60e2                	ld	ra,24(sp)
+    2b84:	6442                	ld	s0,16(sp)
+    2b86:	64a2                	ld	s1,8(sp)
+    2b88:	6105                	addi	sp,sp,32
+    2b8a:	8082                	ret
+    printf("%s: mkdir failed\n", s);
+    2b8c:	85a6                	mv	a1,s1
+    2b8e:	00003517          	auipc	a0,0x3
+    2b92:	65250513          	addi	a0,a0,1618 # 61e0 <malloc+0x127c>
+    2b96:	31a020ef          	jal	4eb0 <printf>
+    exit(1);
+    2b9a:	4505                	li	a0,1
+    2b9c:	6e5010ef          	jal	4a80 <exit>
+    printf("%s: chdir dir0 failed\n", s);
+    2ba0:	85a6                	mv	a1,s1
+    2ba2:	00003517          	auipc	a0,0x3
+    2ba6:	6e650513          	addi	a0,a0,1766 # 6288 <malloc+0x1324>
+    2baa:	306020ef          	jal	4eb0 <printf>
+    exit(1);
+    2bae:	4505                	li	a0,1
+    2bb0:	6d1010ef          	jal	4a80 <exit>
+    printf("%s: chdir .. failed\n", s);
+    2bb4:	85a6                	mv	a1,s1
+    2bb6:	00003517          	auipc	a0,0x3
+    2bba:	6f250513          	addi	a0,a0,1778 # 62a8 <malloc+0x1344>
+    2bbe:	2f2020ef          	jal	4eb0 <printf>
+    exit(1);
+    2bc2:	4505                	li	a0,1
+    2bc4:	6bd010ef          	jal	4a80 <exit>
+    printf("%s: unlink dir0 failed\n", s);
+    2bc8:	85a6                	mv	a1,s1
+    2bca:	00003517          	auipc	a0,0x3
+    2bce:	6f650513          	addi	a0,a0,1782 # 62c0 <malloc+0x135c>
+    2bd2:	2de020ef          	jal	4eb0 <printf>
+    exit(1);
+    2bd6:	4505                	li	a0,1
+    2bd8:	6a9010ef          	jal	4a80 <exit>
+
+0000000000002bdc <subdir>:
+{
+    2bdc:	1101                	addi	sp,sp,-32
+    2bde:	ec06                	sd	ra,24(sp)
+    2be0:	e822                	sd	s0,16(sp)
+    2be2:	e426                	sd	s1,8(sp)
+    2be4:	e04a                	sd	s2,0(sp)
+    2be6:	1000                	addi	s0,sp,32
+    2be8:	892a                	mv	s2,a0
+  unlink("ff");
+    2bea:	00004517          	auipc	a0,0x4
+    2bee:	81e50513          	addi	a0,a0,-2018 # 6408 <malloc+0x14a4>
+    2bf2:	6df010ef          	jal	4ad0 <unlink>
+  if(mkdir("dd") != 0){
+    2bf6:	00003517          	auipc	a0,0x3
+    2bfa:	6e250513          	addi	a0,a0,1762 # 62d8 <malloc+0x1374>
+    2bfe:	6eb010ef          	jal	4ae8 <mkdir>
+    2c02:	2e051263          	bnez	a0,2ee6 <subdir+0x30a>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    2c06:	20200593          	li	a1,514
+    2c0a:	00003517          	auipc	a0,0x3
+    2c0e:	6ee50513          	addi	a0,a0,1774 # 62f8 <malloc+0x1394>
+    2c12:	6af010ef          	jal	4ac0 <open>
+    2c16:	84aa                	mv	s1,a0
+  if(fd < 0){
+    2c18:	2e054163          	bltz	a0,2efa <subdir+0x31e>
+  write(fd, "ff", 2);
+    2c1c:	4609                	li	a2,2
+    2c1e:	00003597          	auipc	a1,0x3
+    2c22:	7ea58593          	addi	a1,a1,2026 # 6408 <malloc+0x14a4>
+    2c26:	67b010ef          	jal	4aa0 <write>
+  close(fd);
+    2c2a:	8526                	mv	a0,s1
+    2c2c:	67d010ef          	jal	4aa8 <close>
+  if(unlink("dd") >= 0){
+    2c30:	00003517          	auipc	a0,0x3
+    2c34:	6a850513          	addi	a0,a0,1704 # 62d8 <malloc+0x1374>
+    2c38:	699010ef          	jal	4ad0 <unlink>
+    2c3c:	2c055963          	bgez	a0,2f0e <subdir+0x332>
+  if(mkdir("/dd/dd") != 0){
+    2c40:	00003517          	auipc	a0,0x3
+    2c44:	71050513          	addi	a0,a0,1808 # 6350 <malloc+0x13ec>
+    2c48:	6a1010ef          	jal	4ae8 <mkdir>
+    2c4c:	2c051b63          	bnez	a0,2f22 <subdir+0x346>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    2c50:	20200593          	li	a1,514
+    2c54:	00003517          	auipc	a0,0x3
+    2c58:	72450513          	addi	a0,a0,1828 # 6378 <malloc+0x1414>
+    2c5c:	665010ef          	jal	4ac0 <open>
+    2c60:	84aa                	mv	s1,a0
+  if(fd < 0){
+    2c62:	2c054a63          	bltz	a0,2f36 <subdir+0x35a>
+  write(fd, "FF", 2);
+    2c66:	4609                	li	a2,2
+    2c68:	00003597          	auipc	a1,0x3
+    2c6c:	74058593          	addi	a1,a1,1856 # 63a8 <malloc+0x1444>
+    2c70:	631010ef          	jal	4aa0 <write>
+  close(fd);
+    2c74:	8526                	mv	a0,s1
+    2c76:	633010ef          	jal	4aa8 <close>
+  fd = open("dd/dd/../ff", 0);
+    2c7a:	4581                	li	a1,0
+    2c7c:	00003517          	auipc	a0,0x3
+    2c80:	73450513          	addi	a0,a0,1844 # 63b0 <malloc+0x144c>
+    2c84:	63d010ef          	jal	4ac0 <open>
+    2c88:	84aa                	mv	s1,a0
+  if(fd < 0){
+    2c8a:	2c054063          	bltz	a0,2f4a <subdir+0x36e>
+  cc = read(fd, buf, sizeof(buf));
+    2c8e:	660d                	lui	a2,0x3
+    2c90:	00009597          	auipc	a1,0x9
+    2c94:	fe858593          	addi	a1,a1,-24 # bc78 <buf>
+    2c98:	601010ef          	jal	4a98 <read>
+  if(cc != 2 || buf[0] != 'f'){
+    2c9c:	4789                	li	a5,2
+    2c9e:	2cf51063          	bne	a0,a5,2f5e <subdir+0x382>
+    2ca2:	00009717          	auipc	a4,0x9
+    2ca6:	fd674703          	lbu	a4,-42(a4) # bc78 <buf>
+    2caa:	06600793          	li	a5,102
+    2cae:	2af71863          	bne	a4,a5,2f5e <subdir+0x382>
+  close(fd);
+    2cb2:	8526                	mv	a0,s1
+    2cb4:	5f5010ef          	jal	4aa8 <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    2cb8:	00003597          	auipc	a1,0x3
+    2cbc:	74858593          	addi	a1,a1,1864 # 6400 <malloc+0x149c>
+    2cc0:	00003517          	auipc	a0,0x3
+    2cc4:	6b850513          	addi	a0,a0,1720 # 6378 <malloc+0x1414>
+    2cc8:	619010ef          	jal	4ae0 <link>
+    2ccc:	2a051363          	bnez	a0,2f72 <subdir+0x396>
+  if(unlink("dd/dd/ff") != 0){
+    2cd0:	00003517          	auipc	a0,0x3
+    2cd4:	6a850513          	addi	a0,a0,1704 # 6378 <malloc+0x1414>
+    2cd8:	5f9010ef          	jal	4ad0 <unlink>
+    2cdc:	2a051563          	bnez	a0,2f86 <subdir+0x3aa>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    2ce0:	4581                	li	a1,0
+    2ce2:	00003517          	auipc	a0,0x3
+    2ce6:	69650513          	addi	a0,a0,1686 # 6378 <malloc+0x1414>
+    2cea:	5d7010ef          	jal	4ac0 <open>
+    2cee:	2a055663          	bgez	a0,2f9a <subdir+0x3be>
+  if(chdir("dd") != 0){
+    2cf2:	00003517          	auipc	a0,0x3
+    2cf6:	5e650513          	addi	a0,a0,1510 # 62d8 <malloc+0x1374>
+    2cfa:	5f7010ef          	jal	4af0 <chdir>
+    2cfe:	2a051863          	bnez	a0,2fae <subdir+0x3d2>
+  if(chdir("dd/../../dd") != 0){
+    2d02:	00003517          	auipc	a0,0x3
+    2d06:	79650513          	addi	a0,a0,1942 # 6498 <malloc+0x1534>
+    2d0a:	5e7010ef          	jal	4af0 <chdir>
+    2d0e:	2a051a63          	bnez	a0,2fc2 <subdir+0x3e6>
+  if(chdir("dd/../../../dd") != 0){
+    2d12:	00003517          	auipc	a0,0x3
+    2d16:	7b650513          	addi	a0,a0,1974 # 64c8 <malloc+0x1564>
+    2d1a:	5d7010ef          	jal	4af0 <chdir>
+    2d1e:	2a051c63          	bnez	a0,2fd6 <subdir+0x3fa>
+  if(chdir("./..") != 0){
+    2d22:	00003517          	auipc	a0,0x3
+    2d26:	7de50513          	addi	a0,a0,2014 # 6500 <malloc+0x159c>
+    2d2a:	5c7010ef          	jal	4af0 <chdir>
+    2d2e:	2a051e63          	bnez	a0,2fea <subdir+0x40e>
+  fd = open("dd/dd/ffff", 0);
+    2d32:	4581                	li	a1,0
+    2d34:	00003517          	auipc	a0,0x3
+    2d38:	6cc50513          	addi	a0,a0,1740 # 6400 <malloc+0x149c>
+    2d3c:	585010ef          	jal	4ac0 <open>
+    2d40:	84aa                	mv	s1,a0
+  if(fd < 0){
+    2d42:	2a054e63          	bltz	a0,2ffe <subdir+0x422>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    2d46:	660d                	lui	a2,0x3
+    2d48:	00009597          	auipc	a1,0x9
+    2d4c:	f3058593          	addi	a1,a1,-208 # bc78 <buf>
+    2d50:	549010ef          	jal	4a98 <read>
+    2d54:	4789                	li	a5,2
+    2d56:	2af51e63          	bne	a0,a5,3012 <subdir+0x436>
+  close(fd);
+    2d5a:	8526                	mv	a0,s1
+    2d5c:	54d010ef          	jal	4aa8 <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    2d60:	4581                	li	a1,0
+    2d62:	00003517          	auipc	a0,0x3
+    2d66:	61650513          	addi	a0,a0,1558 # 6378 <malloc+0x1414>
+    2d6a:	557010ef          	jal	4ac0 <open>
+    2d6e:	2a055c63          	bgez	a0,3026 <subdir+0x44a>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    2d72:	20200593          	li	a1,514
+    2d76:	00004517          	auipc	a0,0x4
+    2d7a:	81a50513          	addi	a0,a0,-2022 # 6590 <malloc+0x162c>
+    2d7e:	543010ef          	jal	4ac0 <open>
+    2d82:	2a055c63          	bgez	a0,303a <subdir+0x45e>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    2d86:	20200593          	li	a1,514
+    2d8a:	00004517          	auipc	a0,0x4
+    2d8e:	83650513          	addi	a0,a0,-1994 # 65c0 <malloc+0x165c>
+    2d92:	52f010ef          	jal	4ac0 <open>
+    2d96:	2a055c63          	bgez	a0,304e <subdir+0x472>
+  if(open("dd", O_CREATE) >= 0){
+    2d9a:	20000593          	li	a1,512
+    2d9e:	00003517          	auipc	a0,0x3
+    2da2:	53a50513          	addi	a0,a0,1338 # 62d8 <malloc+0x1374>
+    2da6:	51b010ef          	jal	4ac0 <open>
+    2daa:	2a055c63          	bgez	a0,3062 <subdir+0x486>
+  if(open("dd", O_RDWR) >= 0){
+    2dae:	4589                	li	a1,2
+    2db0:	00003517          	auipc	a0,0x3
+    2db4:	52850513          	addi	a0,a0,1320 # 62d8 <malloc+0x1374>
+    2db8:	509010ef          	jal	4ac0 <open>
+    2dbc:	2a055d63          	bgez	a0,3076 <subdir+0x49a>
+  if(open("dd", O_WRONLY) >= 0){
+    2dc0:	4585                	li	a1,1
+    2dc2:	00003517          	auipc	a0,0x3
+    2dc6:	51650513          	addi	a0,a0,1302 # 62d8 <malloc+0x1374>
+    2dca:	4f7010ef          	jal	4ac0 <open>
+    2dce:	2a055e63          	bgez	a0,308a <subdir+0x4ae>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    2dd2:	00004597          	auipc	a1,0x4
+    2dd6:	87e58593          	addi	a1,a1,-1922 # 6650 <malloc+0x16ec>
+    2dda:	00003517          	auipc	a0,0x3
+    2dde:	7b650513          	addi	a0,a0,1974 # 6590 <malloc+0x162c>
+    2de2:	4ff010ef          	jal	4ae0 <link>
+    2de6:	2a050c63          	beqz	a0,309e <subdir+0x4c2>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    2dea:	00004597          	auipc	a1,0x4
+    2dee:	86658593          	addi	a1,a1,-1946 # 6650 <malloc+0x16ec>
+    2df2:	00003517          	auipc	a0,0x3
+    2df6:	7ce50513          	addi	a0,a0,1998 # 65c0 <malloc+0x165c>
+    2dfa:	4e7010ef          	jal	4ae0 <link>
+    2dfe:	2a050a63          	beqz	a0,30b2 <subdir+0x4d6>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2e02:	00003597          	auipc	a1,0x3
+    2e06:	5fe58593          	addi	a1,a1,1534 # 6400 <malloc+0x149c>
+    2e0a:	00003517          	auipc	a0,0x3
+    2e0e:	4ee50513          	addi	a0,a0,1262 # 62f8 <malloc+0x1394>
+    2e12:	4cf010ef          	jal	4ae0 <link>
+    2e16:	2a050863          	beqz	a0,30c6 <subdir+0x4ea>
+  if(mkdir("dd/ff/ff") == 0){
+    2e1a:	00003517          	auipc	a0,0x3
+    2e1e:	77650513          	addi	a0,a0,1910 # 6590 <malloc+0x162c>
+    2e22:	4c7010ef          	jal	4ae8 <mkdir>
+    2e26:	2a050a63          	beqz	a0,30da <subdir+0x4fe>
+  if(mkdir("dd/xx/ff") == 0){
+    2e2a:	00003517          	auipc	a0,0x3
+    2e2e:	79650513          	addi	a0,a0,1942 # 65c0 <malloc+0x165c>
+    2e32:	4b7010ef          	jal	4ae8 <mkdir>
+    2e36:	2a050c63          	beqz	a0,30ee <subdir+0x512>
+  if(mkdir("dd/dd/ffff") == 0){
+    2e3a:	00003517          	auipc	a0,0x3
+    2e3e:	5c650513          	addi	a0,a0,1478 # 6400 <malloc+0x149c>
+    2e42:	4a7010ef          	jal	4ae8 <mkdir>
+    2e46:	2a050e63          	beqz	a0,3102 <subdir+0x526>
+  if(unlink("dd/xx/ff") == 0){
+    2e4a:	00003517          	auipc	a0,0x3
+    2e4e:	77650513          	addi	a0,a0,1910 # 65c0 <malloc+0x165c>
+    2e52:	47f010ef          	jal	4ad0 <unlink>
+    2e56:	2c050063          	beqz	a0,3116 <subdir+0x53a>
+  if(unlink("dd/ff/ff") == 0){
+    2e5a:	00003517          	auipc	a0,0x3
+    2e5e:	73650513          	addi	a0,a0,1846 # 6590 <malloc+0x162c>
+    2e62:	46f010ef          	jal	4ad0 <unlink>
+    2e66:	2c050263          	beqz	a0,312a <subdir+0x54e>
+  if(chdir("dd/ff") == 0){
+    2e6a:	00003517          	auipc	a0,0x3
+    2e6e:	48e50513          	addi	a0,a0,1166 # 62f8 <malloc+0x1394>
+    2e72:	47f010ef          	jal	4af0 <chdir>
+    2e76:	2c050463          	beqz	a0,313e <subdir+0x562>
+  if(chdir("dd/xx") == 0){
+    2e7a:	00004517          	auipc	a0,0x4
+    2e7e:	92650513          	addi	a0,a0,-1754 # 67a0 <malloc+0x183c>
+    2e82:	46f010ef          	jal	4af0 <chdir>
+    2e86:	2c050663          	beqz	a0,3152 <subdir+0x576>
+  if(unlink("dd/dd/ffff") != 0){
+    2e8a:	00003517          	auipc	a0,0x3
+    2e8e:	57650513          	addi	a0,a0,1398 # 6400 <malloc+0x149c>
+    2e92:	43f010ef          	jal	4ad0 <unlink>
+    2e96:	2c051863          	bnez	a0,3166 <subdir+0x58a>
+  if(unlink("dd/ff") != 0){
+    2e9a:	00003517          	auipc	a0,0x3
+    2e9e:	45e50513          	addi	a0,a0,1118 # 62f8 <malloc+0x1394>
+    2ea2:	42f010ef          	jal	4ad0 <unlink>
+    2ea6:	2c051a63          	bnez	a0,317a <subdir+0x59e>
+  if(unlink("dd") == 0){
+    2eaa:	00003517          	auipc	a0,0x3
+    2eae:	42e50513          	addi	a0,a0,1070 # 62d8 <malloc+0x1374>
+    2eb2:	41f010ef          	jal	4ad0 <unlink>
+    2eb6:	2c050c63          	beqz	a0,318e <subdir+0x5b2>
+  if(unlink("dd/dd") < 0){
+    2eba:	00004517          	auipc	a0,0x4
+    2ebe:	95650513          	addi	a0,a0,-1706 # 6810 <malloc+0x18ac>
+    2ec2:	40f010ef          	jal	4ad0 <unlink>
+    2ec6:	2c054e63          	bltz	a0,31a2 <subdir+0x5c6>
+  if(unlink("dd") < 0){
+    2eca:	00003517          	auipc	a0,0x3
+    2ece:	40e50513          	addi	a0,a0,1038 # 62d8 <malloc+0x1374>
+    2ed2:	3ff010ef          	jal	4ad0 <unlink>
+    2ed6:	2e054063          	bltz	a0,31b6 <subdir+0x5da>
+}
+    2eda:	60e2                	ld	ra,24(sp)
+    2edc:	6442                	ld	s0,16(sp)
+    2ede:	64a2                	ld	s1,8(sp)
+    2ee0:	6902                	ld	s2,0(sp)
+    2ee2:	6105                	addi	sp,sp,32
+    2ee4:	8082                	ret
+    printf("%s: mkdir dd failed\n", s);
+    2ee6:	85ca                	mv	a1,s2
+    2ee8:	00003517          	auipc	a0,0x3
+    2eec:	3f850513          	addi	a0,a0,1016 # 62e0 <malloc+0x137c>
+    2ef0:	7c1010ef          	jal	4eb0 <printf>
+    exit(1);
+    2ef4:	4505                	li	a0,1
+    2ef6:	38b010ef          	jal	4a80 <exit>
+    printf("%s: create dd/ff failed\n", s);
+    2efa:	85ca                	mv	a1,s2
+    2efc:	00003517          	auipc	a0,0x3
+    2f00:	40450513          	addi	a0,a0,1028 # 6300 <malloc+0x139c>
+    2f04:	7ad010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f08:	4505                	li	a0,1
+    2f0a:	377010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd (non-empty dir) succeeded!\n", s);
+    2f0e:	85ca                	mv	a1,s2
+    2f10:	00003517          	auipc	a0,0x3
+    2f14:	41050513          	addi	a0,a0,1040 # 6320 <malloc+0x13bc>
+    2f18:	799010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f1c:	4505                	li	a0,1
+    2f1e:	363010ef          	jal	4a80 <exit>
+    printf("%s: subdir mkdir dd/dd failed\n", s);
+    2f22:	85ca                	mv	a1,s2
+    2f24:	00003517          	auipc	a0,0x3
+    2f28:	43450513          	addi	a0,a0,1076 # 6358 <malloc+0x13f4>
+    2f2c:	785010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f30:	4505                	li	a0,1
+    2f32:	34f010ef          	jal	4a80 <exit>
+    printf("%s: create dd/dd/ff failed\n", s);
+    2f36:	85ca                	mv	a1,s2
+    2f38:	00003517          	auipc	a0,0x3
+    2f3c:	45050513          	addi	a0,a0,1104 # 6388 <malloc+0x1424>
+    2f40:	771010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f44:	4505                	li	a0,1
+    2f46:	33b010ef          	jal	4a80 <exit>
+    printf("%s: open dd/dd/../ff failed\n", s);
+    2f4a:	85ca                	mv	a1,s2
+    2f4c:	00003517          	auipc	a0,0x3
+    2f50:	47450513          	addi	a0,a0,1140 # 63c0 <malloc+0x145c>
+    2f54:	75d010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f58:	4505                	li	a0,1
+    2f5a:	327010ef          	jal	4a80 <exit>
+    printf("%s: dd/dd/../ff wrong content\n", s);
+    2f5e:	85ca                	mv	a1,s2
+    2f60:	00003517          	auipc	a0,0x3
+    2f64:	48050513          	addi	a0,a0,1152 # 63e0 <malloc+0x147c>
+    2f68:	749010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f6c:	4505                	li	a0,1
+    2f6e:	313010ef          	jal	4a80 <exit>
+    printf("%s: link dd/dd/ff dd/dd/ffff failed\n", s);
+    2f72:	85ca                	mv	a1,s2
+    2f74:	00003517          	auipc	a0,0x3
+    2f78:	49c50513          	addi	a0,a0,1180 # 6410 <malloc+0x14ac>
+    2f7c:	735010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f80:	4505                	li	a0,1
+    2f82:	2ff010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    2f86:	85ca                	mv	a1,s2
+    2f88:	00003517          	auipc	a0,0x3
+    2f8c:	4b050513          	addi	a0,a0,1200 # 6438 <malloc+0x14d4>
+    2f90:	721010ef          	jal	4eb0 <printf>
+    exit(1);
+    2f94:	4505                	li	a0,1
+    2f96:	2eb010ef          	jal	4a80 <exit>
+    printf("%s: open (unlinked) dd/dd/ff succeeded\n", s);
+    2f9a:	85ca                	mv	a1,s2
+    2f9c:	00003517          	auipc	a0,0x3
+    2fa0:	4bc50513          	addi	a0,a0,1212 # 6458 <malloc+0x14f4>
+    2fa4:	70d010ef          	jal	4eb0 <printf>
+    exit(1);
+    2fa8:	4505                	li	a0,1
+    2faa:	2d7010ef          	jal	4a80 <exit>
+    printf("%s: chdir dd failed\n", s);
+    2fae:	85ca                	mv	a1,s2
+    2fb0:	00003517          	auipc	a0,0x3
+    2fb4:	4d050513          	addi	a0,a0,1232 # 6480 <malloc+0x151c>
+    2fb8:	6f9010ef          	jal	4eb0 <printf>
+    exit(1);
+    2fbc:	4505                	li	a0,1
+    2fbe:	2c3010ef          	jal	4a80 <exit>
+    printf("%s: chdir dd/../../dd failed\n", s);
+    2fc2:	85ca                	mv	a1,s2
+    2fc4:	00003517          	auipc	a0,0x3
+    2fc8:	4e450513          	addi	a0,a0,1252 # 64a8 <malloc+0x1544>
+    2fcc:	6e5010ef          	jal	4eb0 <printf>
+    exit(1);
+    2fd0:	4505                	li	a0,1
+    2fd2:	2af010ef          	jal	4a80 <exit>
+    printf("%s: chdir dd/../../../dd failed\n", s);
+    2fd6:	85ca                	mv	a1,s2
+    2fd8:	00003517          	auipc	a0,0x3
+    2fdc:	50050513          	addi	a0,a0,1280 # 64d8 <malloc+0x1574>
+    2fe0:	6d1010ef          	jal	4eb0 <printf>
+    exit(1);
+    2fe4:	4505                	li	a0,1
+    2fe6:	29b010ef          	jal	4a80 <exit>
+    printf("%s: chdir ./.. failed\n", s);
+    2fea:	85ca                	mv	a1,s2
+    2fec:	00003517          	auipc	a0,0x3
+    2ff0:	51c50513          	addi	a0,a0,1308 # 6508 <malloc+0x15a4>
+    2ff4:	6bd010ef          	jal	4eb0 <printf>
+    exit(1);
+    2ff8:	4505                	li	a0,1
+    2ffa:	287010ef          	jal	4a80 <exit>
+    printf("%s: open dd/dd/ffff failed\n", s);
+    2ffe:	85ca                	mv	a1,s2
+    3000:	00003517          	auipc	a0,0x3
+    3004:	52050513          	addi	a0,a0,1312 # 6520 <malloc+0x15bc>
+    3008:	6a9010ef          	jal	4eb0 <printf>
+    exit(1);
+    300c:	4505                	li	a0,1
+    300e:	273010ef          	jal	4a80 <exit>
+    printf("%s: read dd/dd/ffff wrong len\n", s);
+    3012:	85ca                	mv	a1,s2
+    3014:	00003517          	auipc	a0,0x3
+    3018:	52c50513          	addi	a0,a0,1324 # 6540 <malloc+0x15dc>
+    301c:	695010ef          	jal	4eb0 <printf>
+    exit(1);
+    3020:	4505                	li	a0,1
+    3022:	25f010ef          	jal	4a80 <exit>
+    printf("%s: open (unlinked) dd/dd/ff succeeded!\n", s);
+    3026:	85ca                	mv	a1,s2
+    3028:	00003517          	auipc	a0,0x3
+    302c:	53850513          	addi	a0,a0,1336 # 6560 <malloc+0x15fc>
+    3030:	681010ef          	jal	4eb0 <printf>
+    exit(1);
+    3034:	4505                	li	a0,1
+    3036:	24b010ef          	jal	4a80 <exit>
+    printf("%s: create dd/ff/ff succeeded!\n", s);
+    303a:	85ca                	mv	a1,s2
+    303c:	00003517          	auipc	a0,0x3
+    3040:	56450513          	addi	a0,a0,1380 # 65a0 <malloc+0x163c>
+    3044:	66d010ef          	jal	4eb0 <printf>
+    exit(1);
+    3048:	4505                	li	a0,1
+    304a:	237010ef          	jal	4a80 <exit>
+    printf("%s: create dd/xx/ff succeeded!\n", s);
+    304e:	85ca                	mv	a1,s2
+    3050:	00003517          	auipc	a0,0x3
+    3054:	58050513          	addi	a0,a0,1408 # 65d0 <malloc+0x166c>
+    3058:	659010ef          	jal	4eb0 <printf>
+    exit(1);
+    305c:	4505                	li	a0,1
+    305e:	223010ef          	jal	4a80 <exit>
+    printf("%s: create dd succeeded!\n", s);
+    3062:	85ca                	mv	a1,s2
+    3064:	00003517          	auipc	a0,0x3
+    3068:	58c50513          	addi	a0,a0,1420 # 65f0 <malloc+0x168c>
+    306c:	645010ef          	jal	4eb0 <printf>
+    exit(1);
+    3070:	4505                	li	a0,1
+    3072:	20f010ef          	jal	4a80 <exit>
+    printf("%s: open dd rdwr succeeded!\n", s);
+    3076:	85ca                	mv	a1,s2
+    3078:	00003517          	auipc	a0,0x3
+    307c:	59850513          	addi	a0,a0,1432 # 6610 <malloc+0x16ac>
+    3080:	631010ef          	jal	4eb0 <printf>
+    exit(1);
+    3084:	4505                	li	a0,1
+    3086:	1fb010ef          	jal	4a80 <exit>
+    printf("%s: open dd wronly succeeded!\n", s);
+    308a:	85ca                	mv	a1,s2
+    308c:	00003517          	auipc	a0,0x3
+    3090:	5a450513          	addi	a0,a0,1444 # 6630 <malloc+0x16cc>
+    3094:	61d010ef          	jal	4eb0 <printf>
+    exit(1);
+    3098:	4505                	li	a0,1
+    309a:	1e7010ef          	jal	4a80 <exit>
+    printf("%s: link dd/ff/ff dd/dd/xx succeeded!\n", s);
+    309e:	85ca                	mv	a1,s2
+    30a0:	00003517          	auipc	a0,0x3
+    30a4:	5c050513          	addi	a0,a0,1472 # 6660 <malloc+0x16fc>
+    30a8:	609010ef          	jal	4eb0 <printf>
+    exit(1);
+    30ac:	4505                	li	a0,1
+    30ae:	1d3010ef          	jal	4a80 <exit>
+    printf("%s: link dd/xx/ff dd/dd/xx succeeded!\n", s);
+    30b2:	85ca                	mv	a1,s2
+    30b4:	00003517          	auipc	a0,0x3
+    30b8:	5d450513          	addi	a0,a0,1492 # 6688 <malloc+0x1724>
+    30bc:	5f5010ef          	jal	4eb0 <printf>
+    exit(1);
+    30c0:	4505                	li	a0,1
+    30c2:	1bf010ef          	jal	4a80 <exit>
+    printf("%s: link dd/ff dd/dd/ffff succeeded!\n", s);
+    30c6:	85ca                	mv	a1,s2
+    30c8:	00003517          	auipc	a0,0x3
+    30cc:	5e850513          	addi	a0,a0,1512 # 66b0 <malloc+0x174c>
+    30d0:	5e1010ef          	jal	4eb0 <printf>
+    exit(1);
+    30d4:	4505                	li	a0,1
+    30d6:	1ab010ef          	jal	4a80 <exit>
+    printf("%s: mkdir dd/ff/ff succeeded!\n", s);
+    30da:	85ca                	mv	a1,s2
+    30dc:	00003517          	auipc	a0,0x3
+    30e0:	5fc50513          	addi	a0,a0,1532 # 66d8 <malloc+0x1774>
+    30e4:	5cd010ef          	jal	4eb0 <printf>
+    exit(1);
+    30e8:	4505                	li	a0,1
+    30ea:	197010ef          	jal	4a80 <exit>
+    printf("%s: mkdir dd/xx/ff succeeded!\n", s);
+    30ee:	85ca                	mv	a1,s2
+    30f0:	00003517          	auipc	a0,0x3
+    30f4:	60850513          	addi	a0,a0,1544 # 66f8 <malloc+0x1794>
+    30f8:	5b9010ef          	jal	4eb0 <printf>
+    exit(1);
+    30fc:	4505                	li	a0,1
+    30fe:	183010ef          	jal	4a80 <exit>
+    printf("%s: mkdir dd/dd/ffff succeeded!\n", s);
+    3102:	85ca                	mv	a1,s2
+    3104:	00003517          	auipc	a0,0x3
+    3108:	61450513          	addi	a0,a0,1556 # 6718 <malloc+0x17b4>
+    310c:	5a5010ef          	jal	4eb0 <printf>
+    exit(1);
+    3110:	4505                	li	a0,1
+    3112:	16f010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/xx/ff succeeded!\n", s);
+    3116:	85ca                	mv	a1,s2
+    3118:	00003517          	auipc	a0,0x3
+    311c:	62850513          	addi	a0,a0,1576 # 6740 <malloc+0x17dc>
+    3120:	591010ef          	jal	4eb0 <printf>
+    exit(1);
+    3124:	4505                	li	a0,1
+    3126:	15b010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/ff/ff succeeded!\n", s);
+    312a:	85ca                	mv	a1,s2
+    312c:	00003517          	auipc	a0,0x3
+    3130:	63450513          	addi	a0,a0,1588 # 6760 <malloc+0x17fc>
+    3134:	57d010ef          	jal	4eb0 <printf>
+    exit(1);
+    3138:	4505                	li	a0,1
+    313a:	147010ef          	jal	4a80 <exit>
+    printf("%s: chdir dd/ff succeeded!\n", s);
+    313e:	85ca                	mv	a1,s2
+    3140:	00003517          	auipc	a0,0x3
+    3144:	64050513          	addi	a0,a0,1600 # 6780 <malloc+0x181c>
+    3148:	569010ef          	jal	4eb0 <printf>
+    exit(1);
+    314c:	4505                	li	a0,1
+    314e:	133010ef          	jal	4a80 <exit>
+    printf("%s: chdir dd/xx succeeded!\n", s);
+    3152:	85ca                	mv	a1,s2
+    3154:	00003517          	auipc	a0,0x3
+    3158:	65450513          	addi	a0,a0,1620 # 67a8 <malloc+0x1844>
+    315c:	555010ef          	jal	4eb0 <printf>
+    exit(1);
+    3160:	4505                	li	a0,1
+    3162:	11f010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    3166:	85ca                	mv	a1,s2
+    3168:	00003517          	auipc	a0,0x3
+    316c:	2d050513          	addi	a0,a0,720 # 6438 <malloc+0x14d4>
+    3170:	541010ef          	jal	4eb0 <printf>
+    exit(1);
+    3174:	4505                	li	a0,1
+    3176:	10b010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/ff failed\n", s);
+    317a:	85ca                	mv	a1,s2
+    317c:	00003517          	auipc	a0,0x3
+    3180:	64c50513          	addi	a0,a0,1612 # 67c8 <malloc+0x1864>
+    3184:	52d010ef          	jal	4eb0 <printf>
+    exit(1);
+    3188:	4505                	li	a0,1
+    318a:	0f7010ef          	jal	4a80 <exit>
+    printf("%s: unlink non-empty dd succeeded!\n", s);
+    318e:	85ca                	mv	a1,s2
+    3190:	00003517          	auipc	a0,0x3
+    3194:	65850513          	addi	a0,a0,1624 # 67e8 <malloc+0x1884>
+    3198:	519010ef          	jal	4eb0 <printf>
+    exit(1);
+    319c:	4505                	li	a0,1
+    319e:	0e3010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd/dd failed\n", s);
+    31a2:	85ca                	mv	a1,s2
+    31a4:	00003517          	auipc	a0,0x3
+    31a8:	67450513          	addi	a0,a0,1652 # 6818 <malloc+0x18b4>
+    31ac:	505010ef          	jal	4eb0 <printf>
+    exit(1);
+    31b0:	4505                	li	a0,1
+    31b2:	0cf010ef          	jal	4a80 <exit>
+    printf("%s: unlink dd failed\n", s);
+    31b6:	85ca                	mv	a1,s2
+    31b8:	00003517          	auipc	a0,0x3
+    31bc:	68050513          	addi	a0,a0,1664 # 6838 <malloc+0x18d4>
+    31c0:	4f1010ef          	jal	4eb0 <printf>
+    exit(1);
+    31c4:	4505                	li	a0,1
+    31c6:	0bb010ef          	jal	4a80 <exit>
+
+00000000000031ca <rmdot>:
+{
+    31ca:	1101                	addi	sp,sp,-32
+    31cc:	ec06                	sd	ra,24(sp)
+    31ce:	e822                	sd	s0,16(sp)
+    31d0:	e426                	sd	s1,8(sp)
+    31d2:	1000                	addi	s0,sp,32
+    31d4:	84aa                	mv	s1,a0
+  if(mkdir("dots") != 0){
+    31d6:	00003517          	auipc	a0,0x3
+    31da:	67a50513          	addi	a0,a0,1658 # 6850 <malloc+0x18ec>
+    31de:	10b010ef          	jal	4ae8 <mkdir>
+    31e2:	e53d                	bnez	a0,3250 <rmdot+0x86>
+  if(chdir("dots") != 0){
+    31e4:	00003517          	auipc	a0,0x3
+    31e8:	66c50513          	addi	a0,a0,1644 # 6850 <malloc+0x18ec>
+    31ec:	105010ef          	jal	4af0 <chdir>
+    31f0:	e935                	bnez	a0,3264 <rmdot+0x9a>
+  if(unlink(".") == 0){
+    31f2:	00002517          	auipc	a0,0x2
+    31f6:	58e50513          	addi	a0,a0,1422 # 5780 <malloc+0x81c>
+    31fa:	0d7010ef          	jal	4ad0 <unlink>
+    31fe:	cd2d                	beqz	a0,3278 <rmdot+0xae>
+  if(unlink("..") == 0){
+    3200:	00003517          	auipc	a0,0x3
+    3204:	0a050513          	addi	a0,a0,160 # 62a0 <malloc+0x133c>
+    3208:	0c9010ef          	jal	4ad0 <unlink>
+    320c:	c141                	beqz	a0,328c <rmdot+0xc2>
+  if(chdir("/") != 0){
+    320e:	00003517          	auipc	a0,0x3
+    3212:	03a50513          	addi	a0,a0,58 # 6248 <malloc+0x12e4>
+    3216:	0db010ef          	jal	4af0 <chdir>
+    321a:	e159                	bnez	a0,32a0 <rmdot+0xd6>
+  if(unlink("dots/.") == 0){
+    321c:	00003517          	auipc	a0,0x3
+    3220:	69c50513          	addi	a0,a0,1692 # 68b8 <malloc+0x1954>
+    3224:	0ad010ef          	jal	4ad0 <unlink>
+    3228:	c551                	beqz	a0,32b4 <rmdot+0xea>
+  if(unlink("dots/..") == 0){
+    322a:	00003517          	auipc	a0,0x3
+    322e:	6b650513          	addi	a0,a0,1718 # 68e0 <malloc+0x197c>
+    3232:	09f010ef          	jal	4ad0 <unlink>
+    3236:	c949                	beqz	a0,32c8 <rmdot+0xfe>
+  if(unlink("dots") != 0){
+    3238:	00003517          	auipc	a0,0x3
+    323c:	61850513          	addi	a0,a0,1560 # 6850 <malloc+0x18ec>
+    3240:	091010ef          	jal	4ad0 <unlink>
+    3244:	ed41                	bnez	a0,32dc <rmdot+0x112>
+}
+    3246:	60e2                	ld	ra,24(sp)
+    3248:	6442                	ld	s0,16(sp)
+    324a:	64a2                	ld	s1,8(sp)
+    324c:	6105                	addi	sp,sp,32
+    324e:	8082                	ret
+    printf("%s: mkdir dots failed\n", s);
+    3250:	85a6                	mv	a1,s1
+    3252:	00003517          	auipc	a0,0x3
+    3256:	60650513          	addi	a0,a0,1542 # 6858 <malloc+0x18f4>
+    325a:	457010ef          	jal	4eb0 <printf>
+    exit(1);
+    325e:	4505                	li	a0,1
+    3260:	021010ef          	jal	4a80 <exit>
+    printf("%s: chdir dots failed\n", s);
+    3264:	85a6                	mv	a1,s1
+    3266:	00003517          	auipc	a0,0x3
+    326a:	60a50513          	addi	a0,a0,1546 # 6870 <malloc+0x190c>
+    326e:	443010ef          	jal	4eb0 <printf>
+    exit(1);
+    3272:	4505                	li	a0,1
+    3274:	00d010ef          	jal	4a80 <exit>
+    printf("%s: rm . worked!\n", s);
+    3278:	85a6                	mv	a1,s1
+    327a:	00003517          	auipc	a0,0x3
+    327e:	60e50513          	addi	a0,a0,1550 # 6888 <malloc+0x1924>
+    3282:	42f010ef          	jal	4eb0 <printf>
+    exit(1);
+    3286:	4505                	li	a0,1
+    3288:	7f8010ef          	jal	4a80 <exit>
+    printf("%s: rm .. worked!\n", s);
+    328c:	85a6                	mv	a1,s1
+    328e:	00003517          	auipc	a0,0x3
+    3292:	61250513          	addi	a0,a0,1554 # 68a0 <malloc+0x193c>
+    3296:	41b010ef          	jal	4eb0 <printf>
+    exit(1);
+    329a:	4505                	li	a0,1
+    329c:	7e4010ef          	jal	4a80 <exit>
+    printf("%s: chdir / failed\n", s);
+    32a0:	85a6                	mv	a1,s1
+    32a2:	00003517          	auipc	a0,0x3
+    32a6:	fae50513          	addi	a0,a0,-82 # 6250 <malloc+0x12ec>
+    32aa:	407010ef          	jal	4eb0 <printf>
+    exit(1);
+    32ae:	4505                	li	a0,1
+    32b0:	7d0010ef          	jal	4a80 <exit>
+    printf("%s: unlink dots/. worked!\n", s);
+    32b4:	85a6                	mv	a1,s1
+    32b6:	00003517          	auipc	a0,0x3
+    32ba:	60a50513          	addi	a0,a0,1546 # 68c0 <malloc+0x195c>
+    32be:	3f3010ef          	jal	4eb0 <printf>
+    exit(1);
+    32c2:	4505                	li	a0,1
+    32c4:	7bc010ef          	jal	4a80 <exit>
+    printf("%s: unlink dots/.. worked!\n", s);
+    32c8:	85a6                	mv	a1,s1
+    32ca:	00003517          	auipc	a0,0x3
+    32ce:	61e50513          	addi	a0,a0,1566 # 68e8 <malloc+0x1984>
+    32d2:	3df010ef          	jal	4eb0 <printf>
+    exit(1);
+    32d6:	4505                	li	a0,1
+    32d8:	7a8010ef          	jal	4a80 <exit>
+    printf("%s: unlink dots failed!\n", s);
+    32dc:	85a6                	mv	a1,s1
+    32de:	00003517          	auipc	a0,0x3
+    32e2:	62a50513          	addi	a0,a0,1578 # 6908 <malloc+0x19a4>
+    32e6:	3cb010ef          	jal	4eb0 <printf>
+    exit(1);
+    32ea:	4505                	li	a0,1
+    32ec:	794010ef          	jal	4a80 <exit>
+
+00000000000032f0 <dirfile>:
+{
+    32f0:	1101                	addi	sp,sp,-32
+    32f2:	ec06                	sd	ra,24(sp)
+    32f4:	e822                	sd	s0,16(sp)
+    32f6:	e426                	sd	s1,8(sp)
+    32f8:	e04a                	sd	s2,0(sp)
+    32fa:	1000                	addi	s0,sp,32
+    32fc:	892a                	mv	s2,a0
+  fd = open("dirfile", O_CREATE);
+    32fe:	20000593          	li	a1,512
+    3302:	00003517          	auipc	a0,0x3
+    3306:	62650513          	addi	a0,a0,1574 # 6928 <malloc+0x19c4>
+    330a:	7b6010ef          	jal	4ac0 <open>
+  if(fd < 0){
+    330e:	0c054563          	bltz	a0,33d8 <dirfile+0xe8>
+  close(fd);
+    3312:	796010ef          	jal	4aa8 <close>
+  if(chdir("dirfile") == 0){
+    3316:	00003517          	auipc	a0,0x3
+    331a:	61250513          	addi	a0,a0,1554 # 6928 <malloc+0x19c4>
+    331e:	7d2010ef          	jal	4af0 <chdir>
+    3322:	c569                	beqz	a0,33ec <dirfile+0xfc>
+  fd = open("dirfile/xx", 0);
+    3324:	4581                	li	a1,0
+    3326:	00003517          	auipc	a0,0x3
+    332a:	64a50513          	addi	a0,a0,1610 # 6970 <malloc+0x1a0c>
+    332e:	792010ef          	jal	4ac0 <open>
+  if(fd >= 0){
+    3332:	0c055763          	bgez	a0,3400 <dirfile+0x110>
+  fd = open("dirfile/xx", O_CREATE);
+    3336:	20000593          	li	a1,512
+    333a:	00003517          	auipc	a0,0x3
+    333e:	63650513          	addi	a0,a0,1590 # 6970 <malloc+0x1a0c>
+    3342:	77e010ef          	jal	4ac0 <open>
+  if(fd >= 0){
+    3346:	0c055763          	bgez	a0,3414 <dirfile+0x124>
+  if(mkdir("dirfile/xx") == 0){
+    334a:	00003517          	auipc	a0,0x3
+    334e:	62650513          	addi	a0,a0,1574 # 6970 <malloc+0x1a0c>
+    3352:	796010ef          	jal	4ae8 <mkdir>
+    3356:	0c050963          	beqz	a0,3428 <dirfile+0x138>
+  if(unlink("dirfile/xx") == 0){
+    335a:	00003517          	auipc	a0,0x3
+    335e:	61650513          	addi	a0,a0,1558 # 6970 <malloc+0x1a0c>
+    3362:	76e010ef          	jal	4ad0 <unlink>
+    3366:	0c050b63          	beqz	a0,343c <dirfile+0x14c>
+  if(link("README", "dirfile/xx") == 0){
+    336a:	00003597          	auipc	a1,0x3
+    336e:	60658593          	addi	a1,a1,1542 # 6970 <malloc+0x1a0c>
+    3372:	00002517          	auipc	a0,0x2
+    3376:	efe50513          	addi	a0,a0,-258 # 5270 <malloc+0x30c>
+    337a:	766010ef          	jal	4ae0 <link>
+    337e:	0c050963          	beqz	a0,3450 <dirfile+0x160>
+  if(unlink("dirfile") != 0){
+    3382:	00003517          	auipc	a0,0x3
+    3386:	5a650513          	addi	a0,a0,1446 # 6928 <malloc+0x19c4>
+    338a:	746010ef          	jal	4ad0 <unlink>
+    338e:	0c051b63          	bnez	a0,3464 <dirfile+0x174>
+  fd = open(".", O_RDWR);
+    3392:	4589                	li	a1,2
+    3394:	00002517          	auipc	a0,0x2
+    3398:	3ec50513          	addi	a0,a0,1004 # 5780 <malloc+0x81c>
+    339c:	724010ef          	jal	4ac0 <open>
+  if(fd >= 0){
+    33a0:	0c055c63          	bgez	a0,3478 <dirfile+0x188>
+  fd = open(".", 0);
+    33a4:	4581                	li	a1,0
+    33a6:	00002517          	auipc	a0,0x2
+    33aa:	3da50513          	addi	a0,a0,986 # 5780 <malloc+0x81c>
+    33ae:	712010ef          	jal	4ac0 <open>
+    33b2:	84aa                	mv	s1,a0
+  if(write(fd, "x", 1) > 0){
+    33b4:	4605                	li	a2,1
+    33b6:	00002597          	auipc	a1,0x2
+    33ba:	d5258593          	addi	a1,a1,-686 # 5108 <malloc+0x1a4>
+    33be:	6e2010ef          	jal	4aa0 <write>
+    33c2:	0ca04563          	bgtz	a0,348c <dirfile+0x19c>
+  close(fd);
+    33c6:	8526                	mv	a0,s1
+    33c8:	6e0010ef          	jal	4aa8 <close>
+}
+    33cc:	60e2                	ld	ra,24(sp)
+    33ce:	6442                	ld	s0,16(sp)
+    33d0:	64a2                	ld	s1,8(sp)
+    33d2:	6902                	ld	s2,0(sp)
+    33d4:	6105                	addi	sp,sp,32
+    33d6:	8082                	ret
+    printf("%s: create dirfile failed\n", s);
+    33d8:	85ca                	mv	a1,s2
+    33da:	00003517          	auipc	a0,0x3
+    33de:	55650513          	addi	a0,a0,1366 # 6930 <malloc+0x19cc>
+    33e2:	2cf010ef          	jal	4eb0 <printf>
+    exit(1);
+    33e6:	4505                	li	a0,1
+    33e8:	698010ef          	jal	4a80 <exit>
+    printf("%s: chdir dirfile succeeded!\n", s);
+    33ec:	85ca                	mv	a1,s2
+    33ee:	00003517          	auipc	a0,0x3
+    33f2:	56250513          	addi	a0,a0,1378 # 6950 <malloc+0x19ec>
+    33f6:	2bb010ef          	jal	4eb0 <printf>
+    exit(1);
+    33fa:	4505                	li	a0,1
+    33fc:	684010ef          	jal	4a80 <exit>
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    3400:	85ca                	mv	a1,s2
+    3402:	00003517          	auipc	a0,0x3
+    3406:	57e50513          	addi	a0,a0,1406 # 6980 <malloc+0x1a1c>
+    340a:	2a7010ef          	jal	4eb0 <printf>
+    exit(1);
+    340e:	4505                	li	a0,1
+    3410:	670010ef          	jal	4a80 <exit>
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    3414:	85ca                	mv	a1,s2
+    3416:	00003517          	auipc	a0,0x3
+    341a:	56a50513          	addi	a0,a0,1386 # 6980 <malloc+0x1a1c>
+    341e:	293010ef          	jal	4eb0 <printf>
+    exit(1);
+    3422:	4505                	li	a0,1
+    3424:	65c010ef          	jal	4a80 <exit>
+    printf("%s: mkdir dirfile/xx succeeded!\n", s);
+    3428:	85ca                	mv	a1,s2
+    342a:	00003517          	auipc	a0,0x3
+    342e:	57e50513          	addi	a0,a0,1406 # 69a8 <malloc+0x1a44>
+    3432:	27f010ef          	jal	4eb0 <printf>
+    exit(1);
+    3436:	4505                	li	a0,1
+    3438:	648010ef          	jal	4a80 <exit>
+    printf("%s: unlink dirfile/xx succeeded!\n", s);
+    343c:	85ca                	mv	a1,s2
+    343e:	00003517          	auipc	a0,0x3
+    3442:	59250513          	addi	a0,a0,1426 # 69d0 <malloc+0x1a6c>
+    3446:	26b010ef          	jal	4eb0 <printf>
+    exit(1);
+    344a:	4505                	li	a0,1
+    344c:	634010ef          	jal	4a80 <exit>
+    printf("%s: link to dirfile/xx succeeded!\n", s);
+    3450:	85ca                	mv	a1,s2
+    3452:	00003517          	auipc	a0,0x3
+    3456:	5a650513          	addi	a0,a0,1446 # 69f8 <malloc+0x1a94>
+    345a:	257010ef          	jal	4eb0 <printf>
+    exit(1);
+    345e:	4505                	li	a0,1
+    3460:	620010ef          	jal	4a80 <exit>
+    printf("%s: unlink dirfile failed!\n", s);
+    3464:	85ca                	mv	a1,s2
+    3466:	00003517          	auipc	a0,0x3
+    346a:	5ba50513          	addi	a0,a0,1466 # 6a20 <malloc+0x1abc>
+    346e:	243010ef          	jal	4eb0 <printf>
+    exit(1);
+    3472:	4505                	li	a0,1
+    3474:	60c010ef          	jal	4a80 <exit>
+    printf("%s: open . for writing succeeded!\n", s);
+    3478:	85ca                	mv	a1,s2
+    347a:	00003517          	auipc	a0,0x3
+    347e:	5c650513          	addi	a0,a0,1478 # 6a40 <malloc+0x1adc>
+    3482:	22f010ef          	jal	4eb0 <printf>
+    exit(1);
+    3486:	4505                	li	a0,1
+    3488:	5f8010ef          	jal	4a80 <exit>
+    printf("%s: write . succeeded!\n", s);
+    348c:	85ca                	mv	a1,s2
+    348e:	00003517          	auipc	a0,0x3
+    3492:	5da50513          	addi	a0,a0,1498 # 6a68 <malloc+0x1b04>
+    3496:	21b010ef          	jal	4eb0 <printf>
+    exit(1);
+    349a:	4505                	li	a0,1
+    349c:	5e4010ef          	jal	4a80 <exit>
+
+00000000000034a0 <iref>:
+{
+    34a0:	7139                	addi	sp,sp,-64
+    34a2:	fc06                	sd	ra,56(sp)
+    34a4:	f822                	sd	s0,48(sp)
+    34a6:	f426                	sd	s1,40(sp)
+    34a8:	f04a                	sd	s2,32(sp)
+    34aa:	ec4e                	sd	s3,24(sp)
+    34ac:	e852                	sd	s4,16(sp)
+    34ae:	e456                	sd	s5,8(sp)
+    34b0:	e05a                	sd	s6,0(sp)
+    34b2:	0080                	addi	s0,sp,64
+    34b4:	8b2a                	mv	s6,a0
+    34b6:	03300913          	li	s2,51
+    if(mkdir("irefd") != 0){
+    34ba:	00003a17          	auipc	s4,0x3
+    34be:	5c6a0a13          	addi	s4,s4,1478 # 6a80 <malloc+0x1b1c>
+    mkdir("");
+    34c2:	00003497          	auipc	s1,0x3
+    34c6:	0c648493          	addi	s1,s1,198 # 6588 <malloc+0x1624>
+    link("README", "");
+    34ca:	00002a97          	auipc	s5,0x2
+    34ce:	da6a8a93          	addi	s5,s5,-602 # 5270 <malloc+0x30c>
+    fd = open("xx", O_CREATE);
+    34d2:	00003997          	auipc	s3,0x3
+    34d6:	4a698993          	addi	s3,s3,1190 # 6978 <malloc+0x1a14>
+    34da:	a835                	j	3516 <iref+0x76>
+      printf("%s: mkdir irefd failed\n", s);
+    34dc:	85da                	mv	a1,s6
+    34de:	00003517          	auipc	a0,0x3
+    34e2:	5aa50513          	addi	a0,a0,1450 # 6a88 <malloc+0x1b24>
+    34e6:	1cb010ef          	jal	4eb0 <printf>
+      exit(1);
+    34ea:	4505                	li	a0,1
+    34ec:	594010ef          	jal	4a80 <exit>
+      printf("%s: chdir irefd failed\n", s);
+    34f0:	85da                	mv	a1,s6
+    34f2:	00003517          	auipc	a0,0x3
+    34f6:	5ae50513          	addi	a0,a0,1454 # 6aa0 <malloc+0x1b3c>
+    34fa:	1b7010ef          	jal	4eb0 <printf>
+      exit(1);
+    34fe:	4505                	li	a0,1
+    3500:	580010ef          	jal	4a80 <exit>
+      close(fd);
+    3504:	5a4010ef          	jal	4aa8 <close>
+    3508:	a82d                	j	3542 <iref+0xa2>
+    unlink("xx");
+    350a:	854e                	mv	a0,s3
+    350c:	5c4010ef          	jal	4ad0 <unlink>
+  for(i = 0; i < NINODE + 1; i++){
+    3510:	397d                	addiw	s2,s2,-1
+    3512:	04090263          	beqz	s2,3556 <iref+0xb6>
+    if(mkdir("irefd") != 0){
+    3516:	8552                	mv	a0,s4
+    3518:	5d0010ef          	jal	4ae8 <mkdir>
+    351c:	f161                	bnez	a0,34dc <iref+0x3c>
+    if(chdir("irefd") != 0){
+    351e:	8552                	mv	a0,s4
+    3520:	5d0010ef          	jal	4af0 <chdir>
+    3524:	f571                	bnez	a0,34f0 <iref+0x50>
+    mkdir("");
+    3526:	8526                	mv	a0,s1
+    3528:	5c0010ef          	jal	4ae8 <mkdir>
+    link("README", "");
+    352c:	85a6                	mv	a1,s1
+    352e:	8556                	mv	a0,s5
+    3530:	5b0010ef          	jal	4ae0 <link>
+    fd = open("", O_CREATE);
+    3534:	20000593          	li	a1,512
+    3538:	8526                	mv	a0,s1
+    353a:	586010ef          	jal	4ac0 <open>
+    if(fd >= 0)
+    353e:	fc0553e3          	bgez	a0,3504 <iref+0x64>
+    fd = open("xx", O_CREATE);
+    3542:	20000593          	li	a1,512
+    3546:	854e                	mv	a0,s3
+    3548:	578010ef          	jal	4ac0 <open>
+    if(fd >= 0)
+    354c:	fa054fe3          	bltz	a0,350a <iref+0x6a>
+      close(fd);
+    3550:	558010ef          	jal	4aa8 <close>
+    3554:	bf5d                	j	350a <iref+0x6a>
+    3556:	03300493          	li	s1,51
+    chdir("..");
+    355a:	00003997          	auipc	s3,0x3
+    355e:	d4698993          	addi	s3,s3,-698 # 62a0 <malloc+0x133c>
+    unlink("irefd");
+    3562:	00003917          	auipc	s2,0x3
+    3566:	51e90913          	addi	s2,s2,1310 # 6a80 <malloc+0x1b1c>
+    chdir("..");
+    356a:	854e                	mv	a0,s3
+    356c:	584010ef          	jal	4af0 <chdir>
+    unlink("irefd");
+    3570:	854a                	mv	a0,s2
+    3572:	55e010ef          	jal	4ad0 <unlink>
+  for(i = 0; i < NINODE + 1; i++){
+    3576:	34fd                	addiw	s1,s1,-1
+    3578:	f8ed                	bnez	s1,356a <iref+0xca>
+  chdir("/");
+    357a:	00003517          	auipc	a0,0x3
+    357e:	cce50513          	addi	a0,a0,-818 # 6248 <malloc+0x12e4>
+    3582:	56e010ef          	jal	4af0 <chdir>
+}
+    3586:	70e2                	ld	ra,56(sp)
+    3588:	7442                	ld	s0,48(sp)
+    358a:	74a2                	ld	s1,40(sp)
+    358c:	7902                	ld	s2,32(sp)
+    358e:	69e2                	ld	s3,24(sp)
+    3590:	6a42                	ld	s4,16(sp)
+    3592:	6aa2                	ld	s5,8(sp)
+    3594:	6b02                	ld	s6,0(sp)
+    3596:	6121                	addi	sp,sp,64
+    3598:	8082                	ret
+
+000000000000359a <openiputtest>:
+{
+    359a:	7179                	addi	sp,sp,-48
+    359c:	f406                	sd	ra,40(sp)
+    359e:	f022                	sd	s0,32(sp)
+    35a0:	ec26                	sd	s1,24(sp)
+    35a2:	1800                	addi	s0,sp,48
+    35a4:	84aa                	mv	s1,a0
+  if(mkdir("oidir") < 0){
+    35a6:	00003517          	auipc	a0,0x3
+    35aa:	51250513          	addi	a0,a0,1298 # 6ab8 <malloc+0x1b54>
+    35ae:	53a010ef          	jal	4ae8 <mkdir>
+    35b2:	02054a63          	bltz	a0,35e6 <openiputtest+0x4c>
+  pid = fork();
+    35b6:	4c2010ef          	jal	4a78 <fork>
+  if(pid < 0){
+    35ba:	04054063          	bltz	a0,35fa <openiputtest+0x60>
+  if(pid == 0){
+    35be:	e939                	bnez	a0,3614 <openiputtest+0x7a>
+    int fd = open("oidir", O_RDWR);
+    35c0:	4589                	li	a1,2
+    35c2:	00003517          	auipc	a0,0x3
+    35c6:	4f650513          	addi	a0,a0,1270 # 6ab8 <malloc+0x1b54>
+    35ca:	4f6010ef          	jal	4ac0 <open>
+    if(fd >= 0){
+    35ce:	04054063          	bltz	a0,360e <openiputtest+0x74>
+      printf("%s: open directory for write succeeded\n", s);
+    35d2:	85a6                	mv	a1,s1
+    35d4:	00003517          	auipc	a0,0x3
+    35d8:	50450513          	addi	a0,a0,1284 # 6ad8 <malloc+0x1b74>
+    35dc:	0d5010ef          	jal	4eb0 <printf>
+      exit(1);
+    35e0:	4505                	li	a0,1
+    35e2:	49e010ef          	jal	4a80 <exit>
+    printf("%s: mkdir oidir failed\n", s);
+    35e6:	85a6                	mv	a1,s1
+    35e8:	00003517          	auipc	a0,0x3
+    35ec:	4d850513          	addi	a0,a0,1240 # 6ac0 <malloc+0x1b5c>
+    35f0:	0c1010ef          	jal	4eb0 <printf>
+    exit(1);
+    35f4:	4505                	li	a0,1
+    35f6:	48a010ef          	jal	4a80 <exit>
+    printf("%s: fork failed\n", s);
+    35fa:	85a6                	mv	a1,s1
+    35fc:	00002517          	auipc	a0,0x2
+    3600:	32c50513          	addi	a0,a0,812 # 5928 <malloc+0x9c4>
+    3604:	0ad010ef          	jal	4eb0 <printf>
+    exit(1);
+    3608:	4505                	li	a0,1
+    360a:	476010ef          	jal	4a80 <exit>
+    exit(0);
+    360e:	4501                	li	a0,0
+    3610:	470010ef          	jal	4a80 <exit>
+  sleep(1);
+    3614:	4505                	li	a0,1
+    3616:	4fa010ef          	jal	4b10 <sleep>
+  if(unlink("oidir") != 0){
+    361a:	00003517          	auipc	a0,0x3
+    361e:	49e50513          	addi	a0,a0,1182 # 6ab8 <malloc+0x1b54>
+    3622:	4ae010ef          	jal	4ad0 <unlink>
+    3626:	c919                	beqz	a0,363c <openiputtest+0xa2>
+    printf("%s: unlink failed\n", s);
+    3628:	85a6                	mv	a1,s1
+    362a:	00002517          	auipc	a0,0x2
+    362e:	4ee50513          	addi	a0,a0,1262 # 5b18 <malloc+0xbb4>
+    3632:	07f010ef          	jal	4eb0 <printf>
+    exit(1);
+    3636:	4505                	li	a0,1
+    3638:	448010ef          	jal	4a80 <exit>
+  wait(&xstatus);
+    363c:	fdc40513          	addi	a0,s0,-36
+    3640:	448010ef          	jal	4a88 <wait>
+  exit(xstatus);
+    3644:	fdc42503          	lw	a0,-36(s0)
+    3648:	438010ef          	jal	4a80 <exit>
+
+000000000000364c <forkforkfork>:
+{
+    364c:	1101                	addi	sp,sp,-32
+    364e:	ec06                	sd	ra,24(sp)
+    3650:	e822                	sd	s0,16(sp)
+    3652:	e426                	sd	s1,8(sp)
+    3654:	1000                	addi	s0,sp,32
+    3656:	84aa                	mv	s1,a0
+  unlink("stopforking");
+    3658:	00003517          	auipc	a0,0x3
+    365c:	4a850513          	addi	a0,a0,1192 # 6b00 <malloc+0x1b9c>
+    3660:	470010ef          	jal	4ad0 <unlink>
+  int pid = fork();
+    3664:	414010ef          	jal	4a78 <fork>
+  if(pid < 0){
+    3668:	02054b63          	bltz	a0,369e <forkforkfork+0x52>
+  if(pid == 0){
+    366c:	c139                	beqz	a0,36b2 <forkforkfork+0x66>
+  sleep(20); // two seconds
+    366e:	4551                	li	a0,20
+    3670:	4a0010ef          	jal	4b10 <sleep>
+  close(open("stopforking", O_CREATE|O_RDWR));
+    3674:	20200593          	li	a1,514
+    3678:	00003517          	auipc	a0,0x3
+    367c:	48850513          	addi	a0,a0,1160 # 6b00 <malloc+0x1b9c>
+    3680:	440010ef          	jal	4ac0 <open>
+    3684:	424010ef          	jal	4aa8 <close>
+  wait(0);
+    3688:	4501                	li	a0,0
+    368a:	3fe010ef          	jal	4a88 <wait>
+  sleep(10); // one second
+    368e:	4529                	li	a0,10
+    3690:	480010ef          	jal	4b10 <sleep>
+}
+    3694:	60e2                	ld	ra,24(sp)
+    3696:	6442                	ld	s0,16(sp)
+    3698:	64a2                	ld	s1,8(sp)
+    369a:	6105                	addi	sp,sp,32
+    369c:	8082                	ret
+    printf("%s: fork failed", s);
+    369e:	85a6                	mv	a1,s1
+    36a0:	00002517          	auipc	a0,0x2
+    36a4:	44850513          	addi	a0,a0,1096 # 5ae8 <malloc+0xb84>
+    36a8:	009010ef          	jal	4eb0 <printf>
+    exit(1);
+    36ac:	4505                	li	a0,1
+    36ae:	3d2010ef          	jal	4a80 <exit>
+      int fd = open("stopforking", 0);
+    36b2:	00003497          	auipc	s1,0x3
+    36b6:	44e48493          	addi	s1,s1,1102 # 6b00 <malloc+0x1b9c>
+    36ba:	4581                	li	a1,0
+    36bc:	8526                	mv	a0,s1
+    36be:	402010ef          	jal	4ac0 <open>
+      if(fd >= 0){
+    36c2:	02055163          	bgez	a0,36e4 <forkforkfork+0x98>
+      if(fork() < 0){
+    36c6:	3b2010ef          	jal	4a78 <fork>
+    36ca:	fe0558e3          	bgez	a0,36ba <forkforkfork+0x6e>
+        close(open("stopforking", O_CREATE|O_RDWR));
+    36ce:	20200593          	li	a1,514
+    36d2:	00003517          	auipc	a0,0x3
+    36d6:	42e50513          	addi	a0,a0,1070 # 6b00 <malloc+0x1b9c>
+    36da:	3e6010ef          	jal	4ac0 <open>
+    36de:	3ca010ef          	jal	4aa8 <close>
+    36e2:	bfe1                	j	36ba <forkforkfork+0x6e>
+        exit(0);
+    36e4:	4501                	li	a0,0
+    36e6:	39a010ef          	jal	4a80 <exit>
+
+00000000000036ea <killstatus>:
+{
+    36ea:	7139                	addi	sp,sp,-64
+    36ec:	fc06                	sd	ra,56(sp)
+    36ee:	f822                	sd	s0,48(sp)
+    36f0:	f426                	sd	s1,40(sp)
+    36f2:	f04a                	sd	s2,32(sp)
+    36f4:	ec4e                	sd	s3,24(sp)
+    36f6:	e852                	sd	s4,16(sp)
+    36f8:	0080                	addi	s0,sp,64
+    36fa:	8a2a                	mv	s4,a0
+    36fc:	06400913          	li	s2,100
+    if(xst != -1) {
+    3700:	59fd                	li	s3,-1
+    int pid1 = fork();
+    3702:	376010ef          	jal	4a78 <fork>
+    3706:	84aa                	mv	s1,a0
+    if(pid1 < 0){
+    3708:	02054763          	bltz	a0,3736 <killstatus+0x4c>
+    if(pid1 == 0){
+    370c:	cd1d                	beqz	a0,374a <killstatus+0x60>
+    sleep(1);
+    370e:	4505                	li	a0,1
+    3710:	400010ef          	jal	4b10 <sleep>
+    kill(pid1);
+    3714:	8526                	mv	a0,s1
+    3716:	39a010ef          	jal	4ab0 <kill>
+    wait(&xst);
+    371a:	fcc40513          	addi	a0,s0,-52
+    371e:	36a010ef          	jal	4a88 <wait>
+    if(xst != -1) {
+    3722:	fcc42783          	lw	a5,-52(s0)
+    3726:	03379563          	bne	a5,s3,3750 <killstatus+0x66>
+  for(int i = 0; i < 100; i++){
+    372a:	397d                	addiw	s2,s2,-1
+    372c:	fc091be3          	bnez	s2,3702 <killstatus+0x18>
+  exit(0);
+    3730:	4501                	li	a0,0
+    3732:	34e010ef          	jal	4a80 <exit>
+      printf("%s: fork failed\n", s);
+    3736:	85d2                	mv	a1,s4
+    3738:	00002517          	auipc	a0,0x2
+    373c:	1f050513          	addi	a0,a0,496 # 5928 <malloc+0x9c4>
+    3740:	770010ef          	jal	4eb0 <printf>
+      exit(1);
+    3744:	4505                	li	a0,1
+    3746:	33a010ef          	jal	4a80 <exit>
+        getpid();
+    374a:	3b6010ef          	jal	4b00 <getpid>
+      while(1) {
+    374e:	bff5                	j	374a <killstatus+0x60>
+       printf("%s: status should be -1\n", s);
+    3750:	85d2                	mv	a1,s4
+    3752:	00003517          	auipc	a0,0x3
+    3756:	3be50513          	addi	a0,a0,958 # 6b10 <malloc+0x1bac>
+    375a:	756010ef          	jal	4eb0 <printf>
+       exit(1);
+    375e:	4505                	li	a0,1
+    3760:	320010ef          	jal	4a80 <exit>
+
+0000000000003764 <preempt>:
+{
+    3764:	7139                	addi	sp,sp,-64
+    3766:	fc06                	sd	ra,56(sp)
+    3768:	f822                	sd	s0,48(sp)
+    376a:	f426                	sd	s1,40(sp)
+    376c:	f04a                	sd	s2,32(sp)
+    376e:	ec4e                	sd	s3,24(sp)
+    3770:	e852                	sd	s4,16(sp)
+    3772:	0080                	addi	s0,sp,64
+    3774:	892a                	mv	s2,a0
+  pid1 = fork();
+    3776:	302010ef          	jal	4a78 <fork>
+  if(pid1 < 0) {
+    377a:	00054563          	bltz	a0,3784 <preempt+0x20>
+    377e:	84aa                	mv	s1,a0
+  if(pid1 == 0)
+    3780:	ed01                	bnez	a0,3798 <preempt+0x34>
+    for(;;)
+    3782:	a001                	j	3782 <preempt+0x1e>
+    printf("%s: fork failed", s);
+    3784:	85ca                	mv	a1,s2
+    3786:	00002517          	auipc	a0,0x2
+    378a:	36250513          	addi	a0,a0,866 # 5ae8 <malloc+0xb84>
+    378e:	722010ef          	jal	4eb0 <printf>
+    exit(1);
+    3792:	4505                	li	a0,1
+    3794:	2ec010ef          	jal	4a80 <exit>
+  pid2 = fork();
+    3798:	2e0010ef          	jal	4a78 <fork>
+    379c:	89aa                	mv	s3,a0
+  if(pid2 < 0) {
+    379e:	00054463          	bltz	a0,37a6 <preempt+0x42>
+  if(pid2 == 0)
+    37a2:	ed01                	bnez	a0,37ba <preempt+0x56>
+    for(;;)
+    37a4:	a001                	j	37a4 <preempt+0x40>
+    printf("%s: fork failed\n", s);
+    37a6:	85ca                	mv	a1,s2
+    37a8:	00002517          	auipc	a0,0x2
+    37ac:	18050513          	addi	a0,a0,384 # 5928 <malloc+0x9c4>
+    37b0:	700010ef          	jal	4eb0 <printf>
+    exit(1);
+    37b4:	4505                	li	a0,1
+    37b6:	2ca010ef          	jal	4a80 <exit>
+  pipe(pfds);
+    37ba:	fc840513          	addi	a0,s0,-56
+    37be:	2d2010ef          	jal	4a90 <pipe>
+  pid3 = fork();
+    37c2:	2b6010ef          	jal	4a78 <fork>
+    37c6:	8a2a                	mv	s4,a0
+  if(pid3 < 0) {
+    37c8:	02054863          	bltz	a0,37f8 <preempt+0x94>
+  if(pid3 == 0){
+    37cc:	e921                	bnez	a0,381c <preempt+0xb8>
+    close(pfds[0]);
+    37ce:	fc842503          	lw	a0,-56(s0)
+    37d2:	2d6010ef          	jal	4aa8 <close>
+    if(write(pfds[1], "x", 1) != 1)
+    37d6:	4605                	li	a2,1
+    37d8:	00002597          	auipc	a1,0x2
+    37dc:	93058593          	addi	a1,a1,-1744 # 5108 <malloc+0x1a4>
+    37e0:	fcc42503          	lw	a0,-52(s0)
+    37e4:	2bc010ef          	jal	4aa0 <write>
+    37e8:	4785                	li	a5,1
+    37ea:	02f51163          	bne	a0,a5,380c <preempt+0xa8>
+    close(pfds[1]);
+    37ee:	fcc42503          	lw	a0,-52(s0)
+    37f2:	2b6010ef          	jal	4aa8 <close>
+    for(;;)
+    37f6:	a001                	j	37f6 <preempt+0x92>
+     printf("%s: fork failed\n", s);
+    37f8:	85ca                	mv	a1,s2
+    37fa:	00002517          	auipc	a0,0x2
+    37fe:	12e50513          	addi	a0,a0,302 # 5928 <malloc+0x9c4>
+    3802:	6ae010ef          	jal	4eb0 <printf>
+     exit(1);
+    3806:	4505                	li	a0,1
+    3808:	278010ef          	jal	4a80 <exit>
+      printf("%s: preempt write error", s);
+    380c:	85ca                	mv	a1,s2
+    380e:	00003517          	auipc	a0,0x3
+    3812:	32250513          	addi	a0,a0,802 # 6b30 <malloc+0x1bcc>
+    3816:	69a010ef          	jal	4eb0 <printf>
+    381a:	bfd1                	j	37ee <preempt+0x8a>
+  close(pfds[1]);
+    381c:	fcc42503          	lw	a0,-52(s0)
+    3820:	288010ef          	jal	4aa8 <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    3824:	660d                	lui	a2,0x3
+    3826:	00008597          	auipc	a1,0x8
+    382a:	45258593          	addi	a1,a1,1106 # bc78 <buf>
+    382e:	fc842503          	lw	a0,-56(s0)
+    3832:	266010ef          	jal	4a98 <read>
+    3836:	4785                	li	a5,1
+    3838:	02f50163          	beq	a0,a5,385a <preempt+0xf6>
+    printf("%s: preempt read error", s);
+    383c:	85ca                	mv	a1,s2
+    383e:	00003517          	auipc	a0,0x3
+    3842:	30a50513          	addi	a0,a0,778 # 6b48 <malloc+0x1be4>
+    3846:	66a010ef          	jal	4eb0 <printf>
+}
+    384a:	70e2                	ld	ra,56(sp)
+    384c:	7442                	ld	s0,48(sp)
+    384e:	74a2                	ld	s1,40(sp)
+    3850:	7902                	ld	s2,32(sp)
+    3852:	69e2                	ld	s3,24(sp)
+    3854:	6a42                	ld	s4,16(sp)
+    3856:	6121                	addi	sp,sp,64
+    3858:	8082                	ret
+  close(pfds[0]);
+    385a:	fc842503          	lw	a0,-56(s0)
+    385e:	24a010ef          	jal	4aa8 <close>
+  printf("kill... ");
+    3862:	00003517          	auipc	a0,0x3
+    3866:	2fe50513          	addi	a0,a0,766 # 6b60 <malloc+0x1bfc>
+    386a:	646010ef          	jal	4eb0 <printf>
+  kill(pid1);
+    386e:	8526                	mv	a0,s1
+    3870:	240010ef          	jal	4ab0 <kill>
+  kill(pid2);
+    3874:	854e                	mv	a0,s3
+    3876:	23a010ef          	jal	4ab0 <kill>
+  kill(pid3);
+    387a:	8552                	mv	a0,s4
+    387c:	234010ef          	jal	4ab0 <kill>
+  printf("wait... ");
+    3880:	00003517          	auipc	a0,0x3
+    3884:	2f050513          	addi	a0,a0,752 # 6b70 <malloc+0x1c0c>
+    3888:	628010ef          	jal	4eb0 <printf>
+  wait(0);
+    388c:	4501                	li	a0,0
+    388e:	1fa010ef          	jal	4a88 <wait>
+  wait(0);
+    3892:	4501                	li	a0,0
+    3894:	1f4010ef          	jal	4a88 <wait>
+  wait(0);
+    3898:	4501                	li	a0,0
+    389a:	1ee010ef          	jal	4a88 <wait>
+    389e:	b775                	j	384a <preempt+0xe6>
+
+00000000000038a0 <reparent>:
+{
+    38a0:	7179                	addi	sp,sp,-48
+    38a2:	f406                	sd	ra,40(sp)
+    38a4:	f022                	sd	s0,32(sp)
+    38a6:	ec26                	sd	s1,24(sp)
+    38a8:	e84a                	sd	s2,16(sp)
+    38aa:	e44e                	sd	s3,8(sp)
+    38ac:	e052                	sd	s4,0(sp)
+    38ae:	1800                	addi	s0,sp,48
+    38b0:	89aa                	mv	s3,a0
+  int master_pid = getpid();
+    38b2:	24e010ef          	jal	4b00 <getpid>
+    38b6:	8a2a                	mv	s4,a0
+    38b8:	0c800913          	li	s2,200
+    int pid = fork();
+    38bc:	1bc010ef          	jal	4a78 <fork>
+    38c0:	84aa                	mv	s1,a0
+    if(pid < 0){
+    38c2:	00054e63          	bltz	a0,38de <reparent+0x3e>
+    if(pid){
+    38c6:	c121                	beqz	a0,3906 <reparent+0x66>
+      if(wait(0) != pid){
+    38c8:	4501                	li	a0,0
+    38ca:	1be010ef          	jal	4a88 <wait>
+    38ce:	02951263          	bne	a0,s1,38f2 <reparent+0x52>
+  for(int i = 0; i < 200; i++){
+    38d2:	397d                	addiw	s2,s2,-1
+    38d4:	fe0914e3          	bnez	s2,38bc <reparent+0x1c>
+  exit(0);
+    38d8:	4501                	li	a0,0
+    38da:	1a6010ef          	jal	4a80 <exit>
+      printf("%s: fork failed\n", s);
+    38de:	85ce                	mv	a1,s3
+    38e0:	00002517          	auipc	a0,0x2
+    38e4:	04850513          	addi	a0,a0,72 # 5928 <malloc+0x9c4>
+    38e8:	5c8010ef          	jal	4eb0 <printf>
+      exit(1);
+    38ec:	4505                	li	a0,1
+    38ee:	192010ef          	jal	4a80 <exit>
+        printf("%s: wait wrong pid\n", s);
+    38f2:	85ce                	mv	a1,s3
+    38f4:	00002517          	auipc	a0,0x2
+    38f8:	1bc50513          	addi	a0,a0,444 # 5ab0 <malloc+0xb4c>
+    38fc:	5b4010ef          	jal	4eb0 <printf>
+        exit(1);
+    3900:	4505                	li	a0,1
+    3902:	17e010ef          	jal	4a80 <exit>
+      int pid2 = fork();
+    3906:	172010ef          	jal	4a78 <fork>
+      if(pid2 < 0){
+    390a:	00054563          	bltz	a0,3914 <reparent+0x74>
+      exit(0);
+    390e:	4501                	li	a0,0
+    3910:	170010ef          	jal	4a80 <exit>
+        kill(master_pid);
+    3914:	8552                	mv	a0,s4
+    3916:	19a010ef          	jal	4ab0 <kill>
+        exit(1);
+    391a:	4505                	li	a0,1
+    391c:	164010ef          	jal	4a80 <exit>
+
+0000000000003920 <sbrkfail>:
+{
+    3920:	7119                	addi	sp,sp,-128
+    3922:	fc86                	sd	ra,120(sp)
+    3924:	f8a2                	sd	s0,112(sp)
+    3926:	f4a6                	sd	s1,104(sp)
+    3928:	f0ca                	sd	s2,96(sp)
+    392a:	ecce                	sd	s3,88(sp)
+    392c:	e8d2                	sd	s4,80(sp)
+    392e:	e4d6                	sd	s5,72(sp)
+    3930:	0100                	addi	s0,sp,128
+    3932:	8aaa                	mv	s5,a0
+  if(pipe(fds) != 0){
+    3934:	fb040513          	addi	a0,s0,-80
+    3938:	158010ef          	jal	4a90 <pipe>
+    393c:	e901                	bnez	a0,394c <sbrkfail+0x2c>
+    393e:	f8040493          	addi	s1,s0,-128
+    3942:	fa840993          	addi	s3,s0,-88
+    3946:	8926                	mv	s2,s1
+    if(pids[i] != -1)
+    3948:	5a7d                	li	s4,-1
+    394a:	a0a1                	j	3992 <sbrkfail+0x72>
+    printf("%s: pipe() failed\n", s);
+    394c:	85d6                	mv	a1,s5
+    394e:	00002517          	auipc	a0,0x2
+    3952:	0e250513          	addi	a0,a0,226 # 5a30 <malloc+0xacc>
+    3956:	55a010ef          	jal	4eb0 <printf>
+    exit(1);
+    395a:	4505                	li	a0,1
+    395c:	124010ef          	jal	4a80 <exit>
+      sbrk(BIG - (uint64)sbrk(0));
+    3960:	1a8010ef          	jal	4b08 <sbrk>
+    3964:	064007b7          	lui	a5,0x6400
+    3968:	40a7853b          	subw	a0,a5,a0
+    396c:	19c010ef          	jal	4b08 <sbrk>
+      write(fds[1], "x", 1);
+    3970:	4605                	li	a2,1
+    3972:	00001597          	auipc	a1,0x1
+    3976:	79658593          	addi	a1,a1,1942 # 5108 <malloc+0x1a4>
+    397a:	fb442503          	lw	a0,-76(s0)
+    397e:	122010ef          	jal	4aa0 <write>
+      for(;;) sleep(1000);
+    3982:	3e800513          	li	a0,1000
+    3986:	18a010ef          	jal	4b10 <sleep>
+    398a:	bfe5                	j	3982 <sbrkfail+0x62>
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    398c:	0911                	addi	s2,s2,4
+    398e:	03390163          	beq	s2,s3,39b0 <sbrkfail+0x90>
+    if((pids[i] = fork()) == 0){
+    3992:	0e6010ef          	jal	4a78 <fork>
+    3996:	00a92023          	sw	a0,0(s2)
+    399a:	d179                	beqz	a0,3960 <sbrkfail+0x40>
+    if(pids[i] != -1)
+    399c:	ff4508e3          	beq	a0,s4,398c <sbrkfail+0x6c>
+      read(fds[0], &scratch, 1);
+    39a0:	4605                	li	a2,1
+    39a2:	faf40593          	addi	a1,s0,-81
+    39a6:	fb042503          	lw	a0,-80(s0)
+    39aa:	0ee010ef          	jal	4a98 <read>
+    39ae:	bff9                	j	398c <sbrkfail+0x6c>
+  c = sbrk(PGSIZE);
+    39b0:	6505                	lui	a0,0x1
+    39b2:	156010ef          	jal	4b08 <sbrk>
+    39b6:	8a2a                	mv	s4,a0
+    if(pids[i] == -1)
+    39b8:	597d                	li	s2,-1
+    39ba:	a021                	j	39c2 <sbrkfail+0xa2>
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    39bc:	0491                	addi	s1,s1,4
+    39be:	01348b63          	beq	s1,s3,39d4 <sbrkfail+0xb4>
+    if(pids[i] == -1)
+    39c2:	4088                	lw	a0,0(s1)
+    39c4:	ff250ce3          	beq	a0,s2,39bc <sbrkfail+0x9c>
+    kill(pids[i]);
+    39c8:	0e8010ef          	jal	4ab0 <kill>
+    wait(0);
+    39cc:	4501                	li	a0,0
+    39ce:	0ba010ef          	jal	4a88 <wait>
+    39d2:	b7ed                	j	39bc <sbrkfail+0x9c>
+  if(c == (char*)0xffffffffffffffffL){
+    39d4:	57fd                	li	a5,-1
+    39d6:	02fa0d63          	beq	s4,a5,3a10 <sbrkfail+0xf0>
+  pid = fork();
+    39da:	09e010ef          	jal	4a78 <fork>
+    39de:	84aa                	mv	s1,a0
+  if(pid < 0){
+    39e0:	04054263          	bltz	a0,3a24 <sbrkfail+0x104>
+  if(pid == 0){
+    39e4:	c931                	beqz	a0,3a38 <sbrkfail+0x118>
+  wait(&xstatus);
+    39e6:	fbc40513          	addi	a0,s0,-68
+    39ea:	09e010ef          	jal	4a88 <wait>
+  if(xstatus != -1 && xstatus != 2)
+    39ee:	fbc42783          	lw	a5,-68(s0)
+    39f2:	577d                	li	a4,-1
+    39f4:	00e78563          	beq	a5,a4,39fe <sbrkfail+0xde>
+    39f8:	4709                	li	a4,2
+    39fa:	06e79d63          	bne	a5,a4,3a74 <sbrkfail+0x154>
+}
+    39fe:	70e6                	ld	ra,120(sp)
+    3a00:	7446                	ld	s0,112(sp)
+    3a02:	74a6                	ld	s1,104(sp)
+    3a04:	7906                	ld	s2,96(sp)
+    3a06:	69e6                	ld	s3,88(sp)
+    3a08:	6a46                	ld	s4,80(sp)
+    3a0a:	6aa6                	ld	s5,72(sp)
+    3a0c:	6109                	addi	sp,sp,128
+    3a0e:	8082                	ret
+    printf("%s: failed sbrk leaked memory\n", s);
+    3a10:	85d6                	mv	a1,s5
+    3a12:	00003517          	auipc	a0,0x3
+    3a16:	16e50513          	addi	a0,a0,366 # 6b80 <malloc+0x1c1c>
+    3a1a:	496010ef          	jal	4eb0 <printf>
+    exit(1);
+    3a1e:	4505                	li	a0,1
+    3a20:	060010ef          	jal	4a80 <exit>
+    printf("%s: fork failed\n", s);
+    3a24:	85d6                	mv	a1,s5
+    3a26:	00002517          	auipc	a0,0x2
+    3a2a:	f0250513          	addi	a0,a0,-254 # 5928 <malloc+0x9c4>
+    3a2e:	482010ef          	jal	4eb0 <printf>
+    exit(1);
+    3a32:	4505                	li	a0,1
+    3a34:	04c010ef          	jal	4a80 <exit>
+    a = sbrk(0);
+    3a38:	4501                	li	a0,0
+    3a3a:	0ce010ef          	jal	4b08 <sbrk>
+    3a3e:	892a                	mv	s2,a0
+    sbrk(10*BIG);
+    3a40:	3e800537          	lui	a0,0x3e800
+    3a44:	0c4010ef          	jal	4b08 <sbrk>
+    for (i = 0; i < 10*BIG; i += PGSIZE) {
+    3a48:	87ca                	mv	a5,s2
+    3a4a:	3e800737          	lui	a4,0x3e800
+    3a4e:	993a                	add	s2,s2,a4
+    3a50:	6705                	lui	a4,0x1
+      n += *(a+i);
+    3a52:	0007c683          	lbu	a3,0(a5) # 6400000 <base+0x63f1388>
+    3a56:	9cb5                	addw	s1,s1,a3
+    for (i = 0; i < 10*BIG; i += PGSIZE) {
+    3a58:	97ba                	add	a5,a5,a4
+    3a5a:	fef91ce3          	bne	s2,a5,3a52 <sbrkfail+0x132>
+    printf("%s: allocate a lot of memory succeeded %d\n", s, n);
+    3a5e:	8626                	mv	a2,s1
+    3a60:	85d6                	mv	a1,s5
+    3a62:	00003517          	auipc	a0,0x3
+    3a66:	13e50513          	addi	a0,a0,318 # 6ba0 <malloc+0x1c3c>
+    3a6a:	446010ef          	jal	4eb0 <printf>
+    exit(1);
+    3a6e:	4505                	li	a0,1
+    3a70:	010010ef          	jal	4a80 <exit>
+    exit(1);
+    3a74:	4505                	li	a0,1
+    3a76:	00a010ef          	jal	4a80 <exit>
+
+0000000000003a7a <mem>:
+{
+    3a7a:	7139                	addi	sp,sp,-64
+    3a7c:	fc06                	sd	ra,56(sp)
+    3a7e:	f822                	sd	s0,48(sp)
+    3a80:	f426                	sd	s1,40(sp)
+    3a82:	f04a                	sd	s2,32(sp)
+    3a84:	ec4e                	sd	s3,24(sp)
+    3a86:	0080                	addi	s0,sp,64
+    3a88:	89aa                	mv	s3,a0
+  if((pid = fork()) == 0){
+    3a8a:	7ef000ef          	jal	4a78 <fork>
+    m1 = 0;
+    3a8e:	4481                	li	s1,0
+    while((m2 = malloc(10001)) != 0){
+    3a90:	6909                	lui	s2,0x2
+    3a92:	71190913          	addi	s2,s2,1809 # 2711 <fourteen+0x7d>
+  if((pid = fork()) == 0){
+    3a96:	cd11                	beqz	a0,3ab2 <mem+0x38>
+    wait(&xstatus);
+    3a98:	fcc40513          	addi	a0,s0,-52
+    3a9c:	7ed000ef          	jal	4a88 <wait>
+    if(xstatus == -1){
+    3aa0:	fcc42503          	lw	a0,-52(s0)
+    3aa4:	57fd                	li	a5,-1
+    3aa6:	04f50363          	beq	a0,a5,3aec <mem+0x72>
+    exit(xstatus);
+    3aaa:	7d7000ef          	jal	4a80 <exit>
+      *(char**)m2 = m1;
+    3aae:	e104                	sd	s1,0(a0)
+      m1 = m2;
+    3ab0:	84aa                	mv	s1,a0
+    while((m2 = malloc(10001)) != 0){
+    3ab2:	854a                	mv	a0,s2
+    3ab4:	4b0010ef          	jal	4f64 <malloc>
+    3ab8:	f97d                	bnez	a0,3aae <mem+0x34>
+    while(m1){
+    3aba:	c491                	beqz	s1,3ac6 <mem+0x4c>
+      m2 = *(char**)m1;
+    3abc:	8526                	mv	a0,s1
+    3abe:	6084                	ld	s1,0(s1)
+      free(m1);
+    3ac0:	422010ef          	jal	4ee2 <free>
+    while(m1){
+    3ac4:	fce5                	bnez	s1,3abc <mem+0x42>
+    m1 = malloc(1024*20);
+    3ac6:	6515                	lui	a0,0x5
+    3ac8:	49c010ef          	jal	4f64 <malloc>
+    if(m1 == 0){
+    3acc:	c511                	beqz	a0,3ad8 <mem+0x5e>
+    free(m1);
+    3ace:	414010ef          	jal	4ee2 <free>
+    exit(0);
+    3ad2:	4501                	li	a0,0
+    3ad4:	7ad000ef          	jal	4a80 <exit>
+      printf("%s: couldn't allocate mem?!!\n", s);
+    3ad8:	85ce                	mv	a1,s3
+    3ada:	00003517          	auipc	a0,0x3
+    3ade:	0f650513          	addi	a0,a0,246 # 6bd0 <malloc+0x1c6c>
+    3ae2:	3ce010ef          	jal	4eb0 <printf>
+      exit(1);
+    3ae6:	4505                	li	a0,1
+    3ae8:	799000ef          	jal	4a80 <exit>
+      exit(0);
+    3aec:	4501                	li	a0,0
+    3aee:	793000ef          	jal	4a80 <exit>
+
+0000000000003af2 <sharedfd>:
+{
+    3af2:	7159                	addi	sp,sp,-112
+    3af4:	f486                	sd	ra,104(sp)
+    3af6:	f0a2                	sd	s0,96(sp)
+    3af8:	e0d2                	sd	s4,64(sp)
+    3afa:	1880                	addi	s0,sp,112
+    3afc:	8a2a                	mv	s4,a0
+  unlink("sharedfd");
+    3afe:	00003517          	auipc	a0,0x3
+    3b02:	0f250513          	addi	a0,a0,242 # 6bf0 <malloc+0x1c8c>
+    3b06:	7cb000ef          	jal	4ad0 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+    3b0a:	20200593          	li	a1,514
+    3b0e:	00003517          	auipc	a0,0x3
+    3b12:	0e250513          	addi	a0,a0,226 # 6bf0 <malloc+0x1c8c>
+    3b16:	7ab000ef          	jal	4ac0 <open>
+  if(fd < 0){
+    3b1a:	04054863          	bltz	a0,3b6a <sharedfd+0x78>
+    3b1e:	eca6                	sd	s1,88(sp)
+    3b20:	e8ca                	sd	s2,80(sp)
+    3b22:	e4ce                	sd	s3,72(sp)
+    3b24:	fc56                	sd	s5,56(sp)
+    3b26:	f85a                	sd	s6,48(sp)
+    3b28:	f45e                	sd	s7,40(sp)
+    3b2a:	892a                	mv	s2,a0
+  pid = fork();
+    3b2c:	74d000ef          	jal	4a78 <fork>
+    3b30:	89aa                	mv	s3,a0
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+    3b32:	07000593          	li	a1,112
+    3b36:	e119                	bnez	a0,3b3c <sharedfd+0x4a>
+    3b38:	06300593          	li	a1,99
+    3b3c:	4629                	li	a2,10
+    3b3e:	fa040513          	addi	a0,s0,-96
+    3b42:	559000ef          	jal	489a <memset>
+    3b46:	3e800493          	li	s1,1000
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+    3b4a:	4629                	li	a2,10
+    3b4c:	fa040593          	addi	a1,s0,-96
+    3b50:	854a                	mv	a0,s2
+    3b52:	74f000ef          	jal	4aa0 <write>
+    3b56:	47a9                	li	a5,10
+    3b58:	02f51963          	bne	a0,a5,3b8a <sharedfd+0x98>
+  for(i = 0; i < N; i++){
+    3b5c:	34fd                	addiw	s1,s1,-1
+    3b5e:	f4f5                	bnez	s1,3b4a <sharedfd+0x58>
+  if(pid == 0) {
+    3b60:	02099f63          	bnez	s3,3b9e <sharedfd+0xac>
+    exit(0);
+    3b64:	4501                	li	a0,0
+    3b66:	71b000ef          	jal	4a80 <exit>
+    3b6a:	eca6                	sd	s1,88(sp)
+    3b6c:	e8ca                	sd	s2,80(sp)
+    3b6e:	e4ce                	sd	s3,72(sp)
+    3b70:	fc56                	sd	s5,56(sp)
+    3b72:	f85a                	sd	s6,48(sp)
+    3b74:	f45e                	sd	s7,40(sp)
+    printf("%s: cannot open sharedfd for writing", s);
+    3b76:	85d2                	mv	a1,s4
+    3b78:	00003517          	auipc	a0,0x3
+    3b7c:	08850513          	addi	a0,a0,136 # 6c00 <malloc+0x1c9c>
+    3b80:	330010ef          	jal	4eb0 <printf>
+    exit(1);
+    3b84:	4505                	li	a0,1
+    3b86:	6fb000ef          	jal	4a80 <exit>
+      printf("%s: write sharedfd failed\n", s);
+    3b8a:	85d2                	mv	a1,s4
+    3b8c:	00003517          	auipc	a0,0x3
+    3b90:	09c50513          	addi	a0,a0,156 # 6c28 <malloc+0x1cc4>
+    3b94:	31c010ef          	jal	4eb0 <printf>
+      exit(1);
+    3b98:	4505                	li	a0,1
+    3b9a:	6e7000ef          	jal	4a80 <exit>
+    wait(&xstatus);
+    3b9e:	f9c40513          	addi	a0,s0,-100
+    3ba2:	6e7000ef          	jal	4a88 <wait>
+    if(xstatus != 0)
+    3ba6:	f9c42983          	lw	s3,-100(s0)
+    3baa:	00098563          	beqz	s3,3bb4 <sharedfd+0xc2>
+      exit(xstatus);
+    3bae:	854e                	mv	a0,s3
+    3bb0:	6d1000ef          	jal	4a80 <exit>
+  close(fd);
+    3bb4:	854a                	mv	a0,s2
+    3bb6:	6f3000ef          	jal	4aa8 <close>
+  fd = open("sharedfd", 0);
+    3bba:	4581                	li	a1,0
+    3bbc:	00003517          	auipc	a0,0x3
+    3bc0:	03450513          	addi	a0,a0,52 # 6bf0 <malloc+0x1c8c>
+    3bc4:	6fd000ef          	jal	4ac0 <open>
+    3bc8:	8baa                	mv	s7,a0
+  nc = np = 0;
+    3bca:	8ace                	mv	s5,s3
+  if(fd < 0){
+    3bcc:	02054363          	bltz	a0,3bf2 <sharedfd+0x100>
+    3bd0:	faa40913          	addi	s2,s0,-86
+      if(buf[i] == 'c')
+    3bd4:	06300493          	li	s1,99
+      if(buf[i] == 'p')
+    3bd8:	07000b13          	li	s6,112
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    3bdc:	4629                	li	a2,10
+    3bde:	fa040593          	addi	a1,s0,-96
+    3be2:	855e                	mv	a0,s7
+    3be4:	6b5000ef          	jal	4a98 <read>
+    3be8:	02a05b63          	blez	a0,3c1e <sharedfd+0x12c>
+    3bec:	fa040793          	addi	a5,s0,-96
+    3bf0:	a839                	j	3c0e <sharedfd+0x11c>
+    printf("%s: cannot open sharedfd for reading\n", s);
+    3bf2:	85d2                	mv	a1,s4
+    3bf4:	00003517          	auipc	a0,0x3
+    3bf8:	05450513          	addi	a0,a0,84 # 6c48 <malloc+0x1ce4>
+    3bfc:	2b4010ef          	jal	4eb0 <printf>
+    exit(1);
+    3c00:	4505                	li	a0,1
+    3c02:	67f000ef          	jal	4a80 <exit>
+        nc++;
+    3c06:	2985                	addiw	s3,s3,1
+    for(i = 0; i < sizeof(buf); i++){
+    3c08:	0785                	addi	a5,a5,1
+    3c0a:	fd2789e3          	beq	a5,s2,3bdc <sharedfd+0xea>
+      if(buf[i] == 'c')
+    3c0e:	0007c703          	lbu	a4,0(a5)
+    3c12:	fe970ae3          	beq	a4,s1,3c06 <sharedfd+0x114>
+      if(buf[i] == 'p')
+    3c16:	ff6719e3          	bne	a4,s6,3c08 <sharedfd+0x116>
+        np++;
+    3c1a:	2a85                	addiw	s5,s5,1
+    3c1c:	b7f5                	j	3c08 <sharedfd+0x116>
+  close(fd);
+    3c1e:	855e                	mv	a0,s7
+    3c20:	689000ef          	jal	4aa8 <close>
+  unlink("sharedfd");
+    3c24:	00003517          	auipc	a0,0x3
+    3c28:	fcc50513          	addi	a0,a0,-52 # 6bf0 <malloc+0x1c8c>
+    3c2c:	6a5000ef          	jal	4ad0 <unlink>
+  if(nc == N*SZ && np == N*SZ){
+    3c30:	6789                	lui	a5,0x2
+    3c32:	71078793          	addi	a5,a5,1808 # 2710 <fourteen+0x7c>
+    3c36:	00f99763          	bne	s3,a5,3c44 <sharedfd+0x152>
+    3c3a:	6789                	lui	a5,0x2
+    3c3c:	71078793          	addi	a5,a5,1808 # 2710 <fourteen+0x7c>
+    3c40:	00fa8c63          	beq	s5,a5,3c58 <sharedfd+0x166>
+    printf("%s: nc/np test fails\n", s);
+    3c44:	85d2                	mv	a1,s4
+    3c46:	00003517          	auipc	a0,0x3
+    3c4a:	02a50513          	addi	a0,a0,42 # 6c70 <malloc+0x1d0c>
+    3c4e:	262010ef          	jal	4eb0 <printf>
+    exit(1);
+    3c52:	4505                	li	a0,1
+    3c54:	62d000ef          	jal	4a80 <exit>
+    exit(0);
+    3c58:	4501                	li	a0,0
+    3c5a:	627000ef          	jal	4a80 <exit>
+
+0000000000003c5e <fourfiles>:
+{
+    3c5e:	7135                	addi	sp,sp,-160
+    3c60:	ed06                	sd	ra,152(sp)
+    3c62:	e922                	sd	s0,144(sp)
+    3c64:	e526                	sd	s1,136(sp)
+    3c66:	e14a                	sd	s2,128(sp)
+    3c68:	fcce                	sd	s3,120(sp)
+    3c6a:	f8d2                	sd	s4,112(sp)
+    3c6c:	f4d6                	sd	s5,104(sp)
+    3c6e:	f0da                	sd	s6,96(sp)
+    3c70:	ecde                	sd	s7,88(sp)
+    3c72:	e8e2                	sd	s8,80(sp)
+    3c74:	e4e6                	sd	s9,72(sp)
+    3c76:	e0ea                	sd	s10,64(sp)
+    3c78:	fc6e                	sd	s11,56(sp)
+    3c7a:	1100                	addi	s0,sp,160
+    3c7c:	8caa                	mv	s9,a0
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    3c7e:	00003797          	auipc	a5,0x3
+    3c82:	00a78793          	addi	a5,a5,10 # 6c88 <malloc+0x1d24>
+    3c86:	f6f43823          	sd	a5,-144(s0)
+    3c8a:	00003797          	auipc	a5,0x3
+    3c8e:	00678793          	addi	a5,a5,6 # 6c90 <malloc+0x1d2c>
+    3c92:	f6f43c23          	sd	a5,-136(s0)
+    3c96:	00003797          	auipc	a5,0x3
+    3c9a:	00278793          	addi	a5,a5,2 # 6c98 <malloc+0x1d34>
+    3c9e:	f8f43023          	sd	a5,-128(s0)
+    3ca2:	00003797          	auipc	a5,0x3
+    3ca6:	ffe78793          	addi	a5,a5,-2 # 6ca0 <malloc+0x1d3c>
+    3caa:	f8f43423          	sd	a5,-120(s0)
+  for(pi = 0; pi < NCHILD; pi++){
+    3cae:	f7040b93          	addi	s7,s0,-144
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    3cb2:	895e                	mv	s2,s7
+  for(pi = 0; pi < NCHILD; pi++){
+    3cb4:	4481                	li	s1,0
+    3cb6:	4a11                	li	s4,4
+    fname = names[pi];
+    3cb8:	00093983          	ld	s3,0(s2)
+    unlink(fname);
+    3cbc:	854e                	mv	a0,s3
+    3cbe:	613000ef          	jal	4ad0 <unlink>
+    pid = fork();
+    3cc2:	5b7000ef          	jal	4a78 <fork>
+    if(pid < 0){
+    3cc6:	02054e63          	bltz	a0,3d02 <fourfiles+0xa4>
+    if(pid == 0){
+    3cca:	c531                	beqz	a0,3d16 <fourfiles+0xb8>
+  for(pi = 0; pi < NCHILD; pi++){
+    3ccc:	2485                	addiw	s1,s1,1
+    3cce:	0921                	addi	s2,s2,8
+    3cd0:	ff4494e3          	bne	s1,s4,3cb8 <fourfiles+0x5a>
+    3cd4:	4491                	li	s1,4
+    wait(&xstatus);
+    3cd6:	f6c40513          	addi	a0,s0,-148
+    3cda:	5af000ef          	jal	4a88 <wait>
+    if(xstatus != 0)
+    3cde:	f6c42a83          	lw	s5,-148(s0)
+    3ce2:	0a0a9463          	bnez	s5,3d8a <fourfiles+0x12c>
+  for(pi = 0; pi < NCHILD; pi++){
+    3ce6:	34fd                	addiw	s1,s1,-1
+    3ce8:	f4fd                	bnez	s1,3cd6 <fourfiles+0x78>
+    3cea:	03000b13          	li	s6,48
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    3cee:	00008a17          	auipc	s4,0x8
+    3cf2:	f8aa0a13          	addi	s4,s4,-118 # bc78 <buf>
+    if(total != N*SZ){
+    3cf6:	6d05                	lui	s10,0x1
+    3cf8:	770d0d13          	addi	s10,s10,1904 # 1770 <forkfork+0x1e>
+  for(i = 0; i < NCHILD; i++){
+    3cfc:	03400d93          	li	s11,52
+    3d00:	a0ed                	j	3dea <fourfiles+0x18c>
+      printf("%s: fork failed\n", s);
+    3d02:	85e6                	mv	a1,s9
+    3d04:	00002517          	auipc	a0,0x2
+    3d08:	c2450513          	addi	a0,a0,-988 # 5928 <malloc+0x9c4>
+    3d0c:	1a4010ef          	jal	4eb0 <printf>
+      exit(1);
+    3d10:	4505                	li	a0,1
+    3d12:	56f000ef          	jal	4a80 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    3d16:	20200593          	li	a1,514
+    3d1a:	854e                	mv	a0,s3
+    3d1c:	5a5000ef          	jal	4ac0 <open>
+    3d20:	892a                	mv	s2,a0
+      if(fd < 0){
+    3d22:	04054163          	bltz	a0,3d64 <fourfiles+0x106>
+      memset(buf, '0'+pi, SZ);
+    3d26:	1f400613          	li	a2,500
+    3d2a:	0304859b          	addiw	a1,s1,48
+    3d2e:	00008517          	auipc	a0,0x8
+    3d32:	f4a50513          	addi	a0,a0,-182 # bc78 <buf>
+    3d36:	365000ef          	jal	489a <memset>
+    3d3a:	44b1                	li	s1,12
+        if((n = write(fd, buf, SZ)) != SZ){
+    3d3c:	00008997          	auipc	s3,0x8
+    3d40:	f3c98993          	addi	s3,s3,-196 # bc78 <buf>
+    3d44:	1f400613          	li	a2,500
+    3d48:	85ce                	mv	a1,s3
+    3d4a:	854a                	mv	a0,s2
+    3d4c:	555000ef          	jal	4aa0 <write>
+    3d50:	85aa                	mv	a1,a0
+    3d52:	1f400793          	li	a5,500
+    3d56:	02f51163          	bne	a0,a5,3d78 <fourfiles+0x11a>
+      for(i = 0; i < N; i++){
+    3d5a:	34fd                	addiw	s1,s1,-1
+    3d5c:	f4e5                	bnez	s1,3d44 <fourfiles+0xe6>
+      exit(0);
+    3d5e:	4501                	li	a0,0
+    3d60:	521000ef          	jal	4a80 <exit>
+        printf("%s: create failed\n", s);
+    3d64:	85e6                	mv	a1,s9
+    3d66:	00002517          	auipc	a0,0x2
+    3d6a:	c5a50513          	addi	a0,a0,-934 # 59c0 <malloc+0xa5c>
+    3d6e:	142010ef          	jal	4eb0 <printf>
+        exit(1);
+    3d72:	4505                	li	a0,1
+    3d74:	50d000ef          	jal	4a80 <exit>
+          printf("write failed %d\n", n);
+    3d78:	00003517          	auipc	a0,0x3
+    3d7c:	f3050513          	addi	a0,a0,-208 # 6ca8 <malloc+0x1d44>
+    3d80:	130010ef          	jal	4eb0 <printf>
+          exit(1);
+    3d84:	4505                	li	a0,1
+    3d86:	4fb000ef          	jal	4a80 <exit>
+      exit(xstatus);
+    3d8a:	8556                	mv	a0,s5
+    3d8c:	4f5000ef          	jal	4a80 <exit>
+          printf("%s: wrong char\n", s);
+    3d90:	85e6                	mv	a1,s9
+    3d92:	00003517          	auipc	a0,0x3
+    3d96:	f2e50513          	addi	a0,a0,-210 # 6cc0 <malloc+0x1d5c>
+    3d9a:	116010ef          	jal	4eb0 <printf>
+          exit(1);
+    3d9e:	4505                	li	a0,1
+    3da0:	4e1000ef          	jal	4a80 <exit>
+      total += n;
+    3da4:	00a9093b          	addw	s2,s2,a0
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    3da8:	660d                	lui	a2,0x3
+    3daa:	85d2                	mv	a1,s4
+    3dac:	854e                	mv	a0,s3
+    3dae:	4eb000ef          	jal	4a98 <read>
+    3db2:	02a05063          	blez	a0,3dd2 <fourfiles+0x174>
+    3db6:	00008797          	auipc	a5,0x8
+    3dba:	ec278793          	addi	a5,a5,-318 # bc78 <buf>
+    3dbe:	00f506b3          	add	a3,a0,a5
+        if(buf[j] != '0'+i){
+    3dc2:	0007c703          	lbu	a4,0(a5)
+    3dc6:	fc9715e3          	bne	a4,s1,3d90 <fourfiles+0x132>
+      for(j = 0; j < n; j++){
+    3dca:	0785                	addi	a5,a5,1
+    3dcc:	fed79be3          	bne	a5,a3,3dc2 <fourfiles+0x164>
+    3dd0:	bfd1                	j	3da4 <fourfiles+0x146>
+    close(fd);
+    3dd2:	854e                	mv	a0,s3
+    3dd4:	4d5000ef          	jal	4aa8 <close>
+    if(total != N*SZ){
+    3dd8:	03a91463          	bne	s2,s10,3e00 <fourfiles+0x1a2>
+    unlink(fname);
+    3ddc:	8562                	mv	a0,s8
+    3dde:	4f3000ef          	jal	4ad0 <unlink>
+  for(i = 0; i < NCHILD; i++){
+    3de2:	0ba1                	addi	s7,s7,8
+    3de4:	2b05                	addiw	s6,s6,1
+    3de6:	03bb0763          	beq	s6,s11,3e14 <fourfiles+0x1b6>
+    fname = names[i];
+    3dea:	000bbc03          	ld	s8,0(s7)
+    fd = open(fname, 0);
+    3dee:	4581                	li	a1,0
+    3df0:	8562                	mv	a0,s8
+    3df2:	4cf000ef          	jal	4ac0 <open>
+    3df6:	89aa                	mv	s3,a0
+    total = 0;
+    3df8:	8956                	mv	s2,s5
+        if(buf[j] != '0'+i){
+    3dfa:	000b049b          	sext.w	s1,s6
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    3dfe:	b76d                	j	3da8 <fourfiles+0x14a>
+      printf("wrong length %d\n", total);
+    3e00:	85ca                	mv	a1,s2
+    3e02:	00003517          	auipc	a0,0x3
+    3e06:	ece50513          	addi	a0,a0,-306 # 6cd0 <malloc+0x1d6c>
+    3e0a:	0a6010ef          	jal	4eb0 <printf>
+      exit(1);
+    3e0e:	4505                	li	a0,1
+    3e10:	471000ef          	jal	4a80 <exit>
+}
+    3e14:	60ea                	ld	ra,152(sp)
+    3e16:	644a                	ld	s0,144(sp)
+    3e18:	64aa                	ld	s1,136(sp)
+    3e1a:	690a                	ld	s2,128(sp)
+    3e1c:	79e6                	ld	s3,120(sp)
+    3e1e:	7a46                	ld	s4,112(sp)
+    3e20:	7aa6                	ld	s5,104(sp)
+    3e22:	7b06                	ld	s6,96(sp)
+    3e24:	6be6                	ld	s7,88(sp)
+    3e26:	6c46                	ld	s8,80(sp)
+    3e28:	6ca6                	ld	s9,72(sp)
+    3e2a:	6d06                	ld	s10,64(sp)
+    3e2c:	7de2                	ld	s11,56(sp)
+    3e2e:	610d                	addi	sp,sp,160
+    3e30:	8082                	ret
+
+0000000000003e32 <concreate>:
+{
+    3e32:	7135                	addi	sp,sp,-160
+    3e34:	ed06                	sd	ra,152(sp)
+    3e36:	e922                	sd	s0,144(sp)
+    3e38:	e526                	sd	s1,136(sp)
+    3e3a:	e14a                	sd	s2,128(sp)
+    3e3c:	fcce                	sd	s3,120(sp)
+    3e3e:	f8d2                	sd	s4,112(sp)
+    3e40:	f4d6                	sd	s5,104(sp)
+    3e42:	f0da                	sd	s6,96(sp)
+    3e44:	ecde                	sd	s7,88(sp)
+    3e46:	1100                	addi	s0,sp,160
+    3e48:	89aa                	mv	s3,a0
+  file[0] = 'C';
+    3e4a:	04300793          	li	a5,67
+    3e4e:	faf40423          	sb	a5,-88(s0)
+  file[2] = '\0';
+    3e52:	fa040523          	sb	zero,-86(s0)
+  for(i = 0; i < N; i++){
+    3e56:	4901                	li	s2,0
+    if(pid && (i % 3) == 1){
+    3e58:	4b0d                	li	s6,3
+    3e5a:	4a85                	li	s5,1
+      link("C0", file);
+    3e5c:	00003b97          	auipc	s7,0x3
+    3e60:	e8cb8b93          	addi	s7,s7,-372 # 6ce8 <malloc+0x1d84>
+  for(i = 0; i < N; i++){
+    3e64:	02800a13          	li	s4,40
+    3e68:	a41d                	j	408e <concreate+0x25c>
+      link("C0", file);
+    3e6a:	fa840593          	addi	a1,s0,-88
+    3e6e:	855e                	mv	a0,s7
+    3e70:	471000ef          	jal	4ae0 <link>
+    if(pid == 0) {
+    3e74:	a411                	j	4078 <concreate+0x246>
+    } else if(pid == 0 && (i % 5) == 1){
+    3e76:	4795                	li	a5,5
+    3e78:	02f9693b          	remw	s2,s2,a5
+    3e7c:	4785                	li	a5,1
+    3e7e:	02f90563          	beq	s2,a5,3ea8 <concreate+0x76>
+      fd = open(file, O_CREATE | O_RDWR);
+    3e82:	20200593          	li	a1,514
+    3e86:	fa840513          	addi	a0,s0,-88
+    3e8a:	437000ef          	jal	4ac0 <open>
+      if(fd < 0){
+    3e8e:	1e055063          	bgez	a0,406e <concreate+0x23c>
+        printf("concreate create %s failed\n", file);
+    3e92:	fa840593          	addi	a1,s0,-88
+    3e96:	00003517          	auipc	a0,0x3
+    3e9a:	e5a50513          	addi	a0,a0,-422 # 6cf0 <malloc+0x1d8c>
+    3e9e:	012010ef          	jal	4eb0 <printf>
+        exit(1);
+    3ea2:	4505                	li	a0,1
+    3ea4:	3dd000ef          	jal	4a80 <exit>
+      link("C0", file);
+    3ea8:	fa840593          	addi	a1,s0,-88
+    3eac:	00003517          	auipc	a0,0x3
+    3eb0:	e3c50513          	addi	a0,a0,-452 # 6ce8 <malloc+0x1d84>
+    3eb4:	42d000ef          	jal	4ae0 <link>
+      exit(0);
+    3eb8:	4501                	li	a0,0
+    3eba:	3c7000ef          	jal	4a80 <exit>
+        exit(1);
+    3ebe:	4505                	li	a0,1
+    3ec0:	3c1000ef          	jal	4a80 <exit>
+  memset(fa, 0, sizeof(fa));
+    3ec4:	02800613          	li	a2,40
+    3ec8:	4581                	li	a1,0
+    3eca:	f8040513          	addi	a0,s0,-128
+    3ece:	1cd000ef          	jal	489a <memset>
+  fd = open(".", 0);
+    3ed2:	4581                	li	a1,0
+    3ed4:	00002517          	auipc	a0,0x2
+    3ed8:	8ac50513          	addi	a0,a0,-1876 # 5780 <malloc+0x81c>
+    3edc:	3e5000ef          	jal	4ac0 <open>
+    3ee0:	892a                	mv	s2,a0
+  n = 0;
+    3ee2:	8aa6                	mv	s5,s1
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    3ee4:	04300a13          	li	s4,67
+      if(i < 0 || i >= sizeof(fa)){
+    3ee8:	02700b13          	li	s6,39
+      fa[i] = 1;
+    3eec:	4b85                	li	s7,1
+  while(read(fd, &de, sizeof(de)) > 0){
+    3eee:	4641                	li	a2,16
+    3ef0:	f7040593          	addi	a1,s0,-144
+    3ef4:	854a                	mv	a0,s2
+    3ef6:	3a3000ef          	jal	4a98 <read>
+    3efa:	06a05a63          	blez	a0,3f6e <concreate+0x13c>
+    if(de.inum == 0)
+    3efe:	f7045783          	lhu	a5,-144(s0)
+    3f02:	d7f5                	beqz	a5,3eee <concreate+0xbc>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    3f04:	f7244783          	lbu	a5,-142(s0)
+    3f08:	ff4793e3          	bne	a5,s4,3eee <concreate+0xbc>
+    3f0c:	f7444783          	lbu	a5,-140(s0)
+    3f10:	fff9                	bnez	a5,3eee <concreate+0xbc>
+      i = de.name[1] - '0';
+    3f12:	f7344783          	lbu	a5,-141(s0)
+    3f16:	fd07879b          	addiw	a5,a5,-48
+    3f1a:	0007871b          	sext.w	a4,a5
+      if(i < 0 || i >= sizeof(fa)){
+    3f1e:	02eb6063          	bltu	s6,a4,3f3e <concreate+0x10c>
+      if(fa[i]){
+    3f22:	fb070793          	addi	a5,a4,-80 # fb0 <bigdir+0x112>
+    3f26:	97a2                	add	a5,a5,s0
+    3f28:	fd07c783          	lbu	a5,-48(a5)
+    3f2c:	e78d                	bnez	a5,3f56 <concreate+0x124>
+      fa[i] = 1;
+    3f2e:	fb070793          	addi	a5,a4,-80
+    3f32:	00878733          	add	a4,a5,s0
+    3f36:	fd770823          	sb	s7,-48(a4)
+      n++;
+    3f3a:	2a85                	addiw	s5,s5,1
+    3f3c:	bf4d                	j	3eee <concreate+0xbc>
+        printf("%s: concreate weird file %s\n", s, de.name);
+    3f3e:	f7240613          	addi	a2,s0,-142
+    3f42:	85ce                	mv	a1,s3
+    3f44:	00003517          	auipc	a0,0x3
+    3f48:	dcc50513          	addi	a0,a0,-564 # 6d10 <malloc+0x1dac>
+    3f4c:	765000ef          	jal	4eb0 <printf>
+        exit(1);
+    3f50:	4505                	li	a0,1
+    3f52:	32f000ef          	jal	4a80 <exit>
+        printf("%s: concreate duplicate file %s\n", s, de.name);
+    3f56:	f7240613          	addi	a2,s0,-142
+    3f5a:	85ce                	mv	a1,s3
+    3f5c:	00003517          	auipc	a0,0x3
+    3f60:	dd450513          	addi	a0,a0,-556 # 6d30 <malloc+0x1dcc>
+    3f64:	74d000ef          	jal	4eb0 <printf>
+        exit(1);
+    3f68:	4505                	li	a0,1
+    3f6a:	317000ef          	jal	4a80 <exit>
+  close(fd);
+    3f6e:	854a                	mv	a0,s2
+    3f70:	339000ef          	jal	4aa8 <close>
+  if(n != N){
+    3f74:	02800793          	li	a5,40
+    3f78:	00fa9763          	bne	s5,a5,3f86 <concreate+0x154>
+    if(((i % 3) == 0 && pid == 0) ||
+    3f7c:	4a8d                	li	s5,3
+    3f7e:	4b05                	li	s6,1
+  for(i = 0; i < N; i++){
+    3f80:	02800a13          	li	s4,40
+    3f84:	a079                	j	4012 <concreate+0x1e0>
+    printf("%s: concreate not enough files in directory listing\n", s);
+    3f86:	85ce                	mv	a1,s3
+    3f88:	00003517          	auipc	a0,0x3
+    3f8c:	dd050513          	addi	a0,a0,-560 # 6d58 <malloc+0x1df4>
+    3f90:	721000ef          	jal	4eb0 <printf>
+    exit(1);
+    3f94:	4505                	li	a0,1
+    3f96:	2eb000ef          	jal	4a80 <exit>
+      printf("%s: fork failed\n", s);
+    3f9a:	85ce                	mv	a1,s3
+    3f9c:	00002517          	auipc	a0,0x2
+    3fa0:	98c50513          	addi	a0,a0,-1652 # 5928 <malloc+0x9c4>
+    3fa4:	70d000ef          	jal	4eb0 <printf>
+      exit(1);
+    3fa8:	4505                	li	a0,1
+    3faa:	2d7000ef          	jal	4a80 <exit>
+      close(open(file, 0));
+    3fae:	4581                	li	a1,0
+    3fb0:	fa840513          	addi	a0,s0,-88
+    3fb4:	30d000ef          	jal	4ac0 <open>
+    3fb8:	2f1000ef          	jal	4aa8 <close>
+      close(open(file, 0));
+    3fbc:	4581                	li	a1,0
+    3fbe:	fa840513          	addi	a0,s0,-88
+    3fc2:	2ff000ef          	jal	4ac0 <open>
+    3fc6:	2e3000ef          	jal	4aa8 <close>
+      close(open(file, 0));
+    3fca:	4581                	li	a1,0
+    3fcc:	fa840513          	addi	a0,s0,-88
+    3fd0:	2f1000ef          	jal	4ac0 <open>
+    3fd4:	2d5000ef          	jal	4aa8 <close>
+      close(open(file, 0));
+    3fd8:	4581                	li	a1,0
+    3fda:	fa840513          	addi	a0,s0,-88
+    3fde:	2e3000ef          	jal	4ac0 <open>
+    3fe2:	2c7000ef          	jal	4aa8 <close>
+      close(open(file, 0));
+    3fe6:	4581                	li	a1,0
+    3fe8:	fa840513          	addi	a0,s0,-88
+    3fec:	2d5000ef          	jal	4ac0 <open>
+    3ff0:	2b9000ef          	jal	4aa8 <close>
+      close(open(file, 0));
+    3ff4:	4581                	li	a1,0
+    3ff6:	fa840513          	addi	a0,s0,-88
+    3ffa:	2c7000ef          	jal	4ac0 <open>
+    3ffe:	2ab000ef          	jal	4aa8 <close>
+    if(pid == 0)
+    4002:	06090363          	beqz	s2,4068 <concreate+0x236>
+      wait(0);
+    4006:	4501                	li	a0,0
+    4008:	281000ef          	jal	4a88 <wait>
+  for(i = 0; i < N; i++){
+    400c:	2485                	addiw	s1,s1,1
+    400e:	0b448963          	beq	s1,s4,40c0 <concreate+0x28e>
+    file[1] = '0' + i;
+    4012:	0304879b          	addiw	a5,s1,48
+    4016:	faf404a3          	sb	a5,-87(s0)
+    pid = fork();
+    401a:	25f000ef          	jal	4a78 <fork>
+    401e:	892a                	mv	s2,a0
+    if(pid < 0){
+    4020:	f6054de3          	bltz	a0,3f9a <concreate+0x168>
+    if(((i % 3) == 0 && pid == 0) ||
+    4024:	0354e73b          	remw	a4,s1,s5
+    4028:	00a767b3          	or	a5,a4,a0
+    402c:	2781                	sext.w	a5,a5
+    402e:	d3c1                	beqz	a5,3fae <concreate+0x17c>
+    4030:	01671363          	bne	a4,s6,4036 <concreate+0x204>
+       ((i % 3) == 1 && pid != 0)){
+    4034:	fd2d                	bnez	a0,3fae <concreate+0x17c>
+      unlink(file);
+    4036:	fa840513          	addi	a0,s0,-88
+    403a:	297000ef          	jal	4ad0 <unlink>
+      unlink(file);
+    403e:	fa840513          	addi	a0,s0,-88
+    4042:	28f000ef          	jal	4ad0 <unlink>
+      unlink(file);
+    4046:	fa840513          	addi	a0,s0,-88
+    404a:	287000ef          	jal	4ad0 <unlink>
+      unlink(file);
+    404e:	fa840513          	addi	a0,s0,-88
+    4052:	27f000ef          	jal	4ad0 <unlink>
+      unlink(file);
+    4056:	fa840513          	addi	a0,s0,-88
+    405a:	277000ef          	jal	4ad0 <unlink>
+      unlink(file);
+    405e:	fa840513          	addi	a0,s0,-88
+    4062:	26f000ef          	jal	4ad0 <unlink>
+    4066:	bf71                	j	4002 <concreate+0x1d0>
+      exit(0);
+    4068:	4501                	li	a0,0
+    406a:	217000ef          	jal	4a80 <exit>
+      close(fd);
+    406e:	23b000ef          	jal	4aa8 <close>
+    if(pid == 0) {
+    4072:	b599                	j	3eb8 <concreate+0x86>
+      close(fd);
+    4074:	235000ef          	jal	4aa8 <close>
+      wait(&xstatus);
+    4078:	f6c40513          	addi	a0,s0,-148
+    407c:	20d000ef          	jal	4a88 <wait>
+      if(xstatus != 0)
+    4080:	f6c42483          	lw	s1,-148(s0)
+    4084:	e2049de3          	bnez	s1,3ebe <concreate+0x8c>
+  for(i = 0; i < N; i++){
+    4088:	2905                	addiw	s2,s2,1
+    408a:	e3490de3          	beq	s2,s4,3ec4 <concreate+0x92>
+    file[1] = '0' + i;
+    408e:	0309079b          	addiw	a5,s2,48
+    4092:	faf404a3          	sb	a5,-87(s0)
+    unlink(file);
+    4096:	fa840513          	addi	a0,s0,-88
+    409a:	237000ef          	jal	4ad0 <unlink>
+    pid = fork();
+    409e:	1db000ef          	jal	4a78 <fork>
+    if(pid && (i % 3) == 1){
+    40a2:	dc050ae3          	beqz	a0,3e76 <concreate+0x44>
+    40a6:	036967bb          	remw	a5,s2,s6
+    40aa:	dd5780e3          	beq	a5,s5,3e6a <concreate+0x38>
+      fd = open(file, O_CREATE | O_RDWR);
+    40ae:	20200593          	li	a1,514
+    40b2:	fa840513          	addi	a0,s0,-88
+    40b6:	20b000ef          	jal	4ac0 <open>
+      if(fd < 0){
+    40ba:	fa055de3          	bgez	a0,4074 <concreate+0x242>
+    40be:	bbd1                	j	3e92 <concreate+0x60>
+}
+    40c0:	60ea                	ld	ra,152(sp)
+    40c2:	644a                	ld	s0,144(sp)
+    40c4:	64aa                	ld	s1,136(sp)
+    40c6:	690a                	ld	s2,128(sp)
+    40c8:	79e6                	ld	s3,120(sp)
+    40ca:	7a46                	ld	s4,112(sp)
+    40cc:	7aa6                	ld	s5,104(sp)
+    40ce:	7b06                	ld	s6,96(sp)
+    40d0:	6be6                	ld	s7,88(sp)
+    40d2:	610d                	addi	sp,sp,160
+    40d4:	8082                	ret
+
+00000000000040d6 <bigfile>:
+{
+    40d6:	7139                	addi	sp,sp,-64
+    40d8:	fc06                	sd	ra,56(sp)
+    40da:	f822                	sd	s0,48(sp)
+    40dc:	f426                	sd	s1,40(sp)
+    40de:	f04a                	sd	s2,32(sp)
+    40e0:	ec4e                	sd	s3,24(sp)
+    40e2:	e852                	sd	s4,16(sp)
+    40e4:	e456                	sd	s5,8(sp)
+    40e6:	0080                	addi	s0,sp,64
+    40e8:	8aaa                	mv	s5,a0
+  unlink("bigfile.dat");
+    40ea:	00003517          	auipc	a0,0x3
+    40ee:	ca650513          	addi	a0,a0,-858 # 6d90 <malloc+0x1e2c>
+    40f2:	1df000ef          	jal	4ad0 <unlink>
+  fd = open("bigfile.dat", O_CREATE | O_RDWR);
+    40f6:	20200593          	li	a1,514
+    40fa:	00003517          	auipc	a0,0x3
+    40fe:	c9650513          	addi	a0,a0,-874 # 6d90 <malloc+0x1e2c>
+    4102:	1bf000ef          	jal	4ac0 <open>
+    4106:	89aa                	mv	s3,a0
+  for(i = 0; i < N; i++){
+    4108:	4481                	li	s1,0
+    memset(buf, i, SZ);
+    410a:	00008917          	auipc	s2,0x8
+    410e:	b6e90913          	addi	s2,s2,-1170 # bc78 <buf>
+  for(i = 0; i < N; i++){
+    4112:	4a51                	li	s4,20
+  if(fd < 0){
+    4114:	08054663          	bltz	a0,41a0 <bigfile+0xca>
+    memset(buf, i, SZ);
+    4118:	25800613          	li	a2,600
+    411c:	85a6                	mv	a1,s1
+    411e:	854a                	mv	a0,s2
+    4120:	77a000ef          	jal	489a <memset>
+    if(write(fd, buf, SZ) != SZ){
+    4124:	25800613          	li	a2,600
+    4128:	85ca                	mv	a1,s2
+    412a:	854e                	mv	a0,s3
+    412c:	175000ef          	jal	4aa0 <write>
+    4130:	25800793          	li	a5,600
+    4134:	08f51063          	bne	a0,a5,41b4 <bigfile+0xde>
+  for(i = 0; i < N; i++){
+    4138:	2485                	addiw	s1,s1,1
+    413a:	fd449fe3          	bne	s1,s4,4118 <bigfile+0x42>
+  close(fd);
+    413e:	854e                	mv	a0,s3
+    4140:	169000ef          	jal	4aa8 <close>
+  fd = open("bigfile.dat", 0);
+    4144:	4581                	li	a1,0
+    4146:	00003517          	auipc	a0,0x3
+    414a:	c4a50513          	addi	a0,a0,-950 # 6d90 <malloc+0x1e2c>
+    414e:	173000ef          	jal	4ac0 <open>
+    4152:	8a2a                	mv	s4,a0
+  total = 0;
+    4154:	4981                	li	s3,0
+  for(i = 0; ; i++){
+    4156:	4481                	li	s1,0
+    cc = read(fd, buf, SZ/2);
+    4158:	00008917          	auipc	s2,0x8
+    415c:	b2090913          	addi	s2,s2,-1248 # bc78 <buf>
+  if(fd < 0){
+    4160:	06054463          	bltz	a0,41c8 <bigfile+0xf2>
+    cc = read(fd, buf, SZ/2);
+    4164:	12c00613          	li	a2,300
+    4168:	85ca                	mv	a1,s2
+    416a:	8552                	mv	a0,s4
+    416c:	12d000ef          	jal	4a98 <read>
+    if(cc < 0){
+    4170:	06054663          	bltz	a0,41dc <bigfile+0x106>
+    if(cc == 0)
+    4174:	c155                	beqz	a0,4218 <bigfile+0x142>
+    if(cc != SZ/2){
+    4176:	12c00793          	li	a5,300
+    417a:	06f51b63          	bne	a0,a5,41f0 <bigfile+0x11a>
+    if(buf[0] != i/2 || buf[SZ/2-1] != i/2){
+    417e:	01f4d79b          	srliw	a5,s1,0x1f
+    4182:	9fa5                	addw	a5,a5,s1
+    4184:	4017d79b          	sraiw	a5,a5,0x1
+    4188:	00094703          	lbu	a4,0(s2)
+    418c:	06f71c63          	bne	a4,a5,4204 <bigfile+0x12e>
+    4190:	12b94703          	lbu	a4,299(s2)
+    4194:	06f71863          	bne	a4,a5,4204 <bigfile+0x12e>
+    total += cc;
+    4198:	12c9899b          	addiw	s3,s3,300
+  for(i = 0; ; i++){
+    419c:	2485                	addiw	s1,s1,1
+    cc = read(fd, buf, SZ/2);
+    419e:	b7d9                	j	4164 <bigfile+0x8e>
+    printf("%s: cannot create bigfile", s);
+    41a0:	85d6                	mv	a1,s5
+    41a2:	00003517          	auipc	a0,0x3
+    41a6:	bfe50513          	addi	a0,a0,-1026 # 6da0 <malloc+0x1e3c>
+    41aa:	507000ef          	jal	4eb0 <printf>
+    exit(1);
+    41ae:	4505                	li	a0,1
+    41b0:	0d1000ef          	jal	4a80 <exit>
+      printf("%s: write bigfile failed\n", s);
+    41b4:	85d6                	mv	a1,s5
+    41b6:	00003517          	auipc	a0,0x3
+    41ba:	c0a50513          	addi	a0,a0,-1014 # 6dc0 <malloc+0x1e5c>
+    41be:	4f3000ef          	jal	4eb0 <printf>
+      exit(1);
+    41c2:	4505                	li	a0,1
+    41c4:	0bd000ef          	jal	4a80 <exit>
+    printf("%s: cannot open bigfile\n", s);
+    41c8:	85d6                	mv	a1,s5
+    41ca:	00003517          	auipc	a0,0x3
+    41ce:	c1650513          	addi	a0,a0,-1002 # 6de0 <malloc+0x1e7c>
+    41d2:	4df000ef          	jal	4eb0 <printf>
+    exit(1);
+    41d6:	4505                	li	a0,1
+    41d8:	0a9000ef          	jal	4a80 <exit>
+      printf("%s: read bigfile failed\n", s);
+    41dc:	85d6                	mv	a1,s5
+    41de:	00003517          	auipc	a0,0x3
+    41e2:	c2250513          	addi	a0,a0,-990 # 6e00 <malloc+0x1e9c>
+    41e6:	4cb000ef          	jal	4eb0 <printf>
+      exit(1);
+    41ea:	4505                	li	a0,1
+    41ec:	095000ef          	jal	4a80 <exit>
+      printf("%s: short read bigfile\n", s);
+    41f0:	85d6                	mv	a1,s5
+    41f2:	00003517          	auipc	a0,0x3
+    41f6:	c2e50513          	addi	a0,a0,-978 # 6e20 <malloc+0x1ebc>
+    41fa:	4b7000ef          	jal	4eb0 <printf>
+      exit(1);
+    41fe:	4505                	li	a0,1
+    4200:	081000ef          	jal	4a80 <exit>
+      printf("%s: read bigfile wrong data\n", s);
+    4204:	85d6                	mv	a1,s5
+    4206:	00003517          	auipc	a0,0x3
+    420a:	c3250513          	addi	a0,a0,-974 # 6e38 <malloc+0x1ed4>
+    420e:	4a3000ef          	jal	4eb0 <printf>
+      exit(1);
+    4212:	4505                	li	a0,1
+    4214:	06d000ef          	jal	4a80 <exit>
+  close(fd);
+    4218:	8552                	mv	a0,s4
+    421a:	08f000ef          	jal	4aa8 <close>
+  if(total != N*SZ){
+    421e:	678d                	lui	a5,0x3
+    4220:	ee078793          	addi	a5,a5,-288 # 2ee0 <subdir+0x304>
+    4224:	02f99163          	bne	s3,a5,4246 <bigfile+0x170>
+  unlink("bigfile.dat");
+    4228:	00003517          	auipc	a0,0x3
+    422c:	b6850513          	addi	a0,a0,-1176 # 6d90 <malloc+0x1e2c>
+    4230:	0a1000ef          	jal	4ad0 <unlink>
+}
+    4234:	70e2                	ld	ra,56(sp)
+    4236:	7442                	ld	s0,48(sp)
+    4238:	74a2                	ld	s1,40(sp)
+    423a:	7902                	ld	s2,32(sp)
+    423c:	69e2                	ld	s3,24(sp)
+    423e:	6a42                	ld	s4,16(sp)
+    4240:	6aa2                	ld	s5,8(sp)
+    4242:	6121                	addi	sp,sp,64
+    4244:	8082                	ret
+    printf("%s: read bigfile wrong total\n", s);
+    4246:	85d6                	mv	a1,s5
+    4248:	00003517          	auipc	a0,0x3
+    424c:	c1050513          	addi	a0,a0,-1008 # 6e58 <malloc+0x1ef4>
+    4250:	461000ef          	jal	4eb0 <printf>
+    exit(1);
+    4254:	4505                	li	a0,1
+    4256:	02b000ef          	jal	4a80 <exit>
+
+000000000000425a <bigargtest>:
+{
+    425a:	7121                	addi	sp,sp,-448
+    425c:	ff06                	sd	ra,440(sp)
+    425e:	fb22                	sd	s0,432(sp)
+    4260:	f726                	sd	s1,424(sp)
+    4262:	0380                	addi	s0,sp,448
+    4264:	84aa                	mv	s1,a0
+  unlink("bigarg-ok");
+    4266:	00003517          	auipc	a0,0x3
+    426a:	c1250513          	addi	a0,a0,-1006 # 6e78 <malloc+0x1f14>
+    426e:	063000ef          	jal	4ad0 <unlink>
+  pid = fork();
+    4272:	007000ef          	jal	4a78 <fork>
+  if(pid == 0){
+    4276:	c915                	beqz	a0,42aa <bigargtest+0x50>
+  } else if(pid < 0){
+    4278:	08054a63          	bltz	a0,430c <bigargtest+0xb2>
+  wait(&xstatus);
+    427c:	fdc40513          	addi	a0,s0,-36
+    4280:	009000ef          	jal	4a88 <wait>
+  if(xstatus != 0)
+    4284:	fdc42503          	lw	a0,-36(s0)
+    4288:	ed41                	bnez	a0,4320 <bigargtest+0xc6>
+  fd = open("bigarg-ok", 0);
+    428a:	4581                	li	a1,0
+    428c:	00003517          	auipc	a0,0x3
+    4290:	bec50513          	addi	a0,a0,-1044 # 6e78 <malloc+0x1f14>
+    4294:	02d000ef          	jal	4ac0 <open>
+  if(fd < 0){
+    4298:	08054663          	bltz	a0,4324 <bigargtest+0xca>
+  close(fd);
+    429c:	00d000ef          	jal	4aa8 <close>
+}
+    42a0:	70fa                	ld	ra,440(sp)
+    42a2:	745a                	ld	s0,432(sp)
+    42a4:	74ba                	ld	s1,424(sp)
+    42a6:	6139                	addi	sp,sp,448
+    42a8:	8082                	ret
+    memset(big, ' ', sizeof(big));
+    42aa:	19000613          	li	a2,400
+    42ae:	02000593          	li	a1,32
+    42b2:	e4840513          	addi	a0,s0,-440
+    42b6:	5e4000ef          	jal	489a <memset>
+    big[sizeof(big)-1] = '\0';
+    42ba:	fc040ba3          	sb	zero,-41(s0)
+    for(i = 0; i < MAXARG-1; i++)
+    42be:	00004797          	auipc	a5,0x4
+    42c2:	1a278793          	addi	a5,a5,418 # 8460 <args.1>
+    42c6:	00004697          	auipc	a3,0x4
+    42ca:	29268693          	addi	a3,a3,658 # 8558 <args.1+0xf8>
+      args[i] = big;
+    42ce:	e4840713          	addi	a4,s0,-440
+    42d2:	e398                	sd	a4,0(a5)
+    for(i = 0; i < MAXARG-1; i++)
+    42d4:	07a1                	addi	a5,a5,8
+    42d6:	fed79ee3          	bne	a5,a3,42d2 <bigargtest+0x78>
+    args[MAXARG-1] = 0;
+    42da:	00004597          	auipc	a1,0x4
+    42de:	18658593          	addi	a1,a1,390 # 8460 <args.1>
+    42e2:	0e05bc23          	sd	zero,248(a1)
+    exec("echo", args);
+    42e6:	00001517          	auipc	a0,0x1
+    42ea:	db250513          	addi	a0,a0,-590 # 5098 <malloc+0x134>
+    42ee:	7ca000ef          	jal	4ab8 <exec>
+    fd = open("bigarg-ok", O_CREATE);
+    42f2:	20000593          	li	a1,512
+    42f6:	00003517          	auipc	a0,0x3
+    42fa:	b8250513          	addi	a0,a0,-1150 # 6e78 <malloc+0x1f14>
+    42fe:	7c2000ef          	jal	4ac0 <open>
+    close(fd);
+    4302:	7a6000ef          	jal	4aa8 <close>
+    exit(0);
+    4306:	4501                	li	a0,0
+    4308:	778000ef          	jal	4a80 <exit>
+    printf("%s: bigargtest: fork failed\n", s);
+    430c:	85a6                	mv	a1,s1
+    430e:	00003517          	auipc	a0,0x3
+    4312:	b7a50513          	addi	a0,a0,-1158 # 6e88 <malloc+0x1f24>
+    4316:	39b000ef          	jal	4eb0 <printf>
+    exit(1);
+    431a:	4505                	li	a0,1
+    431c:	764000ef          	jal	4a80 <exit>
+    exit(xstatus);
+    4320:	760000ef          	jal	4a80 <exit>
+    printf("%s: bigarg test failed!\n", s);
+    4324:	85a6                	mv	a1,s1
+    4326:	00003517          	auipc	a0,0x3
+    432a:	b8250513          	addi	a0,a0,-1150 # 6ea8 <malloc+0x1f44>
+    432e:	383000ef          	jal	4eb0 <printf>
+    exit(1);
+    4332:	4505                	li	a0,1
+    4334:	74c000ef          	jal	4a80 <exit>
+
+0000000000004338 <fsfull>:
+{
+    4338:	7135                	addi	sp,sp,-160
+    433a:	ed06                	sd	ra,152(sp)
+    433c:	e922                	sd	s0,144(sp)
+    433e:	e526                	sd	s1,136(sp)
+    4340:	e14a                	sd	s2,128(sp)
+    4342:	fcce                	sd	s3,120(sp)
+    4344:	f8d2                	sd	s4,112(sp)
+    4346:	f4d6                	sd	s5,104(sp)
+    4348:	f0da                	sd	s6,96(sp)
+    434a:	ecde                	sd	s7,88(sp)
+    434c:	e8e2                	sd	s8,80(sp)
+    434e:	e4e6                	sd	s9,72(sp)
+    4350:	e0ea                	sd	s10,64(sp)
+    4352:	1100                	addi	s0,sp,160
+  printf("fsfull test\n");
+    4354:	00003517          	auipc	a0,0x3
+    4358:	b7450513          	addi	a0,a0,-1164 # 6ec8 <malloc+0x1f64>
+    435c:	355000ef          	jal	4eb0 <printf>
+  for(nfiles = 0; ; nfiles++){
+    4360:	4481                	li	s1,0
+    name[0] = 'f';
+    4362:	06600d13          	li	s10,102
+    name[1] = '0' + nfiles / 1000;
+    4366:	3e800c13          	li	s8,1000
+    name[2] = '0' + (nfiles % 1000) / 100;
+    436a:	06400b93          	li	s7,100
+    name[3] = '0' + (nfiles % 100) / 10;
+    436e:	4b29                	li	s6,10
+    printf("writing %s\n", name);
+    4370:	00003c97          	auipc	s9,0x3
+    4374:	b68c8c93          	addi	s9,s9,-1176 # 6ed8 <malloc+0x1f74>
+    name[0] = 'f';
+    4378:	f7a40023          	sb	s10,-160(s0)
+    name[1] = '0' + nfiles / 1000;
+    437c:	0384c7bb          	divw	a5,s1,s8
+    4380:	0307879b          	addiw	a5,a5,48
+    4384:	f6f400a3          	sb	a5,-159(s0)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4388:	0384e7bb          	remw	a5,s1,s8
+    438c:	0377c7bb          	divw	a5,a5,s7
+    4390:	0307879b          	addiw	a5,a5,48
+    4394:	f6f40123          	sb	a5,-158(s0)
+    name[3] = '0' + (nfiles % 100) / 10;
+    4398:	0374e7bb          	remw	a5,s1,s7
+    439c:	0367c7bb          	divw	a5,a5,s6
+    43a0:	0307879b          	addiw	a5,a5,48
+    43a4:	f6f401a3          	sb	a5,-157(s0)
+    name[4] = '0' + (nfiles % 10);
+    43a8:	0364e7bb          	remw	a5,s1,s6
+    43ac:	0307879b          	addiw	a5,a5,48
+    43b0:	f6f40223          	sb	a5,-156(s0)
+    name[5] = '\0';
+    43b4:	f60402a3          	sb	zero,-155(s0)
+    printf("writing %s\n", name);
+    43b8:	f6040593          	addi	a1,s0,-160
+    43bc:	8566                	mv	a0,s9
+    43be:	2f3000ef          	jal	4eb0 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    43c2:	20200593          	li	a1,514
+    43c6:	f6040513          	addi	a0,s0,-160
+    43ca:	6f6000ef          	jal	4ac0 <open>
+    43ce:	892a                	mv	s2,a0
+    if(fd < 0){
+    43d0:	08055f63          	bgez	a0,446e <fsfull+0x136>
+      printf("open %s failed\n", name);
+    43d4:	f6040593          	addi	a1,s0,-160
+    43d8:	00003517          	auipc	a0,0x3
+    43dc:	b1050513          	addi	a0,a0,-1264 # 6ee8 <malloc+0x1f84>
+    43e0:	2d1000ef          	jal	4eb0 <printf>
+  while(nfiles >= 0){
+    43e4:	0604c163          	bltz	s1,4446 <fsfull+0x10e>
+    name[0] = 'f';
+    43e8:	06600b13          	li	s6,102
+    name[1] = '0' + nfiles / 1000;
+    43ec:	3e800a13          	li	s4,1000
+    name[2] = '0' + (nfiles % 1000) / 100;
+    43f0:	06400993          	li	s3,100
+    name[3] = '0' + (nfiles % 100) / 10;
+    43f4:	4929                	li	s2,10
+  while(nfiles >= 0){
+    43f6:	5afd                	li	s5,-1
+    name[0] = 'f';
+    43f8:	f7640023          	sb	s6,-160(s0)
+    name[1] = '0' + nfiles / 1000;
+    43fc:	0344c7bb          	divw	a5,s1,s4
+    4400:	0307879b          	addiw	a5,a5,48
+    4404:	f6f400a3          	sb	a5,-159(s0)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    4408:	0344e7bb          	remw	a5,s1,s4
+    440c:	0337c7bb          	divw	a5,a5,s3
+    4410:	0307879b          	addiw	a5,a5,48
+    4414:	f6f40123          	sb	a5,-158(s0)
+    name[3] = '0' + (nfiles % 100) / 10;
+    4418:	0334e7bb          	remw	a5,s1,s3
+    441c:	0327c7bb          	divw	a5,a5,s2
+    4420:	0307879b          	addiw	a5,a5,48
+    4424:	f6f401a3          	sb	a5,-157(s0)
+    name[4] = '0' + (nfiles % 10);
+    4428:	0324e7bb          	remw	a5,s1,s2
+    442c:	0307879b          	addiw	a5,a5,48
+    4430:	f6f40223          	sb	a5,-156(s0)
+    name[5] = '\0';
+    4434:	f60402a3          	sb	zero,-155(s0)
+    unlink(name);
+    4438:	f6040513          	addi	a0,s0,-160
+    443c:	694000ef          	jal	4ad0 <unlink>
+    nfiles--;
+    4440:	34fd                	addiw	s1,s1,-1
+  while(nfiles >= 0){
+    4442:	fb549be3          	bne	s1,s5,43f8 <fsfull+0xc0>
+  printf("fsfull test finished\n");
+    4446:	00003517          	auipc	a0,0x3
+    444a:	ac250513          	addi	a0,a0,-1342 # 6f08 <malloc+0x1fa4>
+    444e:	263000ef          	jal	4eb0 <printf>
+}
+    4452:	60ea                	ld	ra,152(sp)
+    4454:	644a                	ld	s0,144(sp)
+    4456:	64aa                	ld	s1,136(sp)
+    4458:	690a                	ld	s2,128(sp)
+    445a:	79e6                	ld	s3,120(sp)
+    445c:	7a46                	ld	s4,112(sp)
+    445e:	7aa6                	ld	s5,104(sp)
+    4460:	7b06                	ld	s6,96(sp)
+    4462:	6be6                	ld	s7,88(sp)
+    4464:	6c46                	ld	s8,80(sp)
+    4466:	6ca6                	ld	s9,72(sp)
+    4468:	6d06                	ld	s10,64(sp)
+    446a:	610d                	addi	sp,sp,160
+    446c:	8082                	ret
+    int total = 0;
+    446e:	4981                	li	s3,0
+      int cc = write(fd, buf, BSIZE);
+    4470:	00008a97          	auipc	s5,0x8
+    4474:	808a8a93          	addi	s5,s5,-2040 # bc78 <buf>
+      if(cc < BSIZE)
+    4478:	3ff00a13          	li	s4,1023
+      int cc = write(fd, buf, BSIZE);
+    447c:	40000613          	li	a2,1024
+    4480:	85d6                	mv	a1,s5
+    4482:	854a                	mv	a0,s2
+    4484:	61c000ef          	jal	4aa0 <write>
+      if(cc < BSIZE)
+    4488:	00aa5563          	bge	s4,a0,4492 <fsfull+0x15a>
+      total += cc;
+    448c:	00a989bb          	addw	s3,s3,a0
+    while(1){
+    4490:	b7f5                	j	447c <fsfull+0x144>
+    printf("wrote %d bytes\n", total);
+    4492:	85ce                	mv	a1,s3
+    4494:	00003517          	auipc	a0,0x3
+    4498:	a6450513          	addi	a0,a0,-1436 # 6ef8 <malloc+0x1f94>
+    449c:	215000ef          	jal	4eb0 <printf>
+    close(fd);
+    44a0:	854a                	mv	a0,s2
+    44a2:	606000ef          	jal	4aa8 <close>
+    if(total == 0)
+    44a6:	f2098fe3          	beqz	s3,43e4 <fsfull+0xac>
+  for(nfiles = 0; ; nfiles++){
+    44aa:	2485                	addiw	s1,s1,1
+    44ac:	b5f1                	j	4378 <fsfull+0x40>
+
+00000000000044ae <run>:
+//
+
+// run each test in its own process. run returns 1 if child's exit()
+// indicates success.
+int
+run(void f(char *), char *s) {
+    44ae:	7179                	addi	sp,sp,-48
+    44b0:	f406                	sd	ra,40(sp)
+    44b2:	f022                	sd	s0,32(sp)
+    44b4:	ec26                	sd	s1,24(sp)
+    44b6:	e84a                	sd	s2,16(sp)
+    44b8:	1800                	addi	s0,sp,48
+    44ba:	84aa                	mv	s1,a0
+    44bc:	892e                	mv	s2,a1
+  int pid;
+  int xstatus;
+
+  printf("test %s: ", s);
+    44be:	00003517          	auipc	a0,0x3
+    44c2:	a6250513          	addi	a0,a0,-1438 # 6f20 <malloc+0x1fbc>
+    44c6:	1eb000ef          	jal	4eb0 <printf>
+  if((pid = fork()) < 0) {
+    44ca:	5ae000ef          	jal	4a78 <fork>
+    44ce:	02054a63          	bltz	a0,4502 <run+0x54>
+    printf("runtest: fork error\n");
+    exit(1);
+  }
+  if(pid == 0) {
+    44d2:	c129                	beqz	a0,4514 <run+0x66>
+    f(s);
+    exit(0);
+  } else {
+    wait(&xstatus);
+    44d4:	fdc40513          	addi	a0,s0,-36
+    44d8:	5b0000ef          	jal	4a88 <wait>
+    if(xstatus != 0) 
+    44dc:	fdc42783          	lw	a5,-36(s0)
+    44e0:	cf9d                	beqz	a5,451e <run+0x70>
+      printf("FAILED\n");
+    44e2:	00003517          	auipc	a0,0x3
+    44e6:	a6650513          	addi	a0,a0,-1434 # 6f48 <malloc+0x1fe4>
+    44ea:	1c7000ef          	jal	4eb0 <printf>
+    else
+      printf("OK\n");
+    return xstatus == 0;
+    44ee:	fdc42503          	lw	a0,-36(s0)
+  }
+}
+    44f2:	00153513          	seqz	a0,a0
+    44f6:	70a2                	ld	ra,40(sp)
+    44f8:	7402                	ld	s0,32(sp)
+    44fa:	64e2                	ld	s1,24(sp)
+    44fc:	6942                	ld	s2,16(sp)
+    44fe:	6145                	addi	sp,sp,48
+    4500:	8082                	ret
+    printf("runtest: fork error\n");
+    4502:	00003517          	auipc	a0,0x3
+    4506:	a2e50513          	addi	a0,a0,-1490 # 6f30 <malloc+0x1fcc>
+    450a:	1a7000ef          	jal	4eb0 <printf>
+    exit(1);
+    450e:	4505                	li	a0,1
+    4510:	570000ef          	jal	4a80 <exit>
+    f(s);
+    4514:	854a                	mv	a0,s2
+    4516:	9482                	jalr	s1
+    exit(0);
+    4518:	4501                	li	a0,0
+    451a:	566000ef          	jal	4a80 <exit>
+      printf("OK\n");
+    451e:	00003517          	auipc	a0,0x3
+    4522:	a3250513          	addi	a0,a0,-1486 # 6f50 <malloc+0x1fec>
+    4526:	18b000ef          	jal	4eb0 <printf>
+    452a:	b7d1                	j	44ee <run+0x40>
+
+000000000000452c <runtests>:
+
+int
+runtests(struct test *tests, char *justone, int continuous) {
+    452c:	7139                	addi	sp,sp,-64
+    452e:	fc06                	sd	ra,56(sp)
+    4530:	f822                	sd	s0,48(sp)
+    4532:	f04a                	sd	s2,32(sp)
+    4534:	0080                	addi	s0,sp,64
+  for (struct test *t = tests; t->s != 0; t++) {
+    4536:	00853903          	ld	s2,8(a0)
+    453a:	06090463          	beqz	s2,45a2 <runtests+0x76>
+    453e:	f426                	sd	s1,40(sp)
+    4540:	ec4e                	sd	s3,24(sp)
+    4542:	e852                	sd	s4,16(sp)
+    4544:	e456                	sd	s5,8(sp)
+    4546:	84aa                	mv	s1,a0
+    4548:	89ae                	mv	s3,a1
+    454a:	8a32                	mv	s4,a2
+    if((justone == 0) || strcmp(t->s, justone) == 0) {
+      if(!run(t->f, t->s)){
+        if(continuous != 2){
+    454c:	4a89                	li	s5,2
+    454e:	a031                	j	455a <runtests+0x2e>
+  for (struct test *t = tests; t->s != 0; t++) {
+    4550:	04c1                	addi	s1,s1,16
+    4552:	0084b903          	ld	s2,8(s1)
+    4556:	02090c63          	beqz	s2,458e <runtests+0x62>
+    if((justone == 0) || strcmp(t->s, justone) == 0) {
+    455a:	00098763          	beqz	s3,4568 <runtests+0x3c>
+    455e:	85ce                	mv	a1,s3
+    4560:	854a                	mv	a0,s2
+    4562:	2e2000ef          	jal	4844 <strcmp>
+    4566:	f56d                	bnez	a0,4550 <runtests+0x24>
+      if(!run(t->f, t->s)){
+    4568:	85ca                	mv	a1,s2
+    456a:	6088                	ld	a0,0(s1)
+    456c:	f43ff0ef          	jal	44ae <run>
+    4570:	f165                	bnez	a0,4550 <runtests+0x24>
+        if(continuous != 2){
+    4572:	fd5a0fe3          	beq	s4,s5,4550 <runtests+0x24>
+          printf("SOME TESTS FAILED\n");
+    4576:	00003517          	auipc	a0,0x3
+    457a:	9e250513          	addi	a0,a0,-1566 # 6f58 <malloc+0x1ff4>
+    457e:	133000ef          	jal	4eb0 <printf>
+          return 1;
+    4582:	4505                	li	a0,1
+    4584:	74a2                	ld	s1,40(sp)
+    4586:	69e2                	ld	s3,24(sp)
+    4588:	6a42                	ld	s4,16(sp)
+    458a:	6aa2                	ld	s5,8(sp)
+    458c:	a031                	j	4598 <runtests+0x6c>
+        }
+      }
+    }
+  }
+  return 0;
+    458e:	4501                	li	a0,0
+    4590:	74a2                	ld	s1,40(sp)
+    4592:	69e2                	ld	s3,24(sp)
+    4594:	6a42                	ld	s4,16(sp)
+    4596:	6aa2                	ld	s5,8(sp)
+}
+    4598:	70e2                	ld	ra,56(sp)
+    459a:	7442                	ld	s0,48(sp)
+    459c:	7902                	ld	s2,32(sp)
+    459e:	6121                	addi	sp,sp,64
+    45a0:	8082                	ret
+  return 0;
+    45a2:	4501                	li	a0,0
+    45a4:	bfd5                	j	4598 <runtests+0x6c>
+
+00000000000045a6 <countfree>:
+// because out of memory with lazy allocation results in the process
+// taking a fault and being killed, fork and report back.
+//
+int
+countfree()
+{
+    45a6:	7139                	addi	sp,sp,-64
+    45a8:	fc06                	sd	ra,56(sp)
+    45aa:	f822                	sd	s0,48(sp)
+    45ac:	0080                	addi	s0,sp,64
+  int fds[2];
+
+  if(pipe(fds) < 0){
+    45ae:	fc840513          	addi	a0,s0,-56
+    45b2:	4de000ef          	jal	4a90 <pipe>
+    45b6:	04054e63          	bltz	a0,4612 <countfree+0x6c>
+    printf("pipe() failed in countfree()\n");
+    exit(1);
+  }
+  
+  int pid = fork();
+    45ba:	4be000ef          	jal	4a78 <fork>
+
+  if(pid < 0){
+    45be:	06054663          	bltz	a0,462a <countfree+0x84>
+    printf("fork failed in countfree()\n");
+    exit(1);
+  }
+
+  if(pid == 0){
+    45c2:	e159                	bnez	a0,4648 <countfree+0xa2>
+    45c4:	f426                	sd	s1,40(sp)
+    45c6:	f04a                	sd	s2,32(sp)
+    45c8:	ec4e                	sd	s3,24(sp)
+    close(fds[0]);
+    45ca:	fc842503          	lw	a0,-56(s0)
+    45ce:	4da000ef          	jal	4aa8 <close>
+    
+    while(1){
+      uint64 a = (uint64) sbrk(4096);
+      if(a == 0xffffffffffffffff){
+    45d2:	597d                	li	s2,-1
+        break;
+      }
+
+      // modify the memory to make sure it's really allocated.
+      *(char *)(a + 4096 - 1) = 1;
+    45d4:	4485                	li	s1,1
+
+      // report back one more page.
+      if(write(fds[1], "x", 1) != 1){
+    45d6:	00001997          	auipc	s3,0x1
+    45da:	b3298993          	addi	s3,s3,-1230 # 5108 <malloc+0x1a4>
+      uint64 a = (uint64) sbrk(4096);
+    45de:	6505                	lui	a0,0x1
+    45e0:	528000ef          	jal	4b08 <sbrk>
+      if(a == 0xffffffffffffffff){
+    45e4:	05250f63          	beq	a0,s2,4642 <countfree+0x9c>
+      *(char *)(a + 4096 - 1) = 1;
+    45e8:	6785                	lui	a5,0x1
+    45ea:	97aa                	add	a5,a5,a0
+    45ec:	fe978fa3          	sb	s1,-1(a5) # fff <pgbug+0x2b>
+      if(write(fds[1], "x", 1) != 1){
+    45f0:	8626                	mv	a2,s1
+    45f2:	85ce                	mv	a1,s3
+    45f4:	fcc42503          	lw	a0,-52(s0)
+    45f8:	4a8000ef          	jal	4aa0 <write>
+    45fc:	fe9501e3          	beq	a0,s1,45de <countfree+0x38>
+        printf("write() failed in countfree()\n");
+    4600:	00003517          	auipc	a0,0x3
+    4604:	9b050513          	addi	a0,a0,-1616 # 6fb0 <malloc+0x204c>
+    4608:	0a9000ef          	jal	4eb0 <printf>
+        exit(1);
+    460c:	4505                	li	a0,1
+    460e:	472000ef          	jal	4a80 <exit>
+    4612:	f426                	sd	s1,40(sp)
+    4614:	f04a                	sd	s2,32(sp)
+    4616:	ec4e                	sd	s3,24(sp)
+    printf("pipe() failed in countfree()\n");
+    4618:	00003517          	auipc	a0,0x3
+    461c:	95850513          	addi	a0,a0,-1704 # 6f70 <malloc+0x200c>
+    4620:	091000ef          	jal	4eb0 <printf>
+    exit(1);
+    4624:	4505                	li	a0,1
+    4626:	45a000ef          	jal	4a80 <exit>
+    462a:	f426                	sd	s1,40(sp)
+    462c:	f04a                	sd	s2,32(sp)
+    462e:	ec4e                	sd	s3,24(sp)
+    printf("fork failed in countfree()\n");
+    4630:	00003517          	auipc	a0,0x3
+    4634:	96050513          	addi	a0,a0,-1696 # 6f90 <malloc+0x202c>
+    4638:	079000ef          	jal	4eb0 <printf>
+    exit(1);
+    463c:	4505                	li	a0,1
+    463e:	442000ef          	jal	4a80 <exit>
+      }
+    }
+
+    exit(0);
+    4642:	4501                	li	a0,0
+    4644:	43c000ef          	jal	4a80 <exit>
+    4648:	f426                	sd	s1,40(sp)
+  }
+
+  close(fds[1]);
+    464a:	fcc42503          	lw	a0,-52(s0)
+    464e:	45a000ef          	jal	4aa8 <close>
+
+  int n = 0;
+    4652:	4481                	li	s1,0
+  while(1){
+    char c;
+    int cc = read(fds[0], &c, 1);
+    4654:	4605                	li	a2,1
+    4656:	fc740593          	addi	a1,s0,-57
+    465a:	fc842503          	lw	a0,-56(s0)
+    465e:	43a000ef          	jal	4a98 <read>
+    if(cc < 0){
+    4662:	00054563          	bltz	a0,466c <countfree+0xc6>
+      printf("read() failed in countfree()\n");
+      exit(1);
+    }
+    if(cc == 0)
+    4666:	cd11                	beqz	a0,4682 <countfree+0xdc>
+      break;
+    n += 1;
+    4668:	2485                	addiw	s1,s1,1
+  while(1){
+    466a:	b7ed                	j	4654 <countfree+0xae>
+    466c:	f04a                	sd	s2,32(sp)
+    466e:	ec4e                	sd	s3,24(sp)
+      printf("read() failed in countfree()\n");
+    4670:	00003517          	auipc	a0,0x3
+    4674:	96050513          	addi	a0,a0,-1696 # 6fd0 <malloc+0x206c>
+    4678:	039000ef          	jal	4eb0 <printf>
+      exit(1);
+    467c:	4505                	li	a0,1
+    467e:	402000ef          	jal	4a80 <exit>
+  }
+
+  close(fds[0]);
+    4682:	fc842503          	lw	a0,-56(s0)
+    4686:	422000ef          	jal	4aa8 <close>
+  wait((int*)0);
+    468a:	4501                	li	a0,0
+    468c:	3fc000ef          	jal	4a88 <wait>
+  
+  return n;
+}
+    4690:	8526                	mv	a0,s1
+    4692:	74a2                	ld	s1,40(sp)
+    4694:	70e2                	ld	ra,56(sp)
+    4696:	7442                	ld	s0,48(sp)
+    4698:	6121                	addi	sp,sp,64
+    469a:	8082                	ret
+
+000000000000469c <drivetests>:
+
+int
+drivetests(int quick, int continuous, char *justone) {
+    469c:	711d                	addi	sp,sp,-96
+    469e:	ec86                	sd	ra,88(sp)
+    46a0:	e8a2                	sd	s0,80(sp)
+    46a2:	e4a6                	sd	s1,72(sp)
+    46a4:	e0ca                	sd	s2,64(sp)
+    46a6:	fc4e                	sd	s3,56(sp)
+    46a8:	f852                	sd	s4,48(sp)
+    46aa:	f456                	sd	s5,40(sp)
+    46ac:	f05a                	sd	s6,32(sp)
+    46ae:	ec5e                	sd	s7,24(sp)
+    46b0:	e862                	sd	s8,16(sp)
+    46b2:	e466                	sd	s9,8(sp)
+    46b4:	e06a                	sd	s10,0(sp)
+    46b6:	1080                	addi	s0,sp,96
+    46b8:	8aaa                	mv	s5,a0
+    46ba:	892e                	mv	s2,a1
+    46bc:	89b2                	mv	s3,a2
+  do {
+    printf("usertests starting\n");
+    46be:	00003b97          	auipc	s7,0x3
+    46c2:	932b8b93          	addi	s7,s7,-1742 # 6ff0 <malloc+0x208c>
+    int free0 = countfree();
+    int free1 = 0;
+    if (runtests(quicktests, justone, continuous)) {
+    46c6:	00004b17          	auipc	s6,0x4
+    46ca:	94ab0b13          	addi	s6,s6,-1718 # 8010 <quicktests>
+      if(continuous != 2) {
+    46ce:	4a09                	li	s4,2
+      }
+    }
+    if(!quick) {
+      if (justone == 0)
+        printf("usertests slow tests starting\n");
+      if (runtests(slowtests, justone, continuous)) {
+    46d0:	00004c17          	auipc	s8,0x4
+    46d4:	d10c0c13          	addi	s8,s8,-752 # 83e0 <slowtests>
+        printf("usertests slow tests starting\n");
+    46d8:	00003d17          	auipc	s10,0x3
+    46dc:	930d0d13          	addi	s10,s10,-1744 # 7008 <malloc+0x20a4>
+          return 1;
+        }
+      }
+    }
+    if((free1 = countfree()) < free0) {
+      printf("FAILED -- lost some free pages %d (out of %d)\n", free1, free0);
+    46e0:	00003c97          	auipc	s9,0x3
+    46e4:	948c8c93          	addi	s9,s9,-1720 # 7028 <malloc+0x20c4>
+    46e8:	a819                	j	46fe <drivetests+0x62>
+        printf("usertests slow tests starting\n");
+    46ea:	856a                	mv	a0,s10
+    46ec:	7c4000ef          	jal	4eb0 <printf>
+    46f0:	a80d                	j	4722 <drivetests+0x86>
+    if((free1 = countfree()) < free0) {
+    46f2:	eb5ff0ef          	jal	45a6 <countfree>
+    46f6:	04954063          	blt	a0,s1,4736 <drivetests+0x9a>
+      if(continuous != 2) {
+        return 1;
+      }
+    }
+  } while(continuous);
+    46fa:	04090963          	beqz	s2,474c <drivetests+0xb0>
+    printf("usertests starting\n");
+    46fe:	855e                	mv	a0,s7
+    4700:	7b0000ef          	jal	4eb0 <printf>
+    int free0 = countfree();
+    4704:	ea3ff0ef          	jal	45a6 <countfree>
+    4708:	84aa                	mv	s1,a0
+    if (runtests(quicktests, justone, continuous)) {
+    470a:	864a                	mv	a2,s2
+    470c:	85ce                	mv	a1,s3
+    470e:	855a                	mv	a0,s6
+    4710:	e1dff0ef          	jal	452c <runtests>
+    4714:	c119                	beqz	a0,471a <drivetests+0x7e>
+      if(continuous != 2) {
+    4716:	03491963          	bne	s2,s4,4748 <drivetests+0xac>
+    if(!quick) {
+    471a:	fc0a9ce3          	bnez	s5,46f2 <drivetests+0x56>
+      if (justone == 0)
+    471e:	fc0986e3          	beqz	s3,46ea <drivetests+0x4e>
+      if (runtests(slowtests, justone, continuous)) {
+    4722:	864a                	mv	a2,s2
+    4724:	85ce                	mv	a1,s3
+    4726:	8562                	mv	a0,s8
+    4728:	e05ff0ef          	jal	452c <runtests>
+    472c:	d179                	beqz	a0,46f2 <drivetests+0x56>
+        if(continuous != 2) {
+    472e:	fd4902e3          	beq	s2,s4,46f2 <drivetests+0x56>
+          return 1;
+    4732:	4505                	li	a0,1
+    4734:	a829                	j	474e <drivetests+0xb2>
+      printf("FAILED -- lost some free pages %d (out of %d)\n", free1, free0);
+    4736:	8626                	mv	a2,s1
+    4738:	85aa                	mv	a1,a0
+    473a:	8566                	mv	a0,s9
+    473c:	774000ef          	jal	4eb0 <printf>
+      if(continuous != 2) {
+    4740:	fb490fe3          	beq	s2,s4,46fe <drivetests+0x62>
+        return 1;
+    4744:	4505                	li	a0,1
+    4746:	a021                	j	474e <drivetests+0xb2>
+        return 1;
+    4748:	4505                	li	a0,1
+    474a:	a011                	j	474e <drivetests+0xb2>
+  return 0;
+    474c:	854a                	mv	a0,s2
+}
+    474e:	60e6                	ld	ra,88(sp)
+    4750:	6446                	ld	s0,80(sp)
+    4752:	64a6                	ld	s1,72(sp)
+    4754:	6906                	ld	s2,64(sp)
+    4756:	79e2                	ld	s3,56(sp)
+    4758:	7a42                	ld	s4,48(sp)
+    475a:	7aa2                	ld	s5,40(sp)
+    475c:	7b02                	ld	s6,32(sp)
+    475e:	6be2                	ld	s7,24(sp)
+    4760:	6c42                	ld	s8,16(sp)
+    4762:	6ca2                	ld	s9,8(sp)
+    4764:	6d02                	ld	s10,0(sp)
+    4766:	6125                	addi	sp,sp,96
+    4768:	8082                	ret
+
+000000000000476a <main>:
+
+int
+main(int argc, char *argv[])
+{
+    476a:	1101                	addi	sp,sp,-32
+    476c:	ec06                	sd	ra,24(sp)
+    476e:	e822                	sd	s0,16(sp)
+    4770:	e426                	sd	s1,8(sp)
+    4772:	e04a                	sd	s2,0(sp)
+    4774:	1000                	addi	s0,sp,32
+    4776:	84aa                	mv	s1,a0
+  int continuous = 0;
+  int quick = 0;
+  char *justone = 0;
+
+  if(argc == 2 && strcmp(argv[1], "-q") == 0){
+    4778:	4789                	li	a5,2
+    477a:	00f50f63          	beq	a0,a5,4798 <main+0x2e>
+    continuous = 1;
+  } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
+    continuous = 2;
+  } else if(argc == 2 && argv[1][0] != '-'){
+    justone = argv[1];
+  } else if(argc > 1){
+    477e:	4785                	li	a5,1
+    4780:	06a7c063          	blt	a5,a0,47e0 <main+0x76>
+  char *justone = 0;
+    4784:	4901                	li	s2,0
+  int quick = 0;
+    4786:	4501                	li	a0,0
+  int continuous = 0;
+    4788:	4581                	li	a1,0
+    printf("Usage: usertests [-c] [-C] [-q] [testname]\n");
+    exit(1);
+  }
+  if (drivetests(quick, continuous, justone)) {
+    478a:	864a                	mv	a2,s2
+    478c:	f11ff0ef          	jal	469c <drivetests>
+    4790:	c935                	beqz	a0,4804 <main+0x9a>
+    exit(1);
+    4792:	4505                	li	a0,1
+    4794:	2ec000ef          	jal	4a80 <exit>
+  if(argc == 2 && strcmp(argv[1], "-q") == 0){
+    4798:	0085b903          	ld	s2,8(a1)
+    479c:	00003597          	auipc	a1,0x3
+    47a0:	8bc58593          	addi	a1,a1,-1860 # 7058 <malloc+0x20f4>
+    47a4:	854a                	mv	a0,s2
+    47a6:	09e000ef          	jal	4844 <strcmp>
+    47aa:	85aa                	mv	a1,a0
+    47ac:	c139                	beqz	a0,47f2 <main+0x88>
+  } else if(argc == 2 && strcmp(argv[1], "-c") == 0){
+    47ae:	00003597          	auipc	a1,0x3
+    47b2:	8b258593          	addi	a1,a1,-1870 # 7060 <malloc+0x20fc>
+    47b6:	854a                	mv	a0,s2
+    47b8:	08c000ef          	jal	4844 <strcmp>
+    47bc:	cd15                	beqz	a0,47f8 <main+0x8e>
+  } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
+    47be:	00003597          	auipc	a1,0x3
+    47c2:	8aa58593          	addi	a1,a1,-1878 # 7068 <malloc+0x2104>
+    47c6:	854a                	mv	a0,s2
+    47c8:	07c000ef          	jal	4844 <strcmp>
+    47cc:	c90d                	beqz	a0,47fe <main+0x94>
+  } else if(argc == 2 && argv[1][0] != '-'){
+    47ce:	00094703          	lbu	a4,0(s2)
+    47d2:	02d00793          	li	a5,45
+    47d6:	00f70563          	beq	a4,a5,47e0 <main+0x76>
+  int quick = 0;
+    47da:	4501                	li	a0,0
+  int continuous = 0;
+    47dc:	4581                	li	a1,0
+    47de:	b775                	j	478a <main+0x20>
+    printf("Usage: usertests [-c] [-C] [-q] [testname]\n");
+    47e0:	00003517          	auipc	a0,0x3
+    47e4:	89050513          	addi	a0,a0,-1904 # 7070 <malloc+0x210c>
+    47e8:	6c8000ef          	jal	4eb0 <printf>
+    exit(1);
+    47ec:	4505                	li	a0,1
+    47ee:	292000ef          	jal	4a80 <exit>
+  char *justone = 0;
+    47f2:	4901                	li	s2,0
+    quick = 1;
+    47f4:	4505                	li	a0,1
+    47f6:	bf51                	j	478a <main+0x20>
+  char *justone = 0;
+    47f8:	4901                	li	s2,0
+    continuous = 1;
+    47fa:	4585                	li	a1,1
+    47fc:	b779                	j	478a <main+0x20>
+    continuous = 2;
+    47fe:	85a6                	mv	a1,s1
+  char *justone = 0;
+    4800:	4901                	li	s2,0
+    4802:	b761                	j	478a <main+0x20>
+  }
+  printf("ALL TESTS PASSED\n");
+    4804:	00003517          	auipc	a0,0x3
+    4808:	89c50513          	addi	a0,a0,-1892 # 70a0 <malloc+0x213c>
+    480c:	6a4000ef          	jal	4eb0 <printf>
+  exit(0);
+    4810:	4501                	li	a0,0
+    4812:	26e000ef          	jal	4a80 <exit>
+
+0000000000004816 <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+    4816:	1141                	addi	sp,sp,-16
+    4818:	e406                	sd	ra,8(sp)
+    481a:	e022                	sd	s0,0(sp)
+    481c:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+    481e:	f4dff0ef          	jal	476a <main>
+  exit(0);
+    4822:	4501                	li	a0,0
+    4824:	25c000ef          	jal	4a80 <exit>
+
+0000000000004828 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+    4828:	1141                	addi	sp,sp,-16
+    482a:	e422                	sd	s0,8(sp)
+    482c:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    482e:	87aa                	mv	a5,a0
+    4830:	0585                	addi	a1,a1,1
+    4832:	0785                	addi	a5,a5,1
+    4834:	fff5c703          	lbu	a4,-1(a1)
+    4838:	fee78fa3          	sb	a4,-1(a5)
+    483c:	fb75                	bnez	a4,4830 <strcpy+0x8>
+    ;
+  return os;
+}
+    483e:	6422                	ld	s0,8(sp)
+    4840:	0141                	addi	sp,sp,16
+    4842:	8082                	ret
+
+0000000000004844 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    4844:	1141                	addi	sp,sp,-16
+    4846:	e422                	sd	s0,8(sp)
+    4848:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+    484a:	00054783          	lbu	a5,0(a0)
+    484e:	cb91                	beqz	a5,4862 <strcmp+0x1e>
+    4850:	0005c703          	lbu	a4,0(a1)
+    4854:	00f71763          	bne	a4,a5,4862 <strcmp+0x1e>
+    p++, q++;
+    4858:	0505                	addi	a0,a0,1
+    485a:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+    485c:	00054783          	lbu	a5,0(a0)
+    4860:	fbe5                	bnez	a5,4850 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+    4862:	0005c503          	lbu	a0,0(a1)
+}
+    4866:	40a7853b          	subw	a0,a5,a0
+    486a:	6422                	ld	s0,8(sp)
+    486c:	0141                	addi	sp,sp,16
+    486e:	8082                	ret
+
+0000000000004870 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    4870:	1141                	addi	sp,sp,-16
+    4872:	e422                	sd	s0,8(sp)
+    4874:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+    4876:	00054783          	lbu	a5,0(a0)
+    487a:	cf91                	beqz	a5,4896 <strlen+0x26>
+    487c:	0505                	addi	a0,a0,1
+    487e:	87aa                	mv	a5,a0
+    4880:	86be                	mv	a3,a5
+    4882:	0785                	addi	a5,a5,1
+    4884:	fff7c703          	lbu	a4,-1(a5)
+    4888:	ff65                	bnez	a4,4880 <strlen+0x10>
+    488a:	40a6853b          	subw	a0,a3,a0
+    488e:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+    4890:	6422                	ld	s0,8(sp)
+    4892:	0141                	addi	sp,sp,16
+    4894:	8082                	ret
+  for(n = 0; s[n]; n++)
+    4896:	4501                	li	a0,0
+    4898:	bfe5                	j	4890 <strlen+0x20>
+
+000000000000489a <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    489a:	1141                	addi	sp,sp,-16
+    489c:	e422                	sd	s0,8(sp)
+    489e:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+    48a0:	ca19                	beqz	a2,48b6 <memset+0x1c>
+    48a2:	87aa                	mv	a5,a0
+    48a4:	1602                	slli	a2,a2,0x20
+    48a6:	9201                	srli	a2,a2,0x20
+    48a8:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+    48ac:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+    48b0:	0785                	addi	a5,a5,1
+    48b2:	fee79de3          	bne	a5,a4,48ac <memset+0x12>
+  }
+  return dst;
+}
+    48b6:	6422                	ld	s0,8(sp)
+    48b8:	0141                	addi	sp,sp,16
+    48ba:	8082                	ret
+
+00000000000048bc <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    48bc:	1141                	addi	sp,sp,-16
+    48be:	e422                	sd	s0,8(sp)
+    48c0:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+    48c2:	00054783          	lbu	a5,0(a0)
+    48c6:	cb99                	beqz	a5,48dc <strchr+0x20>
+    if(*s == c)
+    48c8:	00f58763          	beq	a1,a5,48d6 <strchr+0x1a>
+  for(; *s; s++)
+    48cc:	0505                	addi	a0,a0,1
+    48ce:	00054783          	lbu	a5,0(a0)
+    48d2:	fbfd                	bnez	a5,48c8 <strchr+0xc>
+      return (char*)s;
+  return 0;
+    48d4:	4501                	li	a0,0
+}
+    48d6:	6422                	ld	s0,8(sp)
+    48d8:	0141                	addi	sp,sp,16
+    48da:	8082                	ret
+  return 0;
+    48dc:	4501                	li	a0,0
+    48de:	bfe5                	j	48d6 <strchr+0x1a>
+
+00000000000048e0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    48e0:	711d                	addi	sp,sp,-96
+    48e2:	ec86                	sd	ra,88(sp)
+    48e4:	e8a2                	sd	s0,80(sp)
+    48e6:	e4a6                	sd	s1,72(sp)
+    48e8:	e0ca                	sd	s2,64(sp)
+    48ea:	fc4e                	sd	s3,56(sp)
+    48ec:	f852                	sd	s4,48(sp)
+    48ee:	f456                	sd	s5,40(sp)
+    48f0:	f05a                	sd	s6,32(sp)
+    48f2:	ec5e                	sd	s7,24(sp)
+    48f4:	1080                	addi	s0,sp,96
+    48f6:	8baa                	mv	s7,a0
+    48f8:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    48fa:	892a                	mv	s2,a0
+    48fc:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+    48fe:	4aa9                	li	s5,10
+    4900:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+    4902:	89a6                	mv	s3,s1
+    4904:	2485                	addiw	s1,s1,1
+    4906:	0344d663          	bge	s1,s4,4932 <gets+0x52>
+    cc = read(0, &c, 1);
+    490a:	4605                	li	a2,1
+    490c:	faf40593          	addi	a1,s0,-81
+    4910:	4501                	li	a0,0
+    4912:	186000ef          	jal	4a98 <read>
+    if(cc < 1)
+    4916:	00a05e63          	blez	a0,4932 <gets+0x52>
+    buf[i++] = c;
+    491a:	faf44783          	lbu	a5,-81(s0)
+    491e:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+    4922:	01578763          	beq	a5,s5,4930 <gets+0x50>
+    4926:	0905                	addi	s2,s2,1
+    4928:	fd679de3          	bne	a5,s6,4902 <gets+0x22>
+    buf[i++] = c;
+    492c:	89a6                	mv	s3,s1
+    492e:	a011                	j	4932 <gets+0x52>
+    4930:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+    4932:	99de                	add	s3,s3,s7
+    4934:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+    4938:	855e                	mv	a0,s7
+    493a:	60e6                	ld	ra,88(sp)
+    493c:	6446                	ld	s0,80(sp)
+    493e:	64a6                	ld	s1,72(sp)
+    4940:	6906                	ld	s2,64(sp)
+    4942:	79e2                	ld	s3,56(sp)
+    4944:	7a42                	ld	s4,48(sp)
+    4946:	7aa2                	ld	s5,40(sp)
+    4948:	7b02                	ld	s6,32(sp)
+    494a:	6be2                	ld	s7,24(sp)
+    494c:	6125                	addi	sp,sp,96
+    494e:	8082                	ret
+
+0000000000004950 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    4950:	1101                	addi	sp,sp,-32
+    4952:	ec06                	sd	ra,24(sp)
+    4954:	e822                	sd	s0,16(sp)
+    4956:	e04a                	sd	s2,0(sp)
+    4958:	1000                	addi	s0,sp,32
+    495a:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    495c:	4581                	li	a1,0
+    495e:	162000ef          	jal	4ac0 <open>
+  if(fd < 0)
+    4962:	02054263          	bltz	a0,4986 <stat+0x36>
+    4966:	e426                	sd	s1,8(sp)
+    4968:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+    496a:	85ca                	mv	a1,s2
+    496c:	16c000ef          	jal	4ad8 <fstat>
+    4970:	892a                	mv	s2,a0
+  close(fd);
+    4972:	8526                	mv	a0,s1
+    4974:	134000ef          	jal	4aa8 <close>
+  return r;
+    4978:	64a2                	ld	s1,8(sp)
+}
+    497a:	854a                	mv	a0,s2
+    497c:	60e2                	ld	ra,24(sp)
+    497e:	6442                	ld	s0,16(sp)
+    4980:	6902                	ld	s2,0(sp)
+    4982:	6105                	addi	sp,sp,32
+    4984:	8082                	ret
+    return -1;
+    4986:	597d                	li	s2,-1
+    4988:	bfcd                	j	497a <stat+0x2a>
+
+000000000000498a <atoi>:
+
+int
+atoi(const char *s)
+{
+    498a:	1141                	addi	sp,sp,-16
+    498c:	e422                	sd	s0,8(sp)
+    498e:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    4990:	00054683          	lbu	a3,0(a0)
+    4994:	fd06879b          	addiw	a5,a3,-48
+    4998:	0ff7f793          	zext.b	a5,a5
+    499c:	4625                	li	a2,9
+    499e:	02f66863          	bltu	a2,a5,49ce <atoi+0x44>
+    49a2:	872a                	mv	a4,a0
+  n = 0;
+    49a4:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+    49a6:	0705                	addi	a4,a4,1
+    49a8:	0025179b          	slliw	a5,a0,0x2
+    49ac:	9fa9                	addw	a5,a5,a0
+    49ae:	0017979b          	slliw	a5,a5,0x1
+    49b2:	9fb5                	addw	a5,a5,a3
+    49b4:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+    49b8:	00074683          	lbu	a3,0(a4)
+    49bc:	fd06879b          	addiw	a5,a3,-48
+    49c0:	0ff7f793          	zext.b	a5,a5
+    49c4:	fef671e3          	bgeu	a2,a5,49a6 <atoi+0x1c>
+  return n;
+}
+    49c8:	6422                	ld	s0,8(sp)
+    49ca:	0141                	addi	sp,sp,16
+    49cc:	8082                	ret
+  n = 0;
+    49ce:	4501                	li	a0,0
+    49d0:	bfe5                	j	49c8 <atoi+0x3e>
+
+00000000000049d2 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    49d2:	1141                	addi	sp,sp,-16
+    49d4:	e422                	sd	s0,8(sp)
+    49d6:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+    49d8:	02b57463          	bgeu	a0,a1,4a00 <memmove+0x2e>
+    while(n-- > 0)
+    49dc:	00c05f63          	blez	a2,49fa <memmove+0x28>
+    49e0:	1602                	slli	a2,a2,0x20
+    49e2:	9201                	srli	a2,a2,0x20
+    49e4:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+    49e8:	872a                	mv	a4,a0
+      *dst++ = *src++;
+    49ea:	0585                	addi	a1,a1,1
+    49ec:	0705                	addi	a4,a4,1
+    49ee:	fff5c683          	lbu	a3,-1(a1)
+    49f2:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+    49f6:	fef71ae3          	bne	a4,a5,49ea <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+    49fa:	6422                	ld	s0,8(sp)
+    49fc:	0141                	addi	sp,sp,16
+    49fe:	8082                	ret
+    dst += n;
+    4a00:	00c50733          	add	a4,a0,a2
+    src += n;
+    4a04:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+    4a06:	fec05ae3          	blez	a2,49fa <memmove+0x28>
+    4a0a:	fff6079b          	addiw	a5,a2,-1 # 2fff <subdir+0x423>
+    4a0e:	1782                	slli	a5,a5,0x20
+    4a10:	9381                	srli	a5,a5,0x20
+    4a12:	fff7c793          	not	a5,a5
+    4a16:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+    4a18:	15fd                	addi	a1,a1,-1
+    4a1a:	177d                	addi	a4,a4,-1
+    4a1c:	0005c683          	lbu	a3,0(a1)
+    4a20:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+    4a24:	fee79ae3          	bne	a5,a4,4a18 <memmove+0x46>
+    4a28:	bfc9                	j	49fa <memmove+0x28>
+
+0000000000004a2a <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+    4a2a:	1141                	addi	sp,sp,-16
+    4a2c:	e422                	sd	s0,8(sp)
+    4a2e:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+    4a30:	ca05                	beqz	a2,4a60 <memcmp+0x36>
+    4a32:	fff6069b          	addiw	a3,a2,-1
+    4a36:	1682                	slli	a3,a3,0x20
+    4a38:	9281                	srli	a3,a3,0x20
+    4a3a:	0685                	addi	a3,a3,1
+    4a3c:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+    4a3e:	00054783          	lbu	a5,0(a0)
+    4a42:	0005c703          	lbu	a4,0(a1)
+    4a46:	00e79863          	bne	a5,a4,4a56 <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+    4a4a:	0505                	addi	a0,a0,1
+    p2++;
+    4a4c:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+    4a4e:	fed518e3          	bne	a0,a3,4a3e <memcmp+0x14>
+  }
+  return 0;
+    4a52:	4501                	li	a0,0
+    4a54:	a019                	j	4a5a <memcmp+0x30>
+      return *p1 - *p2;
+    4a56:	40e7853b          	subw	a0,a5,a4
+}
+    4a5a:	6422                	ld	s0,8(sp)
+    4a5c:	0141                	addi	sp,sp,16
+    4a5e:	8082                	ret
+  return 0;
+    4a60:	4501                	li	a0,0
+    4a62:	bfe5                	j	4a5a <memcmp+0x30>
+
+0000000000004a64 <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+    4a64:	1141                	addi	sp,sp,-16
+    4a66:	e406                	sd	ra,8(sp)
+    4a68:	e022                	sd	s0,0(sp)
+    4a6a:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+    4a6c:	f67ff0ef          	jal	49d2 <memmove>
+}
+    4a70:	60a2                	ld	ra,8(sp)
+    4a72:	6402                	ld	s0,0(sp)
+    4a74:	0141                	addi	sp,sp,16
+    4a76:	8082                	ret
+
+0000000000004a78 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+    4a78:	4885                	li	a7,1
+ ecall
+    4a7a:	00000073          	ecall
+ ret
+    4a7e:	8082                	ret
+
+0000000000004a80 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+    4a80:	4889                	li	a7,2
+ ecall
+    4a82:	00000073          	ecall
+ ret
+    4a86:	8082                	ret
+
+0000000000004a88 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+    4a88:	488d                	li	a7,3
+ ecall
+    4a8a:	00000073          	ecall
+ ret
+    4a8e:	8082                	ret
+
+0000000000004a90 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+    4a90:	4891                	li	a7,4
+ ecall
+    4a92:	00000073          	ecall
+ ret
+    4a96:	8082                	ret
+
+0000000000004a98 <read>:
+.global read
+read:
+ li a7, SYS_read
+    4a98:	4895                	li	a7,5
+ ecall
+    4a9a:	00000073          	ecall
+ ret
+    4a9e:	8082                	ret
+
+0000000000004aa0 <write>:
+.global write
+write:
+ li a7, SYS_write
+    4aa0:	48c1                	li	a7,16
+ ecall
+    4aa2:	00000073          	ecall
+ ret
+    4aa6:	8082                	ret
+
+0000000000004aa8 <close>:
+.global close
+close:
+ li a7, SYS_close
+    4aa8:	48d5                	li	a7,21
+ ecall
+    4aaa:	00000073          	ecall
+ ret
+    4aae:	8082                	ret
+
+0000000000004ab0 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+    4ab0:	4899                	li	a7,6
+ ecall
+    4ab2:	00000073          	ecall
+ ret
+    4ab6:	8082                	ret
+
+0000000000004ab8 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+    4ab8:	489d                	li	a7,7
+ ecall
+    4aba:	00000073          	ecall
+ ret
+    4abe:	8082                	ret
+
+0000000000004ac0 <open>:
+.global open
+open:
+ li a7, SYS_open
+    4ac0:	48bd                	li	a7,15
+ ecall
+    4ac2:	00000073          	ecall
+ ret
+    4ac6:	8082                	ret
+
+0000000000004ac8 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+    4ac8:	48c5                	li	a7,17
+ ecall
+    4aca:	00000073          	ecall
+ ret
+    4ace:	8082                	ret
+
+0000000000004ad0 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+    4ad0:	48c9                	li	a7,18
+ ecall
+    4ad2:	00000073          	ecall
+ ret
+    4ad6:	8082                	ret
+
+0000000000004ad8 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+    4ad8:	48a1                	li	a7,8
+ ecall
+    4ada:	00000073          	ecall
+ ret
+    4ade:	8082                	ret
+
+0000000000004ae0 <link>:
+.global link
+link:
+ li a7, SYS_link
+    4ae0:	48cd                	li	a7,19
+ ecall
+    4ae2:	00000073          	ecall
+ ret
+    4ae6:	8082                	ret
+
+0000000000004ae8 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+    4ae8:	48d1                	li	a7,20
+ ecall
+    4aea:	00000073          	ecall
+ ret
+    4aee:	8082                	ret
+
+0000000000004af0 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+    4af0:	48a5                	li	a7,9
+ ecall
+    4af2:	00000073          	ecall
+ ret
+    4af6:	8082                	ret
+
+0000000000004af8 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+    4af8:	48a9                	li	a7,10
+ ecall
+    4afa:	00000073          	ecall
+ ret
+    4afe:	8082                	ret
+
+0000000000004b00 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+    4b00:	48ad                	li	a7,11
+ ecall
+    4b02:	00000073          	ecall
+ ret
+    4b06:	8082                	ret
+
+0000000000004b08 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+    4b08:	48b1                	li	a7,12
+ ecall
+    4b0a:	00000073          	ecall
+ ret
+    4b0e:	8082                	ret
+
+0000000000004b10 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+    4b10:	48b5                	li	a7,13
+ ecall
+    4b12:	00000073          	ecall
+ ret
+    4b16:	8082                	ret
+
+0000000000004b18 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+    4b18:	48b9                	li	a7,14
+ ecall
+    4b1a:	00000073          	ecall
+ ret
+    4b1e:	8082                	ret
+
+0000000000004b20 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+    4b20:	48d9                	li	a7,22
+ ecall
+    4b22:	00000073          	ecall
+ ret
+    4b26:	8082                	ret
+
+0000000000004b28 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+    4b28:	48dd                	li	a7,23
+ ecall
+    4b2a:	00000073          	ecall
+ ret
+    4b2e:	8082                	ret
+
+0000000000004b30 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+    4b30:	48e1                	li	a7,24
+ ecall
+    4b32:	00000073          	ecall
+ ret
+    4b36:	8082                	ret
+
+0000000000004b38 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+    4b38:	1101                	addi	sp,sp,-32
+    4b3a:	ec06                	sd	ra,24(sp)
+    4b3c:	e822                	sd	s0,16(sp)
+    4b3e:	1000                	addi	s0,sp,32
+    4b40:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+    4b44:	4605                	li	a2,1
+    4b46:	fef40593          	addi	a1,s0,-17
+    4b4a:	f57ff0ef          	jal	4aa0 <write>
+}
+    4b4e:	60e2                	ld	ra,24(sp)
+    4b50:	6442                	ld	s0,16(sp)
+    4b52:	6105                	addi	sp,sp,32
+    4b54:	8082                	ret
+
+0000000000004b56 <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    4b56:	7139                	addi	sp,sp,-64
+    4b58:	fc06                	sd	ra,56(sp)
+    4b5a:	f822                	sd	s0,48(sp)
+    4b5c:	f426                	sd	s1,40(sp)
+    4b5e:	0080                	addi	s0,sp,64
+    4b60:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    4b62:	c299                	beqz	a3,4b68 <printint+0x12>
+    4b64:	0805c963          	bltz	a1,4bf6 <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+    4b68:	2581                	sext.w	a1,a1
+  neg = 0;
+    4b6a:	4881                	li	a7,0
+    4b6c:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+    4b70:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+    4b72:	2601                	sext.w	a2,a2
+    4b74:	00003517          	auipc	a0,0x3
+    4b78:	8fc50513          	addi	a0,a0,-1796 # 7470 <digits>
+    4b7c:	883a                	mv	a6,a4
+    4b7e:	2705                	addiw	a4,a4,1
+    4b80:	02c5f7bb          	remuw	a5,a1,a2
+    4b84:	1782                	slli	a5,a5,0x20
+    4b86:	9381                	srli	a5,a5,0x20
+    4b88:	97aa                	add	a5,a5,a0
+    4b8a:	0007c783          	lbu	a5,0(a5)
+    4b8e:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+    4b92:	0005879b          	sext.w	a5,a1
+    4b96:	02c5d5bb          	divuw	a1,a1,a2
+    4b9a:	0685                	addi	a3,a3,1
+    4b9c:	fec7f0e3          	bgeu	a5,a2,4b7c <printint+0x26>
+  if(neg)
+    4ba0:	00088c63          	beqz	a7,4bb8 <printint+0x62>
+    buf[i++] = '-';
+    4ba4:	fd070793          	addi	a5,a4,-48
+    4ba8:	00878733          	add	a4,a5,s0
+    4bac:	02d00793          	li	a5,45
+    4bb0:	fef70823          	sb	a5,-16(a4)
+    4bb4:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+    4bb8:	02e05a63          	blez	a4,4bec <printint+0x96>
+    4bbc:	f04a                	sd	s2,32(sp)
+    4bbe:	ec4e                	sd	s3,24(sp)
+    4bc0:	fc040793          	addi	a5,s0,-64
+    4bc4:	00e78933          	add	s2,a5,a4
+    4bc8:	fff78993          	addi	s3,a5,-1
+    4bcc:	99ba                	add	s3,s3,a4
+    4bce:	377d                	addiw	a4,a4,-1
+    4bd0:	1702                	slli	a4,a4,0x20
+    4bd2:	9301                	srli	a4,a4,0x20
+    4bd4:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+    4bd8:	fff94583          	lbu	a1,-1(s2)
+    4bdc:	8526                	mv	a0,s1
+    4bde:	f5bff0ef          	jal	4b38 <putc>
+  while(--i >= 0)
+    4be2:	197d                	addi	s2,s2,-1
+    4be4:	ff391ae3          	bne	s2,s3,4bd8 <printint+0x82>
+    4be8:	7902                	ld	s2,32(sp)
+    4bea:	69e2                	ld	s3,24(sp)
+}
+    4bec:	70e2                	ld	ra,56(sp)
+    4bee:	7442                	ld	s0,48(sp)
+    4bf0:	74a2                	ld	s1,40(sp)
+    4bf2:	6121                	addi	sp,sp,64
+    4bf4:	8082                	ret
+    x = -xx;
+    4bf6:	40b005bb          	negw	a1,a1
+    neg = 1;
+    4bfa:	4885                	li	a7,1
+    x = -xx;
+    4bfc:	bf85                	j	4b6c <printint+0x16>
+
+0000000000004bfe <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+    4bfe:	711d                	addi	sp,sp,-96
+    4c00:	ec86                	sd	ra,88(sp)
+    4c02:	e8a2                	sd	s0,80(sp)
+    4c04:	e0ca                	sd	s2,64(sp)
+    4c06:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+    4c08:	0005c903          	lbu	s2,0(a1)
+    4c0c:	26090863          	beqz	s2,4e7c <vprintf+0x27e>
+    4c10:	e4a6                	sd	s1,72(sp)
+    4c12:	fc4e                	sd	s3,56(sp)
+    4c14:	f852                	sd	s4,48(sp)
+    4c16:	f456                	sd	s5,40(sp)
+    4c18:	f05a                	sd	s6,32(sp)
+    4c1a:	ec5e                	sd	s7,24(sp)
+    4c1c:	e862                	sd	s8,16(sp)
+    4c1e:	e466                	sd	s9,8(sp)
+    4c20:	8b2a                	mv	s6,a0
+    4c22:	8a2e                	mv	s4,a1
+    4c24:	8bb2                	mv	s7,a2
+  state = 0;
+    4c26:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+    4c28:	4481                	li	s1,0
+    4c2a:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+    4c2c:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+    4c30:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+    4c34:	06c00c93          	li	s9,108
+    4c38:	a005                	j	4c58 <vprintf+0x5a>
+        putc(fd, c0);
+    4c3a:	85ca                	mv	a1,s2
+    4c3c:	855a                	mv	a0,s6
+    4c3e:	efbff0ef          	jal	4b38 <putc>
+    4c42:	a019                	j	4c48 <vprintf+0x4a>
+    } else if(state == '%'){
+    4c44:	03598263          	beq	s3,s5,4c68 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+    4c48:	2485                	addiw	s1,s1,1
+    4c4a:	8726                	mv	a4,s1
+    4c4c:	009a07b3          	add	a5,s4,s1
+    4c50:	0007c903          	lbu	s2,0(a5)
+    4c54:	20090c63          	beqz	s2,4e6c <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+    4c58:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+    4c5c:	fe0994e3          	bnez	s3,4c44 <vprintf+0x46>
+      if(c0 == '%'){
+    4c60:	fd579de3          	bne	a5,s5,4c3a <vprintf+0x3c>
+        state = '%';
+    4c64:	89be                	mv	s3,a5
+    4c66:	b7cd                	j	4c48 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+    4c68:	00ea06b3          	add	a3,s4,a4
+    4c6c:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+    4c70:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+    4c72:	c681                	beqz	a3,4c7a <vprintf+0x7c>
+    4c74:	9752                	add	a4,a4,s4
+    4c76:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+    4c7a:	03878f63          	beq	a5,s8,4cb8 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+    4c7e:	05978963          	beq	a5,s9,4cd0 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+    4c82:	07500713          	li	a4,117
+    4c86:	0ee78363          	beq	a5,a4,4d6c <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+    4c8a:	07800713          	li	a4,120
+    4c8e:	12e78563          	beq	a5,a4,4db8 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+    4c92:	07000713          	li	a4,112
+    4c96:	14e78a63          	beq	a5,a4,4dea <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+    4c9a:	07300713          	li	a4,115
+    4c9e:	18e78a63          	beq	a5,a4,4e32 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+    4ca2:	02500713          	li	a4,37
+    4ca6:	04e79563          	bne	a5,a4,4cf0 <vprintf+0xf2>
+        putc(fd, '%');
+    4caa:	02500593          	li	a1,37
+    4cae:	855a                	mv	a0,s6
+    4cb0:	e89ff0ef          	jal	4b38 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+    4cb4:	4981                	li	s3,0
+    4cb6:	bf49                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+    4cb8:	008b8913          	addi	s2,s7,8
+    4cbc:	4685                	li	a3,1
+    4cbe:	4629                	li	a2,10
+    4cc0:	000ba583          	lw	a1,0(s7)
+    4cc4:	855a                	mv	a0,s6
+    4cc6:	e91ff0ef          	jal	4b56 <printint>
+    4cca:	8bca                	mv	s7,s2
+      state = 0;
+    4ccc:	4981                	li	s3,0
+    4cce:	bfad                	j	4c48 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+    4cd0:	06400793          	li	a5,100
+    4cd4:	02f68963          	beq	a3,a5,4d06 <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+    4cd8:	06c00793          	li	a5,108
+    4cdc:	04f68263          	beq	a3,a5,4d20 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+    4ce0:	07500793          	li	a5,117
+    4ce4:	0af68063          	beq	a3,a5,4d84 <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+    4ce8:	07800793          	li	a5,120
+    4cec:	0ef68263          	beq	a3,a5,4dd0 <vprintf+0x1d2>
+        putc(fd, '%');
+    4cf0:	02500593          	li	a1,37
+    4cf4:	855a                	mv	a0,s6
+    4cf6:	e43ff0ef          	jal	4b38 <putc>
+        putc(fd, c0);
+    4cfa:	85ca                	mv	a1,s2
+    4cfc:	855a                	mv	a0,s6
+    4cfe:	e3bff0ef          	jal	4b38 <putc>
+      state = 0;
+    4d02:	4981                	li	s3,0
+    4d04:	b791                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+    4d06:	008b8913          	addi	s2,s7,8
+    4d0a:	4685                	li	a3,1
+    4d0c:	4629                	li	a2,10
+    4d0e:	000ba583          	lw	a1,0(s7)
+    4d12:	855a                	mv	a0,s6
+    4d14:	e43ff0ef          	jal	4b56 <printint>
+        i += 1;
+    4d18:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+    4d1a:	8bca                	mv	s7,s2
+      state = 0;
+    4d1c:	4981                	li	s3,0
+        i += 1;
+    4d1e:	b72d                	j	4c48 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+    4d20:	06400793          	li	a5,100
+    4d24:	02f60763          	beq	a2,a5,4d52 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+    4d28:	07500793          	li	a5,117
+    4d2c:	06f60963          	beq	a2,a5,4d9e <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+    4d30:	07800793          	li	a5,120
+    4d34:	faf61ee3          	bne	a2,a5,4cf0 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+    4d38:	008b8913          	addi	s2,s7,8
+    4d3c:	4681                	li	a3,0
+    4d3e:	4641                	li	a2,16
+    4d40:	000ba583          	lw	a1,0(s7)
+    4d44:	855a                	mv	a0,s6
+    4d46:	e11ff0ef          	jal	4b56 <printint>
+        i += 2;
+    4d4a:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+    4d4c:	8bca                	mv	s7,s2
+      state = 0;
+    4d4e:	4981                	li	s3,0
+        i += 2;
+    4d50:	bde5                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+    4d52:	008b8913          	addi	s2,s7,8
+    4d56:	4685                	li	a3,1
+    4d58:	4629                	li	a2,10
+    4d5a:	000ba583          	lw	a1,0(s7)
+    4d5e:	855a                	mv	a0,s6
+    4d60:	df7ff0ef          	jal	4b56 <printint>
+        i += 2;
+    4d64:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+    4d66:	8bca                	mv	s7,s2
+      state = 0;
+    4d68:	4981                	li	s3,0
+        i += 2;
+    4d6a:	bdf9                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+    4d6c:	008b8913          	addi	s2,s7,8
+    4d70:	4681                	li	a3,0
+    4d72:	4629                	li	a2,10
+    4d74:	000ba583          	lw	a1,0(s7)
+    4d78:	855a                	mv	a0,s6
+    4d7a:	dddff0ef          	jal	4b56 <printint>
+    4d7e:	8bca                	mv	s7,s2
+      state = 0;
+    4d80:	4981                	li	s3,0
+    4d82:	b5d9                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    4d84:	008b8913          	addi	s2,s7,8
+    4d88:	4681                	li	a3,0
+    4d8a:	4629                	li	a2,10
+    4d8c:	000ba583          	lw	a1,0(s7)
+    4d90:	855a                	mv	a0,s6
+    4d92:	dc5ff0ef          	jal	4b56 <printint>
+        i += 1;
+    4d96:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    4d98:	8bca                	mv	s7,s2
+      state = 0;
+    4d9a:	4981                	li	s3,0
+        i += 1;
+    4d9c:	b575                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    4d9e:	008b8913          	addi	s2,s7,8
+    4da2:	4681                	li	a3,0
+    4da4:	4629                	li	a2,10
+    4da6:	000ba583          	lw	a1,0(s7)
+    4daa:	855a                	mv	a0,s6
+    4dac:	dabff0ef          	jal	4b56 <printint>
+        i += 2;
+    4db0:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+    4db2:	8bca                	mv	s7,s2
+      state = 0;
+    4db4:	4981                	li	s3,0
+        i += 2;
+    4db6:	bd49                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+    4db8:	008b8913          	addi	s2,s7,8
+    4dbc:	4681                	li	a3,0
+    4dbe:	4641                	li	a2,16
+    4dc0:	000ba583          	lw	a1,0(s7)
+    4dc4:	855a                	mv	a0,s6
+    4dc6:	d91ff0ef          	jal	4b56 <printint>
+    4dca:	8bca                	mv	s7,s2
+      state = 0;
+    4dcc:	4981                	li	s3,0
+    4dce:	bdad                	j	4c48 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+    4dd0:	008b8913          	addi	s2,s7,8
+    4dd4:	4681                	li	a3,0
+    4dd6:	4641                	li	a2,16
+    4dd8:	000ba583          	lw	a1,0(s7)
+    4ddc:	855a                	mv	a0,s6
+    4dde:	d79ff0ef          	jal	4b56 <printint>
+        i += 1;
+    4de2:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+    4de4:	8bca                	mv	s7,s2
+      state = 0;
+    4de6:	4981                	li	s3,0
+        i += 1;
+    4de8:	b585                	j	4c48 <vprintf+0x4a>
+    4dea:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+    4dec:	008b8d13          	addi	s10,s7,8
+    4df0:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+    4df4:	03000593          	li	a1,48
+    4df8:	855a                	mv	a0,s6
+    4dfa:	d3fff0ef          	jal	4b38 <putc>
+  putc(fd, 'x');
+    4dfe:	07800593          	li	a1,120
+    4e02:	855a                	mv	a0,s6
+    4e04:	d35ff0ef          	jal	4b38 <putc>
+    4e08:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+    4e0a:	00002b97          	auipc	s7,0x2
+    4e0e:	666b8b93          	addi	s7,s7,1638 # 7470 <digits>
+    4e12:	03c9d793          	srli	a5,s3,0x3c
+    4e16:	97de                	add	a5,a5,s7
+    4e18:	0007c583          	lbu	a1,0(a5)
+    4e1c:	855a                	mv	a0,s6
+    4e1e:	d1bff0ef          	jal	4b38 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+    4e22:	0992                	slli	s3,s3,0x4
+    4e24:	397d                	addiw	s2,s2,-1
+    4e26:	fe0916e3          	bnez	s2,4e12 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+    4e2a:	8bea                	mv	s7,s10
+      state = 0;
+    4e2c:	4981                	li	s3,0
+    4e2e:	6d02                	ld	s10,0(sp)
+    4e30:	bd21                	j	4c48 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+    4e32:	008b8993          	addi	s3,s7,8
+    4e36:	000bb903          	ld	s2,0(s7)
+    4e3a:	00090f63          	beqz	s2,4e58 <vprintf+0x25a>
+        for(; *s; s++)
+    4e3e:	00094583          	lbu	a1,0(s2)
+    4e42:	c195                	beqz	a1,4e66 <vprintf+0x268>
+          putc(fd, *s);
+    4e44:	855a                	mv	a0,s6
+    4e46:	cf3ff0ef          	jal	4b38 <putc>
+        for(; *s; s++)
+    4e4a:	0905                	addi	s2,s2,1
+    4e4c:	00094583          	lbu	a1,0(s2)
+    4e50:	f9f5                	bnez	a1,4e44 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+    4e52:	8bce                	mv	s7,s3
+      state = 0;
+    4e54:	4981                	li	s3,0
+    4e56:	bbcd                	j	4c48 <vprintf+0x4a>
+          s = "(null)";
+    4e58:	00002917          	auipc	s2,0x2
+    4e5c:	59890913          	addi	s2,s2,1432 # 73f0 <malloc+0x248c>
+        for(; *s; s++)
+    4e60:	02800593          	li	a1,40
+    4e64:	b7c5                	j	4e44 <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+    4e66:	8bce                	mv	s7,s3
+      state = 0;
+    4e68:	4981                	li	s3,0
+    4e6a:	bbf9                	j	4c48 <vprintf+0x4a>
+    4e6c:	64a6                	ld	s1,72(sp)
+    4e6e:	79e2                	ld	s3,56(sp)
+    4e70:	7a42                	ld	s4,48(sp)
+    4e72:	7aa2                	ld	s5,40(sp)
+    4e74:	7b02                	ld	s6,32(sp)
+    4e76:	6be2                	ld	s7,24(sp)
+    4e78:	6c42                	ld	s8,16(sp)
+    4e7a:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+    4e7c:	60e6                	ld	ra,88(sp)
+    4e7e:	6446                	ld	s0,80(sp)
+    4e80:	6906                	ld	s2,64(sp)
+    4e82:	6125                	addi	sp,sp,96
+    4e84:	8082                	ret
+
+0000000000004e86 <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+    4e86:	715d                	addi	sp,sp,-80
+    4e88:	ec06                	sd	ra,24(sp)
+    4e8a:	e822                	sd	s0,16(sp)
+    4e8c:	1000                	addi	s0,sp,32
+    4e8e:	e010                	sd	a2,0(s0)
+    4e90:	e414                	sd	a3,8(s0)
+    4e92:	e818                	sd	a4,16(s0)
+    4e94:	ec1c                	sd	a5,24(s0)
+    4e96:	03043023          	sd	a6,32(s0)
+    4e9a:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    4e9e:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+    4ea2:	8622                	mv	a2,s0
+    4ea4:	d5bff0ef          	jal	4bfe <vprintf>
+}
+    4ea8:	60e2                	ld	ra,24(sp)
+    4eaa:	6442                	ld	s0,16(sp)
+    4eac:	6161                	addi	sp,sp,80
+    4eae:	8082                	ret
+
+0000000000004eb0 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+    4eb0:	711d                	addi	sp,sp,-96
+    4eb2:	ec06                	sd	ra,24(sp)
+    4eb4:	e822                	sd	s0,16(sp)
+    4eb6:	1000                	addi	s0,sp,32
+    4eb8:	e40c                	sd	a1,8(s0)
+    4eba:	e810                	sd	a2,16(s0)
+    4ebc:	ec14                	sd	a3,24(s0)
+    4ebe:	f018                	sd	a4,32(s0)
+    4ec0:	f41c                	sd	a5,40(s0)
+    4ec2:	03043823          	sd	a6,48(s0)
+    4ec6:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+    4eca:	00840613          	addi	a2,s0,8
+    4ece:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+    4ed2:	85aa                	mv	a1,a0
+    4ed4:	4505                	li	a0,1
+    4ed6:	d29ff0ef          	jal	4bfe <vprintf>
+}
+    4eda:	60e2                	ld	ra,24(sp)
+    4edc:	6442                	ld	s0,16(sp)
+    4ede:	6125                	addi	sp,sp,96
+    4ee0:	8082                	ret
+
+0000000000004ee2 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    4ee2:	1141                	addi	sp,sp,-16
+    4ee4:	e422                	sd	s0,8(sp)
+    4ee6:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+    4ee8:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    4eec:	00003797          	auipc	a5,0x3
+    4ef0:	5647b783          	ld	a5,1380(a5) # 8450 <freep>
+    4ef4:	a02d                	j	4f1e <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+    4ef6:	4618                	lw	a4,8(a2)
+    4ef8:	9f2d                	addw	a4,a4,a1
+    4efa:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    4efe:	6398                	ld	a4,0(a5)
+    4f00:	6310                	ld	a2,0(a4)
+    4f02:	a83d                	j	4f40 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+    4f04:	ff852703          	lw	a4,-8(a0)
+    4f08:	9f31                	addw	a4,a4,a2
+    4f0a:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+    4f0c:	ff053683          	ld	a3,-16(a0)
+    4f10:	a091                	j	4f54 <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    4f12:	6398                	ld	a4,0(a5)
+    4f14:	00e7e463          	bltu	a5,a4,4f1c <free+0x3a>
+    4f18:	00e6ea63          	bltu	a3,a4,4f2c <free+0x4a>
+{
+    4f1c:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    4f1e:	fed7fae3          	bgeu	a5,a3,4f12 <free+0x30>
+    4f22:	6398                	ld	a4,0(a5)
+    4f24:	00e6e463          	bltu	a3,a4,4f2c <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    4f28:	fee7eae3          	bltu	a5,a4,4f1c <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+    4f2c:	ff852583          	lw	a1,-8(a0)
+    4f30:	6390                	ld	a2,0(a5)
+    4f32:	02059813          	slli	a6,a1,0x20
+    4f36:	01c85713          	srli	a4,a6,0x1c
+    4f3a:	9736                	add	a4,a4,a3
+    4f3c:	fae60de3          	beq	a2,a4,4ef6 <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+    4f40:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+    4f44:	4790                	lw	a2,8(a5)
+    4f46:	02061593          	slli	a1,a2,0x20
+    4f4a:	01c5d713          	srli	a4,a1,0x1c
+    4f4e:	973e                	add	a4,a4,a5
+    4f50:	fae68ae3          	beq	a3,a4,4f04 <free+0x22>
+    p->s.ptr = bp->s.ptr;
+    4f54:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+    4f56:	00003717          	auipc	a4,0x3
+    4f5a:	4ef73d23          	sd	a5,1274(a4) # 8450 <freep>
+}
+    4f5e:	6422                	ld	s0,8(sp)
+    4f60:	0141                	addi	sp,sp,16
+    4f62:	8082                	ret
+
+0000000000004f64 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    4f64:	7139                	addi	sp,sp,-64
+    4f66:	fc06                	sd	ra,56(sp)
+    4f68:	f822                	sd	s0,48(sp)
+    4f6a:	f426                	sd	s1,40(sp)
+    4f6c:	ec4e                	sd	s3,24(sp)
+    4f6e:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    4f70:	02051493          	slli	s1,a0,0x20
+    4f74:	9081                	srli	s1,s1,0x20
+    4f76:	04bd                	addi	s1,s1,15
+    4f78:	8091                	srli	s1,s1,0x4
+    4f7a:	0014899b          	addiw	s3,s1,1
+    4f7e:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+    4f80:	00003517          	auipc	a0,0x3
+    4f84:	4d053503          	ld	a0,1232(a0) # 8450 <freep>
+    4f88:	c915                	beqz	a0,4fbc <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    4f8a:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    4f8c:	4798                	lw	a4,8(a5)
+    4f8e:	08977a63          	bgeu	a4,s1,5022 <malloc+0xbe>
+    4f92:	f04a                	sd	s2,32(sp)
+    4f94:	e852                	sd	s4,16(sp)
+    4f96:	e456                	sd	s5,8(sp)
+    4f98:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+    4f9a:	8a4e                	mv	s4,s3
+    4f9c:	0009871b          	sext.w	a4,s3
+    4fa0:	6685                	lui	a3,0x1
+    4fa2:	00d77363          	bgeu	a4,a3,4fa8 <malloc+0x44>
+    4fa6:	6a05                	lui	s4,0x1
+    4fa8:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+    4fac:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    4fb0:	00003917          	auipc	s2,0x3
+    4fb4:	4a090913          	addi	s2,s2,1184 # 8450 <freep>
+  if(p == (char*)-1)
+    4fb8:	5afd                	li	s5,-1
+    4fba:	a081                	j	4ffa <malloc+0x96>
+    4fbc:	f04a                	sd	s2,32(sp)
+    4fbe:	e852                	sd	s4,16(sp)
+    4fc0:	e456                	sd	s5,8(sp)
+    4fc2:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+    4fc4:	0000a797          	auipc	a5,0xa
+    4fc8:	cb478793          	addi	a5,a5,-844 # ec78 <base>
+    4fcc:	00003717          	auipc	a4,0x3
+    4fd0:	48f73223          	sd	a5,1156(a4) # 8450 <freep>
+    4fd4:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+    4fd6:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+    4fda:	b7c1                	j	4f9a <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+    4fdc:	6398                	ld	a4,0(a5)
+    4fde:	e118                	sd	a4,0(a0)
+    4fe0:	a8a9                	j	503a <malloc+0xd6>
+  hp->s.size = nu;
+    4fe2:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+    4fe6:	0541                	addi	a0,a0,16
+    4fe8:	efbff0ef          	jal	4ee2 <free>
+  return freep;
+    4fec:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+    4ff0:	c12d                	beqz	a0,5052 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    4ff2:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+    4ff4:	4798                	lw	a4,8(a5)
+    4ff6:	02977263          	bgeu	a4,s1,501a <malloc+0xb6>
+    if(p == freep)
+    4ffa:	00093703          	ld	a4,0(s2)
+    4ffe:	853e                	mv	a0,a5
+    5000:	fef719e3          	bne	a4,a5,4ff2 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+    5004:	8552                	mv	a0,s4
+    5006:	b03ff0ef          	jal	4b08 <sbrk>
+  if(p == (char*)-1)
+    500a:	fd551ce3          	bne	a0,s5,4fe2 <malloc+0x7e>
+        return 0;
+    500e:	4501                	li	a0,0
+    5010:	7902                	ld	s2,32(sp)
+    5012:	6a42                	ld	s4,16(sp)
+    5014:	6aa2                	ld	s5,8(sp)
+    5016:	6b02                	ld	s6,0(sp)
+    5018:	a03d                	j	5046 <malloc+0xe2>
+    501a:	7902                	ld	s2,32(sp)
+    501c:	6a42                	ld	s4,16(sp)
+    501e:	6aa2                	ld	s5,8(sp)
+    5020:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+    5022:	fae48de3          	beq	s1,a4,4fdc <malloc+0x78>
+        p->s.size -= nunits;
+    5026:	4137073b          	subw	a4,a4,s3
+    502a:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+    502c:	02071693          	slli	a3,a4,0x20
+    5030:	01c6d713          	srli	a4,a3,0x1c
+    5034:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+    5036:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+    503a:	00003717          	auipc	a4,0x3
+    503e:	40a73b23          	sd	a0,1046(a4) # 8450 <freep>
+      return (void*)(p + 1);
+    5042:	01078513          	addi	a0,a5,16
+  }
+}
+    5046:	70e2                	ld	ra,56(sp)
+    5048:	7442                	ld	s0,48(sp)
+    504a:	74a2                	ld	s1,40(sp)
+    504c:	69e2                	ld	s3,24(sp)
+    504e:	6121                	addi	sp,sp,64
+    5050:	8082                	ret
+    5052:	7902                	ld	s2,32(sp)
+    5054:	6a42                	ld	s4,16(sp)
+    5056:	6aa2                	ld	s5,8(sp)
+    5058:	6b02                	ld	s6,0(sp)
+    505a:	b7f5                	j	5046 <malloc+0xe2>
diff --git a/user/usertests.c b/user/usertests.c
new file mode 100644
index 0000000..28b53f9
--- /dev/null
+++ b/user/usertests.c
@@ -0,0 +1,3118 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+#include "kernel/fcntl.h"
+#include "kernel/syscall.h"
+#include "kernel/memlayout.h"
+#include "kernel/riscv.h"
+
+//
+// Tests xv6 system calls.  usertests without arguments runs them all
+// and usertests <name> runs <name> test. The test runner creates for
+// each test a process and based on the exit status of the process,
+// the test runner reports "OK" or "FAILED".  Some tests result in
+// kernel printing usertrap messages, which can be ignored if test
+// prints "OK".
+//
+
+#define BUFSZ  ((MAXOPBLOCKS+2)*BSIZE)
+
+char buf[BUFSZ];
+
+//
+// Section with tests that run fairly quickly.  Use -q if you want to
+// run just those.  With -q usertests also runs the ones that take a
+// fair of time.
+//
+
+// what if you pass ridiculous pointers to system calls
+// that read user memory with copyin?
+void
+copyin(char *s)
+{
+  uint64 addrs[] = { 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+                     0xffffffffffffffff };
+
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    uint64 addr = addrs[ai];
+    
+    int fd = open("copyin1", O_CREATE|O_WRONLY);
+    if(fd < 0){
+      printf("open(copyin1) failed\n");
+      exit(1);
+    }
+    int n = write(fd, (void*)addr, 8192);
+    if(n >= 0){
+      printf("write(fd, %p, 8192) returned %d, not -1\n", (void*)addr, n);
+      exit(1);
+    }
+    close(fd);
+    unlink("copyin1");
+    
+    n = write(1, (char*)addr, 8192);
+    if(n > 0){
+      printf("write(1, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+      exit(1);
+    }
+    
+    int fds[2];
+    if(pipe(fds) < 0){
+      printf("pipe() failed\n");
+      exit(1);
+    }
+    n = write(fds[1], (char*)addr, 8192);
+    if(n > 0){
+      printf("write(pipe, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+      exit(1);
+    }
+    close(fds[0]);
+    close(fds[1]);
+  }
+}
+
+// what if you pass ridiculous pointers to system calls
+// that write user memory with copyout?
+void
+copyout(char *s)
+{
+  uint64 addrs[] = { 0LL, 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+                     0xffffffffffffffff };
+
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    uint64 addr = addrs[ai];
+
+    int fd = open("README", 0);
+    if(fd < 0){
+      printf("open(README) failed\n");
+      exit(1);
+    }
+    int n = read(fd, (void*)addr, 8192);
+    if(n > 0){
+      printf("read(fd, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+      exit(1);
+    }
+    close(fd);
+
+    int fds[2];
+    if(pipe(fds) < 0){
+      printf("pipe() failed\n");
+      exit(1);
+    }
+    n = write(fds[1], "x", 1);
+    if(n != 1){
+      printf("pipe write failed\n");
+      exit(1);
+    }
+    n = read(fds[0], (void*)addr, 8192);
+    if(n > 0){
+      printf("read(pipe, %p, 8192) returned %d, not -1 or 0\n", (void*)addr, n);
+      exit(1);
+    }
+    close(fds[0]);
+    close(fds[1]);
+  }
+}
+
+// what if you pass ridiculous string pointers to system calls?
+void
+copyinstr1(char *s)
+{
+  uint64 addrs[] = { 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+                     0xffffffffffffffff };
+
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    uint64 addr = addrs[ai];
+
+    int fd = open((char *)addr, O_CREATE|O_WRONLY);
+    if(fd >= 0){
+      printf("open(%p) returned %d, not -1\n", (void*)addr, fd);
+      exit(1);
+    }
+  }
+}
+
+// what if a string system call argument is exactly the size
+// of the kernel buffer it is copied into, so that the null
+// would fall just beyond the end of the kernel buffer?
+void
+copyinstr2(char *s)
+{
+  char b[MAXPATH+1];
+
+  for(int i = 0; i < MAXPATH; i++)
+    b[i] = 'x';
+  b[MAXPATH] = '\0';
+  
+  int ret = unlink(b);
+  if(ret != -1){
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    exit(1);
+  }
+
+  int fd = open(b, O_CREATE | O_WRONLY);
+  if(fd != -1){
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    exit(1);
+  }
+
+  ret = link(b, b);
+  if(ret != -1){
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    exit(1);
+  }
+
+  char *args[] = { "xx", 0 };
+  ret = exec(b, args);
+  if(ret != -1){
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    exit(1);
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){
+    static char big[PGSIZE+1];
+    for(int i = 0; i < PGSIZE; i++)
+      big[i] = 'x';
+    big[PGSIZE] = '\0';
+    char *args2[] = { big, big, big, 0 };
+    ret = exec("echo", args2);
+    if(ret != -1){
+      printf("exec(echo, BIG) returned %d, not -1\n", fd);
+      exit(1);
+    }
+    exit(747); // OK
+  }
+
+  int st = 0;
+  wait(&st);
+  if(st != 747){
+    printf("exec(echo, BIG) succeeded, should have failed\n");
+    exit(1);
+  }
+}
+
+// what if a string argument crosses over the end of last user page?
+void
+copyinstr3(char *s)
+{
+  sbrk(8192);
+  uint64 top = (uint64) sbrk(0);
+  if((top % PGSIZE) != 0){
+    sbrk(PGSIZE - (top % PGSIZE));
+  }
+  top = (uint64) sbrk(0);
+  if(top % PGSIZE){
+    printf("oops\n");
+    exit(1);
+  }
+
+  char *b = (char *) (top - 1);
+  *b = 'x';
+
+  int ret = unlink(b);
+  if(ret != -1){
+    printf("unlink(%s) returned %d, not -1\n", b, ret);
+    exit(1);
+  }
+
+  int fd = open(b, O_CREATE | O_WRONLY);
+  if(fd != -1){
+    printf("open(%s) returned %d, not -1\n", b, fd);
+    exit(1);
+  }
+
+  ret = link(b, b);
+  if(ret != -1){
+    printf("link(%s, %s) returned %d, not -1\n", b, b, ret);
+    exit(1);
+  }
+
+  char *args[] = { "xx", 0 };
+  ret = exec(b, args);
+  if(ret != -1){
+    printf("exec(%s) returned %d, not -1\n", b, fd);
+    exit(1);
+  }
+}
+
+// See if the kernel refuses to read/write user memory that the
+// application doesn't have anymore, because it returned it.
+void
+rwsbrk()
+{
+  int fd, n;
+  
+  uint64 a = (uint64) sbrk(8192);
+
+  if(a == 0xffffffffffffffffLL) {
+    printf("sbrk(rwsbrk) failed\n");
+    exit(1);
+  }
+  
+  if ((uint64) sbrk(-8192) ==  0xffffffffffffffffLL) {
+    printf("sbrk(rwsbrk) shrink failed\n");
+    exit(1);
+  }
+
+  fd = open("rwsbrk", O_CREATE|O_WRONLY);
+  if(fd < 0){
+    printf("open(rwsbrk) failed\n");
+    exit(1);
+  }
+  n = write(fd, (void*)(a+4096), 1024);
+  if(n >= 0){
+    printf("write(fd, %p, 1024) returned %d, not -1\n", (void*)a+4096, n);
+    exit(1);
+  }
+  close(fd);
+  unlink("rwsbrk");
+
+  fd = open("README", O_RDONLY);
+  if(fd < 0){
+    printf("open(rwsbrk) failed\n");
+    exit(1);
+  }
+  n = read(fd, (void*)(a+4096), 10);
+  if(n >= 0){
+    printf("read(fd, %p, 10) returned %d, not -1\n", (void*)a+4096, n);
+    exit(1);
+  }
+  close(fd);
+  
+  exit(0);
+}
+
+// test O_TRUNC.
+void
+truncate1(char *s)
+{
+  char buf[32];
+  
+  unlink("truncfile");
+  int fd1 = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+  write(fd1, "abcd", 4);
+  close(fd1);
+
+  int fd2 = open("truncfile", O_RDONLY);
+  int n = read(fd2, buf, sizeof(buf));
+  if(n != 4){
+    printf("%s: read %d bytes, wanted 4\n", s, n);
+    exit(1);
+  }
+
+  fd1 = open("truncfile", O_WRONLY|O_TRUNC);
+
+  int fd3 = open("truncfile", O_RDONLY);
+  n = read(fd3, buf, sizeof(buf));
+  if(n != 0){
+    printf("aaa fd3=%d\n", fd3);
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+    exit(1);
+  }
+
+  n = read(fd2, buf, sizeof(buf));
+  if(n != 0){
+    printf("bbb fd2=%d\n", fd2);
+    printf("%s: read %d bytes, wanted 0\n", s, n);
+    exit(1);
+  }
+  
+  write(fd1, "abcdef", 6);
+
+  n = read(fd3, buf, sizeof(buf));
+  if(n != 6){
+    printf("%s: read %d bytes, wanted 6\n", s, n);
+    exit(1);
+  }
+
+  n = read(fd2, buf, sizeof(buf));
+  if(n != 2){
+    printf("%s: read %d bytes, wanted 2\n", s, n);
+    exit(1);
+  }
+
+  unlink("truncfile");
+
+  close(fd1);
+  close(fd2);
+  close(fd3);
+}
+
+// write to an open FD whose file has just been truncated.
+// this causes a write at an offset beyond the end of the file.
+// such writes fail on xv6 (unlike POSIX) but at least
+// they don't crash.
+void
+truncate2(char *s)
+{
+  unlink("truncfile");
+
+  int fd1 = open("truncfile", O_CREATE|O_TRUNC|O_WRONLY);
+  write(fd1, "abcd", 4);
+
+  int fd2 = open("truncfile", O_TRUNC|O_WRONLY);
+
+  int n = write(fd1, "x", 1);
+  if(n != -1){
+    printf("%s: write returned %d, expected -1\n", s, n);
+    exit(1);
+  }
+
+  unlink("truncfile");
+  close(fd1);
+  close(fd2);
+}
+
+void
+truncate3(char *s)
+{
+  int pid, xstatus;
+
+  close(open("truncfile", O_CREATE|O_TRUNC|O_WRONLY));
+  
+  pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+
+  if(pid == 0){
+    for(int i = 0; i < 100; i++){
+      char buf[32];
+      int fd = open("truncfile", O_WRONLY);
+      if(fd < 0){
+        printf("%s: open failed\n", s);
+        exit(1);
+      }
+      int n = write(fd, "1234567890", 10);
+      if(n != 10){
+        printf("%s: write got %d, expected 10\n", s, n);
+        exit(1);
+      }
+      close(fd);
+      fd = open("truncfile", O_RDONLY);
+      read(fd, buf, sizeof(buf));
+      close(fd);
+    }
+    exit(0);
+  }
+
+  for(int i = 0; i < 150; i++){
+    int fd = open("truncfile", O_CREATE|O_WRONLY|O_TRUNC);
+    if(fd < 0){
+      printf("%s: open failed\n", s);
+      exit(1);
+    }
+    int n = write(fd, "xxx", 3);
+    if(n != 3){
+      printf("%s: write got %d, expected 3\n", s, n);
+      exit(1);
+    }
+    close(fd);
+  }
+
+  wait(&xstatus);
+  unlink("truncfile");
+  exit(xstatus);
+}
+  
+
+// does chdir() call iput(p->cwd) in a transaction?
+void
+iputtest(char *s)
+{
+  if(mkdir("iputdir") < 0){
+    printf("%s: mkdir failed\n", s);
+    exit(1);
+  }
+  if(chdir("iputdir") < 0){
+    printf("%s: chdir iputdir failed\n", s);
+    exit(1);
+  }
+  if(unlink("../iputdir") < 0){
+    printf("%s: unlink ../iputdir failed\n", s);
+    exit(1);
+  }
+  if(chdir("/") < 0){
+    printf("%s: chdir / failed\n", s);
+    exit(1);
+  }
+}
+
+// does exit() call iput(p->cwd) in a transaction?
+void
+exitiputtest(char *s)
+{
+  int pid, xstatus;
+
+  pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+  if(pid == 0){
+    if(mkdir("iputdir") < 0){
+      printf("%s: mkdir failed\n", s);
+      exit(1);
+    }
+    if(chdir("iputdir") < 0){
+      printf("%s: child chdir failed\n", s);
+      exit(1);
+    }
+    if(unlink("../iputdir") < 0){
+      printf("%s: unlink ../iputdir failed\n", s);
+      exit(1);
+    }
+    exit(0);
+  }
+  wait(&xstatus);
+  exit(xstatus);
+}
+
+// does the error path in open() for attempt to write a
+// directory call iput() in a transaction?
+// needs a hacked kernel that pauses just after the namei()
+// call in sys_open():
+//    if((ip = namei(path)) == 0)
+//      return -1;
+//    {
+//      int i;
+//      for(i = 0; i < 10000; i++)
+//        yield();
+//    }
+void
+openiputtest(char *s)
+{
+  int pid, xstatus;
+
+  if(mkdir("oidir") < 0){
+    printf("%s: mkdir oidir failed\n", s);
+    exit(1);
+  }
+  pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+  if(pid == 0){
+    int fd = open("oidir", O_RDWR);
+    if(fd >= 0){
+      printf("%s: open directory for write succeeded\n", s);
+      exit(1);
+    }
+    exit(0);
+  }
+  sleep(1);
+  if(unlink("oidir") != 0){
+    printf("%s: unlink failed\n", s);
+    exit(1);
+  }
+  wait(&xstatus);
+  exit(xstatus);
+}
+
+// simple file system tests
+
+void
+opentest(char *s)
+{
+  int fd;
+
+  fd = open("echo", 0);
+  if(fd < 0){
+    printf("%s: open echo failed!\n", s);
+    exit(1);
+  }
+  close(fd);
+  fd = open("doesnotexist", 0);
+  if(fd >= 0){
+    printf("%s: open doesnotexist succeeded!\n", s);
+    exit(1);
+  }
+}
+
+void
+writetest(char *s)
+{
+  int fd;
+  int i;
+  enum { N=100, SZ=10 };
+  
+  fd = open("small", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf("%s: error: creat small failed!\n", s);
+    exit(1);
+  }
+  for(i = 0; i < N; i++){
+    if(write(fd, "aaaaaaaaaa", SZ) != SZ){
+      printf("%s: error: write aa %d new file failed\n", s, i);
+      exit(1);
+    }
+    if(write(fd, "bbbbbbbbbb", SZ) != SZ){
+      printf("%s: error: write bb %d new file failed\n", s, i);
+      exit(1);
+    }
+  }
+  close(fd);
+  fd = open("small", O_RDONLY);
+  if(fd < 0){
+    printf("%s: error: open small failed!\n", s);
+    exit(1);
+  }
+  i = read(fd, buf, N*SZ*2);
+  if(i != N*SZ*2){
+    printf("%s: read failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(unlink("small") < 0){
+    printf("%s: unlink small failed\n", s);
+    exit(1);
+  }
+}
+
+void
+writebig(char *s)
+{
+  int i, fd, n;
+
+  fd = open("big", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf("%s: error: creat big failed!\n", s);
+    exit(1);
+  }
+
+  for(i = 0; i < MAXFILE; i++){
+    ((int*)buf)[0] = i;
+    if(write(fd, buf, BSIZE) != BSIZE){
+      printf("%s: error: write big file failed i=%d\n", s, i);
+      exit(1);
+    }
+  }
+
+  close(fd);
+
+  fd = open("big", O_RDONLY);
+  if(fd < 0){
+    printf("%s: error: open big failed!\n", s);
+    exit(1);
+  }
+
+  n = 0;
+  for(;;){
+    i = read(fd, buf, BSIZE);
+    if(i == 0){
+      if(n != MAXFILE){
+        printf("%s: read only %d blocks from big", s, n);
+        exit(1);
+      }
+      break;
+    } else if(i != BSIZE){
+      printf("%s: read failed %d\n", s, i);
+      exit(1);
+    }
+    if(((int*)buf)[0] != n){
+      printf("%s: read content of block %d is %d\n", s,
+             n, ((int*)buf)[0]);
+      exit(1);
+    }
+    n++;
+  }
+  close(fd);
+  if(unlink("big") < 0){
+    printf("%s: unlink big failed\n", s);
+    exit(1);
+  }
+}
+
+// many creates, followed by unlink test
+void
+createtest(char *s)
+{
+  int i, fd;
+  enum { N=52 };
+
+  char name[3];
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < N; i++){
+    name[1] = '0' + i;
+    fd = open(name, O_CREATE|O_RDWR);
+    close(fd);
+  }
+  name[0] = 'a';
+  name[2] = '\0';
+  for(i = 0; i < N; i++){
+    name[1] = '0' + i;
+    unlink(name);
+  }
+}
+
+void dirtest(char *s)
+{
+  if(mkdir("dir0") < 0){
+    printf("%s: mkdir failed\n", s);
+    exit(1);
+  }
+
+  if(chdir("dir0") < 0){
+    printf("%s: chdir dir0 failed\n", s);
+    exit(1);
+  }
+
+  if(chdir("..") < 0){
+    printf("%s: chdir .. failed\n", s);
+    exit(1);
+  }
+
+  if(unlink("dir0") < 0){
+    printf("%s: unlink dir0 failed\n", s);
+    exit(1);
+  }
+}
+
+void
+exectest(char *s)
+{
+  int fd, xstatus, pid;
+  char *echoargv[] = { "echo", "OK", 0 };
+  char buf[3];
+
+  unlink("echo-ok");
+  pid = fork();
+  if(pid < 0) {
+     printf("%s: fork failed\n", s);
+     exit(1);
+  }
+  if(pid == 0) {
+    close(1);
+    fd = open("echo-ok", O_CREATE|O_WRONLY);
+    if(fd < 0) {
+      printf("%s: create failed\n", s);
+      exit(1);
+    }
+    if(fd != 1) {
+      printf("%s: wrong fd\n", s);
+      exit(1);
+    }
+    if(exec("echo", echoargv) < 0){
+      printf("%s: exec echo failed\n", s);
+      exit(1);
+    }
+    // won't get to here
+  }
+  if (wait(&xstatus) != pid) {
+    printf("%s: wait failed!\n", s);
+  }
+  if(xstatus != 0)
+    exit(xstatus);
+
+  fd = open("echo-ok", O_RDONLY);
+  if(fd < 0) {
+    printf("%s: open failed\n", s);
+    exit(1);
+  }
+  if (read(fd, buf, 2) != 2) {
+    printf("%s: read failed\n", s);
+    exit(1);
+  }
+  unlink("echo-ok");
+  if(buf[0] == 'O' && buf[1] == 'K')
+    exit(0);
+  else {
+    printf("%s: wrong output\n", s);
+    exit(1);
+  }
+
+}
+
+// simple fork and pipe read/write
+
+void
+pipe1(char *s)
+{
+  int fds[2], pid, xstatus;
+  int seq, i, n, cc, total;
+  enum { N=5, SZ=1033 };
+  
+  if(pipe(fds) != 0){
+    printf("%s: pipe() failed\n", s);
+    exit(1);
+  }
+  pid = fork();
+  seq = 0;
+  if(pid == 0){
+    close(fds[0]);
+    for(n = 0; n < N; n++){
+      for(i = 0; i < SZ; i++)
+        buf[i] = seq++;
+      if(write(fds[1], buf, SZ) != SZ){
+        printf("%s: pipe1 oops 1\n", s);
+        exit(1);
+      }
+    }
+    exit(0);
+  } else if(pid > 0){
+    close(fds[1]);
+    total = 0;
+    cc = 1;
+    while((n = read(fds[0], buf, cc)) > 0){
+      for(i = 0; i < n; i++){
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+          printf("%s: pipe1 oops 2\n", s);
+          return;
+        }
+      }
+      total += n;
+      cc = cc * 2;
+      if(cc > sizeof(buf))
+        cc = sizeof(buf);
+    }
+    if(total != N * SZ){
+      printf("%s: pipe1 oops 3 total %d\n", s, total);
+      exit(1);
+    }
+    close(fds[0]);
+    wait(&xstatus);
+    exit(xstatus);
+  } else {
+    printf("%s: fork() failed\n", s);
+    exit(1);
+  }
+}
+
+
+// test if child is killed (status = -1)
+void
+killstatus(char *s)
+{
+  int xst;
+  
+  for(int i = 0; i < 100; i++){
+    int pid1 = fork();
+    if(pid1 < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid1 == 0){
+      while(1) {
+        getpid();
+      }
+      exit(0);
+    }
+    sleep(1);
+    kill(pid1);
+    wait(&xst);
+    if(xst != -1) {
+       printf("%s: status should be -1\n", s);
+       exit(1);
+    }
+  }
+  exit(0);
+}
+
+// meant to be run w/ at most two CPUs
+void
+preempt(char *s)
+{
+  int pid1, pid2, pid3;
+  int pfds[2];
+
+  pid1 = fork();
+  if(pid1 < 0) {
+    printf("%s: fork failed", s);
+    exit(1);
+  }
+  if(pid1 == 0)
+    for(;;)
+      ;
+
+  pid2 = fork();
+  if(pid2 < 0) {
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+  if(pid2 == 0)
+    for(;;)
+      ;
+
+  pipe(pfds);
+  pid3 = fork();
+  if(pid3 < 0) {
+     printf("%s: fork failed\n", s);
+     exit(1);
+  }
+  if(pid3 == 0){
+    close(pfds[0]);
+    if(write(pfds[1], "x", 1) != 1)
+      printf("%s: preempt write error", s);
+    close(pfds[1]);
+    for(;;)
+      ;
+  }
+
+  close(pfds[1]);
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+    printf("%s: preempt read error", s);
+    return;
+  }
+  close(pfds[0]);
+  printf("kill... ");
+  kill(pid1);
+  kill(pid2);
+  kill(pid3);
+  printf("wait... ");
+  wait(0);
+  wait(0);
+  wait(0);
+}
+
+// try to find any races between exit and wait
+void
+exitwait(char *s)
+{
+  int i, pid;
+
+  for(i = 0; i < 100; i++){
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid){
+      int xstate;
+      if(wait(&xstate) != pid){
+        printf("%s: wait wrong pid\n", s);
+        exit(1);
+      }
+      if(i != xstate) {
+        printf("%s: wait wrong exit status\n", s);
+        exit(1);
+      }
+    } else {
+      exit(i);
+    }
+  }
+}
+
+// try to find races in the reparenting
+// code that handles a parent exiting
+// when it still has live children.
+void
+reparent(char *s)
+{
+  int master_pid = getpid();
+  for(int i = 0; i < 200; i++){
+    int pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid){
+      if(wait(0) != pid){
+        printf("%s: wait wrong pid\n", s);
+        exit(1);
+      }
+    } else {
+      int pid2 = fork();
+      if(pid2 < 0){
+        kill(master_pid);
+        exit(1);
+      }
+      exit(0);
+    }
+  }
+  exit(0);
+}
+
+// what if two children exit() at the same time?
+void
+twochildren(char *s)
+{
+  for(int i = 0; i < 1000; i++){
+    int pid1 = fork();
+    if(pid1 < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid1 == 0){
+      exit(0);
+    } else {
+      int pid2 = fork();
+      if(pid2 < 0){
+        printf("%s: fork failed\n", s);
+        exit(1);
+      }
+      if(pid2 == 0){
+        exit(0);
+      } else {
+        wait(0);
+        wait(0);
+      }
+    }
+  }
+}
+
+// concurrent forks to try to expose locking bugs.
+void
+forkfork(char *s)
+{
+  enum { N=2 };
+  
+  for(int i = 0; i < N; i++){
+    int pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed", s);
+      exit(1);
+    }
+    if(pid == 0){
+      for(int j = 0; j < 200; j++){
+        int pid1 = fork();
+        if(pid1 < 0){
+          exit(1);
+        }
+        if(pid1 == 0){
+          exit(0);
+        }
+        wait(0);
+      }
+      exit(0);
+    }
+  }
+
+  int xstatus;
+  for(int i = 0; i < N; i++){
+    wait(&xstatus);
+    if(xstatus != 0) {
+      printf("%s: fork in child failed", s);
+      exit(1);
+    }
+  }
+}
+
+void
+forkforkfork(char *s)
+{
+  unlink("stopforking");
+
+  int pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed", s);
+    exit(1);
+  }
+  if(pid == 0){
+    while(1){
+      int fd = open("stopforking", 0);
+      if(fd >= 0){
+        exit(0);
+      }
+      if(fork() < 0){
+        close(open("stopforking", O_CREATE|O_RDWR));
+      }
+    }
+
+    exit(0);
+  }
+
+  sleep(20); // two seconds
+  close(open("stopforking", O_CREATE|O_RDWR));
+  wait(0);
+  sleep(10); // one second
+}
+
+// regression test. does reparent() violate the parent-then-child
+// locking order when giving away a child to init, so that exit()
+// deadlocks against init's wait()? also used to trigger a "panic:
+// release" due to exit() releasing a different p->parent->lock than
+// it acquired.
+void
+reparent2(char *s)
+{
+  for(int i = 0; i < 800; i++){
+    int pid1 = fork();
+    if(pid1 < 0){
+      printf("fork failed\n");
+      exit(1);
+    }
+    if(pid1 == 0){
+      fork();
+      fork();
+      exit(0);
+    }
+    wait(0);
+  }
+
+  exit(0);
+}
+
+// allocate all mem, free it, and allocate again
+void
+mem(char *s)
+{
+  void *m1, *m2;
+  int pid;
+
+  if((pid = fork()) == 0){
+    m1 = 0;
+    while((m2 = malloc(10001)) != 0){
+      *(char**)m2 = m1;
+      m1 = m2;
+    }
+    while(m1){
+      m2 = *(char**)m1;
+      free(m1);
+      m1 = m2;
+    }
+    m1 = malloc(1024*20);
+    if(m1 == 0){
+      printf("%s: couldn't allocate mem?!!\n", s);
+      exit(1);
+    }
+    free(m1);
+    exit(0);
+  } else {
+    int xstatus;
+    wait(&xstatus);
+    if(xstatus == -1){
+      // probably page fault, so might be lazy lab,
+      // so OK.
+      exit(0);
+    }
+    exit(xstatus);
+  }
+}
+
+// More file system tests
+
+// two processes write to the same file descriptor
+// is the offset shared? does inode locking work?
+void
+sharedfd(char *s)
+{
+  int fd, pid, i, n, nc, np;
+  enum { N = 1000, SZ=10};
+  char buf[SZ];
+
+  unlink("sharedfd");
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf("%s: cannot open sharedfd for writing", s);
+    exit(1);
+  }
+  pid = fork();
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+  for(i = 0; i < N; i++){
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+      printf("%s: write sharedfd failed\n", s);
+      exit(1);
+    }
+  }
+  if(pid == 0) {
+    exit(0);
+  } else {
+    int xstatus;
+    wait(&xstatus);
+    if(xstatus != 0)
+      exit(xstatus);
+  }
+  
+  close(fd);
+  fd = open("sharedfd", 0);
+  if(fd < 0){
+    printf("%s: cannot open sharedfd for reading\n", s);
+    exit(1);
+  }
+  nc = np = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i = 0; i < sizeof(buf); i++){
+      if(buf[i] == 'c')
+        nc++;
+      if(buf[i] == 'p')
+        np++;
+    }
+  }
+  close(fd);
+  unlink("sharedfd");
+  if(nc == N*SZ && np == N*SZ){
+    exit(0);
+  } else {
+    printf("%s: nc/np test fails\n", s);
+    exit(1);
+  }
+}
+
+// four processes write different files at the same
+// time, to test block allocation.
+void
+fourfiles(char *s)
+{
+  int fd, pid, i, j, n, total, pi;
+  char *names[] = { "f0", "f1", "f2", "f3" };
+  char *fname;
+  enum { N=12, NCHILD=4, SZ=500 };
+  
+  for(pi = 0; pi < NCHILD; pi++){
+    fname = names[pi];
+    unlink(fname);
+
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+
+    if(pid == 0){
+      fd = open(fname, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf("%s: create failed\n", s);
+        exit(1);
+      }
+
+      memset(buf, '0'+pi, SZ);
+      for(i = 0; i < N; i++){
+        if((n = write(fd, buf, SZ)) != SZ){
+          printf("write failed %d\n", n);
+          exit(1);
+        }
+      }
+      exit(0);
+    }
+  }
+
+  int xstatus;
+  for(pi = 0; pi < NCHILD; pi++){
+    wait(&xstatus);
+    if(xstatus != 0)
+      exit(xstatus);
+  }
+
+  for(i = 0; i < NCHILD; i++){
+    fname = names[i];
+    fd = open(fname, 0);
+    total = 0;
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+      for(j = 0; j < n; j++){
+        if(buf[j] != '0'+i){
+          printf("%s: wrong char\n", s);
+          exit(1);
+        }
+      }
+      total += n;
+    }
+    close(fd);
+    if(total != N*SZ){
+      printf("wrong length %d\n", total);
+      exit(1);
+    }
+    unlink(fname);
+  }
+}
+
+// four processes create and delete different files in same directory
+void
+createdelete(char *s)
+{
+  enum { N = 20, NCHILD=4 };
+  int pid, i, fd, pi;
+  char name[32];
+
+  for(pi = 0; pi < NCHILD; pi++){
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+
+    if(pid == 0){
+      name[0] = 'p' + pi;
+      name[2] = '\0';
+      for(i = 0; i < N; i++){
+        name[1] = '0' + i;
+        fd = open(name, O_CREATE | O_RDWR);
+        if(fd < 0){
+          printf("%s: create failed\n", s);
+          exit(1);
+        }
+        close(fd);
+        if(i > 0 && (i % 2 ) == 0){
+          name[1] = '0' + (i / 2);
+          if(unlink(name) < 0){
+            printf("%s: unlink failed\n", s);
+            exit(1);
+          }
+        }
+      }
+      exit(0);
+    }
+  }
+
+  int xstatus;
+  for(pi = 0; pi < NCHILD; pi++){
+    wait(&xstatus);
+    if(xstatus != 0)
+      exit(1);
+  }
+
+  name[0] = name[1] = name[2] = 0;
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < NCHILD; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+      fd = open(name, 0);
+      if((i == 0 || i >= N/2) && fd < 0){
+        printf("%s: oops createdelete %s didn't exist\n", s, name);
+        exit(1);
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+        printf("%s: oops createdelete %s did exist\n", s, name);
+        exit(1);
+      }
+      if(fd >= 0)
+        close(fd);
+    }
+  }
+
+  for(i = 0; i < N; i++){
+    for(pi = 0; pi < NCHILD; pi++){
+      name[0] = 'p' + pi;
+      name[1] = '0' + i;
+      unlink(name);
+    }
+  }
+}
+
+// can I unlink a file and still read it?
+void
+unlinkread(char *s)
+{
+  enum { SZ = 5 };
+  int fd, fd1;
+
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf("%s: create unlinkread failed\n", s);
+    exit(1);
+  }
+  write(fd, "hello", SZ);
+  close(fd);
+
+  fd = open("unlinkread", O_RDWR);
+  if(fd < 0){
+    printf("%s: open unlinkread failed\n", s);
+    exit(1);
+  }
+  if(unlink("unlinkread") != 0){
+    printf("%s: unlink unlinkread failed\n", s);
+    exit(1);
+  }
+
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+  write(fd1, "yyy", 3);
+  close(fd1);
+
+  if(read(fd, buf, sizeof(buf)) != SZ){
+    printf("%s: unlinkread read failed", s);
+    exit(1);
+  }
+  if(buf[0] != 'h'){
+    printf("%s: unlinkread wrong data\n", s);
+    exit(1);
+  }
+  if(write(fd, buf, 10) != 10){
+    printf("%s: unlinkread write failed\n", s);
+    exit(1);
+  }
+  close(fd);
+  unlink("unlinkread");
+}
+
+void
+linktest(char *s)
+{
+  enum { SZ = 5 };
+  int fd;
+
+  unlink("lf1");
+  unlink("lf2");
+
+  fd = open("lf1", O_CREATE|O_RDWR);
+  if(fd < 0){
+    printf("%s: create lf1 failed\n", s);
+    exit(1);
+  }
+  if(write(fd, "hello", SZ) != SZ){
+    printf("%s: write lf1 failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(link("lf1", "lf2") < 0){
+    printf("%s: link lf1 lf2 failed\n", s);
+    exit(1);
+  }
+  unlink("lf1");
+
+  if(open("lf1", 0) >= 0){
+    printf("%s: unlinked lf1 but it is still there!\n", s);
+    exit(1);
+  }
+
+  fd = open("lf2", 0);
+  if(fd < 0){
+    printf("%s: open lf2 failed\n", s);
+    exit(1);
+  }
+  if(read(fd, buf, sizeof(buf)) != SZ){
+    printf("%s: read lf2 failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(link("lf2", "lf2") >= 0){
+    printf("%s: link lf2 lf2 succeeded! oops\n", s);
+    exit(1);
+  }
+
+  unlink("lf2");
+  if(link("lf2", "lf1") >= 0){
+    printf("%s: link non-existent succeeded! oops\n", s);
+    exit(1);
+  }
+
+  if(link(".", "lf1") >= 0){
+    printf("%s: link . lf1 succeeded! oops\n", s);
+    exit(1);
+  }
+}
+
+// test concurrent create/link/unlink of the same file
+void
+concreate(char *s)
+{
+  enum { N = 40 };
+  char file[3];
+  int i, pid, n, fd;
+  char fa[N];
+  struct {
+    ushort inum;
+    char name[DIRSIZ];
+  } de;
+
+  file[0] = 'C';
+  file[2] = '\0';
+  for(i = 0; i < N; i++){
+    file[1] = '0' + i;
+    unlink(file);
+    pid = fork();
+    if(pid && (i % 3) == 1){
+      link("C0", file);
+    } else if(pid == 0 && (i % 5) == 1){
+      link("C0", file);
+    } else {
+      fd = open(file, O_CREATE | O_RDWR);
+      if(fd < 0){
+        printf("concreate create %s failed\n", file);
+        exit(1);
+      }
+      close(fd);
+    }
+    if(pid == 0) {
+      exit(0);
+    } else {
+      int xstatus;
+      wait(&xstatus);
+      if(xstatus != 0)
+        exit(1);
+    }
+  }
+
+  memset(fa, 0, sizeof(fa));
+  fd = open(".", 0);
+  n = 0;
+  while(read(fd, &de, sizeof(de)) > 0){
+    if(de.inum == 0)
+      continue;
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+      i = de.name[1] - '0';
+      if(i < 0 || i >= sizeof(fa)){
+        printf("%s: concreate weird file %s\n", s, de.name);
+        exit(1);
+      }
+      if(fa[i]){
+        printf("%s: concreate duplicate file %s\n", s, de.name);
+        exit(1);
+      }
+      fa[i] = 1;
+      n++;
+    }
+  }
+  close(fd);
+
+  if(n != N){
+    printf("%s: concreate not enough files in directory listing\n", s);
+    exit(1);
+  }
+
+  for(i = 0; i < N; i++){
+    file[1] = '0' + i;
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(((i % 3) == 0 && pid == 0) ||
+       ((i % 3) == 1 && pid != 0)){
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+      close(open(file, 0));
+    } else {
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+      unlink(file);
+    }
+    if(pid == 0)
+      exit(0);
+    else
+      wait(0);
+  }
+}
+
+// another concurrent link/unlink/create test,
+// to look for deadlocks.
+void
+linkunlink(char *s)
+{
+  int pid, i;
+
+  unlink("x");
+  pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+
+  unsigned int x = (pid ? 1 : 97);
+  for(i = 0; i < 100; i++){
+    x = x * 1103515245 + 12345;
+    if((x % 3) == 0){
+      close(open("x", O_RDWR | O_CREATE));
+    } else if((x % 3) == 1){
+      link("cat", "x");
+    } else {
+      unlink("x");
+    }
+  }
+
+  if(pid)
+    wait(0);
+  else
+    exit(0);
+}
+
+
+void
+subdir(char *s)
+{
+  int fd, cc;
+
+  unlink("ff");
+  if(mkdir("dd") != 0){
+    printf("%s: mkdir dd failed\n", s);
+    exit(1);
+  }
+
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf("%s: create dd/ff failed\n", s);
+    exit(1);
+  }
+  write(fd, "ff", 2);
+  close(fd);
+
+  if(unlink("dd") >= 0){
+    printf("%s: unlink dd (non-empty dir) succeeded!\n", s);
+    exit(1);
+  }
+
+  if(mkdir("/dd/dd") != 0){
+    printf("%s: subdir mkdir dd/dd failed\n", s);
+    exit(1);
+  }
+
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf("%s: create dd/dd/ff failed\n", s);
+    exit(1);
+  }
+  write(fd, "FF", 2);
+  close(fd);
+
+  fd = open("dd/dd/../ff", 0);
+  if(fd < 0){
+    printf("%s: open dd/dd/../ff failed\n", s);
+    exit(1);
+  }
+  cc = read(fd, buf, sizeof(buf));
+  if(cc != 2 || buf[0] != 'f'){
+    printf("%s: dd/dd/../ff wrong content\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    printf("%s: link dd/dd/ff dd/dd/ffff failed\n", s);
+    exit(1);
+  }
+
+  if(unlink("dd/dd/ff") != 0){
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    exit(1);
+  }
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf("%s: open (unlinked) dd/dd/ff succeeded\n", s);
+    exit(1);
+  }
+
+  if(chdir("dd") != 0){
+    printf("%s: chdir dd failed\n", s);
+    exit(1);
+  }
+  if(chdir("dd/../../dd") != 0){
+    printf("%s: chdir dd/../../dd failed\n", s);
+    exit(1);
+  }
+  if(chdir("dd/../../../dd") != 0){
+    printf("%s: chdir dd/../../../dd failed\n", s);
+    exit(1);
+  }
+  if(chdir("./..") != 0){
+    printf("%s: chdir ./.. failed\n", s);
+    exit(1);
+  }
+
+  fd = open("dd/dd/ffff", 0);
+  if(fd < 0){
+    printf("%s: open dd/dd/ffff failed\n", s);
+    exit(1);
+  }
+  if(read(fd, buf, sizeof(buf)) != 2){
+    printf("%s: read dd/dd/ffff wrong len\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    printf("%s: open (unlinked) dd/dd/ff succeeded!\n", s);
+    exit(1);
+  }
+
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    printf("%s: create dd/ff/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    printf("%s: create dd/xx/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(open("dd", O_CREATE) >= 0){
+    printf("%s: create dd succeeded!\n", s);
+    exit(1);
+  }
+  if(open("dd", O_RDWR) >= 0){
+    printf("%s: open dd rdwr succeeded!\n", s);
+    exit(1);
+  }
+  if(open("dd", O_WRONLY) >= 0){
+    printf("%s: open dd wronly succeeded!\n", s);
+    exit(1);
+  }
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    printf("%s: link dd/ff/ff dd/dd/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    printf("%s: link dd/xx/ff dd/dd/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    printf("%s: link dd/ff dd/dd/ffff succeeded!\n", s);
+    exit(1);
+  }
+  if(mkdir("dd/ff/ff") == 0){
+    printf("%s: mkdir dd/ff/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(mkdir("dd/xx/ff") == 0){
+    printf("%s: mkdir dd/xx/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(mkdir("dd/dd/ffff") == 0){
+    printf("%s: mkdir dd/dd/ffff succeeded!\n", s);
+    exit(1);
+  }
+  if(unlink("dd/xx/ff") == 0){
+    printf("%s: unlink dd/xx/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(unlink("dd/ff/ff") == 0){
+    printf("%s: unlink dd/ff/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(chdir("dd/ff") == 0){
+    printf("%s: chdir dd/ff succeeded!\n", s);
+    exit(1);
+  }
+  if(chdir("dd/xx") == 0){
+    printf("%s: chdir dd/xx succeeded!\n", s);
+    exit(1);
+  }
+
+  if(unlink("dd/dd/ffff") != 0){
+    printf("%s: unlink dd/dd/ff failed\n", s);
+    exit(1);
+  }
+  if(unlink("dd/ff") != 0){
+    printf("%s: unlink dd/ff failed\n", s);
+    exit(1);
+  }
+  if(unlink("dd") == 0){
+    printf("%s: unlink non-empty dd succeeded!\n", s);
+    exit(1);
+  }
+  if(unlink("dd/dd") < 0){
+    printf("%s: unlink dd/dd failed\n", s);
+    exit(1);
+  }
+  if(unlink("dd") < 0){
+    printf("%s: unlink dd failed\n", s);
+    exit(1);
+  }
+}
+
+// test writes that are larger than the log.
+void
+bigwrite(char *s)
+{
+  int fd, sz;
+
+  unlink("bigwrite");
+  for(sz = 499; sz < (MAXOPBLOCKS+2)*BSIZE; sz += 471){
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    if(fd < 0){
+      printf("%s: cannot create bigwrite\n", s);
+      exit(1);
+    }
+    int i;
+    for(i = 0; i < 2; i++){
+      int cc = write(fd, buf, sz);
+      if(cc != sz){
+        printf("%s: write(%d) ret %d\n", s, sz, cc);
+        exit(1);
+      }
+    }
+    close(fd);
+    unlink("bigwrite");
+  }
+}
+
+
+void
+bigfile(char *s)
+{
+  enum { N = 20, SZ=600 };
+  int fd, i, total, cc;
+
+  unlink("bigfile.dat");
+  fd = open("bigfile.dat", O_CREATE | O_RDWR);
+  if(fd < 0){
+    printf("%s: cannot create bigfile", s);
+    exit(1);
+  }
+  for(i = 0; i < N; i++){
+    memset(buf, i, SZ);
+    if(write(fd, buf, SZ) != SZ){
+      printf("%s: write bigfile failed\n", s);
+      exit(1);
+    }
+  }
+  close(fd);
+
+  fd = open("bigfile.dat", 0);
+  if(fd < 0){
+    printf("%s: cannot open bigfile\n", s);
+    exit(1);
+  }
+  total = 0;
+  for(i = 0; ; i++){
+    cc = read(fd, buf, SZ/2);
+    if(cc < 0){
+      printf("%s: read bigfile failed\n", s);
+      exit(1);
+    }
+    if(cc == 0)
+      break;
+    if(cc != SZ/2){
+      printf("%s: short read bigfile\n", s);
+      exit(1);
+    }
+    if(buf[0] != i/2 || buf[SZ/2-1] != i/2){
+      printf("%s: read bigfile wrong data\n", s);
+      exit(1);
+    }
+    total += cc;
+  }
+  close(fd);
+  if(total != N*SZ){
+    printf("%s: read bigfile wrong total\n", s);
+    exit(1);
+  }
+  unlink("bigfile.dat");
+}
+
+void
+fourteen(char *s)
+{
+  int fd;
+
+  // DIRSIZ is 14.
+
+  if(mkdir("12345678901234") != 0){
+    printf("%s: mkdir 12345678901234 failed\n", s);
+    exit(1);
+  }
+  if(mkdir("12345678901234/123456789012345") != 0){
+    printf("%s: mkdir 12345678901234/123456789012345 failed\n", s);
+    exit(1);
+  }
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+  if(fd < 0){
+    printf("%s: create 123456789012345/123456789012345/123456789012345 failed\n", s);
+    exit(1);
+  }
+  close(fd);
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+  if(fd < 0){
+    printf("%s: open 12345678901234/12345678901234/12345678901234 failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  if(mkdir("12345678901234/12345678901234") == 0){
+    printf("%s: mkdir 12345678901234/12345678901234 succeeded!\n", s);
+    exit(1);
+  }
+  if(mkdir("123456789012345/12345678901234") == 0){
+    printf("%s: mkdir 12345678901234/123456789012345 succeeded!\n", s);
+    exit(1);
+  }
+
+  // clean up
+  unlink("123456789012345/12345678901234");
+  unlink("12345678901234/12345678901234");
+  unlink("12345678901234/12345678901234/12345678901234");
+  unlink("123456789012345/123456789012345/123456789012345");
+  unlink("12345678901234/123456789012345");
+  unlink("12345678901234");
+}
+
+void
+rmdot(char *s)
+{
+  if(mkdir("dots") != 0){
+    printf("%s: mkdir dots failed\n", s);
+    exit(1);
+  }
+  if(chdir("dots") != 0){
+    printf("%s: chdir dots failed\n", s);
+    exit(1);
+  }
+  if(unlink(".") == 0){
+    printf("%s: rm . worked!\n", s);
+    exit(1);
+  }
+  if(unlink("..") == 0){
+    printf("%s: rm .. worked!\n", s);
+    exit(1);
+  }
+  if(chdir("/") != 0){
+    printf("%s: chdir / failed\n", s);
+    exit(1);
+  }
+  if(unlink("dots/.") == 0){
+    printf("%s: unlink dots/. worked!\n", s);
+    exit(1);
+  }
+  if(unlink("dots/..") == 0){
+    printf("%s: unlink dots/.. worked!\n", s);
+    exit(1);
+  }
+  if(unlink("dots") != 0){
+    printf("%s: unlink dots failed!\n", s);
+    exit(1);
+  }
+}
+
+void
+dirfile(char *s)
+{
+  int fd;
+
+  fd = open("dirfile", O_CREATE);
+  if(fd < 0){
+    printf("%s: create dirfile failed\n", s);
+    exit(1);
+  }
+  close(fd);
+  if(chdir("dirfile") == 0){
+    printf("%s: chdir dirfile succeeded!\n", s);
+    exit(1);
+  }
+  fd = open("dirfile/xx", 0);
+  if(fd >= 0){
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    exit(1);
+  }
+  fd = open("dirfile/xx", O_CREATE);
+  if(fd >= 0){
+    printf("%s: create dirfile/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(mkdir("dirfile/xx") == 0){
+    printf("%s: mkdir dirfile/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(unlink("dirfile/xx") == 0){
+    printf("%s: unlink dirfile/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(link("README", "dirfile/xx") == 0){
+    printf("%s: link to dirfile/xx succeeded!\n", s);
+    exit(1);
+  }
+  if(unlink("dirfile") != 0){
+    printf("%s: unlink dirfile failed!\n", s);
+    exit(1);
+  }
+
+  fd = open(".", O_RDWR);
+  if(fd >= 0){
+    printf("%s: open . for writing succeeded!\n", s);
+    exit(1);
+  }
+  fd = open(".", 0);
+  if(write(fd, "x", 1) > 0){
+    printf("%s: write . succeeded!\n", s);
+    exit(1);
+  }
+  close(fd);
+}
+
+// test that iput() is called at the end of _namei().
+// also tests empty file names.
+void
+iref(char *s)
+{
+  int i, fd;
+
+  for(i = 0; i < NINODE + 1; i++){
+    if(mkdir("irefd") != 0){
+      printf("%s: mkdir irefd failed\n", s);
+      exit(1);
+    }
+    if(chdir("irefd") != 0){
+      printf("%s: chdir irefd failed\n", s);
+      exit(1);
+    }
+
+    mkdir("");
+    link("README", "");
+    fd = open("", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    fd = open("xx", O_CREATE);
+    if(fd >= 0)
+      close(fd);
+    unlink("xx");
+  }
+
+  // clean up
+  for(i = 0; i < NINODE + 1; i++){
+    chdir("..");
+    unlink("irefd");
+  }
+
+  chdir("/");
+}
+
+// test that fork fails gracefully
+// the forktest binary also does this, but it runs out of proc entries first.
+// inside the bigger usertests binary, we run out of memory first.
+void
+forktest(char *s)
+{
+  enum{ N = 1000 };
+  int n, pid;
+
+  for(n=0; n<N; n++){
+    pid = fork();
+    if(pid < 0)
+      break;
+    if(pid == 0)
+      exit(0);
+  }
+
+  if (n == 0) {
+    printf("%s: no fork at all!\n", s);
+    exit(1);
+  }
+
+  if(n == N){
+    printf("%s: fork claimed to work 1000 times!\n", s);
+    exit(1);
+  }
+
+  for(; n > 0; n--){
+    if(wait(0) < 0){
+      printf("%s: wait stopped early\n", s);
+      exit(1);
+    }
+  }
+
+  if(wait(0) != -1){
+    printf("%s: wait got too many\n", s);
+    exit(1);
+  }
+}
+
+void
+sbrkbasic(char *s)
+{
+  enum { TOOMUCH=1024*1024*1024};
+  int i, pid, xstatus;
+  char *c, *a, *b;
+
+  // does sbrk() return the expected failure value?
+  pid = fork();
+  if(pid < 0){
+    printf("fork failed in sbrkbasic\n");
+    exit(1);
+  }
+  if(pid == 0){
+    a = sbrk(TOOMUCH);
+    if(a == (char*)0xffffffffffffffffL){
+      // it's OK if this fails.
+      exit(0);
+    }
+    
+    for(b = a; b < a+TOOMUCH; b += 4096){
+      *b = 99;
+    }
+    
+    // we should not get here! either sbrk(TOOMUCH)
+    // should have failed, or (with lazy allocation)
+    // a pagefault should have killed this process.
+    exit(1);
+  }
+
+  wait(&xstatus);
+  if(xstatus == 1){
+    printf("%s: too much memory allocated!\n", s);
+    exit(1);
+  }
+
+  // can one sbrk() less than a page?
+  a = sbrk(0);
+  for(i = 0; i < 5000; i++){
+    b = sbrk(1);
+    if(b != a){
+      printf("%s: sbrk test failed %d %p %p\n", s, i, a, b);
+      exit(1);
+    }
+    *b = 1;
+    a = b + 1;
+  }
+  pid = fork();
+  if(pid < 0){
+    printf("%s: sbrk test fork failed\n", s);
+    exit(1);
+  }
+  c = sbrk(1);
+  c = sbrk(1);
+  if(c != a + 1){
+    printf("%s: sbrk test failed post-fork\n", s);
+    exit(1);
+  }
+  if(pid == 0)
+    exit(0);
+  wait(&xstatus);
+  exit(xstatus);
+}
+
+void
+sbrkmuch(char *s)
+{
+  enum { BIG=100*1024*1024 };
+  char *c, *oldbrk, *a, *lastaddr, *p;
+  uint64 amt;
+
+  oldbrk = sbrk(0);
+
+  // can one grow address space to something big?
+  a = sbrk(0);
+  amt = BIG - (uint64)a;
+  p = sbrk(amt);
+  if (p != a) {
+    printf("%s: sbrk test failed to grow big address space; enough phys mem?\n", s);
+    exit(1);
+  }
+
+  // touch each page to make sure it exists.
+  char *eee = sbrk(0);
+  for(char *pp = a; pp < eee; pp += 4096)
+    *pp = 1;
+
+  lastaddr = (char*) (BIG-1);
+  *lastaddr = 99;
+
+  // can one de-allocate?
+  a = sbrk(0);
+  c = sbrk(-PGSIZE);
+  if(c == (char*)0xffffffffffffffffL){
+    printf("%s: sbrk could not deallocate\n", s);
+    exit(1);
+  }
+  c = sbrk(0);
+  if(c != a - PGSIZE){
+    printf("%s: sbrk deallocation produced wrong address, a %p c %p\n", s, a, c);
+    exit(1);
+  }
+
+  // can one re-allocate that page?
+  a = sbrk(0);
+  c = sbrk(PGSIZE);
+  if(c != a || sbrk(0) != a + PGSIZE){
+    printf("%s: sbrk re-allocation failed, a %p c %p\n", s, a, c);
+    exit(1);
+  }
+  if(*lastaddr == 99){
+    // should be zero
+    printf("%s: sbrk de-allocation didn't really deallocate\n", s);
+    exit(1);
+  }
+
+  a = sbrk(0);
+  c = sbrk(-(sbrk(0) - oldbrk));
+  if(c != a){
+    printf("%s: sbrk downsize failed, a %p c %p\n", s, a, c);
+    exit(1);
+  }
+}
+
+// can we read the kernel's memory?
+void
+kernmem(char *s)
+{
+  char *a;
+  int pid;
+
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid == 0){
+      printf("%s: oops could read %p = %x\n", s, a, *a);
+      exit(1);
+    }
+    int xstatus;
+    wait(&xstatus);
+    if(xstatus != -1)  // did kernel kill child?
+      exit(1);
+  }
+}
+
+// user code should not be able to write to addresses above MAXVA.
+void
+MAXVAplus(char *s)
+{
+  volatile uint64 a = MAXVA;
+  for( ; a != 0; a <<= 1){
+    int pid;
+    pid = fork();
+    if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    if(pid == 0){
+      *(char*)a = 99;
+      printf("%s: oops wrote %p\n", s, (void*)a);
+      exit(1);
+    }
+    int xstatus;
+    wait(&xstatus);
+    if(xstatus != -1)  // did kernel kill child?
+      exit(1);
+  }
+}
+
+// if we run the system out of memory, does it clean up the last
+// failed allocation?
+void
+sbrkfail(char *s)
+{
+  enum { BIG=100*1024*1024 };
+  int i, xstatus;
+  int fds[2];
+  char scratch;
+  char *c, *a;
+  int pids[10];
+  int pid;
+ 
+  if(pipe(fds) != 0){
+    printf("%s: pipe() failed\n", s);
+    exit(1);
+  }
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if((pids[i] = fork()) == 0){
+      // allocate a lot of memory
+      sbrk(BIG - (uint64)sbrk(0));
+      write(fds[1], "x", 1);
+      // sit around until killed
+      for(;;) sleep(1000);
+    }
+    if(pids[i] != -1)
+      read(fds[0], &scratch, 1);
+  }
+
+  // if those failed allocations freed up the pages they did allocate,
+  // we'll be able to allocate here
+  c = sbrk(PGSIZE);
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    if(pids[i] == -1)
+      continue;
+    kill(pids[i]);
+    wait(0);
+  }
+  if(c == (char*)0xffffffffffffffffL){
+    printf("%s: failed sbrk leaked memory\n", s);
+    exit(1);
+  }
+
+  // test running fork with the above allocated page 
+  pid = fork();
+  if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+  if(pid == 0){
+    // allocate a lot of memory.
+    // this should produce a page fault,
+    // and thus not complete.
+    a = sbrk(0);
+    sbrk(10*BIG);
+    int n = 0;
+    for (i = 0; i < 10*BIG; i += PGSIZE) {
+      n += *(a+i);
+    }
+    // print n so the compiler doesn't optimize away
+    // the for loop.
+    printf("%s: allocate a lot of memory succeeded %d\n", s, n);
+    exit(1);
+  }
+  wait(&xstatus);
+  if(xstatus != -1 && xstatus != 2)
+    exit(1);
+}
+
+  
+// test reads/writes from/to allocated memory
+void
+sbrkarg(char *s)
+{
+  char *a;
+  int fd, n;
+
+  a = sbrk(PGSIZE);
+  fd = open("sbrk", O_CREATE|O_WRONLY);
+  unlink("sbrk");
+  if(fd < 0)  {
+    printf("%s: open sbrk failed\n", s);
+    exit(1);
+  }
+  if ((n = write(fd, a, PGSIZE)) < 0) {
+    printf("%s: write sbrk failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  // test writes to allocated memory
+  a = sbrk(PGSIZE);
+  if(pipe((int *) a) != 0){
+    printf("%s: pipe() failed\n", s);
+    exit(1);
+  } 
+}
+
+void
+validatetest(char *s)
+{
+  int hi;
+  uint64 p;
+
+  hi = 1100*1024;
+  for(p = 0; p <= (uint)hi; p += PGSIZE){
+    // try to crash the kernel by passing in a bad string pointer
+    if(link("nosuchfile", (char*)p) != -1){
+      printf("%s: link should not succeed\n", s);
+      exit(1);
+    }
+  }
+}
+
+// does uninitialized data start out zero?
+char uninit[10000];
+void
+bsstest(char *s)
+{
+  int i;
+
+  for(i = 0; i < sizeof(uninit); i++){
+    if(uninit[i] != '\0'){
+      printf("%s: bss test failed\n", s);
+      exit(1);
+    }
+  }
+}
+
+// does exec return an error if the arguments
+// are larger than a page? or does it write
+// below the stack and wreck the instructions/data?
+void
+bigargtest(char *s)
+{
+  int pid, fd, xstatus;
+
+  unlink("bigarg-ok");
+  pid = fork();
+  if(pid == 0){
+    static char *args[MAXARG];
+    int i;
+    char big[400];
+    memset(big, ' ', sizeof(big));
+    big[sizeof(big)-1] = '\0';
+    for(i = 0; i < MAXARG-1; i++)
+      args[i] = big;
+    args[MAXARG-1] = 0;
+    // this exec() should fail (and return) because the
+    // arguments are too large.
+    exec("echo", args);
+    fd = open("bigarg-ok", O_CREATE);
+    close(fd);
+    exit(0);
+  } else if(pid < 0){
+    printf("%s: bigargtest: fork failed\n", s);
+    exit(1);
+  }
+  
+  wait(&xstatus);
+  if(xstatus != 0)
+    exit(xstatus);
+  fd = open("bigarg-ok", 0);
+  if(fd < 0){
+    printf("%s: bigarg test failed!\n", s);
+    exit(1);
+  }
+  close(fd);
+}
+
+// what happens when the file system runs out of blocks?
+// answer: balloc panics, so this test is not useful.
+void
+fsfull()
+{
+  int nfiles;
+  int fsblocks = 0;
+
+  printf("fsfull test\n");
+
+  for(nfiles = 0; ; nfiles++){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    printf("writing %s\n", name);
+    int fd = open(name, O_CREATE|O_RDWR);
+    if(fd < 0){
+      printf("open %s failed\n", name);
+      break;
+    }
+    int total = 0;
+    while(1){
+      int cc = write(fd, buf, BSIZE);
+      if(cc < BSIZE)
+        break;
+      total += cc;
+      fsblocks++;
+    }
+    printf("wrote %d bytes\n", total);
+    close(fd);
+    if(total == 0)
+      break;
+  }
+
+  while(nfiles >= 0){
+    char name[64];
+    name[0] = 'f';
+    name[1] = '0' + nfiles / 1000;
+    name[2] = '0' + (nfiles % 1000) / 100;
+    name[3] = '0' + (nfiles % 100) / 10;
+    name[4] = '0' + (nfiles % 10);
+    name[5] = '\0';
+    unlink(name);
+    nfiles--;
+  }
+
+  printf("fsfull test finished\n");
+}
+
+void argptest(char *s)
+{
+  int fd;
+  fd = open("init", O_RDONLY);
+  if (fd < 0) {
+    printf("%s: open failed\n", s);
+    exit(1);
+  }
+  read(fd, sbrk(0) - 1, -1);
+  close(fd);
+}
+
+// check that there's an invalid page beneath
+// the user stack, to catch stack overflow.
+void
+stacktest(char *s)
+{
+  int pid;
+  int xstatus;
+  
+  pid = fork();
+  if(pid == 0) {
+    char *sp = (char *) r_sp();
+    sp -= USERSTACK*PGSIZE;
+    // the *sp should cause a trap.
+    printf("%s: stacktest: read below stack %d\n", s, *sp);
+    exit(1);
+  } else if(pid < 0){
+    printf("%s: fork failed\n", s);
+    exit(1);
+  }
+  wait(&xstatus);
+  if(xstatus == -1)  // kernel killed child?
+    exit(0);
+  else
+    exit(xstatus);
+}
+
+// check that writes to a few forbidden addresses
+// cause a fault, e.g. process's text and TRAMPOLINE.
+void
+nowrite(char *s)
+{
+  int pid;
+  int xstatus;
+  uint64 addrs[] = { 0, 0x80000000LL, 0x3fffffe000, 0x3ffffff000, 0x4000000000,
+                     0xffffffffffffffff };
+  
+  for(int ai = 0; ai < sizeof(addrs)/sizeof(addrs[0]); ai++){
+    pid = fork();
+    if(pid == 0) {
+      volatile int *addr = (int *) addrs[ai];
+      *addr = 10;
+      printf("%s: write to %p did not fail!\n", s, addr);
+      exit(0);
+    } else if(pid < 0){
+      printf("%s: fork failed\n", s);
+      exit(1);
+    }
+    wait(&xstatus);
+    if(xstatus == 0){
+      // kernel did not kill child!
+      exit(1);
+    }
+  }
+  exit(0);
+}
+
+// regression test. copyin(), copyout(), and copyinstr() used to cast
+// the virtual page address to uint, which (with certain wild system
+// call arguments) resulted in a kernel page faults.
+void *big = (void*) 0xeaeb0b5b00002f5e;
+void
+pgbug(char *s)
+{
+  char *argv[1];
+  argv[0] = 0;
+  exec(big, argv);
+  pipe(big);
+
+  exit(0);
+}
+
+// regression test. does the kernel panic if a process sbrk()s its
+// size to be less than a page, or zero, or reduces the break by an
+// amount too small to cause a page to be freed?
+void
+sbrkbugs(char *s)
+{
+  int pid = fork();
+  if(pid < 0){
+    printf("fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){
+    int sz = (uint64) sbrk(0);
+    // free all user memory; there used to be a bug that
+    // would not adjust p->sz correctly in this case,
+    // causing exit() to panic.
+    sbrk(-sz);
+    // user page fault here.
+    exit(0);
+  }
+  wait(0);
+
+  pid = fork();
+  if(pid < 0){
+    printf("fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){
+    int sz = (uint64) sbrk(0);
+    // set the break to somewhere in the very first
+    // page; there used to be a bug that would incorrectly
+    // free the first page.
+    sbrk(-(sz - 3500));
+    exit(0);
+  }
+  wait(0);
+
+  pid = fork();
+  if(pid < 0){
+    printf("fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){
+    // set the break in the middle of a page.
+    sbrk((10*4096 + 2048) - (uint64)sbrk(0));
+
+    // reduce the break a bit, but not enough to
+    // cause a page to be freed. this used to cause
+    // a panic.
+    sbrk(-10);
+
+    exit(0);
+  }
+  wait(0);
+
+  exit(0);
+}
+
+// if process size was somewhat more than a page boundary, and then
+// shrunk to be somewhat less than that page boundary, can the kernel
+// still copyin() from addresses in the last page?
+void
+sbrklast(char *s)
+{
+  uint64 top = (uint64) sbrk(0);
+  if((top % 4096) != 0)
+    sbrk(4096 - (top % 4096));
+  sbrk(4096);
+  sbrk(10);
+  sbrk(-20);
+  top = (uint64) sbrk(0);
+  char *p = (char *) (top - 64);
+  p[0] = 'x';
+  p[1] = '\0';
+  int fd = open(p, O_RDWR|O_CREATE);
+  write(fd, p, 1);
+  close(fd);
+  fd = open(p, O_RDWR);
+  p[0] = '\0';
+  read(fd, p, 1);
+  if(p[0] != 'x')
+    exit(1);
+}
+
+
+// does sbrk handle signed int32 wrap-around with
+// negative arguments?
+void
+sbrk8000(char *s)
+{
+  sbrk(0x80000004);
+  volatile char *top = sbrk(0);
+  *(top-1) = *(top-1) + 1;
+}
+
+
+
+// regression test. test whether exec() leaks memory if one of the
+// arguments is invalid. the test passes if the kernel doesn't panic.
+void
+badarg(char *s)
+{
+  for(int i = 0; i < 50000; i++){
+    char *argv[2];
+    argv[0] = (char*)0xffffffff;
+    argv[1] = 0;
+    exec("echo", argv);
+  }
+  
+  exit(0);
+}
+
+struct test {
+  void (*f)(char *);
+  char *s;
+} quicktests[] = {
+  {copyin, "copyin"},
+  {copyout, "copyout"},
+  {copyinstr1, "copyinstr1"},
+  {copyinstr2, "copyinstr2"},
+  {copyinstr3, "copyinstr3"},
+  {rwsbrk, "rwsbrk" },
+  {truncate1, "truncate1"},
+  {truncate2, "truncate2"},
+  {truncate3, "truncate3"},
+  {openiputtest, "openiput"},
+  {exitiputtest, "exitiput"},
+  {iputtest, "iput"},
+  {opentest, "opentest"},
+  {writetest, "writetest"},
+  {writebig, "writebig"},
+  {createtest, "createtest"},
+  {dirtest, "dirtest"},
+  {exectest, "exectest"},
+  {pipe1, "pipe1"},
+  {killstatus, "killstatus"},
+  {preempt, "preempt"},
+  {exitwait, "exitwait"},
+  {reparent, "reparent" },
+  {twochildren, "twochildren"},
+  {forkfork, "forkfork"},
+  {forkforkfork, "forkforkfork"},
+  {reparent2, "reparent2"},
+  {mem, "mem"},
+  {sharedfd, "sharedfd"},
+  {fourfiles, "fourfiles"},
+  {createdelete, "createdelete"},
+  {unlinkread, "unlinkread"},
+  {linktest, "linktest"},
+  {concreate, "concreate"},
+  {linkunlink, "linkunlink"},
+  {subdir, "subdir"},
+  {bigwrite, "bigwrite"},
+  {bigfile, "bigfile"},
+  {fourteen, "fourteen"},
+  {rmdot, "rmdot"},
+  {dirfile, "dirfile"},
+  {iref, "iref"},
+  {forktest, "forktest"},
+  {sbrkbasic, "sbrkbasic"},
+  {sbrkmuch, "sbrkmuch"},
+  {kernmem, "kernmem"},
+  {MAXVAplus, "MAXVAplus"},
+  {sbrkfail, "sbrkfail"},
+  {sbrkarg, "sbrkarg"},
+  {validatetest, "validatetest"},
+  {bsstest, "bsstest"},
+  {bigargtest, "bigargtest"},
+  {argptest, "argptest"},
+  {stacktest, "stacktest"},
+  {nowrite, "nowrite"},
+  {pgbug, "pgbug" },
+  {sbrkbugs, "sbrkbugs" },
+  {sbrklast, "sbrklast"},
+  {sbrk8000, "sbrk8000"},
+  {badarg, "badarg" },
+
+  { 0, 0},
+};
+
+//
+// Section with tests that take a fair bit of time
+//
+
+// directory that uses indirect blocks
+void
+bigdir(char *s)
+{
+  enum { N = 500 };
+  int i, fd;
+  char name[10];
+
+  unlink("bd");
+
+  fd = open("bd", O_CREATE);
+  if(fd < 0){
+    printf("%s: bigdir create failed\n", s);
+    exit(1);
+  }
+  close(fd);
+
+  for(i = 0; i < N; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(link("bd", name) != 0){
+      printf("%s: bigdir i=%d link(bd, %s) failed\n", s, i, name);
+      exit(1);
+    }
+  }
+
+  unlink("bd");
+  for(i = 0; i < N; i++){
+    name[0] = 'x';
+    name[1] = '0' + (i / 64);
+    name[2] = '0' + (i % 64);
+    name[3] = '\0';
+    if(unlink(name) != 0){
+      printf("%s: bigdir unlink failed", s);
+      exit(1);
+    }
+  }
+}
+
+// concurrent writes to try to provoke deadlock in the virtio disk
+// driver.
+void
+manywrites(char *s)
+{
+  int nchildren = 4;
+  int howmany = 30; // increase to look for deadlock
+  
+  for(int ci = 0; ci < nchildren; ci++){
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(1);
+    }
+
+    if(pid == 0){
+      char name[3];
+      name[0] = 'b';
+      name[1] = 'a' + ci;
+      name[2] = '\0';
+      unlink(name);
+      
+      for(int iters = 0; iters < howmany; iters++){
+        for(int i = 0; i < ci+1; i++){
+          int fd = open(name, O_CREATE | O_RDWR);
+          if(fd < 0){
+            printf("%s: cannot create %s\n", s, name);
+            exit(1);
+          }
+          int sz = sizeof(buf);
+          int cc = write(fd, buf, sz);
+          if(cc != sz){
+            printf("%s: write(%d) ret %d\n", s, sz, cc);
+            exit(1);
+          }
+          close(fd);
+        }
+        unlink(name);
+      }
+
+      unlink(name);
+      exit(0);
+    }
+  }
+
+  for(int ci = 0; ci < nchildren; ci++){
+    int st = 0;
+    wait(&st);
+    if(st != 0)
+      exit(st);
+  }
+  exit(0);
+}
+
+// regression test. does write() with an invalid buffer pointer cause
+// a block to be allocated for a file that is then not freed when the
+// file is deleted? if the kernel has this bug, it will panic: balloc:
+// out of blocks. assumed_free may need to be raised to be more than
+// the number of free blocks. this test takes a long time.
+void
+badwrite(char *s)
+{
+  int assumed_free = 600;
+  
+  unlink("junk");
+  for(int i = 0; i < assumed_free; i++){
+    int fd = open("junk", O_CREATE|O_WRONLY);
+    if(fd < 0){
+      printf("open junk failed\n");
+      exit(1);
+    }
+    write(fd, (char*)0xffffffffffL, 1);
+    close(fd);
+    unlink("junk");
+  }
+
+  int fd = open("junk", O_CREATE|O_WRONLY);
+  if(fd < 0){
+    printf("open junk failed\n");
+    exit(1);
+  }
+  if(write(fd, "x", 1) != 1){
+    printf("write failed\n");
+    exit(1);
+  }
+  close(fd);
+  unlink("junk");
+
+  exit(0);
+}
+
+// test the exec() code that cleans up if it runs out
+// of memory. it's really a test that such a condition
+// doesn't cause a panic.
+void
+execout(char *s)
+{
+  for(int avail = 0; avail < 15; avail++){
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(1);
+    } else if(pid == 0){
+      // allocate all of memory.
+      while(1){
+        uint64 a = (uint64) sbrk(4096);
+        if(a == 0xffffffffffffffffLL)
+          break;
+        *(char*)(a + 4096 - 1) = 1;
+      }
+
+      // free a few pages, in order to let exec() make some
+      // progress.
+      for(int i = 0; i < avail; i++)
+        sbrk(-4096);
+      
+      close(1);
+      char *args[] = { "echo", "x", 0 };
+      exec("echo", args);
+      exit(0);
+    } else {
+      wait((int*)0);
+    }
+  }
+
+  exit(0);
+}
+
+// can the kernel tolerate running out of disk space?
+void
+diskfull(char *s)
+{
+  int fi;
+  int done = 0;
+
+  unlink("diskfulldir");
+  
+  for(fi = 0; done == 0 && '0' + fi < 0177; fi++){
+    char name[32];
+    name[0] = 'b';
+    name[1] = 'i';
+    name[2] = 'g';
+    name[3] = '0' + fi;
+    name[4] = '\0';
+    unlink(name);
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+    if(fd < 0){
+      // oops, ran out of inodes before running out of blocks.
+      printf("%s: could not create file %s\n", s, name);
+      done = 1;
+      break;
+    }
+    for(int i = 0; i < MAXFILE; i++){
+      char buf[BSIZE];
+      if(write(fd, buf, BSIZE) != BSIZE){
+        done = 1;
+        close(fd);
+        break;
+      }
+    }
+    close(fd);
+  }
+
+  // now that there are no free blocks, test that dirlink()
+  // merely fails (doesn't panic) if it can't extend
+  // directory content. one of these file creations
+  // is expected to fail.
+  int nzz = 128;
+  for(int i = 0; i < nzz; i++){
+    char name[32];
+    name[0] = 'z';
+    name[1] = 'z';
+    name[2] = '0' + (i / 32);
+    name[3] = '0' + (i % 32);
+    name[4] = '\0';
+    unlink(name);
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+    if(fd < 0)
+      break;
+    close(fd);
+  }
+
+  // this mkdir() is expected to fail.
+  if(mkdir("diskfulldir") == 0)
+    printf("%s: mkdir(diskfulldir) unexpectedly succeeded!\n", s);
+
+  unlink("diskfulldir");
+
+  for(int i = 0; i < nzz; i++){
+    char name[32];
+    name[0] = 'z';
+    name[1] = 'z';
+    name[2] = '0' + (i / 32);
+    name[3] = '0' + (i % 32);
+    name[4] = '\0';
+    unlink(name);
+  }
+
+  for(int i = 0; '0' + i < 0177; i++){
+    char name[32];
+    name[0] = 'b';
+    name[1] = 'i';
+    name[2] = 'g';
+    name[3] = '0' + i;
+    name[4] = '\0';
+    unlink(name);
+  }
+}
+
+void
+outofinodes(char *s)
+{
+  int nzz = 32*32;
+  for(int i = 0; i < nzz; i++){
+    char name[32];
+    name[0] = 'z';
+    name[1] = 'z';
+    name[2] = '0' + (i / 32);
+    name[3] = '0' + (i % 32);
+    name[4] = '\0';
+    unlink(name);
+    int fd = open(name, O_CREATE|O_RDWR|O_TRUNC);
+    if(fd < 0){
+      // failure is eventually expected.
+      break;
+    }
+    close(fd);
+  }
+
+  for(int i = 0; i < nzz; i++){
+    char name[32];
+    name[0] = 'z';
+    name[1] = 'z';
+    name[2] = '0' + (i / 32);
+    name[3] = '0' + (i % 32);
+    name[4] = '\0';
+    unlink(name);
+  }
+}
+
+struct test slowtests[] = {
+  {bigdir, "bigdir"},
+  {manywrites, "manywrites"},
+  {badwrite, "badwrite" },
+  {execout, "execout"},
+  {diskfull, "diskfull"},
+  {outofinodes, "outofinodes"},
+    
+  { 0, 0},
+};
+
+//
+// drive tests
+//
+
+// run each test in its own process. run returns 1 if child's exit()
+// indicates success.
+int
+run(void f(char *), char *s) {
+  int pid;
+  int xstatus;
+
+  printf("test %s: ", s);
+  if((pid = fork()) < 0) {
+    printf("runtest: fork error\n");
+    exit(1);
+  }
+  if(pid == 0) {
+    f(s);
+    exit(0);
+  } else {
+    wait(&xstatus);
+    if(xstatus != 0) 
+      printf("FAILED\n");
+    else
+      printf("OK\n");
+    return xstatus == 0;
+  }
+}
+
+int
+runtests(struct test *tests, char *justone, int continuous) {
+  for (struct test *t = tests; t->s != 0; t++) {
+    if((justone == 0) || strcmp(t->s, justone) == 0) {
+      if(!run(t->f, t->s)){
+        if(continuous != 2){
+          printf("SOME TESTS FAILED\n");
+          return 1;
+        }
+      }
+    }
+  }
+  return 0;
+}
+
+
+//
+// use sbrk() to count how many free physical memory pages there are.
+// touches the pages to force allocation.
+// because out of memory with lazy allocation results in the process
+// taking a fault and being killed, fork and report back.
+//
+int
+countfree()
+{
+  int fds[2];
+
+  if(pipe(fds) < 0){
+    printf("pipe() failed in countfree()\n");
+    exit(1);
+  }
+  
+  int pid = fork();
+
+  if(pid < 0){
+    printf("fork failed in countfree()\n");
+    exit(1);
+  }
+
+  if(pid == 0){
+    close(fds[0]);
+    
+    while(1){
+      uint64 a = (uint64) sbrk(4096);
+      if(a == 0xffffffffffffffff){
+        break;
+      }
+
+      // modify the memory to make sure it's really allocated.
+      *(char *)(a + 4096 - 1) = 1;
+
+      // report back one more page.
+      if(write(fds[1], "x", 1) != 1){
+        printf("write() failed in countfree()\n");
+        exit(1);
+      }
+    }
+
+    exit(0);
+  }
+
+  close(fds[1]);
+
+  int n = 0;
+  while(1){
+    char c;
+    int cc = read(fds[0], &c, 1);
+    if(cc < 0){
+      printf("read() failed in countfree()\n");
+      exit(1);
+    }
+    if(cc == 0)
+      break;
+    n += 1;
+  }
+
+  close(fds[0]);
+  wait((int*)0);
+  
+  return n;
+}
+
+int
+drivetests(int quick, int continuous, char *justone) {
+  do {
+    printf("usertests starting\n");
+    int free0 = countfree();
+    int free1 = 0;
+    if (runtests(quicktests, justone, continuous)) {
+      if(continuous != 2) {
+        return 1;
+      }
+    }
+    if(!quick) {
+      if (justone == 0)
+        printf("usertests slow tests starting\n");
+      if (runtests(slowtests, justone, continuous)) {
+        if(continuous != 2) {
+          return 1;
+        }
+      }
+    }
+    if((free1 = countfree()) < free0) {
+      printf("FAILED -- lost some free pages %d (out of %d)\n", free1, free0);
+      if(continuous != 2) {
+        return 1;
+      }
+    }
+  } while(continuous);
+  return 0;
+}
+
+int
+main(int argc, char *argv[])
+{
+  int continuous = 0;
+  int quick = 0;
+  char *justone = 0;
+
+  if(argc == 2 && strcmp(argv[1], "-q") == 0){
+    quick = 1;
+  } else if(argc == 2 && strcmp(argv[1], "-c") == 0){
+    continuous = 1;
+  } else if(argc == 2 && strcmp(argv[1], "-C") == 0){
+    continuous = 2;
+  } else if(argc == 2 && argv[1][0] != '-'){
+    justone = argv[1];
+  } else if(argc > 1){
+    printf("Usage: usertests [-c] [-C] [-q] [testname]\n");
+    exit(1);
+  }
+  if (drivetests(quick, continuous, justone)) {
+    exit(1);
+  }
+  printf("ALL TESTS PASSED\n");
+  exit(0);
+}
diff --git a/user/usertests.d b/user/usertests.d
new file mode 100644
index 0000000..c76551d
--- /dev/null
+++ b/user/usertests.d
@@ -0,0 +1,3 @@
+user/usertests.o: user/usertests.c kernel/param.h kernel/types.h \
+ kernel/stat.h user/user.h kernel/fs.h kernel/fcntl.h kernel/syscall.h \
+ kernel/memlayout.h kernel/riscv.h
diff --git a/user/usertests.o b/user/usertests.o
new file mode 100644
index 0000000..6b82d80
Binary files /dev/null and b/user/usertests.o differ
diff --git a/user/usertests.sym b/user/usertests.sym
new file mode 100644
index 0000000..f6475fb
--- /dev/null
+++ b/user/usertests.sym
@@ -0,0 +1,144 @@
+0000000000000000 .text
+0000000000005060 .rodata
+0000000000008000 .data
+0000000000008450 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_ranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 usertests.c
+0000000000008560 big.0
+0000000000008460 args.1
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000004b38 putc
+0000000000004b56 printint
+0000000000007470 digits
+0000000000000000 umalloc.c
+0000000000008450 freep
+000000000000ec78 base
+00000000000009be writebig
+00000000000025ca sbrk8000
+0000000000004828 strcpy
+0000000000001650 exitwait
+0000000000001db6 manywrites
+0000000000004eb0 printf
+00000000000003be outofinodes
+000000000000425a bigargtest
+00000000000049d2 memmove
+000000000000359a openiputtest
+0000000000004ac8 mknod
+0000000000004b28 trace
+00000000000038a0 reparent
+00000000000048e0 gets
+0000000000004b00 getpid
+00000000000014b4 pipe1
+0000000000004b20 hello
+0000000000004a64 memcpy
+00000000000034a0 iref
+0000000000000fd4 pgbug
+0000000000001d12 nowrite
+0000000000004f64 malloc
+00000000000005aa copyout
+0000000000004b10 sleep
+0000000000001cae stacktest
+0000000000004b30 sysinfo
+00000000000025f8 execout
+000000000000246c sbrkbugs
+0000000000002a8a exitiputtest
+0000000000004338 fsfull
+0000000000000e9e bigdir
+0000000000001ae4 forktest
+0000000000001fce rwsbrk
+00000000000011dc truncate3
+000000000000022c bigwrite
+0000000000003af2 sharedfd
+0000000000004a90 pipe
+00000000000036ea killstatus
+0000000000009568 uninit
+00000000000032f0 dirfile
+0000000000004aa0 write
+0000000000000078 bsstest
+0000000000004ad8 fstat
+0000000000004e86 fprintf
+0000000000004ab0 kill
+00000000000027d0 diskfull
+0000000000000e3c validatetest
+0000000000008010 quicktests
+00000000000031ca rmdot
+000000000000047e copyin
+0000000000004bfe vprintf
+0000000000000118 truncate2
+0000000000004af0 chdir
+0000000000008000 big
+000000000000133e exectest
+0000000000004ab8 exec
+00000000000002ee badwrite
+0000000000004a88 wait
+0000000000004a98 read
+0000000000003764 preempt
+0000000000004ad0 unlink
+0000000000001000 badarg
+0000000000002412 argptest
+0000000000003a7a mem
+000000000000452c runtests
+0000000000004a2a memcmp
+0000000000004a78 fork
+0000000000002528 sbrklast
+0000000000001eca copyinstr3
+0000000000001752 forkfork
+0000000000004b08 sbrk
+00000000000083e0 slowtests
+0000000000004b18 uptime
+00000000000016e0 twochildren
+0000000000001c1c MAXVAplus
+000000000000489a memset
+0000000000001b8c kernmem
+00000000000001b8 createtest
+000000000000476a main
+0000000000001830 createdelete
+000000000000364c forkforkfork
+0000000000003920 sbrkfail
+0000000000004844 strcmp
+000000000000087e writetest
+0000000000004af8 dup
+00000000000006e0 truncate1
+00000000000000b2 opentest
+00000000000044ae run
+0000000000002bdc subdir
+000000000000103e copyinstr2
+0000000000000c74 linktest
+000000000000bc78 buf
+0000000000002b36 dirtest
+000000000000469c drivetests
+000000000000236e sbrkarg
+00000000000029e4 iputtest
+0000000000004950 stat
+00000000000040d6 bigfile
+00000000000045a6 countfree
+0000000000000b1e unlinkread
+0000000000004ae0 link
+0000000000004a80 exit
+0000000000004816 start
+000000000000498a atoi
+0000000000000000 copyinstr1
+0000000000001a08 linkunlink
+00000000000020d4 sbrkbasic
+0000000000004870 strlen
+0000000000004ac0 open
+00000000000048bc strchr
+0000000000003e32 concreate
+0000000000002694 fourteen
+0000000000003c5e fourfiles
+0000000000002216 sbrkmuch
+0000000000004ae8 mkdir
+0000000000004aa8 close
+00000000000017e8 reparent2
+0000000000004ee2 free
diff --git a/user/usys.S b/user/usys.S
new file mode 100644
index 0000000..7b0d0cd
--- /dev/null
+++ b/user/usys.S
@@ -0,0 +1,122 @@
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ ecall
+ ret
+.global exit
+exit:
+ li a7, SYS_exit
+ ecall
+ ret
+.global wait
+wait:
+ li a7, SYS_wait
+ ecall
+ ret
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ ecall
+ ret
+.global read
+read:
+ li a7, SYS_read
+ ecall
+ ret
+.global write
+write:
+ li a7, SYS_write
+ ecall
+ ret
+.global close
+close:
+ li a7, SYS_close
+ ecall
+ ret
+.global kill
+kill:
+ li a7, SYS_kill
+ ecall
+ ret
+.global exec
+exec:
+ li a7, SYS_exec
+ ecall
+ ret
+.global open
+open:
+ li a7, SYS_open
+ ecall
+ ret
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ ecall
+ ret
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ ecall
+ ret
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ ecall
+ ret
+.global link
+link:
+ li a7, SYS_link
+ ecall
+ ret
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ ecall
+ ret
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ ecall
+ ret
+.global dup
+dup:
+ li a7, SYS_dup
+ ecall
+ ret
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ ecall
+ ret
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ ecall
+ ret
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ ecall
+ ret
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ ecall
+ ret
+.global hello
+hello:
+ li a7, SYS_hello
+ ecall
+ ret
+.global trace
+trace:
+ li a7, SYS_trace
+ ecall
+ ret
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ ecall
+ ret
diff --git a/user/usys.d b/user/usys.d
new file mode 100644
index 0000000..80c63fd
--- /dev/null
+++ b/user/usys.d
@@ -0,0 +1 @@
+user/usys.o: user/usys.S kernel/syscall.h
diff --git a/user/usys.o b/user/usys.o
new file mode 100644
index 0000000..d8dc47f
Binary files /dev/null and b/user/usys.o differ
diff --git a/user/usys.pl b/user/usys.pl
new file mode 100644
index 0000000..3a89c1b
--- /dev/null
+++ b/user/usys.pl
@@ -0,0 +1,41 @@
+#!/usr/bin/perl -w
+
+# Generate usys.S, the stubs for syscalls.
+
+print "# generated by usys.pl - do not edit\n";
+
+print "#include \"kernel/syscall.h\"\n";
+
+sub entry {
+    my $name = shift;
+    print ".global $name\n";
+    print "${name}:\n";
+    print " li a7, SYS_${name}\n";
+    print " ecall\n";
+    print " ret\n";
+}
+	
+entry("fork");
+entry("exit");
+entry("wait");
+entry("pipe");
+entry("read");
+entry("write");
+entry("close");
+entry("kill");
+entry("exec");
+entry("open");
+entry("mknod");
+entry("unlink");
+entry("fstat");
+entry("link");
+entry("mkdir");
+entry("chdir");
+entry("dup");
+entry("getpid");
+entry("sbrk");
+entry("sleep");
+entry("uptime");
+entry("hello");
+entry("trace");
+entry("sysinfo");
diff --git a/user/wc.asm b/user/wc.asm
new file mode 100644
index 0000000..9d74c42
--- /dev/null
+++ b/user/wc.asm
@@ -0,0 +1,1630 @@
+
+user/_wc:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <wc>:
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+   0:	7119                	addi	sp,sp,-128
+   2:	fc86                	sd	ra,120(sp)
+   4:	f8a2                	sd	s0,112(sp)
+   6:	f4a6                	sd	s1,104(sp)
+   8:	f0ca                	sd	s2,96(sp)
+   a:	ecce                	sd	s3,88(sp)
+   c:	e8d2                	sd	s4,80(sp)
+   e:	e4d6                	sd	s5,72(sp)
+  10:	e0da                	sd	s6,64(sp)
+  12:	fc5e                	sd	s7,56(sp)
+  14:	f862                	sd	s8,48(sp)
+  16:	f466                	sd	s9,40(sp)
+  18:	f06a                	sd	s10,32(sp)
+  1a:	ec6e                	sd	s11,24(sp)
+  1c:	0100                	addi	s0,sp,128
+  1e:	f8a43423          	sd	a0,-120(s0)
+  22:	f8b43023          	sd	a1,-128(s0)
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  26:	4901                	li	s2,0
+  l = w = c = 0;
+  28:	4d01                	li	s10,0
+  2a:	4c81                	li	s9,0
+  2c:	4c01                	li	s8,0
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  2e:	00001d97          	auipc	s11,0x1
+  32:	fe2d8d93          	addi	s11,s11,-30 # 1010 <buf>
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+  36:	4aa9                	li	s5,10
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+  38:	00001a17          	auipc	s4,0x1
+  3c:	978a0a13          	addi	s4,s4,-1672 # 9b0 <malloc+0x106>
+        inword = 0;
+  40:	4b81                	li	s7,0
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  42:	a035                	j	6e <wc+0x6e>
+      if(strchr(" \r\t\n\v", buf[i]))
+  44:	8552                	mv	a0,s4
+  46:	1bc000ef          	jal	202 <strchr>
+  4a:	c919                	beqz	a0,60 <wc+0x60>
+        inword = 0;
+  4c:	895e                	mv	s2,s7
+    for(i=0; i<n; i++){
+  4e:	0485                	addi	s1,s1,1
+  50:	01348d63          	beq	s1,s3,6a <wc+0x6a>
+      if(buf[i] == '\n')
+  54:	0004c583          	lbu	a1,0(s1)
+  58:	ff5596e3          	bne	a1,s5,44 <wc+0x44>
+        l++;
+  5c:	2c05                	addiw	s8,s8,1
+  5e:	b7dd                	j	44 <wc+0x44>
+      else if(!inword){
+  60:	fe0917e3          	bnez	s2,4e <wc+0x4e>
+        w++;
+  64:	2c85                	addiw	s9,s9,1
+        inword = 1;
+  66:	4905                	li	s2,1
+  68:	b7dd                	j	4e <wc+0x4e>
+  6a:	01ab0d3b          	addw	s10,s6,s10
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  6e:	20000613          	li	a2,512
+  72:	85ee                	mv	a1,s11
+  74:	f8843503          	ld	a0,-120(s0)
+  78:	366000ef          	jal	3de <read>
+  7c:	8b2a                	mv	s6,a0
+  7e:	00a05963          	blez	a0,90 <wc+0x90>
+    for(i=0; i<n; i++){
+  82:	00001497          	auipc	s1,0x1
+  86:	f8e48493          	addi	s1,s1,-114 # 1010 <buf>
+  8a:	009509b3          	add	s3,a0,s1
+  8e:	b7d9                	j	54 <wc+0x54>
+      }
+    }
+  }
+  if(n < 0){
+  90:	02054c63          	bltz	a0,c8 <wc+0xc8>
+    printf("wc: read error\n");
+    exit(1);
+  }
+  printf("%d %d %d %s\n", l, w, c, name);
+  94:	f8043703          	ld	a4,-128(s0)
+  98:	86ea                	mv	a3,s10
+  9a:	8666                	mv	a2,s9
+  9c:	85e2                	mv	a1,s8
+  9e:	00001517          	auipc	a0,0x1
+  a2:	93250513          	addi	a0,a0,-1742 # 9d0 <malloc+0x126>
+  a6:	750000ef          	jal	7f6 <printf>
+}
+  aa:	70e6                	ld	ra,120(sp)
+  ac:	7446                	ld	s0,112(sp)
+  ae:	74a6                	ld	s1,104(sp)
+  b0:	7906                	ld	s2,96(sp)
+  b2:	69e6                	ld	s3,88(sp)
+  b4:	6a46                	ld	s4,80(sp)
+  b6:	6aa6                	ld	s5,72(sp)
+  b8:	6b06                	ld	s6,64(sp)
+  ba:	7be2                	ld	s7,56(sp)
+  bc:	7c42                	ld	s8,48(sp)
+  be:	7ca2                	ld	s9,40(sp)
+  c0:	7d02                	ld	s10,32(sp)
+  c2:	6de2                	ld	s11,24(sp)
+  c4:	6109                	addi	sp,sp,128
+  c6:	8082                	ret
+    printf("wc: read error\n");
+  c8:	00001517          	auipc	a0,0x1
+  cc:	8f850513          	addi	a0,a0,-1800 # 9c0 <malloc+0x116>
+  d0:	726000ef          	jal	7f6 <printf>
+    exit(1);
+  d4:	4505                	li	a0,1
+  d6:	2f0000ef          	jal	3c6 <exit>
+
+00000000000000da <main>:
+
+int
+main(int argc, char *argv[])
+{
+  da:	7179                	addi	sp,sp,-48
+  dc:	f406                	sd	ra,40(sp)
+  de:	f022                	sd	s0,32(sp)
+  e0:	1800                	addi	s0,sp,48
+  int fd, i;
+
+  if(argc <= 1){
+  e2:	4785                	li	a5,1
+  e4:	04a7d463          	bge	a5,a0,12c <main+0x52>
+  e8:	ec26                	sd	s1,24(sp)
+  ea:	e84a                	sd	s2,16(sp)
+  ec:	e44e                	sd	s3,8(sp)
+  ee:	00858913          	addi	s2,a1,8
+  f2:	ffe5099b          	addiw	s3,a0,-2
+  f6:	02099793          	slli	a5,s3,0x20
+  fa:	01d7d993          	srli	s3,a5,0x1d
+  fe:	05c1                	addi	a1,a1,16
+ 100:	99ae                	add	s3,s3,a1
+    wc(0, "");
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+ 102:	4581                	li	a1,0
+ 104:	00093503          	ld	a0,0(s2)
+ 108:	2fe000ef          	jal	406 <open>
+ 10c:	84aa                	mv	s1,a0
+ 10e:	02054c63          	bltz	a0,146 <main+0x6c>
+      printf("wc: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    wc(fd, argv[i]);
+ 112:	00093583          	ld	a1,0(s2)
+ 116:	eebff0ef          	jal	0 <wc>
+    close(fd);
+ 11a:	8526                	mv	a0,s1
+ 11c:	2d2000ef          	jal	3ee <close>
+  for(i = 1; i < argc; i++){
+ 120:	0921                	addi	s2,s2,8
+ 122:	ff3910e3          	bne	s2,s3,102 <main+0x28>
+  }
+  exit(0);
+ 126:	4501                	li	a0,0
+ 128:	29e000ef          	jal	3c6 <exit>
+ 12c:	ec26                	sd	s1,24(sp)
+ 12e:	e84a                	sd	s2,16(sp)
+ 130:	e44e                	sd	s3,8(sp)
+    wc(0, "");
+ 132:	00001597          	auipc	a1,0x1
+ 136:	88658593          	addi	a1,a1,-1914 # 9b8 <malloc+0x10e>
+ 13a:	4501                	li	a0,0
+ 13c:	ec5ff0ef          	jal	0 <wc>
+    exit(0);
+ 140:	4501                	li	a0,0
+ 142:	284000ef          	jal	3c6 <exit>
+      printf("wc: cannot open %s\n", argv[i]);
+ 146:	00093583          	ld	a1,0(s2)
+ 14a:	00001517          	auipc	a0,0x1
+ 14e:	89650513          	addi	a0,a0,-1898 # 9e0 <malloc+0x136>
+ 152:	6a4000ef          	jal	7f6 <printf>
+      exit(1);
+ 156:	4505                	li	a0,1
+ 158:	26e000ef          	jal	3c6 <exit>
+
+000000000000015c <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+ 15c:	1141                	addi	sp,sp,-16
+ 15e:	e406                	sd	ra,8(sp)
+ 160:	e022                	sd	s0,0(sp)
+ 162:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+ 164:	f77ff0ef          	jal	da <main>
+  exit(0);
+ 168:	4501                	li	a0,0
+ 16a:	25c000ef          	jal	3c6 <exit>
+
+000000000000016e <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+ 16e:	1141                	addi	sp,sp,-16
+ 170:	e422                	sd	s0,8(sp)
+ 172:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 174:	87aa                	mv	a5,a0
+ 176:	0585                	addi	a1,a1,1
+ 178:	0785                	addi	a5,a5,1
+ 17a:	fff5c703          	lbu	a4,-1(a1)
+ 17e:	fee78fa3          	sb	a4,-1(a5)
+ 182:	fb75                	bnez	a4,176 <strcpy+0x8>
+    ;
+  return os;
+}
+ 184:	6422                	ld	s0,8(sp)
+ 186:	0141                	addi	sp,sp,16
+ 188:	8082                	ret
+
+000000000000018a <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 18a:	1141                	addi	sp,sp,-16
+ 18c:	e422                	sd	s0,8(sp)
+ 18e:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+ 190:	00054783          	lbu	a5,0(a0)
+ 194:	cb91                	beqz	a5,1a8 <strcmp+0x1e>
+ 196:	0005c703          	lbu	a4,0(a1)
+ 19a:	00f71763          	bne	a4,a5,1a8 <strcmp+0x1e>
+    p++, q++;
+ 19e:	0505                	addi	a0,a0,1
+ 1a0:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+ 1a2:	00054783          	lbu	a5,0(a0)
+ 1a6:	fbe5                	bnez	a5,196 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+ 1a8:	0005c503          	lbu	a0,0(a1)
+}
+ 1ac:	40a7853b          	subw	a0,a5,a0
+ 1b0:	6422                	ld	s0,8(sp)
+ 1b2:	0141                	addi	sp,sp,16
+ 1b4:	8082                	ret
+
+00000000000001b6 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1b6:	1141                	addi	sp,sp,-16
+ 1b8:	e422                	sd	s0,8(sp)
+ 1ba:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1bc:	00054783          	lbu	a5,0(a0)
+ 1c0:	cf91                	beqz	a5,1dc <strlen+0x26>
+ 1c2:	0505                	addi	a0,a0,1
+ 1c4:	87aa                	mv	a5,a0
+ 1c6:	86be                	mv	a3,a5
+ 1c8:	0785                	addi	a5,a5,1
+ 1ca:	fff7c703          	lbu	a4,-1(a5)
+ 1ce:	ff65                	bnez	a4,1c6 <strlen+0x10>
+ 1d0:	40a6853b          	subw	a0,a3,a0
+ 1d4:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+ 1d6:	6422                	ld	s0,8(sp)
+ 1d8:	0141                	addi	sp,sp,16
+ 1da:	8082                	ret
+  for(n = 0; s[n]; n++)
+ 1dc:	4501                	li	a0,0
+ 1de:	bfe5                	j	1d6 <strlen+0x20>
+
+00000000000001e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1e0:	1141                	addi	sp,sp,-16
+ 1e2:	e422                	sd	s0,8(sp)
+ 1e4:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+ 1e6:	ca19                	beqz	a2,1fc <memset+0x1c>
+ 1e8:	87aa                	mv	a5,a0
+ 1ea:	1602                	slli	a2,a2,0x20
+ 1ec:	9201                	srli	a2,a2,0x20
+ 1ee:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+ 1f2:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+ 1f6:	0785                	addi	a5,a5,1
+ 1f8:	fee79de3          	bne	a5,a4,1f2 <memset+0x12>
+  }
+  return dst;
+}
+ 1fc:	6422                	ld	s0,8(sp)
+ 1fe:	0141                	addi	sp,sp,16
+ 200:	8082                	ret
+
+0000000000000202 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 202:	1141                	addi	sp,sp,-16
+ 204:	e422                	sd	s0,8(sp)
+ 206:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+ 208:	00054783          	lbu	a5,0(a0)
+ 20c:	cb99                	beqz	a5,222 <strchr+0x20>
+    if(*s == c)
+ 20e:	00f58763          	beq	a1,a5,21c <strchr+0x1a>
+  for(; *s; s++)
+ 212:	0505                	addi	a0,a0,1
+ 214:	00054783          	lbu	a5,0(a0)
+ 218:	fbfd                	bnez	a5,20e <strchr+0xc>
+      return (char*)s;
+  return 0;
+ 21a:	4501                	li	a0,0
+}
+ 21c:	6422                	ld	s0,8(sp)
+ 21e:	0141                	addi	sp,sp,16
+ 220:	8082                	ret
+  return 0;
+ 222:	4501                	li	a0,0
+ 224:	bfe5                	j	21c <strchr+0x1a>
+
+0000000000000226 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 226:	711d                	addi	sp,sp,-96
+ 228:	ec86                	sd	ra,88(sp)
+ 22a:	e8a2                	sd	s0,80(sp)
+ 22c:	e4a6                	sd	s1,72(sp)
+ 22e:	e0ca                	sd	s2,64(sp)
+ 230:	fc4e                	sd	s3,56(sp)
+ 232:	f852                	sd	s4,48(sp)
+ 234:	f456                	sd	s5,40(sp)
+ 236:	f05a                	sd	s6,32(sp)
+ 238:	ec5e                	sd	s7,24(sp)
+ 23a:	1080                	addi	s0,sp,96
+ 23c:	8baa                	mv	s7,a0
+ 23e:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 240:	892a                	mv	s2,a0
+ 242:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 244:	4aa9                	li	s5,10
+ 246:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 248:	89a6                	mv	s3,s1
+ 24a:	2485                	addiw	s1,s1,1
+ 24c:	0344d663          	bge	s1,s4,278 <gets+0x52>
+    cc = read(0, &c, 1);
+ 250:	4605                	li	a2,1
+ 252:	faf40593          	addi	a1,s0,-81
+ 256:	4501                	li	a0,0
+ 258:	186000ef          	jal	3de <read>
+    if(cc < 1)
+ 25c:	00a05e63          	blez	a0,278 <gets+0x52>
+    buf[i++] = c;
+ 260:	faf44783          	lbu	a5,-81(s0)
+ 264:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 268:	01578763          	beq	a5,s5,276 <gets+0x50>
+ 26c:	0905                	addi	s2,s2,1
+ 26e:	fd679de3          	bne	a5,s6,248 <gets+0x22>
+    buf[i++] = c;
+ 272:	89a6                	mv	s3,s1
+ 274:	a011                	j	278 <gets+0x52>
+ 276:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 278:	99de                	add	s3,s3,s7
+ 27a:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 27e:	855e                	mv	a0,s7
+ 280:	60e6                	ld	ra,88(sp)
+ 282:	6446                	ld	s0,80(sp)
+ 284:	64a6                	ld	s1,72(sp)
+ 286:	6906                	ld	s2,64(sp)
+ 288:	79e2                	ld	s3,56(sp)
+ 28a:	7a42                	ld	s4,48(sp)
+ 28c:	7aa2                	ld	s5,40(sp)
+ 28e:	7b02                	ld	s6,32(sp)
+ 290:	6be2                	ld	s7,24(sp)
+ 292:	6125                	addi	sp,sp,96
+ 294:	8082                	ret
+
+0000000000000296 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 296:	1101                	addi	sp,sp,-32
+ 298:	ec06                	sd	ra,24(sp)
+ 29a:	e822                	sd	s0,16(sp)
+ 29c:	e04a                	sd	s2,0(sp)
+ 29e:	1000                	addi	s0,sp,32
+ 2a0:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a2:	4581                	li	a1,0
+ 2a4:	162000ef          	jal	406 <open>
+  if(fd < 0)
+ 2a8:	02054263          	bltz	a0,2cc <stat+0x36>
+ 2ac:	e426                	sd	s1,8(sp)
+ 2ae:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 2b0:	85ca                	mv	a1,s2
+ 2b2:	16c000ef          	jal	41e <fstat>
+ 2b6:	892a                	mv	s2,a0
+  close(fd);
+ 2b8:	8526                	mv	a0,s1
+ 2ba:	134000ef          	jal	3ee <close>
+  return r;
+ 2be:	64a2                	ld	s1,8(sp)
+}
+ 2c0:	854a                	mv	a0,s2
+ 2c2:	60e2                	ld	ra,24(sp)
+ 2c4:	6442                	ld	s0,16(sp)
+ 2c6:	6902                	ld	s2,0(sp)
+ 2c8:	6105                	addi	sp,sp,32
+ 2ca:	8082                	ret
+    return -1;
+ 2cc:	597d                	li	s2,-1
+ 2ce:	bfcd                	j	2c0 <stat+0x2a>
+
+00000000000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	1141                	addi	sp,sp,-16
+ 2d2:	e422                	sd	s0,8(sp)
+ 2d4:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d6:	00054683          	lbu	a3,0(a0)
+ 2da:	fd06879b          	addiw	a5,a3,-48
+ 2de:	0ff7f793          	zext.b	a5,a5
+ 2e2:	4625                	li	a2,9
+ 2e4:	02f66863          	bltu	a2,a5,314 <atoi+0x44>
+ 2e8:	872a                	mv	a4,a0
+  n = 0;
+ 2ea:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 2ec:	0705                	addi	a4,a4,1
+ 2ee:	0025179b          	slliw	a5,a0,0x2
+ 2f2:	9fa9                	addw	a5,a5,a0
+ 2f4:	0017979b          	slliw	a5,a5,0x1
+ 2f8:	9fb5                	addw	a5,a5,a3
+ 2fa:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 2fe:	00074683          	lbu	a3,0(a4)
+ 302:	fd06879b          	addiw	a5,a3,-48
+ 306:	0ff7f793          	zext.b	a5,a5
+ 30a:	fef671e3          	bgeu	a2,a5,2ec <atoi+0x1c>
+  return n;
+}
+ 30e:	6422                	ld	s0,8(sp)
+ 310:	0141                	addi	sp,sp,16
+ 312:	8082                	ret
+  n = 0;
+ 314:	4501                	li	a0,0
+ 316:	bfe5                	j	30e <atoi+0x3e>
+
+0000000000000318 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 318:	1141                	addi	sp,sp,-16
+ 31a:	e422                	sd	s0,8(sp)
+ 31c:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 31e:	02b57463          	bgeu	a0,a1,346 <memmove+0x2e>
+    while(n-- > 0)
+ 322:	00c05f63          	blez	a2,340 <memmove+0x28>
+ 326:	1602                	slli	a2,a2,0x20
+ 328:	9201                	srli	a2,a2,0x20
+ 32a:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 32e:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 330:	0585                	addi	a1,a1,1
+ 332:	0705                	addi	a4,a4,1
+ 334:	fff5c683          	lbu	a3,-1(a1)
+ 338:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 33c:	fef71ae3          	bne	a4,a5,330 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 340:	6422                	ld	s0,8(sp)
+ 342:	0141                	addi	sp,sp,16
+ 344:	8082                	ret
+    dst += n;
+ 346:	00c50733          	add	a4,a0,a2
+    src += n;
+ 34a:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 34c:	fec05ae3          	blez	a2,340 <memmove+0x28>
+ 350:	fff6079b          	addiw	a5,a2,-1
+ 354:	1782                	slli	a5,a5,0x20
+ 356:	9381                	srli	a5,a5,0x20
+ 358:	fff7c793          	not	a5,a5
+ 35c:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 35e:	15fd                	addi	a1,a1,-1
+ 360:	177d                	addi	a4,a4,-1
+ 362:	0005c683          	lbu	a3,0(a1)
+ 366:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 36a:	fee79ae3          	bne	a5,a4,35e <memmove+0x46>
+ 36e:	bfc9                	j	340 <memmove+0x28>
+
+0000000000000370 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 370:	1141                	addi	sp,sp,-16
+ 372:	e422                	sd	s0,8(sp)
+ 374:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 376:	ca05                	beqz	a2,3a6 <memcmp+0x36>
+ 378:	fff6069b          	addiw	a3,a2,-1
+ 37c:	1682                	slli	a3,a3,0x20
+ 37e:	9281                	srli	a3,a3,0x20
+ 380:	0685                	addi	a3,a3,1
+ 382:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 384:	00054783          	lbu	a5,0(a0)
+ 388:	0005c703          	lbu	a4,0(a1)
+ 38c:	00e79863          	bne	a5,a4,39c <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 390:	0505                	addi	a0,a0,1
+    p2++;
+ 392:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 394:	fed518e3          	bne	a0,a3,384 <memcmp+0x14>
+  }
+  return 0;
+ 398:	4501                	li	a0,0
+ 39a:	a019                	j	3a0 <memcmp+0x30>
+      return *p1 - *p2;
+ 39c:	40e7853b          	subw	a0,a5,a4
+}
+ 3a0:	6422                	ld	s0,8(sp)
+ 3a2:	0141                	addi	sp,sp,16
+ 3a4:	8082                	ret
+  return 0;
+ 3a6:	4501                	li	a0,0
+ 3a8:	bfe5                	j	3a0 <memcmp+0x30>
+
+00000000000003aa <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 3aa:	1141                	addi	sp,sp,-16
+ 3ac:	e406                	sd	ra,8(sp)
+ 3ae:	e022                	sd	s0,0(sp)
+ 3b0:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 3b2:	f67ff0ef          	jal	318 <memmove>
+}
+ 3b6:	60a2                	ld	ra,8(sp)
+ 3b8:	6402                	ld	s0,0(sp)
+ 3ba:	0141                	addi	sp,sp,16
+ 3bc:	8082                	ret
+
+00000000000003be <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 3be:	4885                	li	a7,1
+ ecall
+ 3c0:	00000073          	ecall
+ ret
+ 3c4:	8082                	ret
+
+00000000000003c6 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 3c6:	4889                	li	a7,2
+ ecall
+ 3c8:	00000073          	ecall
+ ret
+ 3cc:	8082                	ret
+
+00000000000003ce <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 3ce:	488d                	li	a7,3
+ ecall
+ 3d0:	00000073          	ecall
+ ret
+ 3d4:	8082                	ret
+
+00000000000003d6 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 3d6:	4891                	li	a7,4
+ ecall
+ 3d8:	00000073          	ecall
+ ret
+ 3dc:	8082                	ret
+
+00000000000003de <read>:
+.global read
+read:
+ li a7, SYS_read
+ 3de:	4895                	li	a7,5
+ ecall
+ 3e0:	00000073          	ecall
+ ret
+ 3e4:	8082                	ret
+
+00000000000003e6 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 3e6:	48c1                	li	a7,16
+ ecall
+ 3e8:	00000073          	ecall
+ ret
+ 3ec:	8082                	ret
+
+00000000000003ee <close>:
+.global close
+close:
+ li a7, SYS_close
+ 3ee:	48d5                	li	a7,21
+ ecall
+ 3f0:	00000073          	ecall
+ ret
+ 3f4:	8082                	ret
+
+00000000000003f6 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 3f6:	4899                	li	a7,6
+ ecall
+ 3f8:	00000073          	ecall
+ ret
+ 3fc:	8082                	ret
+
+00000000000003fe <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 3fe:	489d                	li	a7,7
+ ecall
+ 400:	00000073          	ecall
+ ret
+ 404:	8082                	ret
+
+0000000000000406 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 406:	48bd                	li	a7,15
+ ecall
+ 408:	00000073          	ecall
+ ret
+ 40c:	8082                	ret
+
+000000000000040e <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 40e:	48c5                	li	a7,17
+ ecall
+ 410:	00000073          	ecall
+ ret
+ 414:	8082                	ret
+
+0000000000000416 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 416:	48c9                	li	a7,18
+ ecall
+ 418:	00000073          	ecall
+ ret
+ 41c:	8082                	ret
+
+000000000000041e <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 41e:	48a1                	li	a7,8
+ ecall
+ 420:	00000073          	ecall
+ ret
+ 424:	8082                	ret
+
+0000000000000426 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 426:	48cd                	li	a7,19
+ ecall
+ 428:	00000073          	ecall
+ ret
+ 42c:	8082                	ret
+
+000000000000042e <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 42e:	48d1                	li	a7,20
+ ecall
+ 430:	00000073          	ecall
+ ret
+ 434:	8082                	ret
+
+0000000000000436 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 436:	48a5                	li	a7,9
+ ecall
+ 438:	00000073          	ecall
+ ret
+ 43c:	8082                	ret
+
+000000000000043e <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 43e:	48a9                	li	a7,10
+ ecall
+ 440:	00000073          	ecall
+ ret
+ 444:	8082                	ret
+
+0000000000000446 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 446:	48ad                	li	a7,11
+ ecall
+ 448:	00000073          	ecall
+ ret
+ 44c:	8082                	ret
+
+000000000000044e <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 44e:	48b1                	li	a7,12
+ ecall
+ 450:	00000073          	ecall
+ ret
+ 454:	8082                	ret
+
+0000000000000456 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 456:	48b5                	li	a7,13
+ ecall
+ 458:	00000073          	ecall
+ ret
+ 45c:	8082                	ret
+
+000000000000045e <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 45e:	48b9                	li	a7,14
+ ecall
+ 460:	00000073          	ecall
+ ret
+ 464:	8082                	ret
+
+0000000000000466 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 466:	48d9                	li	a7,22
+ ecall
+ 468:	00000073          	ecall
+ ret
+ 46c:	8082                	ret
+
+000000000000046e <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 46e:	48dd                	li	a7,23
+ ecall
+ 470:	00000073          	ecall
+ ret
+ 474:	8082                	ret
+
+0000000000000476 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 476:	48e1                	li	a7,24
+ ecall
+ 478:	00000073          	ecall
+ ret
+ 47c:	8082                	ret
+
+000000000000047e <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 47e:	1101                	addi	sp,sp,-32
+ 480:	ec06                	sd	ra,24(sp)
+ 482:	e822                	sd	s0,16(sp)
+ 484:	1000                	addi	s0,sp,32
+ 486:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 48a:	4605                	li	a2,1
+ 48c:	fef40593          	addi	a1,s0,-17
+ 490:	f57ff0ef          	jal	3e6 <write>
+}
+ 494:	60e2                	ld	ra,24(sp)
+ 496:	6442                	ld	s0,16(sp)
+ 498:	6105                	addi	sp,sp,32
+ 49a:	8082                	ret
+
+000000000000049c <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 49c:	7139                	addi	sp,sp,-64
+ 49e:	fc06                	sd	ra,56(sp)
+ 4a0:	f822                	sd	s0,48(sp)
+ 4a2:	f426                	sd	s1,40(sp)
+ 4a4:	0080                	addi	s0,sp,64
+ 4a6:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 4a8:	c299                	beqz	a3,4ae <printint+0x12>
+ 4aa:	0805c963          	bltz	a1,53c <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 4ae:	2581                	sext.w	a1,a1
+  neg = 0;
+ 4b0:	4881                	li	a7,0
+ 4b2:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 4b6:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 4b8:	2601                	sext.w	a2,a2
+ 4ba:	00000517          	auipc	a0,0x0
+ 4be:	54650513          	addi	a0,a0,1350 # a00 <digits>
+ 4c2:	883a                	mv	a6,a4
+ 4c4:	2705                	addiw	a4,a4,1
+ 4c6:	02c5f7bb          	remuw	a5,a1,a2
+ 4ca:	1782                	slli	a5,a5,0x20
+ 4cc:	9381                	srli	a5,a5,0x20
+ 4ce:	97aa                	add	a5,a5,a0
+ 4d0:	0007c783          	lbu	a5,0(a5)
+ 4d4:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 4d8:	0005879b          	sext.w	a5,a1
+ 4dc:	02c5d5bb          	divuw	a1,a1,a2
+ 4e0:	0685                	addi	a3,a3,1
+ 4e2:	fec7f0e3          	bgeu	a5,a2,4c2 <printint+0x26>
+  if(neg)
+ 4e6:	00088c63          	beqz	a7,4fe <printint+0x62>
+    buf[i++] = '-';
+ 4ea:	fd070793          	addi	a5,a4,-48
+ 4ee:	00878733          	add	a4,a5,s0
+ 4f2:	02d00793          	li	a5,45
+ 4f6:	fef70823          	sb	a5,-16(a4)
+ 4fa:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 4fe:	02e05a63          	blez	a4,532 <printint+0x96>
+ 502:	f04a                	sd	s2,32(sp)
+ 504:	ec4e                	sd	s3,24(sp)
+ 506:	fc040793          	addi	a5,s0,-64
+ 50a:	00e78933          	add	s2,a5,a4
+ 50e:	fff78993          	addi	s3,a5,-1
+ 512:	99ba                	add	s3,s3,a4
+ 514:	377d                	addiw	a4,a4,-1
+ 516:	1702                	slli	a4,a4,0x20
+ 518:	9301                	srli	a4,a4,0x20
+ 51a:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 51e:	fff94583          	lbu	a1,-1(s2)
+ 522:	8526                	mv	a0,s1
+ 524:	f5bff0ef          	jal	47e <putc>
+  while(--i >= 0)
+ 528:	197d                	addi	s2,s2,-1
+ 52a:	ff391ae3          	bne	s2,s3,51e <printint+0x82>
+ 52e:	7902                	ld	s2,32(sp)
+ 530:	69e2                	ld	s3,24(sp)
+}
+ 532:	70e2                	ld	ra,56(sp)
+ 534:	7442                	ld	s0,48(sp)
+ 536:	74a2                	ld	s1,40(sp)
+ 538:	6121                	addi	sp,sp,64
+ 53a:	8082                	ret
+    x = -xx;
+ 53c:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 540:	4885                	li	a7,1
+    x = -xx;
+ 542:	bf85                	j	4b2 <printint+0x16>
+
+0000000000000544 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 544:	711d                	addi	sp,sp,-96
+ 546:	ec86                	sd	ra,88(sp)
+ 548:	e8a2                	sd	s0,80(sp)
+ 54a:	e0ca                	sd	s2,64(sp)
+ 54c:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 54e:	0005c903          	lbu	s2,0(a1)
+ 552:	26090863          	beqz	s2,7c2 <vprintf+0x27e>
+ 556:	e4a6                	sd	s1,72(sp)
+ 558:	fc4e                	sd	s3,56(sp)
+ 55a:	f852                	sd	s4,48(sp)
+ 55c:	f456                	sd	s5,40(sp)
+ 55e:	f05a                	sd	s6,32(sp)
+ 560:	ec5e                	sd	s7,24(sp)
+ 562:	e862                	sd	s8,16(sp)
+ 564:	e466                	sd	s9,8(sp)
+ 566:	8b2a                	mv	s6,a0
+ 568:	8a2e                	mv	s4,a1
+ 56a:	8bb2                	mv	s7,a2
+  state = 0;
+ 56c:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 56e:	4481                	li	s1,0
+ 570:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 572:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 576:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 57a:	06c00c93          	li	s9,108
+ 57e:	a005                	j	59e <vprintf+0x5a>
+        putc(fd, c0);
+ 580:	85ca                	mv	a1,s2
+ 582:	855a                	mv	a0,s6
+ 584:	efbff0ef          	jal	47e <putc>
+ 588:	a019                	j	58e <vprintf+0x4a>
+    } else if(state == '%'){
+ 58a:	03598263          	beq	s3,s5,5ae <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 58e:	2485                	addiw	s1,s1,1
+ 590:	8726                	mv	a4,s1
+ 592:	009a07b3          	add	a5,s4,s1
+ 596:	0007c903          	lbu	s2,0(a5)
+ 59a:	20090c63          	beqz	s2,7b2 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 59e:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 5a2:	fe0994e3          	bnez	s3,58a <vprintf+0x46>
+      if(c0 == '%'){
+ 5a6:	fd579de3          	bne	a5,s5,580 <vprintf+0x3c>
+        state = '%';
+ 5aa:	89be                	mv	s3,a5
+ 5ac:	b7cd                	j	58e <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 5ae:	00ea06b3          	add	a3,s4,a4
+ 5b2:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 5b6:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 5b8:	c681                	beqz	a3,5c0 <vprintf+0x7c>
+ 5ba:	9752                	add	a4,a4,s4
+ 5bc:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 5c0:	03878f63          	beq	a5,s8,5fe <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 5c4:	05978963          	beq	a5,s9,616 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 5c8:	07500713          	li	a4,117
+ 5cc:	0ee78363          	beq	a5,a4,6b2 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 5d0:	07800713          	li	a4,120
+ 5d4:	12e78563          	beq	a5,a4,6fe <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 5d8:	07000713          	li	a4,112
+ 5dc:	14e78a63          	beq	a5,a4,730 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 5e0:	07300713          	li	a4,115
+ 5e4:	18e78a63          	beq	a5,a4,778 <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 5e8:	02500713          	li	a4,37
+ 5ec:	04e79563          	bne	a5,a4,636 <vprintf+0xf2>
+        putc(fd, '%');
+ 5f0:	02500593          	li	a1,37
+ 5f4:	855a                	mv	a0,s6
+ 5f6:	e89ff0ef          	jal	47e <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 5fa:	4981                	li	s3,0
+ 5fc:	bf49                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 5fe:	008b8913          	addi	s2,s7,8
+ 602:	4685                	li	a3,1
+ 604:	4629                	li	a2,10
+ 606:	000ba583          	lw	a1,0(s7)
+ 60a:	855a                	mv	a0,s6
+ 60c:	e91ff0ef          	jal	49c <printint>
+ 610:	8bca                	mv	s7,s2
+      state = 0;
+ 612:	4981                	li	s3,0
+ 614:	bfad                	j	58e <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 616:	06400793          	li	a5,100
+ 61a:	02f68963          	beq	a3,a5,64c <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 61e:	06c00793          	li	a5,108
+ 622:	04f68263          	beq	a3,a5,666 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 626:	07500793          	li	a5,117
+ 62a:	0af68063          	beq	a3,a5,6ca <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 62e:	07800793          	li	a5,120
+ 632:	0ef68263          	beq	a3,a5,716 <vprintf+0x1d2>
+        putc(fd, '%');
+ 636:	02500593          	li	a1,37
+ 63a:	855a                	mv	a0,s6
+ 63c:	e43ff0ef          	jal	47e <putc>
+        putc(fd, c0);
+ 640:	85ca                	mv	a1,s2
+ 642:	855a                	mv	a0,s6
+ 644:	e3bff0ef          	jal	47e <putc>
+      state = 0;
+ 648:	4981                	li	s3,0
+ 64a:	b791                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 64c:	008b8913          	addi	s2,s7,8
+ 650:	4685                	li	a3,1
+ 652:	4629                	li	a2,10
+ 654:	000ba583          	lw	a1,0(s7)
+ 658:	855a                	mv	a0,s6
+ 65a:	e43ff0ef          	jal	49c <printint>
+        i += 1;
+ 65e:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 660:	8bca                	mv	s7,s2
+      state = 0;
+ 662:	4981                	li	s3,0
+        i += 1;
+ 664:	b72d                	j	58e <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 666:	06400793          	li	a5,100
+ 66a:	02f60763          	beq	a2,a5,698 <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 66e:	07500793          	li	a5,117
+ 672:	06f60963          	beq	a2,a5,6e4 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 676:	07800793          	li	a5,120
+ 67a:	faf61ee3          	bne	a2,a5,636 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 67e:	008b8913          	addi	s2,s7,8
+ 682:	4681                	li	a3,0
+ 684:	4641                	li	a2,16
+ 686:	000ba583          	lw	a1,0(s7)
+ 68a:	855a                	mv	a0,s6
+ 68c:	e11ff0ef          	jal	49c <printint>
+        i += 2;
+ 690:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 692:	8bca                	mv	s7,s2
+      state = 0;
+ 694:	4981                	li	s3,0
+        i += 2;
+ 696:	bde5                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 698:	008b8913          	addi	s2,s7,8
+ 69c:	4685                	li	a3,1
+ 69e:	4629                	li	a2,10
+ 6a0:	000ba583          	lw	a1,0(s7)
+ 6a4:	855a                	mv	a0,s6
+ 6a6:	df7ff0ef          	jal	49c <printint>
+        i += 2;
+ 6aa:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 6ac:	8bca                	mv	s7,s2
+      state = 0;
+ 6ae:	4981                	li	s3,0
+        i += 2;
+ 6b0:	bdf9                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 6b2:	008b8913          	addi	s2,s7,8
+ 6b6:	4681                	li	a3,0
+ 6b8:	4629                	li	a2,10
+ 6ba:	000ba583          	lw	a1,0(s7)
+ 6be:	855a                	mv	a0,s6
+ 6c0:	dddff0ef          	jal	49c <printint>
+ 6c4:	8bca                	mv	s7,s2
+      state = 0;
+ 6c6:	4981                	li	s3,0
+ 6c8:	b5d9                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 6ca:	008b8913          	addi	s2,s7,8
+ 6ce:	4681                	li	a3,0
+ 6d0:	4629                	li	a2,10
+ 6d2:	000ba583          	lw	a1,0(s7)
+ 6d6:	855a                	mv	a0,s6
+ 6d8:	dc5ff0ef          	jal	49c <printint>
+        i += 1;
+ 6dc:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 6de:	8bca                	mv	s7,s2
+      state = 0;
+ 6e0:	4981                	li	s3,0
+        i += 1;
+ 6e2:	b575                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 6e4:	008b8913          	addi	s2,s7,8
+ 6e8:	4681                	li	a3,0
+ 6ea:	4629                	li	a2,10
+ 6ec:	000ba583          	lw	a1,0(s7)
+ 6f0:	855a                	mv	a0,s6
+ 6f2:	dabff0ef          	jal	49c <printint>
+        i += 2;
+ 6f6:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 6f8:	8bca                	mv	s7,s2
+      state = 0;
+ 6fa:	4981                	li	s3,0
+        i += 2;
+ 6fc:	bd49                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 6fe:	008b8913          	addi	s2,s7,8
+ 702:	4681                	li	a3,0
+ 704:	4641                	li	a2,16
+ 706:	000ba583          	lw	a1,0(s7)
+ 70a:	855a                	mv	a0,s6
+ 70c:	d91ff0ef          	jal	49c <printint>
+ 710:	8bca                	mv	s7,s2
+      state = 0;
+ 712:	4981                	li	s3,0
+ 714:	bdad                	j	58e <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 716:	008b8913          	addi	s2,s7,8
+ 71a:	4681                	li	a3,0
+ 71c:	4641                	li	a2,16
+ 71e:	000ba583          	lw	a1,0(s7)
+ 722:	855a                	mv	a0,s6
+ 724:	d79ff0ef          	jal	49c <printint>
+        i += 1;
+ 728:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 72a:	8bca                	mv	s7,s2
+      state = 0;
+ 72c:	4981                	li	s3,0
+        i += 1;
+ 72e:	b585                	j	58e <vprintf+0x4a>
+ 730:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 732:	008b8d13          	addi	s10,s7,8
+ 736:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 73a:	03000593          	li	a1,48
+ 73e:	855a                	mv	a0,s6
+ 740:	d3fff0ef          	jal	47e <putc>
+  putc(fd, 'x');
+ 744:	07800593          	li	a1,120
+ 748:	855a                	mv	a0,s6
+ 74a:	d35ff0ef          	jal	47e <putc>
+ 74e:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 750:	00000b97          	auipc	s7,0x0
+ 754:	2b0b8b93          	addi	s7,s7,688 # a00 <digits>
+ 758:	03c9d793          	srli	a5,s3,0x3c
+ 75c:	97de                	add	a5,a5,s7
+ 75e:	0007c583          	lbu	a1,0(a5)
+ 762:	855a                	mv	a0,s6
+ 764:	d1bff0ef          	jal	47e <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 768:	0992                	slli	s3,s3,0x4
+ 76a:	397d                	addiw	s2,s2,-1
+ 76c:	fe0916e3          	bnez	s2,758 <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 770:	8bea                	mv	s7,s10
+      state = 0;
+ 772:	4981                	li	s3,0
+ 774:	6d02                	ld	s10,0(sp)
+ 776:	bd21                	j	58e <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 778:	008b8993          	addi	s3,s7,8
+ 77c:	000bb903          	ld	s2,0(s7)
+ 780:	00090f63          	beqz	s2,79e <vprintf+0x25a>
+        for(; *s; s++)
+ 784:	00094583          	lbu	a1,0(s2)
+ 788:	c195                	beqz	a1,7ac <vprintf+0x268>
+          putc(fd, *s);
+ 78a:	855a                	mv	a0,s6
+ 78c:	cf3ff0ef          	jal	47e <putc>
+        for(; *s; s++)
+ 790:	0905                	addi	s2,s2,1
+ 792:	00094583          	lbu	a1,0(s2)
+ 796:	f9f5                	bnez	a1,78a <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 798:	8bce                	mv	s7,s3
+      state = 0;
+ 79a:	4981                	li	s3,0
+ 79c:	bbcd                	j	58e <vprintf+0x4a>
+          s = "(null)";
+ 79e:	00000917          	auipc	s2,0x0
+ 7a2:	25a90913          	addi	s2,s2,602 # 9f8 <malloc+0x14e>
+        for(; *s; s++)
+ 7a6:	02800593          	li	a1,40
+ 7aa:	b7c5                	j	78a <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 7ac:	8bce                	mv	s7,s3
+      state = 0;
+ 7ae:	4981                	li	s3,0
+ 7b0:	bbf9                	j	58e <vprintf+0x4a>
+ 7b2:	64a6                	ld	s1,72(sp)
+ 7b4:	79e2                	ld	s3,56(sp)
+ 7b6:	7a42                	ld	s4,48(sp)
+ 7b8:	7aa2                	ld	s5,40(sp)
+ 7ba:	7b02                	ld	s6,32(sp)
+ 7bc:	6be2                	ld	s7,24(sp)
+ 7be:	6c42                	ld	s8,16(sp)
+ 7c0:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 7c2:	60e6                	ld	ra,88(sp)
+ 7c4:	6446                	ld	s0,80(sp)
+ 7c6:	6906                	ld	s2,64(sp)
+ 7c8:	6125                	addi	sp,sp,96
+ 7ca:	8082                	ret
+
+00000000000007cc <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 7cc:	715d                	addi	sp,sp,-80
+ 7ce:	ec06                	sd	ra,24(sp)
+ 7d0:	e822                	sd	s0,16(sp)
+ 7d2:	1000                	addi	s0,sp,32
+ 7d4:	e010                	sd	a2,0(s0)
+ 7d6:	e414                	sd	a3,8(s0)
+ 7d8:	e818                	sd	a4,16(s0)
+ 7da:	ec1c                	sd	a5,24(s0)
+ 7dc:	03043023          	sd	a6,32(s0)
+ 7e0:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 7e4:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 7e8:	8622                	mv	a2,s0
+ 7ea:	d5bff0ef          	jal	544 <vprintf>
+}
+ 7ee:	60e2                	ld	ra,24(sp)
+ 7f0:	6442                	ld	s0,16(sp)
+ 7f2:	6161                	addi	sp,sp,80
+ 7f4:	8082                	ret
+
+00000000000007f6 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 7f6:	711d                	addi	sp,sp,-96
+ 7f8:	ec06                	sd	ra,24(sp)
+ 7fa:	e822                	sd	s0,16(sp)
+ 7fc:	1000                	addi	s0,sp,32
+ 7fe:	e40c                	sd	a1,8(s0)
+ 800:	e810                	sd	a2,16(s0)
+ 802:	ec14                	sd	a3,24(s0)
+ 804:	f018                	sd	a4,32(s0)
+ 806:	f41c                	sd	a5,40(s0)
+ 808:	03043823          	sd	a6,48(s0)
+ 80c:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 810:	00840613          	addi	a2,s0,8
+ 814:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 818:	85aa                	mv	a1,a0
+ 81a:	4505                	li	a0,1
+ 81c:	d29ff0ef          	jal	544 <vprintf>
+}
+ 820:	60e2                	ld	ra,24(sp)
+ 822:	6442                	ld	s0,16(sp)
+ 824:	6125                	addi	sp,sp,96
+ 826:	8082                	ret
+
+0000000000000828 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 828:	1141                	addi	sp,sp,-16
+ 82a:	e422                	sd	s0,8(sp)
+ 82c:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 82e:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 832:	00000797          	auipc	a5,0x0
+ 836:	7ce7b783          	ld	a5,1998(a5) # 1000 <freep>
+ 83a:	a02d                	j	864 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 83c:	4618                	lw	a4,8(a2)
+ 83e:	9f2d                	addw	a4,a4,a1
+ 840:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 844:	6398                	ld	a4,0(a5)
+ 846:	6310                	ld	a2,0(a4)
+ 848:	a83d                	j	886 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 84a:	ff852703          	lw	a4,-8(a0)
+ 84e:	9f31                	addw	a4,a4,a2
+ 850:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 852:	ff053683          	ld	a3,-16(a0)
+ 856:	a091                	j	89a <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 858:	6398                	ld	a4,0(a5)
+ 85a:	00e7e463          	bltu	a5,a4,862 <free+0x3a>
+ 85e:	00e6ea63          	bltu	a3,a4,872 <free+0x4a>
+{
+ 862:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 864:	fed7fae3          	bgeu	a5,a3,858 <free+0x30>
+ 868:	6398                	ld	a4,0(a5)
+ 86a:	00e6e463          	bltu	a3,a4,872 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 86e:	fee7eae3          	bltu	a5,a4,862 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 872:	ff852583          	lw	a1,-8(a0)
+ 876:	6390                	ld	a2,0(a5)
+ 878:	02059813          	slli	a6,a1,0x20
+ 87c:	01c85713          	srli	a4,a6,0x1c
+ 880:	9736                	add	a4,a4,a3
+ 882:	fae60de3          	beq	a2,a4,83c <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 886:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 88a:	4790                	lw	a2,8(a5)
+ 88c:	02061593          	slli	a1,a2,0x20
+ 890:	01c5d713          	srli	a4,a1,0x1c
+ 894:	973e                	add	a4,a4,a5
+ 896:	fae68ae3          	beq	a3,a4,84a <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 89a:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 89c:	00000717          	auipc	a4,0x0
+ 8a0:	76f73223          	sd	a5,1892(a4) # 1000 <freep>
+}
+ 8a4:	6422                	ld	s0,8(sp)
+ 8a6:	0141                	addi	sp,sp,16
+ 8a8:	8082                	ret
+
+00000000000008aa <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 8aa:	7139                	addi	sp,sp,-64
+ 8ac:	fc06                	sd	ra,56(sp)
+ 8ae:	f822                	sd	s0,48(sp)
+ 8b0:	f426                	sd	s1,40(sp)
+ 8b2:	ec4e                	sd	s3,24(sp)
+ 8b4:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 8b6:	02051493          	slli	s1,a0,0x20
+ 8ba:	9081                	srli	s1,s1,0x20
+ 8bc:	04bd                	addi	s1,s1,15
+ 8be:	8091                	srli	s1,s1,0x4
+ 8c0:	0014899b          	addiw	s3,s1,1
+ 8c4:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 8c6:	00000517          	auipc	a0,0x0
+ 8ca:	73a53503          	ld	a0,1850(a0) # 1000 <freep>
+ 8ce:	c915                	beqz	a0,902 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 8d0:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 8d2:	4798                	lw	a4,8(a5)
+ 8d4:	08977a63          	bgeu	a4,s1,968 <malloc+0xbe>
+ 8d8:	f04a                	sd	s2,32(sp)
+ 8da:	e852                	sd	s4,16(sp)
+ 8dc:	e456                	sd	s5,8(sp)
+ 8de:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 8e0:	8a4e                	mv	s4,s3
+ 8e2:	0009871b          	sext.w	a4,s3
+ 8e6:	6685                	lui	a3,0x1
+ 8e8:	00d77363          	bgeu	a4,a3,8ee <malloc+0x44>
+ 8ec:	6a05                	lui	s4,0x1
+ 8ee:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 8f2:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 8f6:	00000917          	auipc	s2,0x0
+ 8fa:	70a90913          	addi	s2,s2,1802 # 1000 <freep>
+  if(p == (char*)-1)
+ 8fe:	5afd                	li	s5,-1
+ 900:	a081                	j	940 <malloc+0x96>
+ 902:	f04a                	sd	s2,32(sp)
+ 904:	e852                	sd	s4,16(sp)
+ 906:	e456                	sd	s5,8(sp)
+ 908:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 90a:	00001797          	auipc	a5,0x1
+ 90e:	90678793          	addi	a5,a5,-1786 # 1210 <base>
+ 912:	00000717          	auipc	a4,0x0
+ 916:	6ef73723          	sd	a5,1774(a4) # 1000 <freep>
+ 91a:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 91c:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 920:	b7c1                	j	8e0 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 922:	6398                	ld	a4,0(a5)
+ 924:	e118                	sd	a4,0(a0)
+ 926:	a8a9                	j	980 <malloc+0xd6>
+  hp->s.size = nu;
+ 928:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 92c:	0541                	addi	a0,a0,16
+ 92e:	efbff0ef          	jal	828 <free>
+  return freep;
+ 932:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 936:	c12d                	beqz	a0,998 <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 938:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 93a:	4798                	lw	a4,8(a5)
+ 93c:	02977263          	bgeu	a4,s1,960 <malloc+0xb6>
+    if(p == freep)
+ 940:	00093703          	ld	a4,0(s2)
+ 944:	853e                	mv	a0,a5
+ 946:	fef719e3          	bne	a4,a5,938 <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 94a:	8552                	mv	a0,s4
+ 94c:	b03ff0ef          	jal	44e <sbrk>
+  if(p == (char*)-1)
+ 950:	fd551ce3          	bne	a0,s5,928 <malloc+0x7e>
+        return 0;
+ 954:	4501                	li	a0,0
+ 956:	7902                	ld	s2,32(sp)
+ 958:	6a42                	ld	s4,16(sp)
+ 95a:	6aa2                	ld	s5,8(sp)
+ 95c:	6b02                	ld	s6,0(sp)
+ 95e:	a03d                	j	98c <malloc+0xe2>
+ 960:	7902                	ld	s2,32(sp)
+ 962:	6a42                	ld	s4,16(sp)
+ 964:	6aa2                	ld	s5,8(sp)
+ 966:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 968:	fae48de3          	beq	s1,a4,922 <malloc+0x78>
+        p->s.size -= nunits;
+ 96c:	4137073b          	subw	a4,a4,s3
+ 970:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 972:	02071693          	slli	a3,a4,0x20
+ 976:	01c6d713          	srli	a4,a3,0x1c
+ 97a:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 97c:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 980:	00000717          	auipc	a4,0x0
+ 984:	68a73023          	sd	a0,1664(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 988:	01078513          	addi	a0,a5,16
+  }
+}
+ 98c:	70e2                	ld	ra,56(sp)
+ 98e:	7442                	ld	s0,48(sp)
+ 990:	74a2                	ld	s1,40(sp)
+ 992:	69e2                	ld	s3,24(sp)
+ 994:	6121                	addi	sp,sp,64
+ 996:	8082                	ret
+ 998:	7902                	ld	s2,32(sp)
+ 99a:	6a42                	ld	s4,16(sp)
+ 99c:	6aa2                	ld	s5,8(sp)
+ 99e:	6b02                	ld	s6,0(sp)
+ 9a0:	b7f5                	j	98c <malloc+0xe2>
diff --git a/user/wc.c b/user/wc.c
new file mode 100644
index 0000000..d8f3b2a
--- /dev/null
+++ b/user/wc.c
@@ -0,0 +1,55 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/fcntl.h"
+#include "user/user.h"
+
+char buf[512];
+
+void
+wc(int fd, char *name)
+{
+  int i, n;
+  int l, w, c, inword;
+
+  l = w = c = 0;
+  inword = 0;
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+    for(i=0; i<n; i++){
+      c++;
+      if(buf[i] == '\n')
+        l++;
+      if(strchr(" \r\t\n\v", buf[i]))
+        inword = 0;
+      else if(!inword){
+        w++;
+        inword = 1;
+      }
+    }
+  }
+  if(n < 0){
+    printf("wc: read error\n");
+    exit(1);
+  }
+  printf("%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+  int fd, i;
+
+  if(argc <= 1){
+    wc(0, "");
+    exit(0);
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], O_RDONLY)) < 0){
+      printf("wc: cannot open %s\n", argv[i]);
+      exit(1);
+    }
+    wc(fd, argv[i]);
+    close(fd);
+  }
+  exit(0);
+}
diff --git a/user/wc.d b/user/wc.d
new file mode 100644
index 0000000..813c90b
--- /dev/null
+++ b/user/wc.d
@@ -0,0 +1,2 @@
+user/wc.o: user/wc.c kernel/types.h kernel/stat.h kernel/fcntl.h \
+ user/user.h
diff --git a/user/wc.o b/user/wc.o
new file mode 100644
index 0000000..956704d
Binary files /dev/null and b/user/wc.o differ
diff --git a/user/wc.sym b/user/wc.sym
new file mode 100644
index 0000000..47fe146
--- /dev/null
+++ b/user/wc.sym
@@ -0,0 +1,68 @@
+0000000000000000 .text
+00000000000009a8 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 wc.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+000000000000047e putc
+000000000000049c printint
+0000000000000a00 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001210 base
+000000000000016e strcpy
+00000000000007f6 printf
+0000000000000318 memmove
+000000000000040e mknod
+000000000000046e trace
+0000000000000226 gets
+0000000000000446 getpid
+0000000000000466 hello
+00000000000003aa memcpy
+00000000000008aa malloc
+0000000000000456 sleep
+0000000000000476 sysinfo
+00000000000003d6 pipe
+00000000000003e6 write
+000000000000041e fstat
+00000000000007cc fprintf
+00000000000003f6 kill
+0000000000000544 vprintf
+0000000000000436 chdir
+00000000000003fe exec
+00000000000003ce wait
+00000000000003de read
+0000000000000416 unlink
+0000000000000000 wc
+0000000000000370 memcmp
+00000000000003be fork
+000000000000044e sbrk
+000000000000045e uptime
+00000000000001e0 memset
+00000000000000da main
+000000000000018a strcmp
+000000000000043e dup
+0000000000001010 buf
+0000000000000296 stat
+0000000000000426 link
+00000000000003c6 exit
+000000000000015c start
+00000000000002d0 atoi
+00000000000001b6 strlen
+0000000000000406 open
+0000000000000202 strchr
+000000000000042e mkdir
+00000000000003ee close
+0000000000000828 free
diff --git a/user/xargstest.sh b/user/xargstest.sh
new file mode 100644
index 0000000..4362589
--- /dev/null
+++ b/user/xargstest.sh
@@ -0,0 +1,6 @@
+mkdir a
+echo hello > a/b
+mkdir c
+echo hello > c/b
+echo hello > b
+find . b | xargs grep hello
diff --git a/user/zombie.asm b/user/zombie.asm
new file mode 100644
index 0000000..c3c497c
--- /dev/null
+++ b/user/zombie.asm
@@ -0,0 +1,1459 @@
+
+user/_zombie:     file format elf64-littleriscv
+
+
+Disassembly of section .text:
+
+0000000000000000 <main>:
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(void)
+{
+   0:	1141                	addi	sp,sp,-16
+   2:	e406                	sd	ra,8(sp)
+   4:	e022                	sd	s0,0(sp)
+   6:	0800                	addi	s0,sp,16
+  if(fork() > 0)
+   8:	278000ef          	jal	280 <fork>
+   c:	00a04563          	bgtz	a0,16 <main+0x16>
+    sleep(5);  // Let child exit before parent.
+  exit(0);
+  10:	4501                	li	a0,0
+  12:	276000ef          	jal	288 <exit>
+    sleep(5);  // Let child exit before parent.
+  16:	4515                	li	a0,5
+  18:	300000ef          	jal	318 <sleep>
+  1c:	bfd5                	j	10 <main+0x10>
+
+000000000000001e <start>:
+//
+// wrapper so that it's OK if main() does not call exit().
+//
+void
+start()
+{
+  1e:	1141                	addi	sp,sp,-16
+  20:	e406                	sd	ra,8(sp)
+  22:	e022                	sd	s0,0(sp)
+  24:	0800                	addi	s0,sp,16
+  extern int main();
+  main();
+  26:	fdbff0ef          	jal	0 <main>
+  exit(0);
+  2a:	4501                	li	a0,0
+  2c:	25c000ef          	jal	288 <exit>
+
+0000000000000030 <strcpy>:
+}
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	1141                	addi	sp,sp,-16
+  32:	e422                	sd	s0,8(sp)
+  34:	0800                	addi	s0,sp,16
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  36:	87aa                	mv	a5,a0
+  38:	0585                	addi	a1,a1,1
+  3a:	0785                	addi	a5,a5,1
+  3c:	fff5c703          	lbu	a4,-1(a1)
+  40:	fee78fa3          	sb	a4,-1(a5)
+  44:	fb75                	bnez	a4,38 <strcpy+0x8>
+    ;
+  return os;
+}
+  46:	6422                	ld	s0,8(sp)
+  48:	0141                	addi	sp,sp,16
+  4a:	8082                	ret
+
+000000000000004c <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  4c:	1141                	addi	sp,sp,-16
+  4e:	e422                	sd	s0,8(sp)
+  50:	0800                	addi	s0,sp,16
+  while(*p && *p == *q)
+  52:	00054783          	lbu	a5,0(a0)
+  56:	cb91                	beqz	a5,6a <strcmp+0x1e>
+  58:	0005c703          	lbu	a4,0(a1)
+  5c:	00f71763          	bne	a4,a5,6a <strcmp+0x1e>
+    p++, q++;
+  60:	0505                	addi	a0,a0,1
+  62:	0585                	addi	a1,a1,1
+  while(*p && *p == *q)
+  64:	00054783          	lbu	a5,0(a0)
+  68:	fbe5                	bnez	a5,58 <strcmp+0xc>
+  return (uchar)*p - (uchar)*q;
+  6a:	0005c503          	lbu	a0,0(a1)
+}
+  6e:	40a7853b          	subw	a0,a5,a0
+  72:	6422                	ld	s0,8(sp)
+  74:	0141                	addi	sp,sp,16
+  76:	8082                	ret
+
+0000000000000078 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  78:	1141                	addi	sp,sp,-16
+  7a:	e422                	sd	s0,8(sp)
+  7c:	0800                	addi	s0,sp,16
+  int n;
+
+  for(n = 0; s[n]; n++)
+  7e:	00054783          	lbu	a5,0(a0)
+  82:	cf91                	beqz	a5,9e <strlen+0x26>
+  84:	0505                	addi	a0,a0,1
+  86:	87aa                	mv	a5,a0
+  88:	86be                	mv	a3,a5
+  8a:	0785                	addi	a5,a5,1
+  8c:	fff7c703          	lbu	a4,-1(a5)
+  90:	ff65                	bnez	a4,88 <strlen+0x10>
+  92:	40a6853b          	subw	a0,a3,a0
+  96:	2505                	addiw	a0,a0,1
+    ;
+  return n;
+}
+  98:	6422                	ld	s0,8(sp)
+  9a:	0141                	addi	sp,sp,16
+  9c:	8082                	ret
+  for(n = 0; s[n]; n++)
+  9e:	4501                	li	a0,0
+  a0:	bfe5                	j	98 <strlen+0x20>
+
+00000000000000a2 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  a2:	1141                	addi	sp,sp,-16
+  a4:	e422                	sd	s0,8(sp)
+  a6:	0800                	addi	s0,sp,16
+  char *cdst = (char *) dst;
+  int i;
+  for(i = 0; i < n; i++){
+  a8:	ca19                	beqz	a2,be <memset+0x1c>
+  aa:	87aa                	mv	a5,a0
+  ac:	1602                	slli	a2,a2,0x20
+  ae:	9201                	srli	a2,a2,0x20
+  b0:	00a60733          	add	a4,a2,a0
+    cdst[i] = c;
+  b4:	00b78023          	sb	a1,0(a5)
+  for(i = 0; i < n; i++){
+  b8:	0785                	addi	a5,a5,1
+  ba:	fee79de3          	bne	a5,a4,b4 <memset+0x12>
+  }
+  return dst;
+}
+  be:	6422                	ld	s0,8(sp)
+  c0:	0141                	addi	sp,sp,16
+  c2:	8082                	ret
+
+00000000000000c4 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+  c4:	1141                	addi	sp,sp,-16
+  c6:	e422                	sd	s0,8(sp)
+  c8:	0800                	addi	s0,sp,16
+  for(; *s; s++)
+  ca:	00054783          	lbu	a5,0(a0)
+  ce:	cb99                	beqz	a5,e4 <strchr+0x20>
+    if(*s == c)
+  d0:	00f58763          	beq	a1,a5,de <strchr+0x1a>
+  for(; *s; s++)
+  d4:	0505                	addi	a0,a0,1
+  d6:	00054783          	lbu	a5,0(a0)
+  da:	fbfd                	bnez	a5,d0 <strchr+0xc>
+      return (char*)s;
+  return 0;
+  dc:	4501                	li	a0,0
+}
+  de:	6422                	ld	s0,8(sp)
+  e0:	0141                	addi	sp,sp,16
+  e2:	8082                	ret
+  return 0;
+  e4:	4501                	li	a0,0
+  e6:	bfe5                	j	de <strchr+0x1a>
+
+00000000000000e8 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+  e8:	711d                	addi	sp,sp,-96
+  ea:	ec86                	sd	ra,88(sp)
+  ec:	e8a2                	sd	s0,80(sp)
+  ee:	e4a6                	sd	s1,72(sp)
+  f0:	e0ca                	sd	s2,64(sp)
+  f2:	fc4e                	sd	s3,56(sp)
+  f4:	f852                	sd	s4,48(sp)
+  f6:	f456                	sd	s5,40(sp)
+  f8:	f05a                	sd	s6,32(sp)
+  fa:	ec5e                	sd	s7,24(sp)
+  fc:	1080                	addi	s0,sp,96
+  fe:	8baa                	mv	s7,a0
+ 100:	8a2e                	mv	s4,a1
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+ 102:	892a                	mv	s2,a0
+ 104:	4481                	li	s1,0
+    cc = read(0, &c, 1);
+    if(cc < 1)
+      break;
+    buf[i++] = c;
+    if(c == '\n' || c == '\r')
+ 106:	4aa9                	li	s5,10
+ 108:	4b35                	li	s6,13
+  for(i=0; i+1 < max; ){
+ 10a:	89a6                	mv	s3,s1
+ 10c:	2485                	addiw	s1,s1,1
+ 10e:	0344d663          	bge	s1,s4,13a <gets+0x52>
+    cc = read(0, &c, 1);
+ 112:	4605                	li	a2,1
+ 114:	faf40593          	addi	a1,s0,-81
+ 118:	4501                	li	a0,0
+ 11a:	186000ef          	jal	2a0 <read>
+    if(cc < 1)
+ 11e:	00a05e63          	blez	a0,13a <gets+0x52>
+    buf[i++] = c;
+ 122:	faf44783          	lbu	a5,-81(s0)
+ 126:	00f90023          	sb	a5,0(s2)
+    if(c == '\n' || c == '\r')
+ 12a:	01578763          	beq	a5,s5,138 <gets+0x50>
+ 12e:	0905                	addi	s2,s2,1
+ 130:	fd679de3          	bne	a5,s6,10a <gets+0x22>
+    buf[i++] = c;
+ 134:	89a6                	mv	s3,s1
+ 136:	a011                	j	13a <gets+0x52>
+ 138:	89a6                	mv	s3,s1
+      break;
+  }
+  buf[i] = '\0';
+ 13a:	99de                	add	s3,s3,s7
+ 13c:	00098023          	sb	zero,0(s3)
+  return buf;
+}
+ 140:	855e                	mv	a0,s7
+ 142:	60e6                	ld	ra,88(sp)
+ 144:	6446                	ld	s0,80(sp)
+ 146:	64a6                	ld	s1,72(sp)
+ 148:	6906                	ld	s2,64(sp)
+ 14a:	79e2                	ld	s3,56(sp)
+ 14c:	7a42                	ld	s4,48(sp)
+ 14e:	7aa2                	ld	s5,40(sp)
+ 150:	7b02                	ld	s6,32(sp)
+ 152:	6be2                	ld	s7,24(sp)
+ 154:	6125                	addi	sp,sp,96
+ 156:	8082                	ret
+
+0000000000000158 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 158:	1101                	addi	sp,sp,-32
+ 15a:	ec06                	sd	ra,24(sp)
+ 15c:	e822                	sd	s0,16(sp)
+ 15e:	e04a                	sd	s2,0(sp)
+ 160:	1000                	addi	s0,sp,32
+ 162:	892e                	mv	s2,a1
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 164:	4581                	li	a1,0
+ 166:	162000ef          	jal	2c8 <open>
+  if(fd < 0)
+ 16a:	02054263          	bltz	a0,18e <stat+0x36>
+ 16e:	e426                	sd	s1,8(sp)
+ 170:	84aa                	mv	s1,a0
+    return -1;
+  r = fstat(fd, st);
+ 172:	85ca                	mv	a1,s2
+ 174:	16c000ef          	jal	2e0 <fstat>
+ 178:	892a                	mv	s2,a0
+  close(fd);
+ 17a:	8526                	mv	a0,s1
+ 17c:	134000ef          	jal	2b0 <close>
+  return r;
+ 180:	64a2                	ld	s1,8(sp)
+}
+ 182:	854a                	mv	a0,s2
+ 184:	60e2                	ld	ra,24(sp)
+ 186:	6442                	ld	s0,16(sp)
+ 188:	6902                	ld	s2,0(sp)
+ 18a:	6105                	addi	sp,sp,32
+ 18c:	8082                	ret
+    return -1;
+ 18e:	597d                	li	s2,-1
+ 190:	bfcd                	j	182 <stat+0x2a>
+
+0000000000000192 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 192:	1141                	addi	sp,sp,-16
+ 194:	e422                	sd	s0,8(sp)
+ 196:	0800                	addi	s0,sp,16
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 198:	00054683          	lbu	a3,0(a0)
+ 19c:	fd06879b          	addiw	a5,a3,-48
+ 1a0:	0ff7f793          	zext.b	a5,a5
+ 1a4:	4625                	li	a2,9
+ 1a6:	02f66863          	bltu	a2,a5,1d6 <atoi+0x44>
+ 1aa:	872a                	mv	a4,a0
+  n = 0;
+ 1ac:	4501                	li	a0,0
+    n = n*10 + *s++ - '0';
+ 1ae:	0705                	addi	a4,a4,1
+ 1b0:	0025179b          	slliw	a5,a0,0x2
+ 1b4:	9fa9                	addw	a5,a5,a0
+ 1b6:	0017979b          	slliw	a5,a5,0x1
+ 1ba:	9fb5                	addw	a5,a5,a3
+ 1bc:	fd07851b          	addiw	a0,a5,-48
+  while('0' <= *s && *s <= '9')
+ 1c0:	00074683          	lbu	a3,0(a4)
+ 1c4:	fd06879b          	addiw	a5,a3,-48
+ 1c8:	0ff7f793          	zext.b	a5,a5
+ 1cc:	fef671e3          	bgeu	a2,a5,1ae <atoi+0x1c>
+  return n;
+}
+ 1d0:	6422                	ld	s0,8(sp)
+ 1d2:	0141                	addi	sp,sp,16
+ 1d4:	8082                	ret
+  n = 0;
+ 1d6:	4501                	li	a0,0
+ 1d8:	bfe5                	j	1d0 <atoi+0x3e>
+
+00000000000001da <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 1da:	1141                	addi	sp,sp,-16
+ 1dc:	e422                	sd	s0,8(sp)
+ 1de:	0800                	addi	s0,sp,16
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  if (src > dst) {
+ 1e0:	02b57463          	bgeu	a0,a1,208 <memmove+0x2e>
+    while(n-- > 0)
+ 1e4:	00c05f63          	blez	a2,202 <memmove+0x28>
+ 1e8:	1602                	slli	a2,a2,0x20
+ 1ea:	9201                	srli	a2,a2,0x20
+ 1ec:	00c507b3          	add	a5,a0,a2
+  dst = vdst;
+ 1f0:	872a                	mv	a4,a0
+      *dst++ = *src++;
+ 1f2:	0585                	addi	a1,a1,1
+ 1f4:	0705                	addi	a4,a4,1
+ 1f6:	fff5c683          	lbu	a3,-1(a1)
+ 1fa:	fed70fa3          	sb	a3,-1(a4)
+    while(n-- > 0)
+ 1fe:	fef71ae3          	bne	a4,a5,1f2 <memmove+0x18>
+    src += n;
+    while(n-- > 0)
+      *--dst = *--src;
+  }
+  return vdst;
+}
+ 202:	6422                	ld	s0,8(sp)
+ 204:	0141                	addi	sp,sp,16
+ 206:	8082                	ret
+    dst += n;
+ 208:	00c50733          	add	a4,a0,a2
+    src += n;
+ 20c:	95b2                	add	a1,a1,a2
+    while(n-- > 0)
+ 20e:	fec05ae3          	blez	a2,202 <memmove+0x28>
+ 212:	fff6079b          	addiw	a5,a2,-1
+ 216:	1782                	slli	a5,a5,0x20
+ 218:	9381                	srli	a5,a5,0x20
+ 21a:	fff7c793          	not	a5,a5
+ 21e:	97ba                	add	a5,a5,a4
+      *--dst = *--src;
+ 220:	15fd                	addi	a1,a1,-1
+ 222:	177d                	addi	a4,a4,-1
+ 224:	0005c683          	lbu	a3,0(a1)
+ 228:	00d70023          	sb	a3,0(a4)
+    while(n-- > 0)
+ 22c:	fee79ae3          	bne	a5,a4,220 <memmove+0x46>
+ 230:	bfc9                	j	202 <memmove+0x28>
+
+0000000000000232 <memcmp>:
+
+int
+memcmp(const void *s1, const void *s2, uint n)
+{
+ 232:	1141                	addi	sp,sp,-16
+ 234:	e422                	sd	s0,8(sp)
+ 236:	0800                	addi	s0,sp,16
+  const char *p1 = s1, *p2 = s2;
+  while (n-- > 0) {
+ 238:	ca05                	beqz	a2,268 <memcmp+0x36>
+ 23a:	fff6069b          	addiw	a3,a2,-1
+ 23e:	1682                	slli	a3,a3,0x20
+ 240:	9281                	srli	a3,a3,0x20
+ 242:	0685                	addi	a3,a3,1
+ 244:	96aa                	add	a3,a3,a0
+    if (*p1 != *p2) {
+ 246:	00054783          	lbu	a5,0(a0)
+ 24a:	0005c703          	lbu	a4,0(a1)
+ 24e:	00e79863          	bne	a5,a4,25e <memcmp+0x2c>
+      return *p1 - *p2;
+    }
+    p1++;
+ 252:	0505                	addi	a0,a0,1
+    p2++;
+ 254:	0585                	addi	a1,a1,1
+  while (n-- > 0) {
+ 256:	fed518e3          	bne	a0,a3,246 <memcmp+0x14>
+  }
+  return 0;
+ 25a:	4501                	li	a0,0
+ 25c:	a019                	j	262 <memcmp+0x30>
+      return *p1 - *p2;
+ 25e:	40e7853b          	subw	a0,a5,a4
+}
+ 262:	6422                	ld	s0,8(sp)
+ 264:	0141                	addi	sp,sp,16
+ 266:	8082                	ret
+  return 0;
+ 268:	4501                	li	a0,0
+ 26a:	bfe5                	j	262 <memcmp+0x30>
+
+000000000000026c <memcpy>:
+
+void *
+memcpy(void *dst, const void *src, uint n)
+{
+ 26c:	1141                	addi	sp,sp,-16
+ 26e:	e406                	sd	ra,8(sp)
+ 270:	e022                	sd	s0,0(sp)
+ 272:	0800                	addi	s0,sp,16
+  return memmove(dst, src, n);
+ 274:	f67ff0ef          	jal	1da <memmove>
+}
+ 278:	60a2                	ld	ra,8(sp)
+ 27a:	6402                	ld	s0,0(sp)
+ 27c:	0141                	addi	sp,sp,16
+ 27e:	8082                	ret
+
+0000000000000280 <fork>:
+# generated by usys.pl - do not edit
+#include "kernel/syscall.h"
+.global fork
+fork:
+ li a7, SYS_fork
+ 280:	4885                	li	a7,1
+ ecall
+ 282:	00000073          	ecall
+ ret
+ 286:	8082                	ret
+
+0000000000000288 <exit>:
+.global exit
+exit:
+ li a7, SYS_exit
+ 288:	4889                	li	a7,2
+ ecall
+ 28a:	00000073          	ecall
+ ret
+ 28e:	8082                	ret
+
+0000000000000290 <wait>:
+.global wait
+wait:
+ li a7, SYS_wait
+ 290:	488d                	li	a7,3
+ ecall
+ 292:	00000073          	ecall
+ ret
+ 296:	8082                	ret
+
+0000000000000298 <pipe>:
+.global pipe
+pipe:
+ li a7, SYS_pipe
+ 298:	4891                	li	a7,4
+ ecall
+ 29a:	00000073          	ecall
+ ret
+ 29e:	8082                	ret
+
+00000000000002a0 <read>:
+.global read
+read:
+ li a7, SYS_read
+ 2a0:	4895                	li	a7,5
+ ecall
+ 2a2:	00000073          	ecall
+ ret
+ 2a6:	8082                	ret
+
+00000000000002a8 <write>:
+.global write
+write:
+ li a7, SYS_write
+ 2a8:	48c1                	li	a7,16
+ ecall
+ 2aa:	00000073          	ecall
+ ret
+ 2ae:	8082                	ret
+
+00000000000002b0 <close>:
+.global close
+close:
+ li a7, SYS_close
+ 2b0:	48d5                	li	a7,21
+ ecall
+ 2b2:	00000073          	ecall
+ ret
+ 2b6:	8082                	ret
+
+00000000000002b8 <kill>:
+.global kill
+kill:
+ li a7, SYS_kill
+ 2b8:	4899                	li	a7,6
+ ecall
+ 2ba:	00000073          	ecall
+ ret
+ 2be:	8082                	ret
+
+00000000000002c0 <exec>:
+.global exec
+exec:
+ li a7, SYS_exec
+ 2c0:	489d                	li	a7,7
+ ecall
+ 2c2:	00000073          	ecall
+ ret
+ 2c6:	8082                	ret
+
+00000000000002c8 <open>:
+.global open
+open:
+ li a7, SYS_open
+ 2c8:	48bd                	li	a7,15
+ ecall
+ 2ca:	00000073          	ecall
+ ret
+ 2ce:	8082                	ret
+
+00000000000002d0 <mknod>:
+.global mknod
+mknod:
+ li a7, SYS_mknod
+ 2d0:	48c5                	li	a7,17
+ ecall
+ 2d2:	00000073          	ecall
+ ret
+ 2d6:	8082                	ret
+
+00000000000002d8 <unlink>:
+.global unlink
+unlink:
+ li a7, SYS_unlink
+ 2d8:	48c9                	li	a7,18
+ ecall
+ 2da:	00000073          	ecall
+ ret
+ 2de:	8082                	ret
+
+00000000000002e0 <fstat>:
+.global fstat
+fstat:
+ li a7, SYS_fstat
+ 2e0:	48a1                	li	a7,8
+ ecall
+ 2e2:	00000073          	ecall
+ ret
+ 2e6:	8082                	ret
+
+00000000000002e8 <link>:
+.global link
+link:
+ li a7, SYS_link
+ 2e8:	48cd                	li	a7,19
+ ecall
+ 2ea:	00000073          	ecall
+ ret
+ 2ee:	8082                	ret
+
+00000000000002f0 <mkdir>:
+.global mkdir
+mkdir:
+ li a7, SYS_mkdir
+ 2f0:	48d1                	li	a7,20
+ ecall
+ 2f2:	00000073          	ecall
+ ret
+ 2f6:	8082                	ret
+
+00000000000002f8 <chdir>:
+.global chdir
+chdir:
+ li a7, SYS_chdir
+ 2f8:	48a5                	li	a7,9
+ ecall
+ 2fa:	00000073          	ecall
+ ret
+ 2fe:	8082                	ret
+
+0000000000000300 <dup>:
+.global dup
+dup:
+ li a7, SYS_dup
+ 300:	48a9                	li	a7,10
+ ecall
+ 302:	00000073          	ecall
+ ret
+ 306:	8082                	ret
+
+0000000000000308 <getpid>:
+.global getpid
+getpid:
+ li a7, SYS_getpid
+ 308:	48ad                	li	a7,11
+ ecall
+ 30a:	00000073          	ecall
+ ret
+ 30e:	8082                	ret
+
+0000000000000310 <sbrk>:
+.global sbrk
+sbrk:
+ li a7, SYS_sbrk
+ 310:	48b1                	li	a7,12
+ ecall
+ 312:	00000073          	ecall
+ ret
+ 316:	8082                	ret
+
+0000000000000318 <sleep>:
+.global sleep
+sleep:
+ li a7, SYS_sleep
+ 318:	48b5                	li	a7,13
+ ecall
+ 31a:	00000073          	ecall
+ ret
+ 31e:	8082                	ret
+
+0000000000000320 <uptime>:
+.global uptime
+uptime:
+ li a7, SYS_uptime
+ 320:	48b9                	li	a7,14
+ ecall
+ 322:	00000073          	ecall
+ ret
+ 326:	8082                	ret
+
+0000000000000328 <hello>:
+.global hello
+hello:
+ li a7, SYS_hello
+ 328:	48d9                	li	a7,22
+ ecall
+ 32a:	00000073          	ecall
+ ret
+ 32e:	8082                	ret
+
+0000000000000330 <trace>:
+.global trace
+trace:
+ li a7, SYS_trace
+ 330:	48dd                	li	a7,23
+ ecall
+ 332:	00000073          	ecall
+ ret
+ 336:	8082                	ret
+
+0000000000000338 <sysinfo>:
+.global sysinfo
+sysinfo:
+ li a7, SYS_sysinfo
+ 338:	48e1                	li	a7,24
+ ecall
+ 33a:	00000073          	ecall
+ ret
+ 33e:	8082                	ret
+
+0000000000000340 <putc>:
+
+static char digits[] = "0123456789ABCDEF";
+
+static void
+putc(int fd, char c)
+{
+ 340:	1101                	addi	sp,sp,-32
+ 342:	ec06                	sd	ra,24(sp)
+ 344:	e822                	sd	s0,16(sp)
+ 346:	1000                	addi	s0,sp,32
+ 348:	feb407a3          	sb	a1,-17(s0)
+  write(fd, &c, 1);
+ 34c:	4605                	li	a2,1
+ 34e:	fef40593          	addi	a1,s0,-17
+ 352:	f57ff0ef          	jal	2a8 <write>
+}
+ 356:	60e2                	ld	ra,24(sp)
+ 358:	6442                	ld	s0,16(sp)
+ 35a:	6105                	addi	sp,sp,32
+ 35c:	8082                	ret
+
+000000000000035e <printint>:
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 35e:	7139                	addi	sp,sp,-64
+ 360:	fc06                	sd	ra,56(sp)
+ 362:	f822                	sd	s0,48(sp)
+ 364:	f426                	sd	s1,40(sp)
+ 366:	0080                	addi	s0,sp,64
+ 368:	84aa                	mv	s1,a0
+  char buf[16];
+  int i, neg;
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+ 36a:	c299                	beqz	a3,370 <printint+0x12>
+ 36c:	0805c963          	bltz	a1,3fe <printint+0xa0>
+    neg = 1;
+    x = -xx;
+  } else {
+    x = xx;
+ 370:	2581                	sext.w	a1,a1
+  neg = 0;
+ 372:	4881                	li	a7,0
+ 374:	fc040693          	addi	a3,s0,-64
+  }
+
+  i = 0;
+ 378:	4701                	li	a4,0
+  do{
+    buf[i++] = digits[x % base];
+ 37a:	2601                	sext.w	a2,a2
+ 37c:	00000517          	auipc	a0,0x0
+ 380:	4fc50513          	addi	a0,a0,1276 # 878 <digits>
+ 384:	883a                	mv	a6,a4
+ 386:	2705                	addiw	a4,a4,1
+ 388:	02c5f7bb          	remuw	a5,a1,a2
+ 38c:	1782                	slli	a5,a5,0x20
+ 38e:	9381                	srli	a5,a5,0x20
+ 390:	97aa                	add	a5,a5,a0
+ 392:	0007c783          	lbu	a5,0(a5)
+ 396:	00f68023          	sb	a5,0(a3)
+  }while((x /= base) != 0);
+ 39a:	0005879b          	sext.w	a5,a1
+ 39e:	02c5d5bb          	divuw	a1,a1,a2
+ 3a2:	0685                	addi	a3,a3,1
+ 3a4:	fec7f0e3          	bgeu	a5,a2,384 <printint+0x26>
+  if(neg)
+ 3a8:	00088c63          	beqz	a7,3c0 <printint+0x62>
+    buf[i++] = '-';
+ 3ac:	fd070793          	addi	a5,a4,-48
+ 3b0:	00878733          	add	a4,a5,s0
+ 3b4:	02d00793          	li	a5,45
+ 3b8:	fef70823          	sb	a5,-16(a4)
+ 3bc:	0028071b          	addiw	a4,a6,2
+
+  while(--i >= 0)
+ 3c0:	02e05a63          	blez	a4,3f4 <printint+0x96>
+ 3c4:	f04a                	sd	s2,32(sp)
+ 3c6:	ec4e                	sd	s3,24(sp)
+ 3c8:	fc040793          	addi	a5,s0,-64
+ 3cc:	00e78933          	add	s2,a5,a4
+ 3d0:	fff78993          	addi	s3,a5,-1
+ 3d4:	99ba                	add	s3,s3,a4
+ 3d6:	377d                	addiw	a4,a4,-1
+ 3d8:	1702                	slli	a4,a4,0x20
+ 3da:	9301                	srli	a4,a4,0x20
+ 3dc:	40e989b3          	sub	s3,s3,a4
+    putc(fd, buf[i]);
+ 3e0:	fff94583          	lbu	a1,-1(s2)
+ 3e4:	8526                	mv	a0,s1
+ 3e6:	f5bff0ef          	jal	340 <putc>
+  while(--i >= 0)
+ 3ea:	197d                	addi	s2,s2,-1
+ 3ec:	ff391ae3          	bne	s2,s3,3e0 <printint+0x82>
+ 3f0:	7902                	ld	s2,32(sp)
+ 3f2:	69e2                	ld	s3,24(sp)
+}
+ 3f4:	70e2                	ld	ra,56(sp)
+ 3f6:	7442                	ld	s0,48(sp)
+ 3f8:	74a2                	ld	s1,40(sp)
+ 3fa:	6121                	addi	sp,sp,64
+ 3fc:	8082                	ret
+    x = -xx;
+ 3fe:	40b005bb          	negw	a1,a1
+    neg = 1;
+ 402:	4885                	li	a7,1
+    x = -xx;
+ 404:	bf85                	j	374 <printint+0x16>
+
+0000000000000406 <vprintf>:
+}
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+vprintf(int fd, const char *fmt, va_list ap)
+{
+ 406:	711d                	addi	sp,sp,-96
+ 408:	ec86                	sd	ra,88(sp)
+ 40a:	e8a2                	sd	s0,80(sp)
+ 40c:	e0ca                	sd	s2,64(sp)
+ 40e:	1080                	addi	s0,sp,96
+  char *s;
+  int c0, c1, c2, i, state;
+
+  state = 0;
+  for(i = 0; fmt[i]; i++){
+ 410:	0005c903          	lbu	s2,0(a1)
+ 414:	26090863          	beqz	s2,684 <vprintf+0x27e>
+ 418:	e4a6                	sd	s1,72(sp)
+ 41a:	fc4e                	sd	s3,56(sp)
+ 41c:	f852                	sd	s4,48(sp)
+ 41e:	f456                	sd	s5,40(sp)
+ 420:	f05a                	sd	s6,32(sp)
+ 422:	ec5e                	sd	s7,24(sp)
+ 424:	e862                	sd	s8,16(sp)
+ 426:	e466                	sd	s9,8(sp)
+ 428:	8b2a                	mv	s6,a0
+ 42a:	8a2e                	mv	s4,a1
+ 42c:	8bb2                	mv	s7,a2
+  state = 0;
+ 42e:	4981                	li	s3,0
+  for(i = 0; fmt[i]; i++){
+ 430:	4481                	li	s1,0
+ 432:	4701                	li	a4,0
+      if(c0 == '%'){
+        state = '%';
+      } else {
+        putc(fd, c0);
+      }
+    } else if(state == '%'){
+ 434:	02500a93          	li	s5,37
+      c1 = c2 = 0;
+      if(c0) c1 = fmt[i+1] & 0xff;
+      if(c1) c2 = fmt[i+2] & 0xff;
+      if(c0 == 'd'){
+ 438:	06400c13          	li	s8,100
+        printint(fd, va_arg(ap, int), 10, 1);
+      } else if(c0 == 'l' && c1 == 'd'){
+ 43c:	06c00c93          	li	s9,108
+ 440:	a005                	j	460 <vprintf+0x5a>
+        putc(fd, c0);
+ 442:	85ca                	mv	a1,s2
+ 444:	855a                	mv	a0,s6
+ 446:	efbff0ef          	jal	340 <putc>
+ 44a:	a019                	j	450 <vprintf+0x4a>
+    } else if(state == '%'){
+ 44c:	03598263          	beq	s3,s5,470 <vprintf+0x6a>
+  for(i = 0; fmt[i]; i++){
+ 450:	2485                	addiw	s1,s1,1
+ 452:	8726                	mv	a4,s1
+ 454:	009a07b3          	add	a5,s4,s1
+ 458:	0007c903          	lbu	s2,0(a5)
+ 45c:	20090c63          	beqz	s2,674 <vprintf+0x26e>
+    c0 = fmt[i] & 0xff;
+ 460:	0009079b          	sext.w	a5,s2
+    if(state == 0){
+ 464:	fe0994e3          	bnez	s3,44c <vprintf+0x46>
+      if(c0 == '%'){
+ 468:	fd579de3          	bne	a5,s5,442 <vprintf+0x3c>
+        state = '%';
+ 46c:	89be                	mv	s3,a5
+ 46e:	b7cd                	j	450 <vprintf+0x4a>
+      if(c0) c1 = fmt[i+1] & 0xff;
+ 470:	00ea06b3          	add	a3,s4,a4
+ 474:	0016c683          	lbu	a3,1(a3)
+      c1 = c2 = 0;
+ 478:	8636                	mv	a2,a3
+      if(c1) c2 = fmt[i+2] & 0xff;
+ 47a:	c681                	beqz	a3,482 <vprintf+0x7c>
+ 47c:	9752                	add	a4,a4,s4
+ 47e:	00274603          	lbu	a2,2(a4)
+      if(c0 == 'd'){
+ 482:	03878f63          	beq	a5,s8,4c0 <vprintf+0xba>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 486:	05978963          	beq	a5,s9,4d8 <vprintf+0xd2>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+        printint(fd, va_arg(ap, uint64), 10, 1);
+        i += 2;
+      } else if(c0 == 'u'){
+ 48a:	07500713          	li	a4,117
+ 48e:	0ee78363          	beq	a5,a4,574 <vprintf+0x16e>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+        printint(fd, va_arg(ap, uint64), 10, 0);
+        i += 2;
+      } else if(c0 == 'x'){
+ 492:	07800713          	li	a4,120
+ 496:	12e78563          	beq	a5,a4,5c0 <vprintf+0x1ba>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 1;
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+        printint(fd, va_arg(ap, uint64), 16, 0);
+        i += 2;
+      } else if(c0 == 'p'){
+ 49a:	07000713          	li	a4,112
+ 49e:	14e78a63          	beq	a5,a4,5f2 <vprintf+0x1ec>
+        printptr(fd, va_arg(ap, uint64));
+      } else if(c0 == 's'){
+ 4a2:	07300713          	li	a4,115
+ 4a6:	18e78a63          	beq	a5,a4,63a <vprintf+0x234>
+        if((s = va_arg(ap, char*)) == 0)
+          s = "(null)";
+        for(; *s; s++)
+          putc(fd, *s);
+      } else if(c0 == '%'){
+ 4aa:	02500713          	li	a4,37
+ 4ae:	04e79563          	bne	a5,a4,4f8 <vprintf+0xf2>
+        putc(fd, '%');
+ 4b2:	02500593          	li	a1,37
+ 4b6:	855a                	mv	a0,s6
+ 4b8:	e89ff0ef          	jal	340 <putc>
+        // Unknown % sequence.  Print it to draw attention.
+        putc(fd, '%');
+        putc(fd, c);
+      }
+#endif
+      state = 0;
+ 4bc:	4981                	li	s3,0
+ 4be:	bf49                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 1);
+ 4c0:	008b8913          	addi	s2,s7,8
+ 4c4:	4685                	li	a3,1
+ 4c6:	4629                	li	a2,10
+ 4c8:	000ba583          	lw	a1,0(s7)
+ 4cc:	855a                	mv	a0,s6
+ 4ce:	e91ff0ef          	jal	35e <printint>
+ 4d2:	8bca                	mv	s7,s2
+      state = 0;
+ 4d4:	4981                	li	s3,0
+ 4d6:	bfad                	j	450 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'd'){
+ 4d8:	06400793          	li	a5,100
+ 4dc:	02f68963          	beq	a3,a5,50e <vprintf+0x108>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 4e0:	06c00793          	li	a5,108
+ 4e4:	04f68263          	beq	a3,a5,528 <vprintf+0x122>
+      } else if(c0 == 'l' && c1 == 'u'){
+ 4e8:	07500793          	li	a5,117
+ 4ec:	0af68063          	beq	a3,a5,58c <vprintf+0x186>
+      } else if(c0 == 'l' && c1 == 'x'){
+ 4f0:	07800793          	li	a5,120
+ 4f4:	0ef68263          	beq	a3,a5,5d8 <vprintf+0x1d2>
+        putc(fd, '%');
+ 4f8:	02500593          	li	a1,37
+ 4fc:	855a                	mv	a0,s6
+ 4fe:	e43ff0ef          	jal	340 <putc>
+        putc(fd, c0);
+ 502:	85ca                	mv	a1,s2
+ 504:	855a                	mv	a0,s6
+ 506:	e3bff0ef          	jal	340 <putc>
+      state = 0;
+ 50a:	4981                	li	s3,0
+ 50c:	b791                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 50e:	008b8913          	addi	s2,s7,8
+ 512:	4685                	li	a3,1
+ 514:	4629                	li	a2,10
+ 516:	000ba583          	lw	a1,0(s7)
+ 51a:	855a                	mv	a0,s6
+ 51c:	e43ff0ef          	jal	35e <printint>
+        i += 1;
+ 520:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 522:	8bca                	mv	s7,s2
+      state = 0;
+ 524:	4981                	li	s3,0
+        i += 1;
+ 526:	b72d                	j	450 <vprintf+0x4a>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'd'){
+ 528:	06400793          	li	a5,100
+ 52c:	02f60763          	beq	a2,a5,55a <vprintf+0x154>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'u'){
+ 530:	07500793          	li	a5,117
+ 534:	06f60963          	beq	a2,a5,5a6 <vprintf+0x1a0>
+      } else if(c0 == 'l' && c1 == 'l' && c2 == 'x'){
+ 538:	07800793          	li	a5,120
+ 53c:	faf61ee3          	bne	a2,a5,4f8 <vprintf+0xf2>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 540:	008b8913          	addi	s2,s7,8
+ 544:	4681                	li	a3,0
+ 546:	4641                	li	a2,16
+ 548:	000ba583          	lw	a1,0(s7)
+ 54c:	855a                	mv	a0,s6
+ 54e:	e11ff0ef          	jal	35e <printint>
+        i += 2;
+ 552:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 554:	8bca                	mv	s7,s2
+      state = 0;
+ 556:	4981                	li	s3,0
+        i += 2;
+ 558:	bde5                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 55a:	008b8913          	addi	s2,s7,8
+ 55e:	4685                	li	a3,1
+ 560:	4629                	li	a2,10
+ 562:	000ba583          	lw	a1,0(s7)
+ 566:	855a                	mv	a0,s6
+ 568:	df7ff0ef          	jal	35e <printint>
+        i += 2;
+ 56c:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 1);
+ 56e:	8bca                	mv	s7,s2
+      state = 0;
+ 570:	4981                	li	s3,0
+        i += 2;
+ 572:	bdf9                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 10, 0);
+ 574:	008b8913          	addi	s2,s7,8
+ 578:	4681                	li	a3,0
+ 57a:	4629                	li	a2,10
+ 57c:	000ba583          	lw	a1,0(s7)
+ 580:	855a                	mv	a0,s6
+ 582:	dddff0ef          	jal	35e <printint>
+ 586:	8bca                	mv	s7,s2
+      state = 0;
+ 588:	4981                	li	s3,0
+ 58a:	b5d9                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 58c:	008b8913          	addi	s2,s7,8
+ 590:	4681                	li	a3,0
+ 592:	4629                	li	a2,10
+ 594:	000ba583          	lw	a1,0(s7)
+ 598:	855a                	mv	a0,s6
+ 59a:	dc5ff0ef          	jal	35e <printint>
+        i += 1;
+ 59e:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5a0:	8bca                	mv	s7,s2
+      state = 0;
+ 5a2:	4981                	li	s3,0
+        i += 1;
+ 5a4:	b575                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5a6:	008b8913          	addi	s2,s7,8
+ 5aa:	4681                	li	a3,0
+ 5ac:	4629                	li	a2,10
+ 5ae:	000ba583          	lw	a1,0(s7)
+ 5b2:	855a                	mv	a0,s6
+ 5b4:	dabff0ef          	jal	35e <printint>
+        i += 2;
+ 5b8:	2489                	addiw	s1,s1,2
+        printint(fd, va_arg(ap, uint64), 10, 0);
+ 5ba:	8bca                	mv	s7,s2
+      state = 0;
+ 5bc:	4981                	li	s3,0
+        i += 2;
+ 5be:	bd49                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, int), 16, 0);
+ 5c0:	008b8913          	addi	s2,s7,8
+ 5c4:	4681                	li	a3,0
+ 5c6:	4641                	li	a2,16
+ 5c8:	000ba583          	lw	a1,0(s7)
+ 5cc:	855a                	mv	a0,s6
+ 5ce:	d91ff0ef          	jal	35e <printint>
+ 5d2:	8bca                	mv	s7,s2
+      state = 0;
+ 5d4:	4981                	li	s3,0
+ 5d6:	bdad                	j	450 <vprintf+0x4a>
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5d8:	008b8913          	addi	s2,s7,8
+ 5dc:	4681                	li	a3,0
+ 5de:	4641                	li	a2,16
+ 5e0:	000ba583          	lw	a1,0(s7)
+ 5e4:	855a                	mv	a0,s6
+ 5e6:	d79ff0ef          	jal	35e <printint>
+        i += 1;
+ 5ea:	2485                	addiw	s1,s1,1
+        printint(fd, va_arg(ap, uint64), 16, 0);
+ 5ec:	8bca                	mv	s7,s2
+      state = 0;
+ 5ee:	4981                	li	s3,0
+        i += 1;
+ 5f0:	b585                	j	450 <vprintf+0x4a>
+ 5f2:	e06a                	sd	s10,0(sp)
+        printptr(fd, va_arg(ap, uint64));
+ 5f4:	008b8d13          	addi	s10,s7,8
+ 5f8:	000bb983          	ld	s3,0(s7)
+  putc(fd, '0');
+ 5fc:	03000593          	li	a1,48
+ 600:	855a                	mv	a0,s6
+ 602:	d3fff0ef          	jal	340 <putc>
+  putc(fd, 'x');
+ 606:	07800593          	li	a1,120
+ 60a:	855a                	mv	a0,s6
+ 60c:	d35ff0ef          	jal	340 <putc>
+ 610:	4941                	li	s2,16
+    putc(fd, digits[x >> (sizeof(uint64) * 8 - 4)]);
+ 612:	00000b97          	auipc	s7,0x0
+ 616:	266b8b93          	addi	s7,s7,614 # 878 <digits>
+ 61a:	03c9d793          	srli	a5,s3,0x3c
+ 61e:	97de                	add	a5,a5,s7
+ 620:	0007c583          	lbu	a1,0(a5)
+ 624:	855a                	mv	a0,s6
+ 626:	d1bff0ef          	jal	340 <putc>
+  for (i = 0; i < (sizeof(uint64) * 2); i++, x <<= 4)
+ 62a:	0992                	slli	s3,s3,0x4
+ 62c:	397d                	addiw	s2,s2,-1
+ 62e:	fe0916e3          	bnez	s2,61a <vprintf+0x214>
+        printptr(fd, va_arg(ap, uint64));
+ 632:	8bea                	mv	s7,s10
+      state = 0;
+ 634:	4981                	li	s3,0
+ 636:	6d02                	ld	s10,0(sp)
+ 638:	bd21                	j	450 <vprintf+0x4a>
+        if((s = va_arg(ap, char*)) == 0)
+ 63a:	008b8993          	addi	s3,s7,8
+ 63e:	000bb903          	ld	s2,0(s7)
+ 642:	00090f63          	beqz	s2,660 <vprintf+0x25a>
+        for(; *s; s++)
+ 646:	00094583          	lbu	a1,0(s2)
+ 64a:	c195                	beqz	a1,66e <vprintf+0x268>
+          putc(fd, *s);
+ 64c:	855a                	mv	a0,s6
+ 64e:	cf3ff0ef          	jal	340 <putc>
+        for(; *s; s++)
+ 652:	0905                	addi	s2,s2,1
+ 654:	00094583          	lbu	a1,0(s2)
+ 658:	f9f5                	bnez	a1,64c <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 65a:	8bce                	mv	s7,s3
+      state = 0;
+ 65c:	4981                	li	s3,0
+ 65e:	bbcd                	j	450 <vprintf+0x4a>
+          s = "(null)";
+ 660:	00000917          	auipc	s2,0x0
+ 664:	21090913          	addi	s2,s2,528 # 870 <malloc+0x104>
+        for(; *s; s++)
+ 668:	02800593          	li	a1,40
+ 66c:	b7c5                	j	64c <vprintf+0x246>
+        if((s = va_arg(ap, char*)) == 0)
+ 66e:	8bce                	mv	s7,s3
+      state = 0;
+ 670:	4981                	li	s3,0
+ 672:	bbf9                	j	450 <vprintf+0x4a>
+ 674:	64a6                	ld	s1,72(sp)
+ 676:	79e2                	ld	s3,56(sp)
+ 678:	7a42                	ld	s4,48(sp)
+ 67a:	7aa2                	ld	s5,40(sp)
+ 67c:	7b02                	ld	s6,32(sp)
+ 67e:	6be2                	ld	s7,24(sp)
+ 680:	6c42                	ld	s8,16(sp)
+ 682:	6ca2                	ld	s9,8(sp)
+    }
+  }
+}
+ 684:	60e6                	ld	ra,88(sp)
+ 686:	6446                	ld	s0,80(sp)
+ 688:	6906                	ld	s2,64(sp)
+ 68a:	6125                	addi	sp,sp,96
+ 68c:	8082                	ret
+
+000000000000068e <fprintf>:
+
+void
+fprintf(int fd, const char *fmt, ...)
+{
+ 68e:	715d                	addi	sp,sp,-80
+ 690:	ec06                	sd	ra,24(sp)
+ 692:	e822                	sd	s0,16(sp)
+ 694:	1000                	addi	s0,sp,32
+ 696:	e010                	sd	a2,0(s0)
+ 698:	e414                	sd	a3,8(s0)
+ 69a:	e818                	sd	a4,16(s0)
+ 69c:	ec1c                	sd	a5,24(s0)
+ 69e:	03043023          	sd	a6,32(s0)
+ 6a2:	03143423          	sd	a7,40(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6a6:	fe843423          	sd	s0,-24(s0)
+  vprintf(fd, fmt, ap);
+ 6aa:	8622                	mv	a2,s0
+ 6ac:	d5bff0ef          	jal	406 <vprintf>
+}
+ 6b0:	60e2                	ld	ra,24(sp)
+ 6b2:	6442                	ld	s0,16(sp)
+ 6b4:	6161                	addi	sp,sp,80
+ 6b6:	8082                	ret
+
+00000000000006b8 <printf>:
+
+void
+printf(const char *fmt, ...)
+{
+ 6b8:	711d                	addi	sp,sp,-96
+ 6ba:	ec06                	sd	ra,24(sp)
+ 6bc:	e822                	sd	s0,16(sp)
+ 6be:	1000                	addi	s0,sp,32
+ 6c0:	e40c                	sd	a1,8(s0)
+ 6c2:	e810                	sd	a2,16(s0)
+ 6c4:	ec14                	sd	a3,24(s0)
+ 6c6:	f018                	sd	a4,32(s0)
+ 6c8:	f41c                	sd	a5,40(s0)
+ 6ca:	03043823          	sd	a6,48(s0)
+ 6ce:	03143c23          	sd	a7,56(s0)
+  va_list ap;
+
+  va_start(ap, fmt);
+ 6d2:	00840613          	addi	a2,s0,8
+ 6d6:	fec43423          	sd	a2,-24(s0)
+  vprintf(1, fmt, ap);
+ 6da:	85aa                	mv	a1,a0
+ 6dc:	4505                	li	a0,1
+ 6de:	d29ff0ef          	jal	406 <vprintf>
+}
+ 6e2:	60e2                	ld	ra,24(sp)
+ 6e4:	6442                	ld	s0,16(sp)
+ 6e6:	6125                	addi	sp,sp,96
+ 6e8:	8082                	ret
+
+00000000000006ea <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6ea:	1141                	addi	sp,sp,-16
+ 6ec:	e422                	sd	s0,8(sp)
+ 6ee:	0800                	addi	s0,sp,16
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+ 6f0:	ff050693          	addi	a3,a0,-16
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f4:	00001797          	auipc	a5,0x1
+ 6f8:	90c7b783          	ld	a5,-1780(a5) # 1000 <freep>
+ 6fc:	a02d                	j	726 <free+0x3c>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    bp->s.size += p->s.ptr->s.size;
+ 6fe:	4618                	lw	a4,8(a2)
+ 700:	9f2d                	addw	a4,a4,a1
+ 702:	fee52c23          	sw	a4,-8(a0)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 706:	6398                	ld	a4,0(a5)
+ 708:	6310                	ld	a2,0(a4)
+ 70a:	a83d                	j	748 <free+0x5e>
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    p->s.size += bp->s.size;
+ 70c:	ff852703          	lw	a4,-8(a0)
+ 710:	9f31                	addw	a4,a4,a2
+ 712:	c798                	sw	a4,8(a5)
+    p->s.ptr = bp->s.ptr;
+ 714:	ff053683          	ld	a3,-16(a0)
+ 718:	a091                	j	75c <free+0x72>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 71a:	6398                	ld	a4,0(a5)
+ 71c:	00e7e463          	bltu	a5,a4,724 <free+0x3a>
+ 720:	00e6ea63          	bltu	a3,a4,734 <free+0x4a>
+{
+ 724:	87ba                	mv	a5,a4
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 726:	fed7fae3          	bgeu	a5,a3,71a <free+0x30>
+ 72a:	6398                	ld	a4,0(a5)
+ 72c:	00e6e463          	bltu	a3,a4,734 <free+0x4a>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 730:	fee7eae3          	bltu	a5,a4,724 <free+0x3a>
+  if(bp + bp->s.size == p->s.ptr){
+ 734:	ff852583          	lw	a1,-8(a0)
+ 738:	6390                	ld	a2,0(a5)
+ 73a:	02059813          	slli	a6,a1,0x20
+ 73e:	01c85713          	srli	a4,a6,0x1c
+ 742:	9736                	add	a4,a4,a3
+ 744:	fae60de3          	beq	a2,a4,6fe <free+0x14>
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 748:	fec53823          	sd	a2,-16(a0)
+  if(p + p->s.size == bp){
+ 74c:	4790                	lw	a2,8(a5)
+ 74e:	02061593          	slli	a1,a2,0x20
+ 752:	01c5d713          	srli	a4,a1,0x1c
+ 756:	973e                	add	a4,a4,a5
+ 758:	fae68ae3          	beq	a3,a4,70c <free+0x22>
+    p->s.ptr = bp->s.ptr;
+ 75c:	e394                	sd	a3,0(a5)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+ 75e:	00001717          	auipc	a4,0x1
+ 762:	8af73123          	sd	a5,-1886(a4) # 1000 <freep>
+}
+ 766:	6422                	ld	s0,8(sp)
+ 768:	0141                	addi	sp,sp,16
+ 76a:	8082                	ret
+
+000000000000076c <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 76c:	7139                	addi	sp,sp,-64
+ 76e:	fc06                	sd	ra,56(sp)
+ 770:	f822                	sd	s0,48(sp)
+ 772:	f426                	sd	s1,40(sp)
+ 774:	ec4e                	sd	s3,24(sp)
+ 776:	0080                	addi	s0,sp,64
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 778:	02051493          	slli	s1,a0,0x20
+ 77c:	9081                	srli	s1,s1,0x20
+ 77e:	04bd                	addi	s1,s1,15
+ 780:	8091                	srli	s1,s1,0x4
+ 782:	0014899b          	addiw	s3,s1,1
+ 786:	0485                	addi	s1,s1,1
+  if((prevp = freep) == 0){
+ 788:	00001517          	auipc	a0,0x1
+ 78c:	87853503          	ld	a0,-1928(a0) # 1000 <freep>
+ 790:	c915                	beqz	a0,7c4 <malloc+0x58>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 792:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 794:	4798                	lw	a4,8(a5)
+ 796:	08977a63          	bgeu	a4,s1,82a <malloc+0xbe>
+ 79a:	f04a                	sd	s2,32(sp)
+ 79c:	e852                	sd	s4,16(sp)
+ 79e:	e456                	sd	s5,8(sp)
+ 7a0:	e05a                	sd	s6,0(sp)
+  if(nu < 4096)
+ 7a2:	8a4e                	mv	s4,s3
+ 7a4:	0009871b          	sext.w	a4,s3
+ 7a8:	6685                	lui	a3,0x1
+ 7aa:	00d77363          	bgeu	a4,a3,7b0 <malloc+0x44>
+ 7ae:	6a05                	lui	s4,0x1
+ 7b0:	000a0b1b          	sext.w	s6,s4
+  p = sbrk(nu * sizeof(Header));
+ 7b4:	004a1a1b          	slliw	s4,s4,0x4
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7b8:	00001917          	auipc	s2,0x1
+ 7bc:	84890913          	addi	s2,s2,-1976 # 1000 <freep>
+  if(p == (char*)-1)
+ 7c0:	5afd                	li	s5,-1
+ 7c2:	a081                	j	802 <malloc+0x96>
+ 7c4:	f04a                	sd	s2,32(sp)
+ 7c6:	e852                	sd	s4,16(sp)
+ 7c8:	e456                	sd	s5,8(sp)
+ 7ca:	e05a                	sd	s6,0(sp)
+    base.s.ptr = freep = prevp = &base;
+ 7cc:	00001797          	auipc	a5,0x1
+ 7d0:	84478793          	addi	a5,a5,-1980 # 1010 <base>
+ 7d4:	00001717          	auipc	a4,0x1
+ 7d8:	82f73623          	sd	a5,-2004(a4) # 1000 <freep>
+ 7dc:	e39c                	sd	a5,0(a5)
+    base.s.size = 0;
+ 7de:	0007a423          	sw	zero,8(a5)
+    if(p->s.size >= nunits){
+ 7e2:	b7c1                	j	7a2 <malloc+0x36>
+        prevp->s.ptr = p->s.ptr;
+ 7e4:	6398                	ld	a4,0(a5)
+ 7e6:	e118                	sd	a4,0(a0)
+ 7e8:	a8a9                	j	842 <malloc+0xd6>
+  hp->s.size = nu;
+ 7ea:	01652423          	sw	s6,8(a0)
+  free((void*)(hp + 1));
+ 7ee:	0541                	addi	a0,a0,16
+ 7f0:	efbff0ef          	jal	6ea <free>
+  return freep;
+ 7f4:	00093503          	ld	a0,0(s2)
+      if((p = morecore(nunits)) == 0)
+ 7f8:	c12d                	beqz	a0,85a <malloc+0xee>
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7fa:	611c                	ld	a5,0(a0)
+    if(p->s.size >= nunits){
+ 7fc:	4798                	lw	a4,8(a5)
+ 7fe:	02977263          	bgeu	a4,s1,822 <malloc+0xb6>
+    if(p == freep)
+ 802:	00093703          	ld	a4,0(s2)
+ 806:	853e                	mv	a0,a5
+ 808:	fef719e3          	bne	a4,a5,7fa <malloc+0x8e>
+  p = sbrk(nu * sizeof(Header));
+ 80c:	8552                	mv	a0,s4
+ 80e:	b03ff0ef          	jal	310 <sbrk>
+  if(p == (char*)-1)
+ 812:	fd551ce3          	bne	a0,s5,7ea <malloc+0x7e>
+        return 0;
+ 816:	4501                	li	a0,0
+ 818:	7902                	ld	s2,32(sp)
+ 81a:	6a42                	ld	s4,16(sp)
+ 81c:	6aa2                	ld	s5,8(sp)
+ 81e:	6b02                	ld	s6,0(sp)
+ 820:	a03d                	j	84e <malloc+0xe2>
+ 822:	7902                	ld	s2,32(sp)
+ 824:	6a42                	ld	s4,16(sp)
+ 826:	6aa2                	ld	s5,8(sp)
+ 828:	6b02                	ld	s6,0(sp)
+      if(p->s.size == nunits)
+ 82a:	fae48de3          	beq	s1,a4,7e4 <malloc+0x78>
+        p->s.size -= nunits;
+ 82e:	4137073b          	subw	a4,a4,s3
+ 832:	c798                	sw	a4,8(a5)
+        p += p->s.size;
+ 834:	02071693          	slli	a3,a4,0x20
+ 838:	01c6d713          	srli	a4,a3,0x1c
+ 83c:	97ba                	add	a5,a5,a4
+        p->s.size = nunits;
+ 83e:	0137a423          	sw	s3,8(a5)
+      freep = prevp;
+ 842:	00000717          	auipc	a4,0x0
+ 846:	7aa73f23          	sd	a0,1982(a4) # 1000 <freep>
+      return (void*)(p + 1);
+ 84a:	01078513          	addi	a0,a5,16
+  }
+}
+ 84e:	70e2                	ld	ra,56(sp)
+ 850:	7442                	ld	s0,48(sp)
+ 852:	74a2                	ld	s1,40(sp)
+ 854:	69e2                	ld	s3,24(sp)
+ 856:	6121                	addi	sp,sp,64
+ 858:	8082                	ret
+ 85a:	7902                	ld	s2,32(sp)
+ 85c:	6a42                	ld	s4,16(sp)
+ 85e:	6aa2                	ld	s5,8(sp)
+ 860:	6b02                	ld	s6,0(sp)
+ 862:	b7f5                	j	84e <malloc+0xe2>
diff --git a/user/zombie.c b/user/zombie.c
new file mode 100644
index 0000000..8b89a33
--- /dev/null
+++ b/user/zombie.c
@@ -0,0 +1,14 @@
+// Create a zombie process that
+// must be reparented at exit.
+
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(void)
+{
+  if(fork() > 0)
+    sleep(5);  // Let child exit before parent.
+  exit(0);
+}
diff --git a/user/zombie.d b/user/zombie.d
new file mode 100644
index 0000000..588534d
--- /dev/null
+++ b/user/zombie.d
@@ -0,0 +1 @@
+user/zombie.o: user/zombie.c kernel/types.h kernel/stat.h user/user.h
diff --git a/user/zombie.o b/user/zombie.o
new file mode 100644
index 0000000..446d771
Binary files /dev/null and b/user/zombie.o differ
diff --git a/user/zombie.sym b/user/zombie.sym
new file mode 100644
index 0000000..c063924
--- /dev/null
+++ b/user/zombie.sym
@@ -0,0 +1,66 @@
+0000000000000000 .text
+0000000000000868 .rodata
+0000000000001000 .data
+0000000000001000 .bss
+0000000000000000 .debug_info
+0000000000000000 .debug_abbrev
+0000000000000000 .debug_loc
+0000000000000000 .debug_aranges
+0000000000000000 .debug_line
+0000000000000000 .debug_str
+0000000000000000 .comment
+0000000000000000 .riscv.attributes
+0000000000000000 .debug_frame
+0000000000000000 .debug_ranges
+0000000000000000 zombie.c
+0000000000000000 ulib.c
+0000000000000000 usys.o
+0000000000000000 printf.c
+0000000000000340 putc
+000000000000035e printint
+0000000000000878 digits
+0000000000000000 umalloc.c
+0000000000001000 freep
+0000000000001010 base
+0000000000000030 strcpy
+00000000000006b8 printf
+00000000000001da memmove
+00000000000002d0 mknod
+0000000000000330 trace
+00000000000000e8 gets
+0000000000000308 getpid
+0000000000000328 hello
+000000000000026c memcpy
+000000000000076c malloc
+0000000000000318 sleep
+0000000000000338 sysinfo
+0000000000000298 pipe
+00000000000002a8 write
+00000000000002e0 fstat
+000000000000068e fprintf
+00000000000002b8 kill
+0000000000000406 vprintf
+00000000000002f8 chdir
+00000000000002c0 exec
+0000000000000290 wait
+00000000000002a0 read
+00000000000002d8 unlink
+0000000000000232 memcmp
+0000000000000280 fork
+0000000000000310 sbrk
+0000000000000320 uptime
+00000000000000a2 memset
+0000000000000000 main
+000000000000004c strcmp
+0000000000000300 dup
+0000000000000158 stat
+00000000000002e8 link
+0000000000000288 exit
+000000000000001e start
+0000000000000192 atoi
+0000000000000078 strlen
+00000000000002c8 open
+00000000000000c4 strchr
+00000000000002f0 mkdir
+00000000000002b0 close
+00000000000006ea free
