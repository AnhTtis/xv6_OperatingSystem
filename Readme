# **Report: `trace` and `sysinfo` System Calls in xv6**

## **1. Introduction**
In this project, we implemented two new system calls in xv6: `trace` and `sysinfo`. The `trace` system call allows processes to monitor specific system calls based on a bitmask, while `sysinfo` collects and reports system statistics such as free memory, number of active processes, and open files.

This report provides a detailed breakdown of the implementation process, challenges encountered, and the solutions applied.

---
## **2. `trace` System Call Implementation**
### **Objective**
The `trace` system call enables a process to monitor specific system calls based on a bitmask. When enabled, the kernel prints out information about traced system calls when they return.

### **Implementation Steps**
#### **2.1 Modify files to Define the function**
We added a new system call number for `trace` in `kernel/syscall.h`:
```c
#define SYS_trace 23
```

we define the prototype for the function and map the previous defined system call number to that funtion as well as it name in `kernel/syscall.c`
```c 
extern uint64 sys_hello(void); 
static int (*syscalls[])(void) = { 
    ... 
    [SYS_hello] = sys_hello, 
};
static char *syscall_names[] = {
    [SYS_fork]    = "fork",
    [SYS_exit]    = "exit",
    [SYS_wait]    = "wait",
    [SYS_pipe]    = "pipe",
    [SYS_read]    = "read",
    [SYS_kill]    = "kill",
    [SYS_exec]    = "exec",
    [SYS_fstat]   = "fstat",
    [SYS_chdir]   = "chdir",
    [SYS_dup]     = "dup",
    [SYS_getpid]  = "getpid",
    [SYS_sbrk]    = "sbrk",
    [SYS_sleep]   = "sleep",
    [SYS_uptime]  = "uptime",
    [SYS_open]    = "open",
    [SYS_write]   = "write",
    [SYS_mknod]   = "mknod",
    [SYS_unlink]  = "unlink",
    [SYS_link]    = "link",
    [SYS_mkdir]   = "mkdir",
    [SYS_close]   = "close",
    [SYS_hello]   = "hellp",
    [SYS_trace]   = "trace",  // Add the trace syscall name
};
```
- We define the define the function that the user can use to invoke the new implemented system 
call in `user/user.h`.
```c 
int trace(void);
``` 
- We add an interface for the user function to access the system call in `user/usys.pl` 
```c
entry("trace"); 
```

#### **2.2 Modify `proc.h` to Add `trace_mask`**
Each process needs a field to store the trace mask, which determines which system calls should be logged. We modified `struct proc` in `kernel/proc.h`:
```c
struct proc {
    ...
    int trace_mask; // Bitmask to determine which syscalls to trace
};
```

#### **2.3 Implement `sys_trace()` in `sysproc.c`**
The `sys_trace()` function sets the `trace_mask` for the calling process. We implemented it in `kernel/sysproc.c`:
```c
uint64 sys_trace(void) {
    int mask;
    argint(0, &mask);
    myproc()->trace_mask = mask;
    return 0;
}
```

#### **2.4 Modify `fork()` in `proc.c` to Inherit `trace_mask`**
To ensure that child processes inherit the tracing settings, we modified `fork()` in `kernel/proc.c`:
```c
np->trace_mask = p->trace_mask;
```

#### **2.5 Modify `syscall()` in `syscall.c` to Print Traced Calls**
To print traced system calls, we modified `syscall()` in `kernel/syscall.c`:
```c
if (p->trace_mask & (1 << num)) {
    printf("%d: syscall %s -> %ld\n", p->pid, syscall_names[num], p->trapframe->a0);
}
```
This checks if the system call number (`num`) is in `trace_mask` and prints its details.

#### **2.6 Implement `trace.c` in User Space**
A user program to test tracing was implemented in `user/trace.c`:
```c
int main(int argc, char *argv[]) {
    if (argc < 3) {
        fprintf(2, "Usage: trace mask command [args...]\n");
        exit(1);
    }
    int mask = atoi(argv[1]);
    if (trace(mask) < 0) {
        fprintf(2, "trace: failed to enable tracing\n");
        exit(1);
    }
    exec(argv[2], &argv[2]);
    fprintf(2, "trace: exec failed\n");
    exit(1);
}
```

#### **2.7 Add `trace` to `Makefile`**
We added `trace` to `UPROGS` in `Makefile`:
```makefile
UPROGS=\
    ...
	$U/_trace\
	...
```

#### **2.8 Compile and Test**
After recompiling with `make clean && make qemu`, we ran:
```sh
$ trace 2 usertests forkforkfork
```

## **3. `sysinfo` System Call Implementation**
### **Objective**
The `sysinfo` system call provides system statistics, including:
- `freemem`: Free memory in bytes.
- `nproc`: Number of active processes.
- `nopenfiles`: Number of open files.

### **Implementation Steps**
#### **3.1 Define `sysinfo` Structure**
We created `kernel/sysinfo.h`:
```c
struct sysinfo {
    uint64 freemem;
    uint64 nproc;
    uint64 nopenfiles;
};
```

#### **3.2 Modify files to Define the function**
We added a new system call number for `sysinfo` in `kernel/syscall.h`:
```c
#define SYS_sysinfo 24
```

we define the prototype for the function and map the previous defined system call number to that funtion as well as it name in `kernel/syscall.c`
```c 
extern uint64 sys_sysinfo(void); 
static int (*syscalls[])(void) = { 
    ... 
    [SYS_hello] = sys_hello, 
};
static char *syscall_names[] = {
    ...
    [SYS_sysinfo]   = "sysinfo",
    ...
};
```
- We define the define the function that the user can use to invoke the new implemented system 
call in `user/user.h`.
```c 
int sysinfo(void);
``` 
- We add an interface for the user function to access the system call in `user/usys.pl` 
```c
entry("sysinfo"); 
```

#### **3.3 Implement `sys_sysinfo()` in `sysproc.c`**
```c
unit64 count_freemem(void)
unit64 count_nopenfiles(void)
unit64 count_nproc(void)

uint64 sys_sysinfo(void) {
    struct sysinfo info;
    uint64 addr;
    argaddr(0, &addr);
    info.freemem = count_freemem();
    info.nproc = count_nproc();
    info.nopenfiles = count_openfiles();
    if (copyout(myproc()->pagetable, addr, (char*)&info, sizeof(info)) < 0)
        return -1;
    return 0;
}
```

#### **3.4 Implement Helper Functions**
**Count Free Memory (`kernel/kalloc.c`)**:
```c
uint64 count_freemem(void) {
    struct run *r;
    uint64 free_bytes = 0;
    acquire(&kmem.lock);
    for (r = kmem.freelist; r; r = r->next)
        free_bytes += PGSIZE;
    release(&kmem.lock);
    return free_bytes;
}
```

**Count Processes (`kernel/proc.c`)**:
```c
uint64 count_nproc(void) {
    struct proc *p;
    int count = 0;
    for (p = proc; p < &proc[NPROC]; p++) {
        acquire(&p->lock);
        if (p->state != UNUSED)
            count++;
        release(&p->lock);
    }
    return count;
}
```

**Count Open Files (`kernel/file.c`)**:
```c
uint64 count_openfiles(void) {
    struct file *f;
    int count = 0;
    acquire(&ftable.lock);
    for (f = ftable.file; f < &ftable.file[NFILE]; f++) {
        if (f->ref > 0)
            count++;
    }
    release(&ftable.lock);
    return count;
}
```

#### **3.5 Implement `sysinfotest.c`**
```c
int main() {
    struct sysinfo info;
    if (sysinfo(&info) < 0) {
        printf("sysinfotest: sysinfo failed\n");
        exit(1);
    }
    printf("Free memory: %ld bytes\n", info.freemem);
    printf("Processes: %ld\n", info.nproc);
    printf("Open files: %ld\n", info.nopenfiles);
    exit(0);
}
```
#### **3.7 Add `sysinfo` to `Makefile`**
We added `sysinfo` to `UPROGS` in `Makefile`:
```makefile
UPROGS=\
    ...
	$U/_sysinfo\
	...
```

#### **3.6 Compile and Test**
```sh
make clean && make qemu
$ sysinfotest
```
Expected output:
```
Free memory: 32768 bytes
Processes: 5
Open files: 3
```
---
## **4. Conclusion**
This project successfully added `trace` and `sysinfo` system calls to xv6, improving debugging and monitoring capabilities. The implementation required modifying multiple kernel files, handling user-kernel memory interactions, and using bitmasking techniques. The results demonstrate correct functionality, meeting the specified requirements.

